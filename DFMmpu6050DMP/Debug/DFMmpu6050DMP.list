
DFMmpu6050DMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e4  0800d2c0  0800d2c0  0001d2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5a4  0800e5a4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5a4  0800e5a4  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5ac  0800e5ac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5b4  0800e5b4  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001e4  0800e79c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800e79c  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e72  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ab  00000000  00000000  00046086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00049238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0004a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb6b  00000000  00000000  0004bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148e0  00000000  00000000  000676e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009613e  00000000  00000000  0007bfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007158  00000000  00000000  00112154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d2a8 	.word	0x0800d2a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800d2a8 	.word	0x0800d2a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Z10mapArduinofffff>:
//
// Created by hu on 2020/7/11.
//
#include "ArduinoWrapper.h"

float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	ed87 0a05 	vstr	s0, [r7, #20]
 8001006:	edc7 0a04 	vstr	s1, [r7, #16]
 800100a:	ed87 1a03 	vstr	s2, [r7, #12]
 800100e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001012:	ed87 2a01 	vstr	s4, [r7, #4]
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
 8001016:	ed97 7a05 	vldr	s14, [r7, #20]
 800101a:	edd7 7a04 	vldr	s15, [r7, #16]
 800101e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001022:	edd7 6a01 	vldr	s13, [r7, #4]
 8001026:	edd7 7a02 	vldr	s15, [r7, #8]
 800102a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800102e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800103a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800103e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001042:	edd7 7a02 	vldr	s15, [r7, #8]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800104a:	eeb0 0a67 	vmov.f32	s0, s15
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	2201      	movs	r2, #1
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <__io_putchar+0x20>)
 800106a:	f006 fada 	bl	8007622 <HAL_UART_Transmit>

    return ch;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200003e4 	.word	0x200003e4

0800107c <_ZN6I2Cdev8readBitsEhhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
                        uint8_t length, uint8_t *data, uint16_t timeout)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	4603      	mov	r3, r0
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	460b      	mov	r3, r1
 8001094:	717b      	strb	r3, [r7, #5]
 8001096:	4613      	mov	r3, r2
 8001098:	713b      	strb	r3, [r7, #4]
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0)
 800109a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109c:	f107 020d 	add.w	r2, r7, #13
 80010a0:	79b9      	ldrb	r1, [r7, #6]
 80010a2:	79f8      	ldrb	r0, [r7, #7]
 80010a4:	f000 f82e 	bl	8001104 <_ZN6I2Cdev8readByteEhhPht>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf14      	ite	ne
 80010b2:	2301      	movne	r3, #1
 80010b4:	2300      	moveq	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d01d      	beq.n	80010f8 <_ZN6I2Cdev8readBitsEhhhhPht+0x7c>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	7979      	ldrb	r1, [r7, #5]
 80010c8:	793b      	ldrb	r3, [r7, #4]
 80010ca:	1acb      	subs	r3, r1, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	73bb      	strb	r3, [r7, #14]
        b &= mask;
 80010d4:	7b7a      	ldrb	r2, [r7, #13]
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	4013      	ands	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	737b      	strb	r3, [r7, #13]
        b >>= (bitStart - length + 1);
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	4619      	mov	r1, r3
 80010e2:	797a      	ldrb	r2, [r7, #5]
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	fa41 f303 	asr.w	r3, r1, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	737b      	strb	r3, [r7, #13]
        *data = b;
 80010f2:	7b7a      	ldrb	r2, [r7, #13]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	701a      	strb	r2, [r3, #0]
    }
    return count;
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <_ZN6I2Cdev8readByteEhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data,
                        uint16_t timeout)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	603a      	str	r2, [r7, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	460b      	mov	r3, r1
 8001114:	71bb      	strb	r3, [r7, #6]
 8001116:	4613      	mov	r3, r2
 8001118:	80bb      	strh	r3, [r7, #4]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 800111a:	79b9      	ldrb	r1, [r7, #6]
 800111c:	79f8      	ldrb	r0, [r7, #7]
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	f000 f805 	bl	8001134 <_ZN6I2Cdev9readBytesEhhhPht>
 800112a:	4603      	mov	r3, r0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint8_t *data, uint16_t timeout)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af04      	add	r7, sp, #16
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	460b      	mov	r3, r1
 8001142:	71bb      	strb	r3, [r7, #6]
 8001144:	4613      	mov	r3, r2
 8001146:	717b      	strb	r3, [r7, #5]
    Serial.print(" bytes from 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif

    int8_t count = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
    uint32_t t1 = millis();
 800114c:	f002 fd98 	bl	8003c80 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

    I2C_readBytesFromAddress(devAddr, regAddr, length, data);

    count = length; //TODO implement something meaningful, for now just making sure no error is thrown
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, devAddr << 1, regAddr,
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	b29b      	uxth	r3, r3
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b299      	uxth	r1, r3
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	b298      	uxth	r0, r3
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	b29b      	uxth	r3, r3
 8001162:	8c3a      	ldrh	r2, [r7, #32]
 8001164:	9202      	str	r2, [sp, #8]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	4602      	mov	r2, r0
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <_ZN6I2Cdev9readBytesEhhhPht+0x64>)
 8001172:	f003 fb43 	bl	80047fc <HAL_I2C_Mem_Read>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
                                                I2C_MEMADD_SIZE_8BIT, data, length, timeout);
    if (status == HAL_OK)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_ZN6I2Cdev9readBytesEhhhPht+0x52>
    {
        count = length;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	75fb      	strb	r3, [r7, #23]
 8001184:	e001      	b.n	800118a <_ZN6I2Cdev9readBytesEhhhPht+0x56>
    }
    else
    {
        count = -1;
 8001186:	23ff      	movs	r3, #255	; 0xff
 8001188:	75fb      	strb	r3, [r7, #23]
    Serial.print(". Done (");
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif

    return count;
 800118a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002b4 	.word	0x200002b4

0800119c <_ZN6I2Cdev9readWordsEhhhPtt>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of words read (0 indicates failure)
 */
int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint16_t *data, uint16_t timeout)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
    Serial.print(" words from 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif

    int8_t count = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	77fb      	strb	r3, [r7, #31]
    uint32_t t1 = millis();
 80011b4:	f002 fd64 	bl	8003c80 <HAL_GetTick>
 80011b8:	6178      	str	r0, [r7, #20]

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
    //TODO implement

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    uint8_t * cache=(uint8_t*)malloc(sizeof(uint8_t)*2*length);
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f007 fb48 	bl	8008854 <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, devAddr << 1, regAddr,
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	b299      	uxth	r1, r3
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	b298      	uxth	r0, r3
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011de:	9202      	str	r2, [sp, #8]
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	4602      	mov	r2, r0
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <_ZN6I2Cdev9readWordsEhhhPtt+0xbc>)
 80011ec:	f003 fb06 	bl	80047fc <HAL_I2C_Mem_Read>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
                                                I2C_MEMADD_SIZE_8BIT, cache, length*2, timeout);
    if (status == HAL_OK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d123      	bne.n	8001242 <_ZN6I2Cdev9readWordsEhhhPtt+0xa6>
    {
        for (int i = 0; i < length; ++i)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	429a      	cmp	r2, r3
 8001204:	da1a      	bge.n	800123c <_ZN6I2Cdev9readWordsEhhhPtt+0xa0>
        {
            *(data+i)=(uint16_t)(*(cache+2*i)<<8)+(*(cache+2*i+1));
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	461a      	mov	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b299      	uxth	r1, r3
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	3301      	adds	r3, #1
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	4403      	add	r3, r0
 800122e:	440a      	add	r2, r1
 8001230:	b292      	uxth	r2, r2
 8001232:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < length; ++i)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3301      	adds	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	e7e0      	b.n	80011fe <_ZN6I2Cdev9readWordsEhhhPtt+0x62>
        }
        count = length;
 800123c:	797b      	ldrb	r3, [r7, #5]
 800123e:	77fb      	strb	r3, [r7, #31]
 8001240:	e001      	b.n	8001246 <_ZN6I2Cdev9readWordsEhhhPtt+0xaa>
    }
    else
    {
        count = -1;
 8001242:	23ff      	movs	r3, #255	; 0xff
 8001244:	77fb      	strb	r3, [r7, #31]
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.print(". Done (");
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif
    free(cache);
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f007 fb0c 	bl	8008864 <free>
    return count;
 800124c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200002b4 	.word	0x200002b4

0800125c <_ZN6I2Cdev8writeBitEhhhh>:
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum,
                      uint8_t data)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	4603      	mov	r3, r0
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	460b      	mov	r3, r1
 8001274:	717b      	strb	r3, [r7, #5]
 8001276:	4613      	mov	r3, r2
 8001278:	713b      	strb	r3, [r7, #4]
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <_ZN6I2Cdev8writeBitEhhhh+0x7c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	f107 020f 	add.w	r2, r7, #15
 8001282:	79b9      	ldrb	r1, [r7, #6]
 8001284:	79f8      	ldrb	r0, [r7, #7]
 8001286:	f7ff ff3d 	bl	8001104 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800128a:	793b      	ldrb	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00a      	beq.n	80012a6 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
 8001290:	797b      	ldrb	r3, [r7, #5]
 8001292:	2201      	movs	r2, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	b25a      	sxtb	r2, r3
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	e00b      	b.n	80012be <_ZN6I2Cdev8writeBitEhhhh+0x62>
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	2201      	movs	r2, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]
    return writeByte(devAddr, regAddr, b);
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	79b9      	ldrb	r1, [r7, #6]
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f862 	bl	8001390 <_ZN6I2Cdev9writeByteEhhh>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
                       uint8_t length, uint8_t data)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	4603      	mov	r3, r0
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	717b      	strb	r3, [r7, #5]
 80012f6:	4613      	mov	r3, r2
 80012f8:	713b      	strb	r3, [r7, #4]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0)
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <_ZN6I2Cdev9writeBitsEhhhhh+0xb0>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	f107 020e 	add.w	r2, r7, #14
 8001302:	79b9      	ldrb	r1, [r7, #6]
 8001304:	79f8      	ldrb	r0, [r7, #7]
 8001306:	f7ff fefd 	bl	8001104 <_ZN6I2Cdev8readByteEhhPht>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d033      	beq.n	8001382 <_ZN6I2Cdev9writeBitsEhhhhh+0xa6>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800131a:	793b      	ldrb	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	7979      	ldrb	r1, [r7, #5]
 8001326:	793b      	ldrb	r3, [r7, #4]
 8001328:	1acb      	subs	r3, r1, r3
 800132a:	3301      	adds	r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	73fb      	strb	r3, [r7, #15]
        data <<= (bitStart - length + 1); // shift data into correct position
 8001332:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001336:	7979      	ldrb	r1, [r7, #5]
 8001338:	793b      	ldrb	r3, [r7, #4]
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	3301      	adds	r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	f887 3020 	strb.w	r3, [r7, #32]
        data &= mask; // zero all non-important bits in data
 8001346:	f897 2020 	ldrb.w	r2, [r7, #32]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	4013      	ands	r3, r2
 800134e:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~(mask); // zero all important bits in existing byte
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	43db      	mvns	r3, r3
 8001358:	b25a      	sxtb	r2, r3
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	4013      	ands	r3, r2
 8001360:	b25b      	sxtb	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	73bb      	strb	r3, [r7, #14]
        b |= data; // combine data with existing byte
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136c:	4313      	orrs	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	73bb      	strb	r3, [r7, #14]
        return writeByte(devAddr, regAddr, b);
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	79b9      	ldrb	r1, [r7, #6]
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f809 	bl	8001390 <_ZN6I2Cdev9writeByteEhhh>
 800137e:	4603      	mov	r3, r0
 8001380:	e000      	b.n	8001384 <_ZN6I2Cdev9writeBitsEhhhhh+0xa8>
    }
    else
    {
        return false;
 8001382:	2300      	movs	r3, #0
    }
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	20000000 	.word	0x20000000

08001390 <_ZN6I2Cdev9writeByteEhhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	460b      	mov	r3, r1
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	4613      	mov	r3, r2
 80013a0:	717b      	strb	r3, [r7, #5]
    return writeBytes(devAddr, regAddr, 1, &data);
 80013a2:	1d7b      	adds	r3, r7, #5
 80013a4:	79b9      	ldrb	r1, [r7, #6]
 80013a6:	79f8      	ldrb	r0, [r7, #7]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f000 f819 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
 80013ae:	4603      	mov	r3, r0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN6I2Cdev9writeWordEhht>:
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	460b      	mov	r3, r1
 80013c4:	71bb      	strb	r3, [r7, #6]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80bb      	strh	r3, [r7, #4]
    return writeWords(devAddr, regAddr, 1, &data);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	79b9      	ldrb	r1, [r7, #6]
 80013ce:	79f8      	ldrb	r0, [r7, #7]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f000 f83b 	bl	800144c <_ZN6I2Cdev10writeWordsEhhhPt>
 80013d6:	4603      	mov	r3, r0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint8_t *data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	460b      	mov	r3, r1
 80013ee:	71bb      	strb	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	717b      	strb	r3, [r7, #5]
    Serial.print(length, DEC);
    Serial.print(" bytes to 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif
    uint8_t status = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73bb      	strb	r3, [r7, #14]
    Wire.send((uint8_t) regAddr); // send address
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
    Wire.beginTransmission(devAddr);
    Wire.write((uint8_t) regAddr); // send address
#endif
    for (uint8_t i = 0; i < length; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	797b      	ldrb	r3, [r7, #5]
 8001400:	429a      	cmp	r2, r3
 8001402:	d203      	bcs.n	800140c <_ZN6I2Cdev10writeBytesEhhhPh+0x2c>
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e7f7      	b.n	80013fc <_ZN6I2Cdev10writeBytesEhhhPh+0x1c>
    //        USCI_I2C_transmit(length,data);       // start transmitting

      I2C_writeBytesToAddress(devAddr, regAddr, length, data);

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	b29b      	uxth	r3, r3
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b299      	uxth	r1, r3
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	b29a      	uxth	r2, r3
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	b29b      	uxth	r3, r3
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	9002      	str	r0, [sp, #8]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <_ZN6I2Cdev10writeBytesEhhhPh+0x68>)
 800142a:	f003 f8ed 	bl	8004608 <HAL_I2C_Mem_Write>
 800142e:	4603      	mov	r3, r0
 8001430:	73bb      	strb	r3, [r7, #14]
                               I2C_MEMADD_SIZE_8BIT, data, length, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
    return status == 0;
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002b4 	.word	0x200002b4

0800144c <_ZN6I2Cdev10writeWordsEhhhPt>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint16_t *data)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af04      	add	r7, sp, #16
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	460b      	mov	r3, r1
 800145a:	71bb      	strb	r3, [r7, #6]
 800145c:	4613      	mov	r3, r2
 800145e:	717b      	strb	r3, [r7, #5]
    Serial.print(length, DEC);
    Serial.print(" words to 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif
    uint8_t status = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
    uint8_t *cache=(uint8_t*)malloc(sizeof(uint8_t)*length);
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f9f4 	bl	8008854 <malloc>
 800146c:	4603      	mov	r3, r0
 800146e:	60bb      	str	r3, [r7, #8]
    //		//Delay until transmission completes
    //		while (I2C_isBusBusy()) ;
    //todo implement

#endif
    for (uint8_t i = 0; i < length * 2; i++)
 8001470:	2300      	movs	r3, #0
 8001472:	75fb      	strb	r3, [r7, #23]
 8001474:	7dfa      	ldrb	r2, [r7, #23]
 8001476:	797b      	ldrb	r3, [r7, #5]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	429a      	cmp	r2, r3
 800147c:	da03      	bge.n	8001486 <_ZN6I2Cdev10writeWordsEhhhPt+0x3a>
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	3301      	adds	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
 8001484:	e7f6      	b.n	8001474 <_ZN6I2Cdev10writeWordsEhhhPt+0x28>
    //    	//Disable TX interrupt
    //    	I2C_disableInterrupt(I2C_TRANSMIT_INTERRUPT);
    //    	//Disable I2C Module to stop operations
    //    	I2C_disable();
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    for (int j = 0; j < length; ++j)
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	da1c      	bge.n	80014cc <_ZN6I2Cdev10writeWordsEhhhPt+0x80>
    {
        *(cache+2*j)=(uint8_t)(*(data+j)>>8);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	121a      	asrs	r2, r3, #8
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	440b      	add	r3, r1
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
        *(cache+2*j+1)=(uint8_t)(*(data+j));
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	8819      	ldrh	r1, [r3, #0]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3301      	adds	r3, #1
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < length; ++j)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e7de      	b.n	800148a <_ZN6I2Cdev10writeWordsEhhhPt+0x3e>
    }
    status = HAL_I2C_Mem_Write(&hi2c1, devAddr << 1, regAddr,
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b299      	uxth	r1, r3
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2064      	movs	r0, #100	; 0x64
 80014e2:	9002      	str	r0, [sp, #8]
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <_ZN6I2Cdev10writeWordsEhhhPt+0xc4>)
 80014ee:	f003 f88b 	bl	8004608 <HAL_I2C_Mem_Write>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
                               I2C_MEMADD_SIZE_8BIT, (uint8_t *) cache, length*2, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.println(". Done.");
#endif
    free(cache);
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f007 f9b4 	bl	8008864 <free>
    return status == 0;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002b4 	.word	0x200002b4

08001514 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	ed87 0a01 	vstr	s0, [r7, #4]
 800151e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001522:	eef0 7ae7 	vabs.f32	s15, s15
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
 800153e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001542:	f006 ff89 	bl	8008458 <roundf>
 8001546:	eef0 7a40 	vmov.f32	s15, s0
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN7MPU6050C1Eh>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	701a      	strb	r2, [r3, #0]
}
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800157c:	2101      	movs	r1, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f87e 	bl	8001680 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f81d 	bl	80015c6 <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f82c 	bl	80015ec <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001594:	2100      	movs	r1, #0
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f861 	bl	800165e <_ZN7MPU605015setSleepEnabledEb>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f94f 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b34      	cmp	r3, #52	; 0x34
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af02      	add	r7, sp, #8
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7818      	ldrb	r0, [r3, #0]
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2302      	movs	r3, #2
 80015dc:	2204      	movs	r2, #4
 80015de:	211b      	movs	r1, #27
 80015e0:	f7ff fe7c 	bl	80012dc <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7818      	ldrb	r0, [r3, #0]
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	2204      	movs	r2, #4
 8001604:	211c      	movs	r1, #28
 8001606:	f7ff fe69 	bl	80012dc <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7818      	ldrb	r0, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <_ZN7MPU605012getIntStatusEv+0x28>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	213a      	movs	r1, #58	; 0x3a
 800162a:	f7ff fd6b 	bl	8001104 <_ZN6I2Cdev8readByteEhhPht>
    return buffer[0];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	785b      	ldrb	r3, [r3, #1]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000

08001640 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7818      	ldrb	r0, [r3, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	2202      	movs	r2, #2
 8001650:	216a      	movs	r1, #106	; 0x6a
 8001652:	f7ff fe03 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7818      	ldrb	r0, [r3, #0]
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2206      	movs	r2, #6
 8001672:	216b      	movs	r1, #107	; 0x6b
 8001674:	f7ff fdf2 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7818      	ldrb	r0, [r3, #0]
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	2202      	movs	r2, #2
 8001698:	216b      	movs	r1, #107	; 0x6b
 800169a:	f7ff fe1f 	bl	80012dc <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7818      	ldrb	r0, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <_ZN7MPU605012getFIFOCountEv+0x3c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	2202      	movs	r2, #2
 80016c2:	2172      	movs	r1, #114	; 0x72
 80016c4:	f7ff fd36 	bl	8001134 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	b29b      	uxth	r3, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000

080016e8 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	4613      	mov	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00a      	beq.n	8001712 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	7818      	ldrb	r0, [r3, #0]
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_ZN7MPU605012getFIFOBytesEPhh+0x38>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2174      	movs	r1, #116	; 0x74
 800170c:	f7ff fd12 	bl	8001134 <_ZN6I2Cdev9readBytesEhhhPht>
    } else {
        *data = 0;
    }
}
 8001710:	e002      	b.n	8001718 <_ZN7MPU605012getFIFOBytesEPhh+0x30>
        *data = 0;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000000 	.word	0x20000000

08001724 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>:
 * Returns 1) when nothing special was done
 *         2) when recovering from overflow
 *         0) when no valid data is available
 * ================================================================ */
int8_t MPU6050::GetCurrentFIFOPacket(uint8_t *data, uint8_t length)
{ // overflow proof
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
    int16_t fifoC;
    // This section of code is for when we allowed more than 1 packet to be acquired
    uint32_t BreakTimer = millis();
 8001732:	f002 faa5 	bl	8003c80 <HAL_GetTick>
 8001736:	63b8      	str	r0, [r7, #56]	; 0x38
    do
    {
        if ((fifoC = getFIFOCount()) > length)//when FIFOCount more than 28
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff ffb5 	bl	80016a8 <_ZN7MPU605012getFIFOCountEv>
 800173e:	4603      	mov	r3, r0
 8001740:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001742:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	429a      	cmp	r2, r3
 800174a:	bfcc      	ite	gt
 800174c:	2301      	movgt	r3, #1
 800174e:	2300      	movle	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04c      	beq.n	80017f0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
        {

            if (fifoC > 200)
 8001756:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800175a:	2bc8      	cmp	r3, #200	; 0xc8
 800175c:	dd1a      	ble.n	8001794 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x70>
            { // if you waited to get the FIFO buffer to > 200 bytes it will take longer to get the last packet in the FIFO Buffer than it will take to  reset the buffer and wait for the next to arrive
                resetFIFO(); // Fixes any overflow corruption
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f7ff ff6e 	bl	8001640 <_ZN7MPU60509resetFIFOEv>
                fifoC = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	87fb      	strh	r3, [r7, #62]	; 0x3e
                while (!(fifoC = getFIFOCount()) && ((millis() - BreakTimer) <= (11))); // Get Next New Packet
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff ff9d 	bl	80016a8 <_ZN7MPU605012getFIFOCountEv>
 800176e:	4603      	mov	r3, r0
 8001770:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001772:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x68>
 800177a:	f002 fa81 	bl	8003c80 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b0b      	cmp	r3, #11
 8001786:	d801      	bhi.n	800178c <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x68>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x6a>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d02e      	beq.n	80017f0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
 8001792:	e7e9      	b.n	8001768 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x44>
            }
            else
            { //We have more than 1 packet but less than 200 bytes of data in the FIFO Buffer
                uint8_t Trash[BUFFER_LENGTH];
                while ((fifoC = getFIFOCount()) > length)
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff ff87 	bl	80016a8 <_ZN7MPU605012getFIFOCountEv>
 800179a:	4603      	mov	r3, r0
 800179c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800179e:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	bfcc      	ite	gt
 80017a8:	2301      	movgt	r3, #1
 80017aa:	2300      	movle	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01e      	beq.n	80017f0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
                {  // Test each time just in case the MPU is writing to the FIFO Buffer
                    fifoC = fifoC - length; // Save the last packet
 80017b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    uint16_t RemoveBytes;
                    while (fifoC)
 80017be:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0e6      	beq.n	8001794 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x70>
                    { // fifo count will reach zero so this is safe
                        RemoveBytes = (int) fifoC < BUFFER_LENGTH ? (int) fifoC
 80017c6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	bfa8      	it	ge
 80017ce:	2320      	movge	r3, #32
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	86fb      	strh	r3, [r7, #54]	; 0x36
                                                                  : BUFFER_LENGTH; // Buffer Length is different than the packet length this will efficiently clear the buffer
                        getFIFOBytes(Trash, (uint8_t) RemoveBytes);
 80017d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff82 	bl	80016e8 <_ZN7MPU605012getFIFOBytesEPhh>
                        fifoC -= RemoveBytes;
 80017e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    while (fifoC)
 80017ee:	e7e6      	b.n	80017be <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x9a>
                    }
                }
            }
        }
        if (!fifoC)
 80017f0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d104      	bne.n	8001802 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xde>
        {
            printf("fifo no data!\n");
 80017f8:	4813      	ldr	r0, [pc, #76]	; (8001848 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x124>)
 80017fa:	f008 f81f 	bl	800983c <puts>
            return 0; // Called too early no data or we timed out after FIFO Reset
 80017fe:	2300      	movs	r3, #0
 8001800:	e01d      	b.n	800183e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x11a>
        }
        // We have 1 packet
        if ((millis() - BreakTimer) > (11))
 8001802:	f002 fa3d 	bl	8003c80 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b0b      	cmp	r3, #11
 800180e:	bf8c      	ite	hi
 8001810:	2301      	movhi	r3, #1
 8001812:	2300      	movls	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x100>
        {
            printf("fifo wait too long!\n");
 800181a:	480c      	ldr	r0, [pc, #48]	; (800184c <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x128>)
 800181c:	f008 f80e 	bl	800983c <puts>
            return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e00c      	b.n	800183e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x11a>
        }
    }
    while (fifoC != length);
 8001824:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	429a      	cmp	r2, r3
 800182c:	d000      	beq.n	8001830 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x10c>
    do
 800182e:	e783      	b.n	8001738 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x14>
    getFIFOBytes(data, length); //Get 1 packet
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	461a      	mov	r2, r3
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff ff56 	bl	80016e8 <_ZN7MPU605012getFIFOBytesEPhh>
    return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	3740      	adds	r7, #64	; 0x40
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800d2c0 	.word	0x0800d2c0
 800184c:	0800d2d0 	.word	0x0800d2d0

08001850 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7818      	ldrb	r0, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3301      	adds	r3, #1
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <_ZN7MPU605011getDeviceIDEv+0x30>)
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	9201      	str	r2, [sp, #4]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2306      	movs	r3, #6
 800186a:	2206      	movs	r2, #6
 800186c:	2175      	movs	r1, #117	; 0x75
 800186e:	f7ff fc05 	bl	800107c <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	785b      	ldrb	r3, [r3, #1]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000

08001884 <_ZN7MPU605015setXAccelOffsetEs>:
int16_t MPU6050::getXAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffdd 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 8001896:	4603      	mov	r3, r0
 8001898:	2b37      	cmp	r3, #55	; 0x37
 800189a:	d801      	bhi.n	80018a0 <_ZN7MPU605015setXAccelOffsetEs+0x1c>
 800189c:	2306      	movs	r3, #6
 800189e:	e000      	b.n	80018a2 <_ZN7MPU605015setXAccelOffsetEs+0x1e>
 80018a0:	2377      	movs	r3, #119	; 0x77
 80018a2:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	7bf9      	ldrb	r1, [r7, #15]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fd83 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN7MPU605015setYAccelOffsetEs>:
int16_t MPU6050::getYAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffc2 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b37      	cmp	r3, #55	; 0x37
 80018d0:	d801      	bhi.n	80018d6 <_ZN7MPU605015setYAccelOffsetEs+0x1c>
 80018d2:	2308      	movs	r3, #8
 80018d4:	e000      	b.n	80018d8 <_ZN7MPU605015setYAccelOffsetEs+0x1e>
 80018d6:	237a      	movs	r3, #122	; 0x7a
 80018d8:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	7bf9      	ldrb	r1, [r7, #15]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd68 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZN7MPU605015setZAccelOffsetEs>:
int16_t MPU6050::getZAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffa7 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 8001902:	4603      	mov	r3, r0
 8001904:	2b37      	cmp	r3, #55	; 0x37
 8001906:	d801      	bhi.n	800190c <_ZN7MPU605015setZAccelOffsetEs+0x1c>
 8001908:	230a      	movs	r3, #10
 800190a:	e000      	b.n	800190e <_ZN7MPU605015setZAccelOffsetEs+0x1e>
 800190c:	237d      	movs	r3, #125	; 0x7d
 800190e:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	7bf9      	ldrb	r1, [r7, #15]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fd4d 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	2113      	movs	r1, #19
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd3c 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	2115      	movs	r1, #21
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd2b 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	2117      	movs	r1, #23
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd1a 	bl	80013b8 <_ZN6I2Cdev9writeWordEhht>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7818      	ldrb	r0, [r3, #0]
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2207      	movs	r2, #7
 80019a0:	216a      	movs	r1, #106	; 0x6a
 80019a2:	f7ff fc5b 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7818      	ldrb	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	216a      	movs	r1, #106	; 0x6a
 80019c0:	f7ff fc4c 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	70fb      	strb	r3, [r7, #3]
 80019de:	460b      	mov	r3, r1
 80019e0:	70bb      	strb	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 80019ee:	787b      	ldrb	r3, [r7, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <_ZN7MPU605013setMemoryBankEhbb+0x30>
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 80019fc:	78bb      	ldrb	r3, [r7, #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a08:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	216d      	movs	r1, #109	; 0x6d
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fcbc 	bl	8001390 <_ZN6I2Cdev9writeByteEhhh>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	216e      	movs	r1, #110	; 0x6e
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fcab 	bl	8001390 <_ZN6I2Cdev9writeByteEhhh>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
}
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	460b      	mov	r3, r1
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4613      	mov	r3, r2
 8001a58:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8001a5a:	7979      	ldrb	r1, [r7, #5]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff ffb3 	bl	80019cc <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8001a66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff ffd7 	bl	8001a20 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 8001a82:	2010      	movs	r0, #16
 8001a84:	f006 fee6 	bl	8008854 <malloc>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001a8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 8001a94:	2010      	movs	r0, #16
 8001a96:	f006 fedd 	bl	8008854 <malloc>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	827b      	strh	r3, [r7, #18]
 8001aa2:	8a7a      	ldrh	r2, [r7, #18]
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	f080 8092 	bcs.w	8001bd0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x18c>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8001aac:	2310      	movs	r3, #16
 8001aae:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8001ab0:	8a7a      	ldrh	r2, [r7, #18]
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dd05      	ble.n	8001ac8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8001ac8:	7ffa      	ldrb	r2, [r7, #31]
 8001aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ace:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dd03      	ble.n	8001ade <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8001ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ada:	425b      	negs	r3, r3
 8001adc:	77fb      	strb	r3, [r7, #31]

        if (useProgMem) {
 8001ade:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	747b      	strb	r3, [r7, #17]
 8001aea:	7c7a      	ldrb	r2, [r7, #17]
 8001aec:	7ffb      	ldrb	r3, [r7, #31]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d211      	bcs.n	8001b16 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8001af2:	8a7a      	ldrh	r2, [r7, #18]
 8001af4:	7c7b      	ldrb	r3, [r7, #17]
 8001af6:	4413      	add	r3, r2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	441a      	add	r2, r3
 8001afc:	7c7b      	ldrb	r3, [r7, #17]
 8001afe:	6979      	ldr	r1, [r7, #20]
 8001b00:	440b      	add	r3, r1
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	7c7b      	ldrb	r3, [r7, #17]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	747b      	strb	r3, [r7, #17]
 8001b0c:	e7ed      	b.n	8001aea <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8001b0e:	8a7b      	ldrh	r3, [r7, #18]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	7818      	ldrb	r0, [r3, #0]
 8001b1a:	7ffa      	ldrb	r2, [r7, #31]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	216f      	movs	r1, #111	; 0x6f
 8001b20:	f7ff fc5e 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8001b24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02d      	beq.n	8001b88 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d02a      	beq.n	8001b88 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
            setMemoryBank(bank);
 8001b32:	7979      	ldrb	r1, [r7, #5]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff ff47 	bl	80019cc <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8001b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b42:	4619      	mov	r1, r3
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff ff6b 	bl	8001a20 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	7818      	ldrb	r0, [r3, #0]
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1b4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	7ffa      	ldrb	r2, [r7, #31]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	216f      	movs	r1, #111	; 0x6f
 8001b5a:	f7ff faeb 	bl	8001134 <_ZN6I2Cdev9readBytesEhhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	461a      	mov	r2, r3
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	6978      	ldr	r0, [r7, #20]
 8001b66:	f006 fe85 	bl	8008874 <memcmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8001b70:	69b8      	ldr	r0, [r7, #24]
 8001b72:	f006 fe77 	bl	8008864 <free>
                if (useProgMem) free(progBuffer);
 8001b76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x140>
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f006 fe70 	bl	8008864 <free>
                return false; // uh oh.
 8001b84:	2300      	movs	r3, #0
 8001b86:	e032      	b.n	8001bee <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1aa>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	8a7b      	ldrh	r3, [r7, #18]
 8001b8e:	4413      	add	r3, r2
 8001b90:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8001b92:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8001b9e:	8a7a      	ldrh	r2, [r7, #18]
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	f4bf af7d 	bcs.w	8001aa2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8001ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x172>
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8001bb6:	7979      	ldrb	r1, [r7, #5]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2200      	movs	r2, #0
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff ff05 	bl	80019cc <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8001bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff ff29 	bl	8001a20 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8001bce:	e768      	b.n	8001aa2 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8001bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x19a>
 8001bd8:	69b8      	ldr	r0, [r7, #24]
 8001bda:	f006 fe43 	bl	8008864 <free>
    if (useProgMem) free(progBuffer);
 8001bde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a8>
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f006 fe3c 	bl	8008864 <free>
    return true;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	80fb      	strh	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8001c12:	7979      	ldrb	r1, [r7, #5]
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	7f3b      	ldrb	r3, [r7, #28]
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	7e3b      	ldrb	r3, [r7, #24]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	460b      	mov	r3, r1
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff ff0c 	bl	8001a44 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <_ZN7MPU605013CalibrateGyroEh>:
//**********************           Calibration Routines            **********************
//***************************************************************************************
/**
  @brief      Fully calibrate Gyro from ZERO in about 6-7 Loops 600-700 readings
*/
void MPU6050::CalibrateGyro(uint8_t Loops ) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
    double kP = 0.3;
 8001c44:	a337      	add	r3, pc, #220	; (adr r3, 8001d24 <_ZN7MPU605013CalibrateGyroEh+0xec>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double kI = 90;
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <_ZN7MPU605013CalibrateGyroEh+0xe0>)
 8001c54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    float x;
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c62:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8001d1c <_ZN7MPU605013CalibrateGyroEh+0xe4>
 8001c66:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8001c6a:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001c6e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	f7ff f9c1 	bl	8000ffc <_Z10mapArduinofffff>
 8001c7a:	eef0 7a40 	vmov.f32	s15, s0
 8001c7e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001d20 <_ZN7MPU605013CalibrateGyroEh+0xe8>
 8001c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc65 	bl	8000558 <__aeabi_f2d>
 8001c8e:	a320      	add	r3, pc, #128	; (adr r3, 8001d10 <_ZN7MPU605013CalibrateGyroEh+0xd8>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb8 	bl	8000608 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ffaa 	bl	8000bf8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
    kP *= x;
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7fe fc55 	bl	8000558 <__aeabi_f2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    kI *= x;
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7fe fc48 	bl	8000558 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd0:	f7fe fc9a 	bl	8000608 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    PID( 0x43,  kP, kI,  Loops);
 8001cdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce0:	f7fe ff8a 	bl	8000bf8 <__aeabi_d2f>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cea:	f7fe ff85 	bl	8000bf8 <__aeabi_d2f>
 8001cee:	4601      	mov	r1, r0
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	ee00 1a90 	vmov	s1, r1
 8001cf8:	ee00 4a10 	vmov	s0, r4
 8001cfc:	2143      	movs	r1, #67	; 0x43
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f872 	bl	8001de8 <_ZN7MPU60503PIDEhffh>
}
 8001d04:	bf00      	nop
 8001d06:	3724      	adds	r7, #36	; 0x24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	47ae147b 	.word	0x47ae147b
 8001d14:	3f847ae1 	.word	0x3f847ae1
 8001d18:	40568000 	.word	0x40568000
 8001d1c:	00000000 	.word	0x00000000
 8001d20:	42c80000 	.word	0x42c80000
 8001d24:	33333333 	.word	0x33333333
 8001d28:	3fd33333 	.word	0x3fd33333
 8001d2c:	00000000 	.word	0x00000000

08001d30 <_ZN7MPU605014CalibrateAccelEh>:

/**
  @brief      Fully calibrate Accel from ZERO in about 6-7 Loops 600-700 readings
*/
void MPU6050::CalibrateAccel(uint8_t Loops ) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]

    float kP = 0.3;
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <_ZN7MPU605014CalibrateAccelEh+0xa8>)
 8001d3e:	617b      	str	r3, [r7, #20]
    float kI = 20;
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <_ZN7MPU605014CalibrateAccelEh+0xac>)
 8001d42:	613b      	str	r3, [r7, #16]
    float x;
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4e:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8001de0 <_ZN7MPU605014CalibrateAccelEh+0xb0>
 8001d52:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8001d56:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001d5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	f7ff f94b 	bl	8000ffc <_Z10mapArduinofffff>
 8001d66:	eef0 7a40 	vmov.f32	s15, s0
 8001d6a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001de4 <_ZN7MPU605014CalibrateAccelEh+0xb4>
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fbef 	bl	8000558 <__aeabi_f2d>
 8001d7a:	a315      	add	r3, pc, #84	; (adr r3, 8001dd0 <_ZN7MPU605014CalibrateAccelEh+0xa0>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc42 	bl	8000608 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe ff34 	bl	8000bf8 <__aeabi_d2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
    //printf("CA=%f\n",x);
    kP *= x;
 8001d94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	edc7 7a05 	vstr	s15, [r7, #20]
    kI *= x;
 8001da4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	edc7 7a04 	vstr	s15, [r7, #16]
    PID( 0x3B, kP, kI,  Loops);
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	461a      	mov	r2, r3
 8001db8:	edd7 0a04 	vldr	s1, [r7, #16]
 8001dbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001dc0:	213b      	movs	r1, #59	; 0x3b
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f810 	bl	8001de8 <_ZN7MPU60503PIDEhffh>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	47ae147b 	.word	0x47ae147b
 8001dd4:	3f847ae1 	.word	0x3f847ae1
 8001dd8:	3e99999a 	.word	0x3e99999a
 8001ddc:	41a00000 	.word	0x41a00000
 8001de0:	00000000 	.word	0x00000000
 8001de4:	42c80000 	.word	0x42c80000

08001de8 <_ZN7MPU60503PIDEhffh>:

void MPU6050::PID(uint8_t ReadAddress, float kP,float kI, uint8_t Loops){
 8001de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dec:	b096      	sub	sp, #88	; 0x58
 8001dee:	af02      	add	r7, sp, #8
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	460b      	mov	r3, r1
 8001df4:	ed87 0a01 	vstr	s0, [r7, #4]
 8001df8:	edc7 0a00 	vstr	s1, [r7]
 8001dfc:	72fb      	strb	r3, [r7, #11]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	72bb      	strb	r3, [r7, #10]
    uint8_t SaveAddress = (ReadAddress == 0x3B) ? ((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	2b3b      	cmp	r3, #59	; 0x3b
 8001e06:	d109      	bne.n	8001e1c <_ZN7MPU60503PIDEhffh+0x34>
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fd21 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b37      	cmp	r3, #55	; 0x37
 8001e12:	d801      	bhi.n	8001e18 <_ZN7MPU60503PIDEhffh+0x30>
 8001e14:	2306      	movs	r3, #6
 8001e16:	e002      	b.n	8001e1e <_ZN7MPU60503PIDEhffh+0x36>
 8001e18:	2377      	movs	r3, #119	; 0x77
 8001e1a:	e000      	b.n	8001e1e <_ZN7MPU60503PIDEhffh+0x36>
 8001e1c:	2313      	movs	r3, #19
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    int16_t Data;
    float Reading;
    int16_t BitZero[3];
    uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 8001e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e26:	2b77      	cmp	r3, #119	; 0x77
 8001e28:	d101      	bne.n	8001e2e <_ZN7MPU60503PIDEhffh+0x46>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e000      	b.n	8001e30 <_ZN7MPU60503PIDEhffh+0x48>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    float Error, PTerm, ITerm[3];
    int16_t eSample;
    uint32_t eSum;
    HAL_UART_Transmit(&huart2, (uint8_t *) ">", 1, 100);
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	2201      	movs	r2, #1
 8001e38:	49bd      	ldr	r1, [pc, #756]	; (8002130 <_ZN7MPU60503PIDEhffh+0x348>)
 8001e3a:	48be      	ldr	r0, [pc, #760]	; (8002134 <_ZN7MPU60503PIDEhffh+0x34c>)
 8001e3c:	f005 fbf1 	bl	8007622 <HAL_UART_Transmit>
    for (int i = 0; i < 3; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40
 8001e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	dc4e      	bgt.n	8001ee8 <_ZN7MPU60503PIDEhffh+0x100>
    {
        I2Cdev::readWords(devAddr, SaveAddress + (i * shift), 1,
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7818      	ldrb	r0, [r3, #0]
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001e56:	fb12 f303 	smulbb	r3, r2, r3
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e60:	4413      	add	r3, r2
 8001e62:	b2d9      	uxtb	r1, r3
 8001e64:	4bb4      	ldr	r3, [pc, #720]	; (8002138 <_ZN7MPU60503PIDEhffh+0x350>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	2201      	movs	r2, #1
 8001e72:	f7ff f993 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
                          (uint16_t *) &Data); // reads 1 or more 16 bit integers (Word)
        Reading = Data;
 8001e76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        if (SaveAddress != 0x13)
 8001e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e8a:	2b13      	cmp	r3, #19
 8001e8c:	d01a      	beq.n	8001ec4 <_ZN7MPU60503PIDEhffh+0xdc>
        {
            BitZero[i] = Data &
 8001e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f823 2c34 	strh.w	r2, [r3, #-52]
                         1;                                         // Capture Bit Zero to properly handle Accelerometer calibration
            ITerm[i] = ((float) Reading) * 8;
 8001ea6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001eaa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b40      	subs	r3, #64	; 0x40
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
 8001ec2:	e00d      	b.n	8001ee0 <_ZN7MPU60503PIDEhffh+0xf8>
        }
        else
        {
            ITerm[i] = Reading * 4;
 8001ec4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ec8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b40      	subs	r3, #64	; 0x40
 8001edc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee6:	e7ad      	b.n	8001e44 <_ZN7MPU60503PIDEhffh+0x5c>
        }
    }
    printf("\nbegin!\n");
 8001ee8:	4894      	ldr	r0, [pc, #592]	; (800213c <_ZN7MPU60503PIDEhffh+0x354>)
 8001eea:	f007 fca7 	bl	800983c <puts>
    for (int L = 0; L < Loops; L++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef2:	7abb      	ldrb	r3, [r7, #10]
 8001ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	f280 81cb 	bge.w	8002292 <_ZN7MPU60503PIDEhffh+0x4aa>
    {
        eSample = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        for (int c = 0; c < 100; c++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	2b63      	cmp	r3, #99	; 0x63
 8001f0a:	f300 8149 	bgt.w	80021a0 <_ZN7MPU60503PIDEhffh+0x3b8>
        {// 100 PI Calculations
            eSum = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
            for (int i = 0; i < 3; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	f300 80df 	bgt.w	80020dc <_ZN7MPU60503PIDEhffh+0x2f4>
            {
                I2Cdev::readWords(devAddr, ReadAddress + (i * 2), 1,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	7818      	ldrb	r0, [r3, #0]
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2d9      	uxtb	r1, r3
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <_ZN7MPU60503PIDEhffh+0x350>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f7ff f92d 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
                                  (uint16_t *) &Data); // reads 1 or more 16 bit integers (Word)
                Reading = Data;
 8001f42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                //printf("R%d:%.1f  ",i,Reading);
                if ((ReadAddress == 0x3B) && (i == 2)) Reading -= 16384.0;    //remove Gravity
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	2b3b      	cmp	r3, #59	; 0x3b
 8001f56:	d10a      	bne.n	8001f6e <_ZN7MPU60503PIDEhffh+0x186>
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <_ZN7MPU60503PIDEhffh+0x186>
 8001f5e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f62:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002140 <_ZN7MPU60503PIDEhffh+0x358>
 8001f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f6a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                Error = -Reading;
 8001f6e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f72:	eef1 7a67 	vneg.f32	s15, s15
 8001f76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                eSum += abs(Reading);
 8001f7a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001f7e:	f7ff fac9 	bl	8001514 <_ZSt3absf>
 8001f82:	eeb0 7a40 	vmov.f32	s14, s0
 8001f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
                PTerm = kP * Error;
 8001f9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fa2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                //printf("E:%.1f",Error);
                //printf("P:%.1f ",PTerm);
                ITerm[i] += (Error * 0.001) * kI;                // Integral term 1000 Calculations a second = 0.001
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b40      	subs	r3, #64	; 0x40
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe facb 	bl	8000558 <__aeabi_f2d>
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	460d      	mov	r5, r1
 8001fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc8:	f7fe fac6 	bl	8000558 <__aeabi_f2d>
 8001fcc:	a354      	add	r3, pc, #336	; (adr r3, 8002120 <_ZN7MPU60503PIDEhffh+0x338>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fb19 	bl	8000608 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4690      	mov	r8, r2
 8001fdc:	4699      	mov	r9, r3
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f7fe faba 	bl	8000558 <__aeabi_f2d>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4640      	mov	r0, r8
 8001fea:	4649      	mov	r1, r9
 8001fec:	f7fe fb0c 	bl	8000608 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe f950 	bl	800029c <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fdf8 	bl	8000bf8 <__aeabi_d2f>
 8002008:	4602      	mov	r2, r0
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002012:	440b      	add	r3, r1
 8002014:	3b40      	subs	r3, #64	; 0x40
 8002016:	601a      	str	r2, [r3, #0]
                //printf("I:%.1f ",ITerm[i]);
                if (SaveAddress != 0x13)
 8002018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800201c:	2b13      	cmp	r3, #19
 800201e:	d02b      	beq.n	8002078 <_ZN7MPU60503PIDEhffh+0x290>
                {
                    //printf("%f",(PTerm + ITerm[i]) / 8);
                    Data = round((PTerm + ITerm[i]) / 8);        //Compute PID Output
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002028:	4413      	add	r3, r2
 800202a:	3b40      	subs	r3, #64	; 0x40
 800202c:	ed93 7a00 	vldr	s14, [r3]
 8002030:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800203c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002040:	eeb0 0a47 	vmov.f32	s0, s14
 8002044:	f7ff fa76 	bl	8001534 <_ZSt5roundf>
 8002048:	eef0 7a40 	vmov.f32	s15, s0
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 3a90 	vmov	r3, s15
 8002054:	b21b      	sxth	r3, r3
 8002056:	847b      	strh	r3, [r7, #34]	; 0x22
                    Data = ((Data) & 0xFFFE) | BitZero[i];            // Insert Bit0 Saved at beginning
 8002058:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	b21a      	sxth	r2, r3
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800206a:	440b      	add	r3, r1
 800206c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002070:	4313      	orrs	r3, r2
 8002072:	b21b      	sxth	r3, r3
 8002074:	847b      	strh	r3, [r7, #34]	; 0x22
 8002076:	e01b      	b.n	80020b0 <_ZN7MPU60503PIDEhffh+0x2c8>
                }
                else Data = round((PTerm + ITerm[i]) / 4);    //Compute PID Output
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002080:	4413      	add	r3, r2
 8002082:	3b40      	subs	r3, #64	; 0x40
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800208c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002090:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002098:	eeb0 0a47 	vmov.f32	s0, s14
 800209c:	f7ff fa4a 	bl	8001534 <_ZSt5roundf>
 80020a0:	eef0 7a40 	vmov.f32	s15, s0
 80020a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a8:	ee17 3a90 	vmov	r3, s15
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	847b      	strh	r3, [r7, #34]	; 0x22
                I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t *) &Data);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7818      	ldrb	r0, [r3, #0]
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80020bc:	fb12 f303 	smulbb	r3, r2, r3
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020c6:	4413      	add	r3, r2
 80020c8:	b2d9      	uxtb	r1, r3
 80020ca:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80020ce:	2201      	movs	r2, #1
 80020d0:	f7ff f9bc 	bl	800144c <_ZN6I2Cdev10writeWordsEhhhPt>
            for (int i = 0; i < 3; i++)
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	3301      	adds	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
 80020da:	e71c      	b.n	8001f16 <_ZN7MPU60503PIDEhffh+0x12e>
                //printf("d%d:%d e:%.2f\t",i,Data,Error);
            }
            //printf("\n");
            if ((c == 99) && eSum > 1000)
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	2b63      	cmp	r3, #99	; 0x63
 80020e0:	d10f      	bne.n	8002102 <_ZN7MPU60503PIDEhffh+0x31a>
 80020e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e8:	d90b      	bls.n	8002102 <_ZN7MPU60503PIDEhffh+0x31a>
            {                        // Error is still to great to continue
                c = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
                printf("Error still : %d\n",eSum);
 80020ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020f0:	4814      	ldr	r0, [pc, #80]	; (8002144 <_ZN7MPU60503PIDEhffh+0x35c>)
 80020f2:	f007 fb07 	bl	8009704 <iprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *) "*", 1, 100);
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	2201      	movs	r2, #1
 80020fa:	4913      	ldr	r1, [pc, #76]	; (8002148 <_ZN7MPU60503PIDEhffh+0x360>)
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <_ZN7MPU60503PIDEhffh+0x34c>)
 80020fe:	f005 fa90 	bl	8007622 <HAL_UART_Transmit>
            }
            if ((eSum * ((ReadAddress == 0x3B) ? .05 : 1)) < 5)
 8002102:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002104:	f7fe fa06 	bl	8000514 <__aeabi_ui2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	7af9      	ldrb	r1, [r7, #11]
 800210e:	293b      	cmp	r1, #59	; 0x3b
 8002110:	d11c      	bne.n	800214c <_ZN7MPU60503PIDEhffh+0x364>
 8002112:	a105      	add	r1, pc, #20	; (adr r1, 8002128 <_ZN7MPU60503PIDEhffh+0x340>)
 8002114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002118:	e01b      	b.n	8002152 <_ZN7MPU60503PIDEhffh+0x36a>
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	d2f1a9fc 	.word	0xd2f1a9fc
 8002124:	3f50624d 	.word	0x3f50624d
 8002128:	9999999a 	.word	0x9999999a
 800212c:	3fa99999 	.word	0x3fa99999
 8002130:	0800d2e4 	.word	0x0800d2e4
 8002134:	200003e4 	.word	0x200003e4
 8002138:	20000000 	.word	0x20000000
 800213c:	0800d2e8 	.word	0x0800d2e8
 8002140:	46800000 	.word	0x46800000
 8002144:	0800d2f0 	.word	0x0800d2f0
 8002148:	0800d304 	.word	0x0800d304
 800214c:	f04f 0000 	mov.w	r0, #0
 8002150:	4955      	ldr	r1, [pc, #340]	; (80022a8 <_ZN7MPU60503PIDEhffh+0x4c0>)
 8002152:	f7fe fa59 	bl	8000608 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	4b52      	ldr	r3, [pc, #328]	; (80022ac <_ZN7MPU60503PIDEhffh+0x4c4>)
 8002164:	f7fe fcc2 	bl	8000aec <__aeabi_dcmplt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <_ZN7MPU60503PIDEhffh+0x394>
                eSample++;    // Successfully found offsets prepare to  advance
 800216e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	b29b      	uxth	r3, r3
 8002178:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
            if ((eSum < 100) && (c > 10) && (eSample >= 10)) break;        // Advance to next Loop
 800217c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217e:	2b63      	cmp	r3, #99	; 0x63
 8002180:	d806      	bhi.n	8002190 <_ZN7MPU60503PIDEhffh+0x3a8>
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	2b0a      	cmp	r3, #10
 8002186:	dd03      	ble.n	8002190 <_ZN7MPU60503PIDEhffh+0x3a8>
 8002188:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800218c:	2b09      	cmp	r3, #9
 800218e:	dc06      	bgt.n	800219e <_ZN7MPU60503PIDEhffh+0x3b6>
            delay(1);
 8002190:	2001      	movs	r0, #1
 8002192:	f001 fd81 	bl	8003c98 <HAL_Delay>
        for (int c = 0; c < 100; c++)
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	3301      	adds	r3, #1
 800219a:	63bb      	str	r3, [r7, #56]	; 0x38
 800219c:	e6b3      	b.n	8001f06 <_ZN7MPU60503PIDEhffh+0x11e>
            if ((eSum < 100) && (c > 10) && (eSample >= 10)) break;        // Advance to next Loop
 800219e:	bf00      	nop
        }
        HAL_UART_Transmit(&huart2, (uint8_t *) ".", 1, 100);
 80021a0:	2364      	movs	r3, #100	; 0x64
 80021a2:	2201      	movs	r2, #1
 80021a4:	4942      	ldr	r1, [pc, #264]	; (80022b0 <_ZN7MPU60503PIDEhffh+0x4c8>)
 80021a6:	4843      	ldr	r0, [pc, #268]	; (80022b4 <_ZN7MPU60503PIDEhffh+0x4cc>)
 80021a8:	f005 fa3b 	bl	8007622 <HAL_UART_Transmit>
        kP *= .75;
 80021ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b0:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80021b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b8:	edc7 7a01 	vstr	s15, [r7, #4]
        kI *= .75;
 80021bc:	edd7 7a00 	vldr	s15, [r7]
 80021c0:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80021c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c8:	edc7 7a00 	vstr	s15, [r7]
        for (int i = 0; i < 3; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	dc59      	bgt.n	800228a <_ZN7MPU60503PIDEhffh+0x4a2>
        {
            if (SaveAddress != 0x13)
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	2b13      	cmp	r3, #19
 80021dc:	d027      	beq.n	800222e <_ZN7MPU60503PIDEhffh+0x446>
            {
                Data = round((ITerm[i]) / 8);        //Compute PID Output
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80021e6:	4413      	add	r3, r2
 80021e8:	3b40      	subs	r3, #64	; 0x40
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80021f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021f6:	eeb0 0a47 	vmov.f32	s0, s14
 80021fa:	f7ff f99b 	bl	8001534 <_ZSt5roundf>
 80021fe:	eef0 7a40 	vmov.f32	s15, s0
 8002202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002206:	ee17 3a90 	vmov	r3, s15
 800220a:	b21b      	sxth	r3, r3
 800220c:	847b      	strh	r3, [r7, #34]	; 0x22
                Data = ((Data) & 0xFFFE) | BitZero[i];    // Insert Bit0 Saved at beginning
 800220e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	b21a      	sxth	r2, r3
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002220:	440b      	add	r3, r1
 8002222:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002226:	4313      	orrs	r3, r2
 8002228:	b21b      	sxth	r3, r3
 800222a:	847b      	strh	r3, [r7, #34]	; 0x22
 800222c:	e017      	b.n	800225e <_ZN7MPU60503PIDEhffh+0x476>
            }
            else Data = round((ITerm[i]) / 4);
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002236:	4413      	add	r3, r2
 8002238:	3b40      	subs	r3, #64	; 0x40
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002242:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002246:	eeb0 0a47 	vmov.f32	s0, s14
 800224a:	f7ff f973 	bl	8001534 <_ZSt5roundf>
 800224e:	eef0 7a40 	vmov.f32	s15, s0
 8002252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002256:	ee17 3a90 	vmov	r3, s15
 800225a:	b21b      	sxth	r3, r3
 800225c:	847b      	strh	r3, [r7, #34]	; 0x22
            I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t *) &Data);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	7818      	ldrb	r0, [r3, #0]
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800226a:	fb12 f303 	smulbb	r3, r2, r3
 800226e:	b2da      	uxtb	r2, r3
 8002270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002274:	4413      	add	r3, r2
 8002276:	b2d9      	uxtb	r1, r3
 8002278:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800227c:	2201      	movs	r2, #1
 800227e:	f7ff f8e5 	bl	800144c <_ZN6I2Cdev10writeWordsEhhhPt>
        for (int i = 0; i < 3; i++)
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	3301      	adds	r3, #1
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
 8002288:	e7a2      	b.n	80021d0 <_ZN7MPU60503PIDEhffh+0x3e8>
    for (int L = 0; L < Loops; L++)
 800228a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228c:	3301      	adds	r3, #1
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	e62f      	b.n	8001ef2 <_ZN7MPU60503PIDEhffh+0x10a>
        }
    }
    resetFIFO();
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff f9d4 	bl	8001640 <_ZN7MPU60509resetFIFOEv>
    resetDMP();
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fb88 	bl	80019ae <_ZN7MPU60508resetDMPEv>
}
 800229e:	bf00      	nop
 80022a0:	3750      	adds	r7, #80	; 0x50
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a8:	3ff00000 	.word	0x3ff00000
 80022ac:	40140000 	.word	0x40140000
 80022b0:	0800d308 	.word	0x0800d308
 80022b4:	200003e4 	.word	0x200003e4

080022b8 <_ZN7MPU605018PrintActiveOffsetsEv>:

#define printfloatx(Name,Variable,Spaces,Precision,EndTxt) { Serial.print(F(Name)); {char S[(Spaces + Precision + 3)];Serial.print(F(" ")); Serial.print(dtostrf((float)Variable,Spaces,Precision ,S));}Serial.print(F(EndTxt)); }//Name,Variable,Spaces,Precision,EndTxt
void MPU6050::PrintActiveOffsets() {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	6078      	str	r0, [r7, #4]
    uint8_t AOffsetRegister = (getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77;
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fac5 	bl	8001850 <_ZN7MPU605011getDeviceIDEv>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b37      	cmp	r3, #55	; 0x37
 80022ca:	d801      	bhi.n	80022d0 <_ZN7MPU605018PrintActiveOffsetsEv+0x18>
 80022cc:	2306      	movs	r3, #6
 80022ce:	e000      	b.n	80022d2 <_ZN7MPU605018PrintActiveOffsetsEv+0x1a>
 80022d0:	2377      	movs	r3, #119	; 0x77
 80022d2:	73fb      	strb	r3, [r7, #15]
    int16_t Data[3];
    //Serial.print(F("Offset Register 0x"));
    //Serial.print(AOffsetRegister>>4,HEX);Serial.print(AOffsetRegister&0x0F,HEX);
    printf("\n//           X Accel  Y Accel  Z Accel   X Gyro   Y Gyro   Z Gyro\n//OFFSETS   ");
 80022d4:	4837      	ldr	r0, [pc, #220]	; (80023b4 <_ZN7MPU605018PrintActiveOffsetsEv+0xfc>)
 80022d6:	f007 fa15 	bl	8009704 <iprintf>
    if(AOffsetRegister == 0x06)	I2Cdev::readWords(devAddr, AOffsetRegister, 3, (uint16_t *)Data);
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d10c      	bne.n	80022fa <_ZN7MPU605018PrintActiveOffsetsEv+0x42>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7818      	ldrb	r0, [r3, #0]
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	7bf9      	ldrb	r1, [r7, #15]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	2203      	movs	r2, #3
 80022f4:	f7fe ff52 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
 80022f8:	e027      	b.n	800234a <_ZN7MPU605018PrintActiveOffsetsEv+0x92>
    else {
        I2Cdev::readWords(devAddr, AOffsetRegister, 1, (uint16_t *)Data);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7818      	ldrb	r0, [r3, #0]
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f107 0208 	add.w	r2, r7, #8
 8002306:	7bf9      	ldrb	r1, [r7, #15]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	2201      	movs	r2, #1
 800230e:	f7fe ff45 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
        I2Cdev::readWords(devAddr, AOffsetRegister+3, 1, (uint16_t *)Data+1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7818      	ldrb	r0, [r3, #0]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3303      	adds	r3, #3
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	3302      	adds	r3, #2
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	9200      	str	r2, [sp, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	f7fe ff37 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
        I2Cdev::readWords(devAddr, AOffsetRegister+6, 1, (uint16_t *)Data+2);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7818      	ldrb	r0, [r3, #0]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3306      	adds	r3, #6
 8002336:	b2d9      	uxtb	r1, r3
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	3304      	adds	r3, #4
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	9200      	str	r2, [sp, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	f7fe ff29 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
    //	A_OFFSET_H_READ_A_OFFS(Data);
    //todo:print float
//	printfloatx("", Data[0], 5, 0, ",  ");
//	printfloatx("", Data[1], 5, 0, ",  ");
//	printfloatx("", Data[2], 5, 0, ",  ");
    printf("%d     ,  ",Data[0]);
 800234a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800234e:	4619      	mov	r1, r3
 8002350:	481a      	ldr	r0, [pc, #104]	; (80023bc <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 8002352:	f007 f9d7 	bl	8009704 <iprintf>
    printf("%d     ,  ",Data[1]);
 8002356:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	; (80023bc <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 800235e:	f007 f9d1 	bl	8009704 <iprintf>
    printf("%d     ,  ",Data[2]);
 8002362:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002366:	4619      	mov	r1, r3
 8002368:	4814      	ldr	r0, [pc, #80]	; (80023bc <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 800236a:	f007 f9cb 	bl	8009704 <iprintf>
    I2Cdev::readWords(devAddr, 0x13, 3, (uint16_t *)Data);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7818      	ldrb	r0, [r3, #0]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	2203      	movs	r2, #3
 8002380:	2113      	movs	r1, #19
 8002382:	f7fe ff0b 	bl	800119c <_ZN6I2Cdev9readWordsEhhhPtt>
    //	XG_OFFSET_H_READ_OFFS_USR(Data);
//	printfloatx("", Data[0], 5, 0, ",  ");
//	printfloatx("", Data[1], 5, 0, ",  ");
//	printfloatx("", Data[2], 5, 0, "\n");
    printf("%d     ,  ",Data[0]);
 8002386:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800238a:	4619      	mov	r1, r3
 800238c:	480b      	ldr	r0, [pc, #44]	; (80023bc <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 800238e:	f007 f9b9 	bl	8009704 <iprintf>
    printf("%d     ,  ",Data[1]);
 8002392:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002396:	4619      	mov	r1, r3
 8002398:	4808      	ldr	r0, [pc, #32]	; (80023bc <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 800239a:	f007 f9b3 	bl	8009704 <iprintf>
    printf("%d     \n",Data[2]);
 800239e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4806      	ldr	r0, [pc, #24]	; (80023c0 <_ZN7MPU605018PrintActiveOffsetsEv+0x108>)
 80023a6:	f007 f9ad 	bl	8009704 <iprintf>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	0800d30c 	.word	0x0800d30c
 80023b8:	20000000 	.word	0x20000000
 80023bc:	0800d35c 	.word	0x0800d35c
 80023c0:	0800d368 	.word	0x0800d368

080023c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <MX_GPIO_Init+0xd0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <MX_GPIO_Init+0xd0>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <MX_GPIO_Init+0xd0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <MX_GPIO_Init+0xd0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a25      	ldr	r2, [pc, #148]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <MX_GPIO_Init+0xd0>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <MX_GPIO_Init+0xd0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	2120      	movs	r1, #32
 800244e:	4812      	ldr	r0, [pc, #72]	; (8002498 <MX_GPIO_Init+0xd4>)
 8002450:	f001 ff7c 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800245a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	480c      	ldr	r0, [pc, #48]	; (800249c <MX_GPIO_Init+0xd8>)
 800246c:	f001 fdea 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002470:	2320      	movs	r3, #32
 8002472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <MX_GPIO_Init+0xd4>)
 8002488:	f001 fddc 	bl	8004044 <HAL_GPIO_Init>

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020800 	.word	0x40020800

080024a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024a6:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <MX_I2C1_Init+0x54>)
 80024a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <MX_I2C1_Init+0x58>)
 80024ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024dc:	4804      	ldr	r0, [pc, #16]	; (80024f0 <MX_I2C1_Init+0x50>)
 80024de:	f001 ff4f 	bl	8004380 <HAL_I2C_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024e8:	f001 f864 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200002b4 	.word	0x200002b4
 80024f4:	40005400 	.word	0x40005400
 80024f8:	00061a80 	.word	0x00061a80

080024fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_I2C2_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <MX_I2C2_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_I2C2_Init+0x50>)
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <MX_I2C2_Init+0x58>)
 800250a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_I2C2_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_I2C2_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_I2C2_Init+0x50>)
 800251a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <MX_I2C2_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_I2C2_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <MX_I2C2_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_I2C2_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_I2C2_Init+0x50>)
 800253a:	f001 ff21 	bl	8004380 <HAL_I2C_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002544:	f001 f836 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000308 	.word	0x20000308
 8002550:	40005800 	.word	0x40005800
 8002554:	00061a80 	.word	0x00061a80

08002558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a43      	ldr	r2, [pc, #268]	; (8002684 <HAL_I2C_MspInit+0x12c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d13c      	bne.n	80025f4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a41      	ldr	r2, [pc, #260]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_I2C_MspInit+0x130>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259a:	2312      	movs	r3, #18
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4836      	ldr	r0, [pc, #216]	; (800268c <HAL_I2C_MspInit+0x134>)
 80025b2:	f001 fd47 	bl	8004044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_I2C_MspInit+0x130>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a32      	ldr	r2, [pc, #200]	; (8002688 <HAL_I2C_MspInit+0x130>)
 80025c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_I2C_MspInit+0x130>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	201f      	movs	r0, #31
 80025d8:	f001 fc5d 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025dc:	201f      	movs	r0, #31
 80025de:	f001 fc76 	bl	8003ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2020      	movs	r0, #32
 80025e8:	f001 fc55 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80025ec:	2020      	movs	r0, #32
 80025ee:	f001 fc6e 	bl	8003ece <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80025f2:	e042      	b.n	800267a <HAL_I2C_MspInit+0x122>
  else if(i2cHandle->Instance==I2C2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <HAL_I2C_MspInit+0x138>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d13d      	bne.n	800267a <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002620:	2312      	movs	r3, #18
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800262c:	2304      	movs	r3, #4
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	4815      	ldr	r0, [pc, #84]	; (800268c <HAL_I2C_MspInit+0x134>)
 8002638:	f001 fd04 	bl	8004044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800263c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002642:	2312      	movs	r3, #18
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800264e:	2309      	movs	r3, #9
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <HAL_I2C_MspInit+0x134>)
 800265a:	f001 fcf3 	bl	8004044 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_I2C_MspInit+0x130>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
}
 800267a:	bf00      	nop
 800267c:	3730      	adds	r7, #48	; 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40005400 	.word	0x40005400
 8002688:	40023800 	.word	0x40023800
 800268c:	40020400 	.word	0x40020400
 8002690:	40005800 	.word	0x40005800

08002694 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	ed87 0a01 	vstr	s0, [r7, #4]
 800269e:	edc7 0a00 	vstr	s1, [r7]
 80026a2:	edd7 0a00 	vldr	s1, [r7]
 80026a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80026aa:	f005 fefb 	bl	80084a4 <atan2f>
 80026ae:	eef0 7a40 	vmov.f32	s15, s0
 80026b2:	eeb0 0a67 	vmov.f32	s0, s15
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80026c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80026ca:	f005 feed 	bl	80084a8 <sqrtf>
 80026ce:	eef0 7a40 	vmov.f32	s15, s0
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026ea:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	60da      	str	r2, [r3, #12]
        }
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZN10QuaternionC1Effff>:
        
        Quaternion(float nw, float nx, float ny, float nz) {
 8002712:	b480      	push	{r7}
 8002714:	b087      	sub	sp, #28
 8002716:	af00      	add	r7, sp, #0
 8002718:	6178      	str	r0, [r7, #20]
 800271a:	ed87 0a04 	vstr	s0, [r7, #16]
 800271e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002722:	ed87 1a02 	vstr	s2, [r7, #8]
 8002726:	edc7 1a01 	vstr	s3, [r7, #4]
            w = nw;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	601a      	str	r2, [r3, #0]
            x = nx;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]
            y = ny;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]
            z = nz;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	60da      	str	r2, [r3, #12]
        }
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4618      	mov	r0, r3
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_ZN10Quaternion10getProductES_>:

        Quaternion getProduct(Quaternion q) {
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b093      	sub	sp, #76	; 0x4c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6278      	str	r0, [r7, #36]	; 0x24
 8002758:	eeb0 6a40 	vmov.f32	s12, s0
 800275c:	eef0 6a60 	vmov.f32	s13, s1
 8002760:	eeb0 7a41 	vmov.f32	s14, s2
 8002764:	eef0 7a61 	vmov.f32	s15, s3
 8002768:	ed87 6a05 	vstr	s12, [r7, #20]
 800276c:	edc7 6a06 	vstr	s13, [r7, #24]
 8002770:	ed87 7a07 	vstr	s14, [r7, #28]
 8002774:	edc7 7a08 	vstr	s15, [r7, #32]
            //     (Q1 * Q2).w = (w1w2 - x1x2 - y1y2 - z1z2)
            //     (Q1 * Q2).x = (w1x2 + x1w2 + y1z2 - z1y2)
            //     (Q1 * Q2).y = (w1y2 - x1z2 + y1w2 + z1x2)
            //     (Q1 * Q2).z = (w1z2 + x1y2 - y1x2 + z1w2
            return Quaternion(
                w*q.w - x*q.x - y*q.y - z*q.z,  // new w
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	ed93 7a00 	vldr	s14, [r3]
 800277e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	edd3 6a01 	vldr	s13, [r3, #4]
 800278c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	edd3 6a02 	vldr	s13, [r3, #8]
 800279e:	edd7 7a07 	vldr	s15, [r7, #28]
 80027a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80027b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
            return Quaternion(
 80027b8:	ee37 6a67 	vsub.f32	s12, s14, s15
                w*q.x + x*q.w + y*q.z - z*q.y,  // new x
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	ed93 7a00 	vldr	s14, [r3]
 80027c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80027d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	edd3 6a02 	vldr	s13, [r3, #8]
 80027e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80027f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
            return Quaternion(
 80027fc:	ee77 5a67 	vsub.f32	s11, s14, s15
                w*q.y - x*q.z + y*q.w + z*q.x,  // new y
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	edd7 7a07 	vldr	s15, [r7, #28]
 800280a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	edd3 6a01 	vldr	s13, [r3, #4]
 8002814:	edd7 7a08 	vldr	s15, [r7, #32]
 8002818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	edd3 6a02 	vldr	s13, [r3, #8]
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	edd3 6a03 	vldr	s13, [r3, #12]
 8002838:	edd7 7a06 	vldr	s15, [r7, #24]
 800283c:	ee66 7aa7 	vmul.f32	s15, s13, s15
            return Quaternion(
 8002840:	ee37 5a27 	vadd.f32	s10, s14, s15
                w*q.z + x*q.y - y*q.x + z*q.w); // new z
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	edd7 7a08 	vldr	s15, [r7, #32]
 800284e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	edd3 6a01 	vldr	s13, [r3, #4]
 8002858:	edd7 7a07 	vldr	s15, [r7, #28]
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	edd3 6a02 	vldr	s13, [r3, #8]
 800286a:	edd7 7a06 	vldr	s15, [r7, #24]
 800286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	edd3 6a03 	vldr	s13, [r3, #12]
 800287c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002880:	ee66 7aa7 	vmul.f32	s15, s13, s15
            return Quaternion(
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800288c:	eef0 1a67 	vmov.f32	s3, s15
 8002890:	eeb0 1a45 	vmov.f32	s2, s10
 8002894:	eef0 0a65 	vmov.f32	s1, s11
 8002898:	eeb0 0a46 	vmov.f32	s0, s12
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff38 	bl	8002712 <_ZN10QuaternionC1Effff>
                w*q.z + x*q.y - y*q.x + z*q.w); // new z
 80028a2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b8:	ee06 0a10 	vmov	s12, r0
 80028bc:	ee06 1a90 	vmov	s13, r1
 80028c0:	ee07 2a10 	vmov	s14, r2
 80028c4:	ee07 3a90 	vmov	s15, r3
        }
 80028c8:	eeb0 0a46 	vmov.f32	s0, s12
 80028cc:	eef0 0a66 	vmov.f32	s1, s13
 80028d0:	eeb0 1a47 	vmov.f32	s2, s14
 80028d4:	eef0 1a67 	vmov.f32	s3, s15
 80028d8:	374c      	adds	r7, #76	; 0x4c
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <_ZN10Quaternion12getConjugateEv>:

        Quaternion getConjugate() {
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b08f      	sub	sp, #60	; 0x3c
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6178      	str	r0, [r7, #20]
            return Quaternion(w, -x, -y, -z);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f2:	eef1 6a67 	vneg.f32	s13, s15
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fc:	eeb1 6a67 	vneg.f32	s12, s15
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	edd3 7a03 	vldr	s15, [r3, #12]
 8002906:	eef1 7a67 	vneg.f32	s15, s15
 800290a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290e:	eef0 1a67 	vmov.f32	s3, s15
 8002912:	eeb0 1a46 	vmov.f32	s2, s12
 8002916:	eef0 0a66 	vmov.f32	s1, s13
 800291a:	eeb0 0a47 	vmov.f32	s0, s14
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fef7 	bl	8002712 <_ZN10QuaternionC1Effff>
 8002924:	f107 0418 	add.w	r4, r7, #24
 8002928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002932:	69b8      	ldr	r0, [r7, #24]
 8002934:	69f9      	ldr	r1, [r7, #28]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	ee06 0a10 	vmov	s12, r0
 800293e:	ee06 1a90 	vmov	s13, r1
 8002942:	ee07 2a10 	vmov	s14, r2
 8002946:	ee07 3a90 	vmov	s15, r3
        }
 800294a:	eeb0 0a46 	vmov.f32	s0, s12
 800294e:	eef0 0a66 	vmov.f32	s1, s13
 8002952:	eeb0 1a47 	vmov.f32	s2, s14
 8002956:	eef0 1a67 	vmov.f32	s3, s15
 800295a:	373c      	adds	r7, #60	; 0x3c
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}

08002960 <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
            x = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]
            y = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	805a      	strh	r2, [r3, #2]
            z = 0;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	809a      	strh	r2, [r3, #4]
        }
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN11VectorInt166rotateEP10Quaternion>:
            VectorInt16 r(x, y, z);
            r.normalize();
            return r;
        }
        
        void rotate(Quaternion *q) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
            // P_out = q * P_in * conj(q)
            // - P_out is the output vector
            // - q is the orientation quaternion
            // - P_in is the input vector (a*aReal)
            // - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])
            Quaternion p(0, x, y, z);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a6:	ee07 3a10 	vmov	s14, r3
 80029aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029b4:	ee06 3a90 	vmov	s13, r3
 80029b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	eef0 1a66 	vmov.f32	s3, s13
 80029c4:	eeb0 1a47 	vmov.f32	s2, s14
 80029c8:	eef0 0a67 	vmov.f32	s1, s15
 80029cc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002acc <_ZN11VectorInt166rotateEP10Quaternion+0x144>
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fe9e 	bl	8002712 <_ZN10QuaternionC1Effff>

            // quaternion multiplication: q * p, stored back in p
            p = q -> getProduct(p);
 80029d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029da:	edd7 6a03 	vldr	s13, [r7, #12]
 80029de:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e6:	eeb0 0a46 	vmov.f32	s0, s12
 80029ea:	eef0 0a66 	vmov.f32	s1, s13
 80029ee:	eeb0 1a47 	vmov.f32	s2, s14
 80029f2:	eef0 1a67 	vmov.f32	s3, s15
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f7ff feaa 	bl	8002750 <_ZN10Quaternion10getProductES_>
 80029fc:	eeb0 6a40 	vmov.f32	s12, s0
 8002a00:	eef0 6a60 	vmov.f32	s13, s1
 8002a04:	eeb0 7a41 	vmov.f32	s14, s2
 8002a08:	eef0 7a61 	vmov.f32	s15, s3
 8002a0c:	ed87 6a02 	vstr	s12, [r7, #8]
 8002a10:	edc7 6a03 	vstr	s13, [r7, #12]
 8002a14:	ed87 7a04 	vstr	s14, [r7, #16]
 8002a18:	edc7 7a05 	vstr	s15, [r7, #20]

            // quaternion multiplication: p * conj(q), stored back in p
            p = p.getProduct(q -> getConjugate());
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f7ff ff5e 	bl	80028de <_ZN10Quaternion12getConjugateEv>
 8002a22:	eeb0 6a40 	vmov.f32	s12, s0
 8002a26:	eef0 6a60 	vmov.f32	s13, s1
 8002a2a:	eeb0 7a41 	vmov.f32	s14, s2
 8002a2e:	eef0 7a61 	vmov.f32	s15, s3
 8002a32:	ed87 6a06 	vstr	s12, [r7, #24]
 8002a36:	edc7 6a07 	vstr	s13, [r7, #28]
 8002a3a:	ed87 7a08 	vstr	s14, [r7, #32]
 8002a3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8002a42:	ed97 6a06 	vldr	s12, [r7, #24]
 8002a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a4a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a52:	f107 0308 	add.w	r3, r7, #8
 8002a56:	eeb0 0a46 	vmov.f32	s0, s12
 8002a5a:	eef0 0a66 	vmov.f32	s1, s13
 8002a5e:	eeb0 1a47 	vmov.f32	s2, s14
 8002a62:	eef0 1a67 	vmov.f32	s3, s15
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe72 	bl	8002750 <_ZN10Quaternion10getProductES_>
 8002a6c:	eeb0 6a40 	vmov.f32	s12, s0
 8002a70:	eef0 6a60 	vmov.f32	s13, s1
 8002a74:	eeb0 7a41 	vmov.f32	s14, s2
 8002a78:	eef0 7a61 	vmov.f32	s15, s3
 8002a7c:	ed87 6a02 	vstr	s12, [r7, #8]
 8002a80:	edc7 6a03 	vstr	s13, [r7, #12]
 8002a84:	ed87 7a04 	vstr	s14, [r7, #16]
 8002a88:	edc7 7a05 	vstr	s15, [r7, #20]

            // p quaternion is now [0, x', y', z']
            x = p.x;
 8002a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	801a      	strh	r2, [r3, #0]
            y = p.y;
 8002a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa6:	ee17 3a90 	vmov	r3, s15
 8002aaa:	b21a      	sxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	805a      	strh	r2, [r3, #2]
            z = p.z;
 8002ab0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	809a      	strh	r2, [r3, #4]
        }
 8002ac2:	bf00      	nop
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00000000 	.word	0x00000000

08002ad0 <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
            x = 0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
            y = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
            z = 0;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
        }
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <_ZN7MPU605013dmpInitializeEv>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default 
#endif

// this is the most basic initialization I can create. with the intent that we access the register bytes as few times as needed to get the job done.
// for detailed descriptins of all registers and there purpose google "MPU-6000/MPU-6050 Register Map and Descriptions"
uint8_t MPU6050::dmpInitialize() { // Lets get it over with fast Write everything once and set it up necely
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
	uint8_t val;
	uint16_t ival;
  // Reset procedure per instructions in the "MPU-6000/MPU-6050 Register Map and Descriptions" page 41
	I2Cdev::writeBit(devAddr,0x6B, 7, (val = 1)); //PWR_MGMT_1: reset with 100ms delay
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7818      	ldrb	r0, [r3, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2207      	movs	r2, #7
 8002b14:	216b      	movs	r1, #107	; 0x6b
 8002b16:	f7fe fba1 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>
	delay(100);
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	f001 f8bc 	bl	8003c98 <HAL_Delay>
	I2Cdev::writeBits(devAddr,0x6A, 2, 3, (val = 0b111)); // full SIGNAL_PATH_RESET: with another 100ms delay
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7818      	ldrb	r0, [r3, #0]
 8002b24:	2307      	movs	r3, #7
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	2202      	movs	r2, #2
 8002b30:	216a      	movs	r1, #106	; 0x6a
 8002b32:	f7fe fbd3 	bl	80012dc <_ZN6I2Cdev9writeBitsEhhhhh>
	delay(100);         
 8002b36:	2064      	movs	r0, #100	; 0x64
 8002b38:	f001 f8ae 	bl	8003c98 <HAL_Delay>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 1000 0001 PWR_MGMT_1:Clock Source Select PLL_X_gyro
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7818      	ldrb	r0, [r3, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	f107 030f 	add.w	r3, r7, #15
 8002b48:	2201      	movs	r2, #1
 8002b4a:	216b      	movs	r1, #107	; 0x6b
 8002b4c:	f7fe fc48 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x00)); // 0000 0000 INT_ENABLE: no Interrupt
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7818      	ldrb	r0, [r3, #0]
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	f107 030f 	add.w	r3, r7, #15
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2138      	movs	r1, #56	; 0x38
 8002b60:	f7fe fc3e 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x23, 1, &(val = 0x00)); // 0000 0000 MPU FIFO_EN: (all off) Using DMP's FIFO instead
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7818      	ldrb	r0, [r3, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	f107 030f 	add.w	r3, r7, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	2123      	movs	r1, #35	; 0x23
 8002b74:	f7fe fc34 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1C, 1, &(val = 0x00)); // 0000 0000 ACCEL_CONFIG: 0 =  Accel Full Scale Select: 2g
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7818      	ldrb	r0, [r3, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	f107 030f 	add.w	r3, r7, #15
 8002b84:	2201      	movs	r2, #1
 8002b86:	211c      	movs	r1, #28
 8002b88:	f7fe fc2a 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x37, 1, &(val = 0x80)); // 1001 0000 INT_PIN_CFG: ACTL The logic level for int pin is active low. and interrupt status bits are cleared on any read
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7818      	ldrb	r0, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	f107 030f 	add.w	r3, r7, #15
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2137      	movs	r1, #55	; 0x37
 8002b9c:	f7fe fc20 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 0000 0001 PWR_MGMT_1: Clock Source Select PLL_X_gyro
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7818      	ldrb	r0, [r3, #0]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	f107 030f 	add.w	r3, r7, #15
 8002bac:	2201      	movs	r2, #1
 8002bae:	216b      	movs	r1, #107	; 0x6b
 8002bb0:	f7fe fc16 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x19, 1, &(val = 0x04)); // 0000 0100 SMPLRT_DIV: Divides the internal sample rate 400Hz ( Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7818      	ldrb	r0, [r3, #0]
 8002bb8:	2304      	movs	r3, #4
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	f107 030f 	add.w	r3, r7, #15
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2119      	movs	r1, #25
 8002bc4:	f7fe fc0c 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1A, 1, &(val = 0x01)); // 0000 0001 CONFIG: Digital Low Pass Filter (DLPF) Configuration 188HZ  //Im betting this will be the beat
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7818      	ldrb	r0, [r3, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	f107 030f 	add.w	r3, r7, #15
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	211a      	movs	r1, #26
 8002bd8:	f7fe fc02 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	if (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) return 1; // Loads the DMP image into the MPU6050 Memory // Should Never Fail
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	f640 32f6 	movw	r2, #3062	; 0xbf6
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <_ZN7MPU605013dmpInitializeEv+0x17c>)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff f805 	bl	8001bfc <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <_ZN7MPU605013dmpInitializeEv+0x102>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e037      	b.n	8002c72 <_ZN7MPU605013dmpInitializeEv+0x172>
	I2Cdev::writeWords(devAddr, 0x70, 1, &(ival = 0x0400)); // DMP Program Start Address
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7818      	ldrb	r0, [r3, #0]
 8002c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0a:	81bb      	strh	r3, [r7, #12]
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2201      	movs	r2, #1
 8002c12:	2170      	movs	r1, #112	; 0x70
 8002c14:	f7fe fc1a 	bl	800144c <_ZN6I2Cdev10writeWordsEhhhPt>
	I2Cdev::writeBytes(devAddr,0x1B, 1, &(val = 0x18)); // 0001 1000 GYRO_CONFIG: 3 = +2000 Deg/sec
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7818      	ldrb	r0, [r3, #0]
 8002c1c:	2318      	movs	r3, #24
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	f107 030f 	add.w	r3, r7, #15
 8002c24:	2201      	movs	r2, #1
 8002c26:	211b      	movs	r1, #27
 8002c28:	f7fe fbda 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6A, 1, &(val = 0xC0)); // 1100 1100 USER_CTRL: Enable Fifo and Reset Fifo
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7818      	ldrb	r0, [r3, #0]
 8002c30:	23c0      	movs	r3, #192	; 0xc0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	f107 030f 	add.w	r3, r7, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	216a      	movs	r1, #106	; 0x6a
 8002c3c:	f7fe fbd0 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x02)); // 0000 0010 INT_ENABLE: RAW_DMP_INT_EN on
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7818      	ldrb	r0, [r3, #0]
 8002c44:	2302      	movs	r3, #2
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	f107 030f 	add.w	r3, r7, #15
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2138      	movs	r1, #56	; 0x38
 8002c50:	f7fe fbc6 	bl	80013e0 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBit(devAddr,0x6A, 2, 1);      // Reset FIFO one last time just for kicks. (MPUi2cWrite reads 0x6A first and only alters 1 bit and then saves the byte)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7818      	ldrb	r0, [r3, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	216a      	movs	r1, #106	; 0x6a
 8002c5e:	f7fe fafd 	bl	800125c <_ZN6I2Cdev8writeBitEhhhh>

  setDMPEnabled(false); // disable DMP for compatibility with the MPU6050 library
 8002c62:	2100      	movs	r1, #0
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe fe91 	bl	800198c <_ZN7MPU605013setDMPEnabledEb>
/*
    dmpPacketSize += 16;//DMP_FEATURE_6X_LP_QUAT
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_ACCEL
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_GYRO
*/
	dmpPacketSize = 28;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	221c      	movs	r2, #28
 8002c6e:	829a      	strh	r2, [r3, #20]
	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	0800d4a8 	.word	0x0800d4a8

08002c80 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh>:
    data[0] = (packet[16] << 8) | packet[17];
    data[1] = (packet[18] << 8) | packet[19];
    data[2] = (packet[20] << 8) | packet[21];
    return 0;
}
uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh+0x18>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	607b      	str	r3, [r7, #4]
    v -> x = (packet[16] << 8) | packet[17];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	b21a      	sxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3311      	adds	r3, #17
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b21a      	sxth	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	801a      	strh	r2, [r3, #0]
    v -> y = (packet[18] << 8) | packet[19];
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3312      	adds	r3, #18
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3313      	adds	r3, #19
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	805a      	strh	r2, [r3, #2]
    v -> z = (packet[20] << 8) | packet[21];
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3314      	adds	r3, #20
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	b21a      	sxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3315      	adds	r3, #21
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	809a      	strh	r2, [r3, #4]
    return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN7MPU605016dmpGetQuaternionEPsPKh>:
    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);
    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);
    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <_ZN7MPU605016dmpGetQuaternionEPsPKh+0x18>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) | packet[1]);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	b21a      	sxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3301      	adds	r3, #1
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b21a      	sxth	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) | packet[5]);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b219      	sxth	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3305      	adds	r3, #5
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b21a      	sxth	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	b212      	sxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) | packet[9]);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3308      	adds	r3, #8
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b219      	sxth	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3309      	adds	r3, #9
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3304      	adds	r3, #4
 8002d56:	430a      	orrs	r2, r1
 8002d58:	b212      	sxth	r2, r2
 8002d5a:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) | packet[13]);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	b219      	sxth	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	330d      	adds	r3, #13
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3306      	adds	r3, #6
 8002d72:	430a      	orrs	r2, r1
 8002d74:	b212      	sxth	r2, r2
 8002d76:	801a      	strh	r2, [r3, #0]
    return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff ffa9 	bl	8002cf4 <_ZN7MPU605016dmpGetQuaternionEPsPKh>
 8002da2:	4603      	mov	r3, r0
 8002da4:	77fb      	strb	r3, [r7, #31]
    if (status == 0) {
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d135      	bne.n	8002e18 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x90>
        q -> w = (float)qI[0] / 16384.0f;
 8002dac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002e24 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	edc3 7a00 	vstr	s15, [r3]
        q -> x = (float)qI[1] / 16384.0f;
 8002dc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002e24 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	edc3 7a01 	vstr	s15, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 8002de0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dec:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002e24 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	edc3 7a02 	vstr	s15, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 8002dfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e06:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002e24 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	edc3 7a03 	vstr	s15, [r3, #12]
        return 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x92>
    }
    return status; // int16 return value, indicates error if this line is reached
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	46800000 	.word	0x46800000

08002e28 <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat>:
    v -> z = (packet[26] << 8) | packet[27];
    return 0;
}
// uint8_t MPU6050::dmpSetLinearAccelFilterCoefficient(float coef);
// uint8_t MPU6050::dmpGetLinearAccel(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
    // get rid of the gravity component (+1g = +8192 in standard DMP FIFO packet, sensitivity is 2g)
    v -> x = vRaw -> x - gravity -> x*8192;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002ed0 <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat+0xa8>
 8002e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e5a:	ee17 3a90 	vmov	r3, s15
 8002e5e:	b21a      	sxth	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	801a      	strh	r2, [r3, #0]
    v -> y = vRaw -> y - gravity -> y*8192;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e78:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002ed0 <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat+0xa8>
 8002e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e88:	ee17 3a90 	vmov	r3, s15
 8002e8c:	b21a      	sxth	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	805a      	strh	r2, [r3, #2]
    v -> z = vRaw -> z - gravity -> z*8192;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002ed0 <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat+0xa8>
 8002eaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb6:	ee17 3a90 	vmov	r3, s15
 8002eba:	b21a      	sxth	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	809a      	strh	r2, [r3, #4]
    return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	46000000 	.word	0x46000000

08002ed4 <_ZN7MPU605024dmpGetLinearAccelInWorldEP11VectorInt16S1_P10Quaternion>:
// uint8_t MPU6050::dmpGetLinearAccelInWorld(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
    // rotate measured 3D acceleration vector into original state
    // frame of reference based on orientation quaternion
    memcpy(v, vReal, sizeof(VectorInt16));
 8002ee2:	2206      	movs	r2, #6
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	68b8      	ldr	r0, [r7, #8]
 8002ee8:	f005 fcd2 	bl	8008890 <memcpy>
    v -> rotate(q);
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	68b8      	ldr	r0, [r7, #8]
 8002ef0:	f7ff fd4a 	bl	8002988 <_ZN11VectorInt166rotateEP10Quaternion>
    return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
    data[2] = ((int32_t)qI[0] * qI[0] - (int32_t)qI[1] * qI[1]
	       - (int32_t)qI[2] * qI[2] + (int32_t)qI[3] * qI[3]) / (2 * 16384);
    return status;
}

uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	edd3 6a00 	vldr	s13, [r3]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	edc3 7a00 	vstr	s15, [r3]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	ed93 7a00 	vldr	s14, [r3]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	edc3 7a01 	vstr	s15, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	ed93 7a00 	vldr	s14, [r3]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	edc3 7a02 	vstr	s15, [r3, #8]
    return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    // roll: (tilt left/right, about X axis)
    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));
    return 0;
}
#else 
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	ed2d 8b02 	vpush	{d8}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003002:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003020:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	edd3 7a01 	vldr	s15, [r3, #4]
 800302a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303a:	eef0 0a67 	vmov.f32	s1, s15
 800303e:	eeb0 0a46 	vmov.f32	s0, s12
 8003042:	f7ff fb27 	bl	8002694 <_ZSt5atan2ff>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	edc3 7a00 	vstr	s15, [r3]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	ed93 8a00 	vldr	s16, [r3]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	ed93 7a01 	vldr	s14, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	edd3 6a02 	vldr	s13, [r3, #8]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307a:	eeb0 0a67 	vmov.f32	s0, s15
 800307e:	f7ff fb1d 	bl	80026bc <_ZSt4sqrtf>
 8003082:	eef0 7a40 	vmov.f32	s15, s0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1d1c      	adds	r4, r3, #4
 800308a:	eef0 0a67 	vmov.f32	s1, s15
 800308e:	eeb0 0a48 	vmov.f32	s0, s16
 8003092:	f7ff faff 	bl	8002694 <_ZSt5atan2ff>
 8003096:	eef0 7a40 	vmov.f32	s15, s0
 800309a:	edc4 7a00 	vstr	s15, [r4]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f103 0408 	add.w	r4, r3, #8
 80030b0:	eef0 0a47 	vmov.f32	s1, s14
 80030b4:	eeb0 0a67 	vmov.f32	s0, s15
 80030b8:	f7ff faec 	bl	8002694 <_ZSt5atan2ff>
 80030bc:	eef0 7a40 	vmov.f32	s15, s0
 80030c0:	edc4 7a00 	vstr	s15, [r4]
    if (gravity -> z < 0) {
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80030ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	d521      	bpl.n	8003118 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x150>
        if(data[1] > 0) {
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3304      	adds	r3, #4
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	dd0c      	ble.n	8003100 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x138>
            data[1] = PI - data[1]; 
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3304      	adds	r3, #4
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3304      	adds	r3, #4
 80030f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003128 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x160>
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fa:	edc3 7a00 	vstr	s15, [r3]
 80030fe:	e00b      	b.n	8003118 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x150>
        } else { 
            data[1] = -PI - data[1];
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3304      	adds	r3, #4
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3304      	adds	r3, #4
 800310c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800312c <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x164>
 8003110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003114:	edc3 7a00 	vstr	s15, [r3]
        }
    }
    return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	ecbd 8b02 	vpop	{d8}
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	40490ff9 	.word	0x40490ff9
 800312c:	c0490ff9 	.word	0xc0490ff9

08003130 <_ZN7MPU605020dmpGetFIFOPacketSizeEv>:
// uint8_t MPU6050::dmpSetGyroDataSource(uint_fast8_t source);
// uint8_t MPU6050::dmpDecodeQuantizedAccel();
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
    return dmpPacketSize;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8a9b      	ldrh	r3, [r3, #20]
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_ZN7MPU605023dmpGetCurrentFIFOPacketEPh>:



uint8_t MPU6050::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    //printf("%d",dmpPacketSize);
    return(GetCurrentFIFOPacket(data, dmpPacketSize));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8a9b      	ldrh	r3, [r3, #20]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7fe fae1 	bl	8001724 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>
 8003162:	4603      	mov	r3, r0
 8003164:	b2db      	uxtb	r3, r3
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003174:	f000 fd1e 	bl	8003bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003178:	f000 f9aa 	bl	80034d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800317c:	f7ff f922 	bl	80023c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003180:	f000 fbd8 	bl	8003934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003184:	f7ff f98c 	bl	80024a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003188:	f000 fbaa 	bl	80038e0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800318c:	f000 fbfc 	bl	8003988 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8003190:	f7ff f9b4 	bl	80024fc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  // initialize device
  delay(1000);
 8003194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003198:	f000 fd7e 	bl	8003c98 <HAL_Delay>

     printf(F("Initializing I2C devices...\r\n"));//F(x)=x
 800319c:	48ae      	ldr	r0, [pc, #696]	; (8003458 <main+0x2e8>)
 800319e:	f006 fb4d 	bl	800983c <puts>
     mpu.initialize();
 80031a2:	48ae      	ldr	r0, [pc, #696]	; (800345c <main+0x2ec>)
 80031a4:	f7fe f9e6 	bl	8001574 <_ZN7MPU605010initializeEv>


     // verify connection
     printf(F("Testing device connections...\r\n"));
 80031a8:	48ad      	ldr	r0, [pc, #692]	; (8003460 <main+0x2f0>)
 80031aa:	f006 fb47 	bl	800983c <puts>
     while(!mpu.testConnection())
 80031ae:	48ab      	ldr	r0, [pc, #684]	; (800345c <main+0x2ec>)
 80031b0:	f7fe f9f8 	bl	80015a4 <_ZN7MPU605014testConnectionEv>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d000      	beq.n	80031c2 <main+0x52>
 80031c0:	e7f5      	b.n	80031ae <main+0x3e>
//         HAL_I2C_MspInit(&hi2c1);
//         HAL_Delay(250);
//         HAL_UART_Transmit(&huart2,(uint8_t *)".",1,100);
//         HAL_NVIC_SystemReset();
     }
     printf(mpu.testConnection() ? F("MPU6050 connection successful\r\n") : F("MPU6050 connection failed\r\n"));
 80031c2:	48a6      	ldr	r0, [pc, #664]	; (800345c <main+0x2ec>)
 80031c4:	f7fe f9ee 	bl	80015a4 <_ZN7MPU605014testConnectionEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <main+0x62>
 80031ce:	4ba5      	ldr	r3, [pc, #660]	; (8003464 <main+0x2f4>)
 80031d0:	e000      	b.n	80031d4 <main+0x64>
 80031d2:	4ba5      	ldr	r3, [pc, #660]	; (8003468 <main+0x2f8>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f006 fa95 	bl	8009704 <iprintf>

     // wait for ready


     // load and configure the DMP
     printf(F("Initializing DMP...\r\n"));
 80031da:	48a4      	ldr	r0, [pc, #656]	; (800346c <main+0x2fc>)
 80031dc:	f006 fb2e 	bl	800983c <puts>

     // supply your own gyro offsets here, scaled for min sensitivity
     mpu.setXGyroOffset(0);
 80031e0:	2100      	movs	r1, #0
 80031e2:	489e      	ldr	r0, [pc, #632]	; (800345c <main+0x2ec>)
 80031e4:	f7fe fb9f 	bl	8001926 <_ZN7MPU605014setXGyroOffsetEs>
     mpu.setYGyroOffset(0);
 80031e8:	2100      	movs	r1, #0
 80031ea:	489c      	ldr	r0, [pc, #624]	; (800345c <main+0x2ec>)
 80031ec:	f7fe fbac 	bl	8001948 <_ZN7MPU605014setYGyroOffsetEs>
     mpu.setZGyroOffset(0);
 80031f0:	2100      	movs	r1, #0
 80031f2:	489a      	ldr	r0, [pc, #616]	; (800345c <main+0x2ec>)
 80031f4:	f7fe fbb9 	bl	800196a <_ZN7MPU605014setZGyroOffsetEs>
     mpu.setXAccelOffset(0);
 80031f8:	2100      	movs	r1, #0
 80031fa:	4898      	ldr	r0, [pc, #608]	; (800345c <main+0x2ec>)
 80031fc:	f7fe fb42 	bl	8001884 <_ZN7MPU605015setXAccelOffsetEs>
     mpu.setYAccelOffset(0);
 8003200:	2100      	movs	r1, #0
 8003202:	4896      	ldr	r0, [pc, #600]	; (800345c <main+0x2ec>)
 8003204:	f7fe fb59 	bl	80018ba <_ZN7MPU605015setYAccelOffsetEs>
     mpu.setZAccelOffset(0);
 8003208:	2100      	movs	r1, #0
 800320a:	4894      	ldr	r0, [pc, #592]	; (800345c <main+0x2ec>)
 800320c:	f7fe fb70 	bl	80018f0 <_ZN7MPU605015setZAccelOffsetEs>

     devStatus = mpu.dmpInitialize();
 8003210:	4892      	ldr	r0, [pc, #584]	; (800345c <main+0x2ec>)
 8003212:	f7ff fc75 	bl	8002b00 <_ZN7MPU605013dmpInitializeEv>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	4b95      	ldr	r3, [pc, #596]	; (8003470 <main+0x300>)
 800321c:	701a      	strb	r2, [r3, #0]
//    	 devStatus = mpu.dmpInitialize();
//    	 printf("%d",devStatus);
//    	 delay(500);
//     }
     // make sure it worked (returns 0 if so)
     if (devStatus == 0)
 800321e:	4b94      	ldr	r3, [pc, #592]	; (8003470 <main+0x300>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d126      	bne.n	8003274 <main+0x104>
     {
         // Calibration Time: generate offsets and calibrate our MPU6050
         mpu.CalibrateAccel(6);
 8003226:	2106      	movs	r1, #6
 8003228:	488c      	ldr	r0, [pc, #560]	; (800345c <main+0x2ec>)
 800322a:	f7fe fd81 	bl	8001d30 <_ZN7MPU605014CalibrateAccelEh>
         mpu.CalibrateGyro(6);
 800322e:	2106      	movs	r1, #6
 8003230:	488a      	ldr	r0, [pc, #552]	; (800345c <main+0x2ec>)
 8003232:	f7fe fd01 	bl	8001c38 <_ZN7MPU605013CalibrateGyroEh>
         mpu.PrintActiveOffsets();
 8003236:	4889      	ldr	r0, [pc, #548]	; (800345c <main+0x2ec>)
 8003238:	f7ff f83e 	bl	80022b8 <_ZN7MPU605018PrintActiveOffsetsEv>
         // turn on the DMP, now that it's ready
         printf(F("Enabling DMP...\r\n"));
 800323c:	488d      	ldr	r0, [pc, #564]	; (8003474 <main+0x304>)
 800323e:	f006 fafd 	bl	800983c <puts>
         mpu.setDMPEnabled(true);
 8003242:	2101      	movs	r1, #1
 8003244:	4885      	ldr	r0, [pc, #532]	; (800345c <main+0x2ec>)
 8003246:	f7fe fba1 	bl	800198c <_ZN7MPU605013setDMPEnabledEb>

         // enable Arduino interrupt detection
         mpuIntStatus = mpu.getIntStatus();
 800324a:	4884      	ldr	r0, [pc, #528]	; (800345c <main+0x2ec>)
 800324c:	f7fe f9e2 	bl	8001614 <_ZN7MPU605012getIntStatusEv>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <main+0x308>)
 8003256:	701a      	strb	r2, [r3, #0]

         // set our DMP Ready flag so the main loop() function knows it's okay to use it
         printf(F("DMP ready! Waiting for first interrupt...\r\n"));
 8003258:	4888      	ldr	r0, [pc, #544]	; (800347c <main+0x30c>)
 800325a:	f006 faef 	bl	800983c <puts>
 //        float a;
 //        printf("int is %d\n",sizeof(a));
         dmpReady = true;
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <main+0x310>)
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]

         // get expected DMP packet size for later comparison
         packetSize = mpu.dmpGetFIFOPacketSize();
 8003264:	487d      	ldr	r0, [pc, #500]	; (800345c <main+0x2ec>)
 8003266:	f7ff ff63 	bl	8003130 <_ZN7MPU605020dmpGetFIFOPacketSizeEv>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	4b85      	ldr	r3, [pc, #532]	; (8003484 <main+0x314>)
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <main+0x11c>
     {
         // ERROR!
         // 1 = initial memory load failed
         // 2 = DMP configuration updates failed
         // (if it's going to break, usually the code will be 1)
         printf(F("DMP Initialization failed (code "));
 8003274:	4884      	ldr	r0, [pc, #528]	; (8003488 <main+0x318>)
 8003276:	f006 fa45 	bl	8009704 <iprintf>
         printf("%d",devStatus);
 800327a:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <main+0x300>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4882      	ldr	r0, [pc, #520]	; (800348c <main+0x31c>)
 8003282:	f006 fa3f 	bl	8009704 <iprintf>
         printf(F(")\r\n"));
 8003286:	4882      	ldr	r0, [pc, #520]	; (8003490 <main+0x320>)
 8003288:	f006 fad8 	bl	800983c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!dmpReady)
 800328c:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <main+0x310>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80d7 	bne.w	800344a <main+0x2da>
	 	       continue;
	     if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer))
 800329c:	497d      	ldr	r1, [pc, #500]	; (8003494 <main+0x324>)
 800329e:	486f      	ldr	r0, [pc, #444]	; (800345c <main+0x2ec>)
 80032a0:	f7ff ff52 	bl	8003148 <_ZN7MPU605023dmpGetCurrentFIFOPacketEPh>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80c6 	beq.w	8003442 <main+0x2d2>
	         printfln(euler[2] * 180 / M_PI);
	 #endif

	 #ifdef OUTPUT_READABLE_YAWPITCHROLL
	         // display Euler angles in degrees
	         mpu.dmpGetQuaternion(&q, fifoBuffer);
 80032b6:	4a77      	ldr	r2, [pc, #476]	; (8003494 <main+0x324>)
 80032b8:	4977      	ldr	r1, [pc, #476]	; (8003498 <main+0x328>)
 80032ba:	4868      	ldr	r0, [pc, #416]	; (800345c <main+0x2ec>)
 80032bc:	f7ff fd64 	bl	8002d88 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
	         mpu.dmpGetGravity(&gravity, &q);
 80032c0:	4a75      	ldr	r2, [pc, #468]	; (8003498 <main+0x328>)
 80032c2:	4976      	ldr	r1, [pc, #472]	; (800349c <main+0x32c>)
 80032c4:	4865      	ldr	r0, [pc, #404]	; (800345c <main+0x2ec>)
 80032c6:	f7ff fe1a 	bl	8002efe <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
	         mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
 80032ca:	4b74      	ldr	r3, [pc, #464]	; (800349c <main+0x32c>)
 80032cc:	4a72      	ldr	r2, [pc, #456]	; (8003498 <main+0x328>)
 80032ce:	4974      	ldr	r1, [pc, #464]	; (80034a0 <main+0x330>)
 80032d0:	4862      	ldr	r0, [pc, #392]	; (800345c <main+0x2ec>)
 80032d2:	f7ff fe79 	bl	8002fc8 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
	         //mpu.getMotion6(&a_x, &a_y, &a_z, &g_x, &g_y, &g_z);
	         //printf("6:\t%d\t%d\t%d\t%d\t%d\t%d\n", a_x, a_y, a_z, g_x, g_y, g_z);
	         printf("YPR:\n");
 80032d6:	4873      	ldr	r0, [pc, #460]	; (80034a4 <main+0x334>)
 80032d8:	f006 fab0 	bl	800983c <puts>
	         printf("%.2f", ypr[0] * 180 / M_PI);
 80032dc:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <main+0x330>)
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80034a8 <main+0x338>
 80032e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ea:	ee17 0a90 	vmov	r0, s15
 80032ee:	f7fd f933 	bl	8000558 <__aeabi_f2d>
 80032f2:	a357      	add	r3, pc, #348	; (adr r3, 8003450 <main+0x2e0>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd fab0 	bl	800085c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	486a      	ldr	r0, [pc, #424]	; (80034ac <main+0x33c>)
 8003302:	f006 f9ff 	bl	8009704 <iprintf>
	         printf("\n");
 8003306:	200a      	movs	r0, #10
 8003308:	f006 fa14 	bl	8009734 <putchar>
	         printf("%.2f", ypr[1] * 180 / M_PI);
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <main+0x330>)
 800330e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003312:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80034a8 <main+0x338>
 8003316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331a:	ee17 0a90 	vmov	r0, s15
 800331e:	f7fd f91b 	bl	8000558 <__aeabi_f2d>
 8003322:	a34b      	add	r3, pc, #300	; (adr r3, 8003450 <main+0x2e0>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fd fa98 	bl	800085c <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	485e      	ldr	r0, [pc, #376]	; (80034ac <main+0x33c>)
 8003332:	f006 f9e7 	bl	8009704 <iprintf>
	         printf("\n");
 8003336:	200a      	movs	r0, #10
 8003338:	f006 f9fc 	bl	8009734 <putchar>
	         printf("%.2f", ypr[2] * 180 / M_PI);
 800333c:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <main+0x330>)
 800333e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003342:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80034a8 <main+0x338>
 8003346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800334a:	ee17 0a90 	vmov	r0, s15
 800334e:	f7fd f903 	bl	8000558 <__aeabi_f2d>
 8003352:	a33f      	add	r3, pc, #252	; (adr r3, 8003450 <main+0x2e0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd fa80 	bl	800085c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4852      	ldr	r0, [pc, #328]	; (80034ac <main+0x33c>)
 8003362:	f006 f9cf 	bl	8009704 <iprintf>
	         printf("\n");
 8003366:	200a      	movs	r0, #10
 8003368:	f006 f9e4 	bl	8009734 <putchar>
	           printf("\t");
	           printf(gy.y);
	           printf("\t");
	           printf(gy.z);
	         */
	         printf("\r\n");
 800336c:	4850      	ldr	r0, [pc, #320]	; (80034b0 <main+0x340>)
 800336e:	f006 fa65 	bl	800983c <puts>
	 #endif

	 #ifdef OUTPUT_READABLE_WORLDACCEL
	         // display initial world-frame acceleration, adjusted to remove gravity
	         // and rotated based on known orientation from quaternion
	         mpu.dmpGetQuaternion(&q, fifoBuffer);
 8003372:	4a48      	ldr	r2, [pc, #288]	; (8003494 <main+0x324>)
 8003374:	4948      	ldr	r1, [pc, #288]	; (8003498 <main+0x328>)
 8003376:	4839      	ldr	r0, [pc, #228]	; (800345c <main+0x2ec>)
 8003378:	f7ff fd06 	bl	8002d88 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
	         mpu.dmpGetAccel(&aa, fifoBuffer);
 800337c:	4a45      	ldr	r2, [pc, #276]	; (8003494 <main+0x324>)
 800337e:	494d      	ldr	r1, [pc, #308]	; (80034b4 <main+0x344>)
 8003380:	4836      	ldr	r0, [pc, #216]	; (800345c <main+0x2ec>)
 8003382:	f7ff fc7d 	bl	8002c80 <_ZN7MPU605011dmpGetAccelEP11VectorInt16PKh>
	         mpu.dmpGetGravity(&gravity, &q);
 8003386:	4a44      	ldr	r2, [pc, #272]	; (8003498 <main+0x328>)
 8003388:	4944      	ldr	r1, [pc, #272]	; (800349c <main+0x32c>)
 800338a:	4834      	ldr	r0, [pc, #208]	; (800345c <main+0x2ec>)
 800338c:	f7ff fdb7 	bl	8002efe <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
	         mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <main+0x32c>)
 8003392:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <main+0x344>)
 8003394:	4948      	ldr	r1, [pc, #288]	; (80034b8 <main+0x348>)
 8003396:	4831      	ldr	r0, [pc, #196]	; (800345c <main+0x2ec>)
 8003398:	f7ff fd46 	bl	8002e28 <_ZN7MPU605017dmpGetLinearAccelEP11VectorInt16S1_P11VectorFloat>
	         mpu.dmpGetLinearAccelInWorld(&aaWorld, &aaReal, &q);
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <main+0x328>)
 800339e:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <main+0x348>)
 80033a0:	4946      	ldr	r1, [pc, #280]	; (80034bc <main+0x34c>)
 80033a2:	482e      	ldr	r0, [pc, #184]	; (800345c <main+0x2ec>)
 80033a4:	f7ff fd96 	bl	8002ed4 <_ZN7MPU605024dmpGetLinearAccelInWorldEP11VectorInt16S1_P10Quaternion>
	         printf("ACCEL:\n");
 80033a8:	4845      	ldr	r0, [pc, #276]	; (80034c0 <main+0x350>)
 80033aa:	f006 fa47 	bl	800983c <puts>
	         printf("%.2f", (aaWorld.x/(float)8192));
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <main+0x34c>)
 80033b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033bc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80034c4 <main+0x354>
 80033c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033c4:	ee16 0a90 	vmov	r0, s13
 80033c8:	f7fd f8c6 	bl	8000558 <__aeabi_f2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4836      	ldr	r0, [pc, #216]	; (80034ac <main+0x33c>)
 80033d2:	f006 f997 	bl	8009704 <iprintf>
	         printf("\n");
 80033d6:	200a      	movs	r0, #10
 80033d8:	f006 f9ac 	bl	8009734 <putchar>
	         printf("%.2f", (aaWorld.y/(float)8192));
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <main+0x34c>)
 80033de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80034c4 <main+0x354>
 80033ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80033f2:	ee16 0a90 	vmov	r0, s13
 80033f6:	f7fd f8af 	bl	8000558 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	482b      	ldr	r0, [pc, #172]	; (80034ac <main+0x33c>)
 8003400:	f006 f980 	bl	8009704 <iprintf>
	         printf("\n");
 8003404:	200a      	movs	r0, #10
 8003406:	f006 f995 	bl	8009734 <putchar>
	         printf("%.2f\r\n", (aaWorld.z/(float)8192));
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <main+0x34c>)
 800340c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80034c4 <main+0x354>
 800341c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003420:	ee16 0a90 	vmov	r0, s13
 8003424:	f7fd f898 	bl	8000558 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4826      	ldr	r0, [pc, #152]	; (80034c8 <main+0x358>)
 800342e:	f006 f969 	bl	8009704 <iprintf>
	         HAL_Delay(1);
 8003432:	2001      	movs	r0, #1
 8003434:	f000 fc30 	bl	8003c98 <HAL_Delay>
	         teapotPacket[8] = fifoBuffer[12];
	         teapotPacket[9] = fifoBuffer[13];
	         Serial.write(teapotPacket, 14);
	         teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
	 #endif
	         HAL_Delay(500);
 8003438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800343c:	f000 fc2c 	bl	8003c98 <HAL_Delay>
 8003440:	e724      	b.n	800328c <main+0x11c>
	     }
	     else{
	         printf("fifo error!\r\n");
 8003442:	4822      	ldr	r0, [pc, #136]	; (80034cc <main+0x35c>)
 8003444:	f006 f9fa 	bl	800983c <puts>
 8003448:	e720      	b.n	800328c <main+0x11c>
	 	       continue;
 800344a:	bf00      	nop
	  if (!dmpReady)
 800344c:	e71e      	b.n	800328c <main+0x11c>
 800344e:	bf00      	nop
 8003450:	54442d18 	.word	0x54442d18
 8003454:	400921fb 	.word	0x400921fb
 8003458:	0800d374 	.word	0x0800d374
 800345c:	20000200 	.word	0x20000200
 8003460:	0800d394 	.word	0x0800d394
 8003464:	0800d3b4 	.word	0x0800d3b4
 8003468:	0800d3d4 	.word	0x0800d3d4
 800346c:	0800d3f0 	.word	0x0800d3f0
 8003470:	2000021a 	.word	0x2000021a
 8003474:	0800d408 	.word	0x0800d408
 8003478:	20000219 	.word	0x20000219
 800347c:	0800d41c 	.word	0x0800d41c
 8003480:	20000218 	.word	0x20000218
 8003484:	2000021c 	.word	0x2000021c
 8003488:	0800d448 	.word	0x0800d448
 800348c:	0800d46c 	.word	0x0800d46c
 8003490:	0800d470 	.word	0x0800d470
 8003494:	20000220 	.word	0x20000220
 8003498:	20000260 	.word	0x20000260
 800349c:	20000290 	.word	0x20000290
 80034a0:	2000029c 	.word	0x2000029c
 80034a4:	0800d474 	.word	0x0800d474
 80034a8:	43340000 	.word	0x43340000
 80034ac:	0800d47c 	.word	0x0800d47c
 80034b0:	0800d484 	.word	0x0800d484
 80034b4:	20000270 	.word	0x20000270
 80034b8:	20000280 	.word	0x20000280
 80034bc:	20000288 	.word	0x20000288
 80034c0:	0800d488 	.word	0x0800d488
 80034c4:	46000000 	.word	0x46000000
 80034c8:	0800d490 	.word	0x0800d490
 80034cc:	0800d498 	.word	0x0800d498

080034d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b094      	sub	sp, #80	; 0x50
 80034d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d6:	f107 0320 	add.w	r3, r7, #32
 80034da:	2230      	movs	r2, #48	; 0x30
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f005 f9e4 	bl	80088ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <_Z18SystemClock_Configv+0xdc>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <_Z18SystemClock_Configv+0xdc>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <_Z18SystemClock_Configv+0xdc>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003510:	2300      	movs	r3, #0
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <_Z18SystemClock_Configv+0xe0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <_Z18SystemClock_Configv+0xe0>)
 800351a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <_Z18SystemClock_Configv+0xe0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800352c:	2301      	movs	r3, #1
 800352e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003530:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003536:	2302      	movs	r3, #2
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800353a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003540:	2304      	movs	r3, #4
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003544:	2364      	movs	r3, #100	; 0x64
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003548:	2302      	movs	r3, #2
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800354c:	2304      	movs	r3, #4
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003550:	f107 0320 	add.w	r3, r7, #32
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fba3 	bl	8006ca0 <HAL_RCC_OscConfig>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800356a:	f000 f823 	bl	80035b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800356e:	230f      	movs	r3, #15
 8003570:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800357a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800357e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fe00 	bl	8007190 <HAL_RCC_ClockConfig>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80035a0:	f000 f808 	bl	80035b4 <Error_Handler>
  }
}
 80035a4:	bf00      	nop
 80035a6:	3750      	adds	r7, #80	; 0x50
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000

080035b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b8:	b672      	cpsid	i
}
 80035ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035bc:	e7fe      	b.n	80035bc <Error_Handler+0x8>
	...

080035c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d11a      	bne.n	8003606 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d115      	bne.n	8003606 <_Z41__static_initialization_and_destruction_0ii+0x46>
MPU6050 mpu;
 80035da:	2168      	movs	r1, #104	; 0x68
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80035de:	f7fd ffb9 	bl	8001554 <_ZN7MPU6050C1Eh>
Quaternion q;           // [w, x, y, z]         quaternion container
 80035e2:	480c      	ldr	r0, [pc, #48]	; (8003614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80035e4:	f7ff f87a 	bl	80026dc <_ZN10QuaternionC1Ev>
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
 80035e8:	480b      	ldr	r0, [pc, #44]	; (8003618 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80035ea:	f7ff f9b9 	bl	8002960 <_ZN11VectorInt16C1Ev>
VectorInt16 gy;         // [x, y, z]            gyro sensor measurements
 80035ee:	480b      	ldr	r0, [pc, #44]	; (800361c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80035f0:	f7ff f9b6 	bl	8002960 <_ZN11VectorInt16C1Ev>
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
 80035f4:	480a      	ldr	r0, [pc, #40]	; (8003620 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80035f6:	f7ff f9b3 	bl	8002960 <_ZN11VectorInt16C1Ev>
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
 80035fa:	480a      	ldr	r0, [pc, #40]	; (8003624 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80035fc:	f7ff f9b0 	bl	8002960 <_ZN11VectorInt16C1Ev>
VectorFloat gravity;    // [x, y, z]            gravity vector
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003602:	f7ff fa65 	bl	8002ad0 <_ZN11VectorFloatC1Ev>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000200 	.word	0x20000200
 8003614:	20000260 	.word	0x20000260
 8003618:	20000270 	.word	0x20000270
 800361c:	20000278 	.word	0x20000278
 8003620:	20000280 	.word	0x20000280
 8003624:	20000288 	.word	0x20000288
 8003628:	20000290 	.word	0x20000290

0800362c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
 8003630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003634:	2001      	movs	r0, #1
 8003636:	f7ff ffc3 	bl	80035c0 <_Z41__static_initialization_and_destruction_0ii>
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_MspInit+0x4c>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_MspInit+0x4c>)
 800364c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <HAL_MspInit+0x4c>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_MspInit+0x4c>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <HAL_MspInit+0x4c>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_MspInit+0x4c>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800367a:	2007      	movs	r0, #7
 800367c:	f000 fc00 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800

0800368c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <NMI_Handler+0x4>

08003692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <HardFault_Handler+0x4>

08003698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <MemManage_Handler+0x4>

0800369e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <BusFault_Handler+0x4>

080036a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <UsageFault_Handler+0x4>

080036aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d8:	f000 fabe 	bl	8003c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <I2C1_EV_IRQHandler+0x10>)
 80036e6:	f001 faaf 	bl	8004c48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200002b4 	.word	0x200002b4

080036f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <I2C1_ER_IRQHandler+0x10>)
 80036fa:	f001 fc16 	bl	8004f2a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200002b4 	.word	0x200002b4

08003708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <USART1_IRQHandler+0x10>)
 800370e:	f004 f81b 	bl	8007748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000035c 	.word	0x2000035c

0800371c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <USART6_IRQHandler+0x10>)
 8003722:	f004 f811 	bl	8007748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200003a0 	.word	0x200003a0

08003730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_kill>:

int _kill(int pid, int sig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800374a:	f005 f859 	bl	8008800 <__errno>
 800374e:	4603      	mov	r3, r0
 8003750:	2216      	movs	r2, #22
 8003752:	601a      	str	r2, [r3, #0]
	return -1;
 8003754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_exit>:

void _exit (int status)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003768:	f04f 31ff 	mov.w	r1, #4294967295
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffe7 	bl	8003740 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003772:	e7fe      	b.n	8003772 <_exit+0x12>

08003774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e00a      	b.n	800379c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003786:	f3af 8000 	nop.w
 800378a:	4601      	mov	r1, r0
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	60ba      	str	r2, [r7, #8]
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dbf0      	blt.n	8003786 <_read+0x12>
	}

return len;
 80037a4:	687b      	ldr	r3, [r7, #4]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e009      	b.n	80037d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	60ba      	str	r2, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fc45 	bl	8001058 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	dbf1      	blt.n	80037c0 <_write+0x12>
	}
	return len;
 80037dc:	687b      	ldr	r3, [r7, #4]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <_close>:

int _close(int file)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
	return -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800380e:	605a      	str	r2, [r3, #4]
	return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_isatty>:

int _isatty(int file)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
	return 1;
 8003826:	2301      	movs	r3, #1
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
	return 0;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <_sbrk+0x5c>)
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <_sbrk+0x60>)
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <_sbrk+0x64>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <_sbrk+0x64>)
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <_sbrk+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <_sbrk+0x64>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	429a      	cmp	r2, r3
 800387e:	d207      	bcs.n	8003890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003880:	f004 ffbe 	bl	8008800 <__errno>
 8003884:	4603      	mov	r3, r0
 8003886:	220c      	movs	r2, #12
 8003888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e009      	b.n	80038a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <_sbrk+0x64>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <_sbrk+0x64>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <_sbrk+0x64>)
 80038a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20020000 	.word	0x20020000
 80038b0:	00000400 	.word	0x00000400
 80038b4:	200002a8 	.word	0x200002a8
 80038b8:	20000440 	.word	0x20000440

080038bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <SystemInit+0x20>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <SystemInit+0x20>)
 80038c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <MX_USART1_UART_Init+0x4c>)
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <MX_USART1_UART_Init+0x50>)
 80038e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <MX_USART1_UART_Init+0x4c>)
 80038ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <MX_USART1_UART_Init+0x4c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <MX_USART1_UART_Init+0x4c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <MX_USART1_UART_Init+0x4c>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <MX_USART1_UART_Init+0x4c>)
 8003906:	220c      	movs	r2, #12
 8003908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <MX_USART1_UART_Init+0x4c>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <MX_USART1_UART_Init+0x4c>)
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <MX_USART1_UART_Init+0x4c>)
 8003918:	f003 fe36 	bl	8007588 <HAL_UART_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003922:	f7ff fe47 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000035c 	.word	0x2000035c
 8003930:	40011000 	.word	0x40011000

08003934 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <MX_USART2_UART_Init+0x50>)
 800393c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 8003940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 800394e:	2200      	movs	r2, #0
 8003950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 800395a:	220c      	movs	r2, #12
 800395c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800396a:	4805      	ldr	r0, [pc, #20]	; (8003980 <MX_USART2_UART_Init+0x4c>)
 800396c:	f003 fe0c 	bl	8007588 <HAL_UART_Init>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003976:	f7ff fe1d 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200003e4 	.word	0x200003e4
 8003984:	40004400 	.word	0x40004400

08003988 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <MX_USART6_UART_Init+0x50>)
 8003990:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 8003994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003998:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039ae:	220c      	movs	r2, #12
 80039b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_USART6_UART_Init+0x4c>)
 80039c0:	f003 fde2 	bl	8007588 <HAL_UART_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80039ca:	f7ff fdf3 	bl	80035b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200003a0 	.word	0x200003a0
 80039d8:	40011400 	.word	0x40011400

080039dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a53      	ldr	r2, [pc, #332]	; (8003b48 <HAL_UART_MspInit+0x16c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d135      	bne.n	8003a6a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	4b52      	ldr	r3, [pc, #328]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a4a      	ldr	r2, [pc, #296]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a48:	2307      	movs	r3, #7
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	4619      	mov	r1, r3
 8003a52:	483f      	ldr	r0, [pc, #252]	; (8003b50 <HAL_UART_MspInit+0x174>)
 8003a54:	f000 faf6 	bl	8004044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	2025      	movs	r0, #37	; 0x25
 8003a5e:	f000 fa1a 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a62:	2025      	movs	r0, #37	; 0x25
 8003a64:	f000 fa33 	bl	8003ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003a68:	e06a      	b.n	8003b40 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <HAL_UART_MspInit+0x178>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d12c      	bne.n	8003ace <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a33      	ldr	r2, [pc, #204]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003aac:	230c      	movs	r3, #12
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003abc:	2307      	movs	r3, #7
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4822      	ldr	r0, [pc, #136]	; (8003b50 <HAL_UART_MspInit+0x174>)
 8003ac8:	f000 fabc 	bl	8004044 <HAL_GPIO_Init>
}
 8003acc:	e038      	b.n	8003b40 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <HAL_UART_MspInit+0x17c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d133      	bne.n	8003b40 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003ae2:	f043 0320 	orr.w	r3, r3, #32
 8003ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6313      	str	r3, [r2, #48]	; 0x30
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_UART_MspInit+0x170>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b10:	23c0      	movs	r3, #192	; 0xc0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b20:	2308      	movs	r3, #8
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480c      	ldr	r0, [pc, #48]	; (8003b5c <HAL_UART_MspInit+0x180>)
 8003b2c:	f000 fa8a 	bl	8004044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	2047      	movs	r0, #71	; 0x47
 8003b36:	f000 f9ae 	bl	8003e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b3a:	2047      	movs	r0, #71	; 0x47
 8003b3c:	f000 f9c7 	bl	8003ece <HAL_NVIC_EnableIRQ>
}
 8003b40:	bf00      	nop
 8003b42:	3738      	adds	r7, #56	; 0x38
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40011000 	.word	0x40011000
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40004400 	.word	0x40004400
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40020800 	.word	0x40020800

08003b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b66:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b6c:	e002      	b.n	8003b74 <LoopCopyDataInit>

08003b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b72:	3304      	adds	r3, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b78:	d3f9      	bcc.n	8003b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b7c:	4c0b      	ldr	r4, [pc, #44]	; (8003bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b80:	e001      	b.n	8003b86 <LoopFillZerobss>

08003b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b84:	3204      	adds	r2, #4

08003b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b88:	d3fb      	bcc.n	8003b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b8a:	f7ff fe97 	bl	80038bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f004 fe3d 	bl	800880c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b92:	f7ff faed 	bl	8003170 <main>
  bx  lr    
 8003b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003ba4:	0800e5b8 	.word	0x0800e5b8
  ldr r2, =_sbss
 8003ba8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003bac:	2000043c 	.word	0x2000043c

08003bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC_IRQHandler>
	...

08003bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_Init+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_Init+0x40>)
 8003bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <HAL_Init+0x40>)
 8003bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_Init+0x40>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_Init+0x40>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bdc:	2003      	movs	r0, #3
 8003bde:	f000 f94f 	bl	8003e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003be2:	2000      	movs	r0, #0
 8003be4:	f000 f808 	bl	8003bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be8:	f7ff fd28 	bl	800363c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00

08003bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_InitTick+0x54>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_InitTick+0x58>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f967 	bl	8003eea <HAL_SYSTICK_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00e      	b.n	8003c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d80a      	bhi.n	8003c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	f000 f92f 	bl	8003e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c38:	4a06      	ldr	r2, [pc, #24]	; (8003c54 <HAL_InitTick+0x5c>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	2000000c 	.word	0x2000000c
 8003c54:	20000008 	.word	0x20000008

08003c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_IncTick+0x20>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_IncTick+0x24>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_IncTick+0x24>)
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000000c 	.word	0x2000000c
 8003c7c:	20000428 	.word	0x20000428

08003c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return uwTick;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_GetTick+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000428 	.word	0x20000428

08003c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7ff ffee 	bl	8003c80 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d005      	beq.n	8003cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_Delay+0x44>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cbe:	bf00      	nop
 8003cc0:	f7ff ffde 	bl	8003c80 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8f7      	bhi.n	8003cc0 <HAL_Delay+0x28>
  {
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <__NVIC_SetPriorityGrouping+0x44>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <__NVIC_GetPriorityGrouping+0x18>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	0a1b      	lsrs	r3, r3, #8
 8003d32:	f003 0307 	and.w	r3, r3, #7
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db0b      	blt.n	8003d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	4907      	ldr	r1, [pc, #28]	; (8003d7c <__NVIC_EnableIRQ+0x38>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2001      	movs	r0, #1
 8003d66:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000e100 	.word	0xe000e100

08003d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	db0a      	blt.n	8003daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	490c      	ldr	r1, [pc, #48]	; (8003dcc <__NVIC_SetPriority+0x4c>)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	440b      	add	r3, r1
 8003da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da8:	e00a      	b.n	8003dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4908      	ldr	r1, [pc, #32]	; (8003dd0 <__NVIC_SetPriority+0x50>)
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3b04      	subs	r3, #4
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	761a      	strb	r2, [r3, #24]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000e100 	.word	0xe000e100
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	bf28      	it	cs
 8003df2:	2304      	movcs	r3, #4
 8003df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d902      	bls.n	8003e04 <NVIC_EncodePriority+0x30>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3b03      	subs	r3, #3
 8003e02:	e000      	b.n	8003e06 <NVIC_EncodePriority+0x32>
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	401a      	ands	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	43d9      	mvns	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	4313      	orrs	r3, r2
         );
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4c:	d301      	bcc.n	8003e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00f      	b.n	8003e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <SysTick_Config+0x40>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f7ff ff8e 	bl	8003d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <SysTick_Config+0x40>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <SysTick_Config+0x40>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000e010 	.word	0xe000e010

08003e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff29 	bl	8003ce0 <__NVIC_SetPriorityGrouping>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff3e 	bl	8003d28 <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff8e 	bl	8003dd4 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5d 	bl	8003d80 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff31 	bl	8003d44 <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa2 	bl	8003e3c <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7ff feb6 	bl	8003c80 <HAL_GetTick>
 8003f14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d008      	beq.n	8003f34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e052      	b.n	8003fda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0216 	bic.w	r2, r2, #22
 8003f42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_DMA_Abort+0x62>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0208 	bic.w	r2, r2, #8
 8003f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f84:	e013      	b.n	8003fae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f86:	f7ff fe7b 	bl	8003c80 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d90c      	bls.n	8003fae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e015      	b.n	8003fda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e4      	bne.n	8003f86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	223f      	movs	r2, #63	; 0x3f
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d004      	beq.n	8004000 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e00c      	b.n	800401a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2205      	movs	r2, #5
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004034:	b2db      	uxtb	r3, r3
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	; 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e159      	b.n	8004314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004060:	2201      	movs	r2, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	f040 8148 	bne.w	800430e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d005      	beq.n	8004096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	2b02      	cmp	r3, #2
 8004094:	d130      	bne.n	80040f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	2203      	movs	r2, #3
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040cc:	2201      	movs	r2, #1
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 0201 	and.w	r2, r3, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d017      	beq.n	8004134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d123      	bne.n	8004188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	08da      	lsrs	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3208      	adds	r2, #8
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	220f      	movs	r2, #15
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	08da      	lsrs	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3208      	adds	r2, #8
 8004182:	69b9      	ldr	r1, [r7, #24]
 8004184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0203 	and.w	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a2 	beq.w	800430e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <HAL_GPIO_Init+0x2e8>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	4a56      	ldr	r2, [pc, #344]	; (800432c <HAL_GPIO_Init+0x2e8>)
 80041d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d8:	6453      	str	r3, [r2, #68]	; 0x44
 80041da:	4b54      	ldr	r3, [pc, #336]	; (800432c <HAL_GPIO_Init+0x2e8>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e6:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_GPIO_Init+0x2ec>)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	220f      	movs	r2, #15
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a49      	ldr	r2, [pc, #292]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d019      	beq.n	8004246 <HAL_GPIO_Init+0x202>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a48      	ldr	r2, [pc, #288]	; (8004338 <HAL_GPIO_Init+0x2f4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_GPIO_Init+0x1fe>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a47      	ldr	r2, [pc, #284]	; (800433c <HAL_GPIO_Init+0x2f8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00d      	beq.n	800423e <HAL_GPIO_Init+0x1fa>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a46      	ldr	r2, [pc, #280]	; (8004340 <HAL_GPIO_Init+0x2fc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <HAL_GPIO_Init+0x1f6>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a45      	ldr	r2, [pc, #276]	; (8004344 <HAL_GPIO_Init+0x300>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <HAL_GPIO_Init+0x1f2>
 8004232:	2304      	movs	r3, #4
 8004234:	e008      	b.n	8004248 <HAL_GPIO_Init+0x204>
 8004236:	2307      	movs	r3, #7
 8004238:	e006      	b.n	8004248 <HAL_GPIO_Init+0x204>
 800423a:	2303      	movs	r3, #3
 800423c:	e004      	b.n	8004248 <HAL_GPIO_Init+0x204>
 800423e:	2302      	movs	r3, #2
 8004240:	e002      	b.n	8004248 <HAL_GPIO_Init+0x204>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_GPIO_Init+0x204>
 8004246:	2300      	movs	r3, #0
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	f002 0203 	and.w	r2, r2, #3
 800424e:	0092      	lsls	r2, r2, #2
 8004250:	4093      	lsls	r3, r2
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004258:	4935      	ldr	r1, [pc, #212]	; (8004330 <HAL_GPIO_Init+0x2ec>)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	3302      	adds	r3, #2
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_GPIO_Init+0x304>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800428a:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <HAL_GPIO_Init+0x304>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_GPIO_Init+0x304>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_GPIO_Init+0x304>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_GPIO_Init+0x304>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042de:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <HAL_GPIO_Init+0x304>)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_GPIO_Init+0x304>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004308:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <HAL_GPIO_Init+0x304>)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3301      	adds	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	f67f aea2 	bls.w	8004060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3724      	adds	r7, #36	; 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	40013800 	.word	0x40013800
 8004334:	40020000 	.word	0x40020000
 8004338:	40020400 	.word	0x40020400
 800433c:	40020800 	.word	0x40020800
 8004340:	40020c00 	.word	0x40020c00
 8004344:	40021000 	.word	0x40021000
 8004348:	40013c00 	.word	0x40013c00

0800434c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800435c:	787b      	ldrb	r3, [r7, #1]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004368:	e003      	b.n	8004372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	041a      	lsls	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	619a      	str	r2, [r3, #24]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e12b      	b.n	80045ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fe f8d6 	bl	8002558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043e4:	f003 f8a8 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
 80043e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a81      	ldr	r2, [pc, #516]	; (80045f4 <HAL_I2C_Init+0x274>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d807      	bhi.n	8004404 <HAL_I2C_Init+0x84>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a80      	ldr	r2, [pc, #512]	; (80045f8 <HAL_I2C_Init+0x278>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bf94      	ite	ls
 80043fc:	2301      	movls	r3, #1
 80043fe:	2300      	movhi	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e006      	b.n	8004412 <HAL_I2C_Init+0x92>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a7d      	ldr	r2, [pc, #500]	; (80045fc <HAL_I2C_Init+0x27c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0e7      	b.n	80045ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a78      	ldr	r2, [pc, #480]	; (8004600 <HAL_I2C_Init+0x280>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0c9b      	lsrs	r3, r3, #18
 8004424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a6a      	ldr	r2, [pc, #424]	; (80045f4 <HAL_I2C_Init+0x274>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d802      	bhi.n	8004454 <HAL_I2C_Init+0xd4>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	e009      	b.n	8004468 <HAL_I2C_Init+0xe8>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_I2C_Init+0x284>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	3301      	adds	r3, #1
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800447a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	495c      	ldr	r1, [pc, #368]	; (80045f4 <HAL_I2C_Init+0x274>)
 8004484:	428b      	cmp	r3, r1
 8004486:	d819      	bhi.n	80044bc <HAL_I2C_Init+0x13c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e59      	subs	r1, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fbb1 f3f3 	udiv	r3, r1, r3
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800449c:	400b      	ands	r3, r1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_I2C_Init+0x138>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e59      	subs	r1, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b6:	e051      	b.n	800455c <HAL_I2C_Init+0x1dc>
 80044b8:	2304      	movs	r3, #4
 80044ba:	e04f      	b.n	800455c <HAL_I2C_Init+0x1dc>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d111      	bne.n	80044e8 <HAL_I2C_Init+0x168>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d6:	3301      	adds	r3, #1
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e012      	b.n	800450e <HAL_I2C_Init+0x18e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e58      	subs	r0, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	0099      	lsls	r1, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Init+0x196>
 8004512:	2301      	movs	r3, #1
 8004514:	e022      	b.n	800455c <HAL_I2C_Init+0x1dc>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10e      	bne.n	800453c <HAL_I2C_Init+0x1bc>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1e58      	subs	r0, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	440b      	add	r3, r1
 800452c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004530:	3301      	adds	r3, #1
 8004532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	e00f      	b.n	800455c <HAL_I2C_Init+0x1dc>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e58      	subs	r0, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	0099      	lsls	r1, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	6809      	ldr	r1, [r1, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800458a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6911      	ldr	r1, [r2, #16]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68d2      	ldr	r2, [r2, #12]
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	430b      	orrs	r3, r1
 800459e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	000186a0 	.word	0x000186a0
 80045f8:	001e847f 	.word	0x001e847f
 80045fc:	003d08ff 	.word	0x003d08ff
 8004600:	431bde83 	.word	0x431bde83
 8004604:	10624dd3 	.word	0x10624dd3

08004608 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004622:	f7ff fb2d 	bl	8003c80 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	f040 80d9 	bne.w	80047e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2319      	movs	r3, #25
 800463c:	2201      	movs	r2, #1
 800463e:	496d      	ldr	r1, [pc, #436]	; (80047f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f002 f903 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e0cc      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Write+0x56>
 800465a:	2302      	movs	r3, #2
 800465c:	e0c5      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	; 0x21
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a4d      	ldr	r2, [pc, #308]	; (80047f8 <HAL_I2C_Mem_Write+0x1f0>)
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c6:	88f8      	ldrh	r0, [r7, #6]
 80046c8:	893a      	ldrh	r2, [r7, #8]
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4603      	mov	r3, r0
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f001 fe92 	bl	8006400 <I2C_RequestMemoryWrite>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d052      	beq.n	8004788 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e081      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f002 f984 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d107      	bne.n	800470e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e06b      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d11b      	bne.n	8004788 <HAL_I2C_Mem_Write+0x180>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d017      	beq.n	8004788 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1aa      	bne.n	80046e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f002 f970 	bl	8006a7a <I2C_WaitOnBTFFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d107      	bne.n	80047b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e016      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	00100002 	.word	0x00100002
 80047f8:	ffff0000 	.word	0xffff0000

080047fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08c      	sub	sp, #48	; 0x30
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004816:	f7ff fa33 	bl	8003c80 <HAL_GetTick>
 800481a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	f040 8208 	bne.w	8004c3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2319      	movs	r3, #25
 8004830:	2201      	movs	r2, #1
 8004832:	497b      	ldr	r1, [pc, #492]	; (8004a20 <HAL_I2C_Mem_Read+0x224>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f002 f809 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	e1fb      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Mem_Read+0x56>
 800484e:	2302      	movs	r3, #2
 8004850:	e1f4      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d007      	beq.n	8004878 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2222      	movs	r2, #34	; 0x22
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a5b      	ldr	r2, [pc, #364]	; (8004a24 <HAL_I2C_Mem_Read+0x228>)
 80048b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	8979      	ldrh	r1, [r7, #10]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4603      	mov	r3, r0
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f001 fe2e 	bl	800652c <I2C_RequestMemoryRead>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1b0      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d113      	bne.n	800490a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e184      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	2b01      	cmp	r3, #1
 8004910:	d11b      	bne.n	800494a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e164      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494e:	2b02      	cmp	r3, #2
 8004950:	d11b      	bne.n	800498a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	e144      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049a0:	e138      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	f200 80f1 	bhi.w	8004b8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d123      	bne.n	80049fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f002 f8d1 	bl	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e139      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049fa:	e10b      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d14e      	bne.n	8004aa2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4906      	ldr	r1, [pc, #24]	; (8004a28 <HAL_I2C_Mem_Read+0x22c>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 ff1c 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e10e      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
 8004a1e:	bf00      	nop
 8004a20:	00100002 	.word	0x00100002
 8004a24:	ffff0000 	.word	0xffff0000
 8004a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa0:	e0b8      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4966      	ldr	r1, [pc, #408]	; (8004c44 <HAL_I2C_Mem_Read+0x448>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f001 fecd 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0bf      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2200      	movs	r2, #0
 8004b06:	494f      	ldr	r1, [pc, #316]	; (8004c44 <HAL_I2C_Mem_Read+0x448>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f001 fe9f 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e091      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b8c:	e042      	b.n	8004c14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f001 ffe4 	bl	8006b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e04c      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d118      	bne.n	8004c14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f47f aec2 	bne.w	80049a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3728      	adds	r7, #40	; 0x28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	00010004 	.word	0x00010004

08004c48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d003      	beq.n	8004c80 <HAL_I2C_EV_IRQHandler+0x38>
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	f040 80c1 	bne.w	8004e02 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ca0:	d003      	beq.n	8004caa <HAL_I2C_EV_IRQHandler+0x62>
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ca8:	d101      	bne.n	8004cae <HAL_I2C_EV_IRQHandler+0x66>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x68>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f000 8132 	beq.w	8004f1a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <HAL_I2C_EV_IRQHandler+0x92>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	0a5b      	lsrs	r3, r3, #9
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 ffcc 	bl	8006c6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd79 	bl	80057ca <I2C_Master_SB>
 8004cd8:	e092      	b.n	8004e00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0xb2>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fdef 	bl	80058d6 <I2C_Master_ADD10>
 8004cf8:	e082      	b.n	8004e00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_I2C_EV_IRQHandler+0xd2>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fe09 	bl	800592a <I2C_Master_ADDR>
 8004d18:	e072      	b.n	8004e00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d03b      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d34:	f000 80f3 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	09db      	lsrs	r3, r3, #7
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00f      	beq.n	8004d64 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	0a9b      	lsrs	r3, r3, #10
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f9f3 	bl	8005148 <I2C_MasterTransmit_TXE>
 8004d62:	e04d      	b.n	8004e00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80d6 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	0a5b      	lsrs	r3, r3, #9
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80cf 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d80:	7bbb      	ldrb	r3, [r7, #14]
 8004d82:	2b21      	cmp	r3, #33	; 0x21
 8004d84:	d103      	bne.n	8004d8e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa7a 	bl	8005280 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d8c:	e0c7      	b.n	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	f040 80c4 	bne.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fae8 	bl	800536c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9c:	e0bf      	b.n	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dac:	f000 80b7 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00f      	beq.n	8004ddc <HAL_I2C_EV_IRQHandler+0x194>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	0a9b      	lsrs	r3, r3, #10
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_I2C_EV_IRQHandler+0x194>
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb5d 	bl	8005494 <I2C_MasterReceive_RXNE>
 8004dda:	e011      	b.n	8004e00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	089b      	lsrs	r3, r3, #2
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 809a 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	0a5b      	lsrs	r3, r3, #9
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8093 	beq.w	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fbfc 	bl	80055f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dfe:	e08e      	b.n	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e00:	e08d      	b.n	8004f1e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	e007      	b.n	8004e24 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <HAL_I2C_EV_IRQHandler+0x20e>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	0a5b      	lsrs	r3, r3, #9
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e4c:	69b9      	ldr	r1, [r7, #24]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ffba 	bl	8005dc8 <I2C_Slave_ADDR>
 8004e54:	e066      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <HAL_I2C_EV_IRQHandler+0x22e>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	0a5b      	lsrs	r3, r3, #9
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fff4 	bl	8005e5c <I2C_Slave_STOPF>
 8004e74:	e056      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	2b21      	cmp	r3, #33	; 0x21
 8004e7a:	d002      	beq.n	8004e82 <HAL_I2C_EV_IRQHandler+0x23a>
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	2b29      	cmp	r3, #41	; 0x29
 8004e80:	d125      	bne.n	8004ece <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	09db      	lsrs	r3, r3, #7
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x266>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	0a9b      	lsrs	r3, r3, #10
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x266>
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fed0 	bl	8005c4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eac:	e039      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d033      	beq.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2da>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	0a5b      	lsrs	r3, r3, #9
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d02d      	beq.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fefd 	bl	8005cc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ecc:	e029      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	099b      	lsrs	r3, r3, #6
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00f      	beq.n	8004efa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	0a9b      	lsrs	r3, r3, #10
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 ff08 	bl	8005d08 <I2C_SlaveReceive_RXNE>
 8004ef8:	e014      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	0a5b      	lsrs	r3, r3, #9
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ff36 	bl	8005d84 <I2C_SlaveReceive_BTF>
 8004f18:	e004      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08a      	sub	sp, #40	; 0x28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	0a1b      	lsrs	r3, r3, #8
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00e      	beq.n	8004f78 <HAL_I2C_ER_IRQHandler+0x4e>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	0a1b      	lsrs	r3, r3, #8
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <HAL_I2C_ER_IRQHandler+0x78>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f043 0302 	orr.w	r3, r3, #2
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004fa0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	0a9b      	lsrs	r3, r3, #10
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d03f      	beq.n	800502e <HAL_I2C_ER_IRQHandler+0x104>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d039      	beq.n	800502e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004fba:	7efb      	ldrb	r3, [r7, #27]
 8004fbc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004fd4:	7ebb      	ldrb	r3, [r7, #26]
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d112      	bne.n	8005000 <HAL_I2C_ER_IRQHandler+0xd6>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <HAL_I2C_ER_IRQHandler+0xd6>
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	2b21      	cmp	r3, #33	; 0x21
 8004fe4:	d008      	beq.n	8004ff8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	2b29      	cmp	r3, #41	; 0x29
 8004fea:	d005      	beq.n	8004ff8 <HAL_I2C_ER_IRQHandler+0xce>
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	2b28      	cmp	r3, #40	; 0x28
 8004ff0:	d106      	bne.n	8005000 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b21      	cmp	r3, #33	; 0x21
 8004ff6:	d103      	bne.n	8005000 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 f85f 	bl	80060bc <I2C_Slave_AF>
 8004ffe:	e016      	b.n	800502e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005008:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	f043 0304 	orr.w	r3, r3, #4
 8005010:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005012:	7efb      	ldrb	r3, [r7, #27]
 8005014:	2b10      	cmp	r3, #16
 8005016:	d002      	beq.n	800501e <HAL_I2C_ER_IRQHandler+0xf4>
 8005018:	7efb      	ldrb	r3, [r7, #27]
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d107      	bne.n	800502e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	0adb      	lsrs	r3, r3, #11
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00e      	beq.n	8005058 <HAL_I2C_ER_IRQHandler+0x12e>
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	f043 0308 	orr.w	r3, r3, #8
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005056:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d008      	beq.n	8005070 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 f896 	bl	800619c <I2C_ITError>
  }
}
 8005070:	bf00      	nop
 8005072:	3728      	adds	r7, #40	; 0x28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
 80050d4:	4613      	mov	r3, r2
 80050d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d150      	bne.n	8005210 <I2C_MasterTransmit_TXE+0xc8>
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b21      	cmp	r3, #33	; 0x21
 8005172:	d14d      	bne.n	8005210 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d01d      	beq.n	80051b6 <I2C_MasterTransmit_TXE+0x6e>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b20      	cmp	r3, #32
 800517e:	d01a      	beq.n	80051b6 <I2C_MasterTransmit_TXE+0x6e>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005186:	d016      	beq.n	80051b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005196:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2211      	movs	r2, #17
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff62 	bl	8005078 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051b4:	e060      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d107      	bne.n	8005200 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ff7d 	bl	80050f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051fe:	e03b      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff35 	bl	8005078 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800520e:	e033      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b21      	cmp	r3, #33	; 0x21
 8005214:	d005      	beq.n	8005222 <I2C_MasterTransmit_TXE+0xda>
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d12d      	bne.n	8005278 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b22      	cmp	r3, #34	; 0x22
 8005220:	d12a      	bne.n	8005278 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800523c:	e01c      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d103      	bne.n	8005252 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f88e 	bl	800536c <I2C_MemoryTransmit_TXE_BTF>
}
 8005250:	e012      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005276:	e7ff      	b.n	8005278 <I2C_MasterTransmit_TXE+0x130>
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b21      	cmp	r3, #33	; 0x21
 8005298:	d164      	bne.n	8005364 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	781a      	ldrb	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80052c8:	e04c      	b.n	8005364 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d01d      	beq.n	800530c <I2C_MasterTransmit_BTF+0x8c>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d01a      	beq.n	800530c <I2C_MasterTransmit_BTF+0x8c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052dc:	d016      	beq.n	800530c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2211      	movs	r2, #17
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff feb7 	bl	8005078 <HAL_I2C_MasterTxCpltCallback>
}
 800530a:	e02b      	b.n	8005364 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800531a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b40      	cmp	r3, #64	; 0x40
 8005344:	d107      	bne.n	8005356 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fed2 	bl	80050f8 <HAL_I2C_MemTxCpltCallback>
}
 8005354:	e006      	b.n	8005364 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe8a 	bl	8005078 <HAL_I2C_MasterTxCpltCallback>
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10b      	bne.n	80053a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005390:	b2da      	uxtb	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80053a2:	e073      	b.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	121b      	asrs	r3, r3, #8
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053be:	e065      	b.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10b      	bne.n	80053e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053de:	e055      	b.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d151      	bne.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b22      	cmp	r3, #34	; 0x22
 80053ec:	d10d      	bne.n	800540a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005408:	e040      	b.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d015      	beq.n	8005440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b21      	cmp	r3, #33	; 0x21
 8005418:	d112      	bne.n	8005440 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800543e:	e025      	b.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d120      	bne.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b21      	cmp	r3, #33	; 0x21
 800544e:	d11d      	bne.n	800548c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800545e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fe36 	bl	80050f8 <HAL_I2C_MemTxCpltCallback>
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b22      	cmp	r3, #34	; 0x22
 80054a6:	f040 80a2 	bne.w	80055ee <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d921      	bls.n	80054fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	f040 8082 	bne.w	80055ee <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80054fa:	e078      	b.n	80055ee <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	2b02      	cmp	r3, #2
 8005502:	d074      	beq.n	80055ee <I2C_MasterReceive_RXNE+0x15a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d002      	beq.n	8005510 <I2C_MasterReceive_RXNE+0x7c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d16e      	bne.n	80055ee <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 faf3 	bl	8006afc <I2C_WaitOnSTOPRequestThroughIT>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d142      	bne.n	80055a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800553a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d10a      	bne.n	800558c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fdc1 	bl	800510c <HAL_I2C_MemRxCpltCallback>
}
 800558a:	e030      	b.n	80055ee <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2212      	movs	r2, #18
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fd76 	bl	800508c <HAL_I2C_MasterRxCpltCallback>
}
 80055a0:	e025      	b.n	80055ee <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fd99 	bl	8005120 <HAL_I2C_ErrorCallback>
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b04      	cmp	r3, #4
 800560c:	d11b      	bne.n	8005646 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005644:	e0bd      	b.n	80057c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d129      	bne.n	80056a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d00a      	beq.n	800567c <I2C_MasterReceive_BTF+0x86>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d007      	beq.n	800567c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056a2:	e08e      	b.n	80057c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d176      	bne.n	800579c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <I2C_MasterReceive_BTF+0xc4>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d108      	bne.n	80056cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e019      	b.n	8005700 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d002      	beq.n	80056d8 <I2C_MasterReceive_BTF+0xe2>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d108      	bne.n	80056ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e00a      	b.n	8005700 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d007      	beq.n	8005700 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800575a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d10a      	bne.n	8005786 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fcc4 	bl	800510c <HAL_I2C_MemRxCpltCallback>
}
 8005784:	e01d      	b.n	80057c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2212      	movs	r2, #18
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fc79 	bl	800508c <HAL_I2C_MasterRxCpltCallback>
}
 800579a:	e012      	b.n	80057c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d117      	bne.n	800580e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80057f8:	e067      	b.n	80058ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	b2da      	uxtb	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	611a      	str	r2, [r3, #16]
}
 800580c:	e05d      	b.n	80058ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005816:	d133      	bne.n	8005880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b21      	cmp	r3, #33	; 0x21
 8005822:	d109      	bne.n	8005838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	b2db      	uxtb	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	e008      	b.n	800584a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <I2C_Master_SB+0x92>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d108      	bne.n	800586e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d032      	beq.n	80058ca <I2C_Master_SB+0x100>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02d      	beq.n	80058ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587c:	605a      	str	r2, [r3, #4]
}
 800587e:	e024      	b.n	80058ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10e      	bne.n	80058a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	b29b      	uxth	r3, r3
 800588e:	11db      	asrs	r3, r3, #7
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 0306 	and.w	r3, r3, #6
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f063 030f 	orn	r3, r3, #15
 800589c:	b2da      	uxtb	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]
}
 80058a4:	e011      	b.n	80058ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d10d      	bne.n	80058ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	11db      	asrs	r3, r3, #7
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0306 	and.w	r3, r3, #6
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f063 030e 	orn	r3, r3, #14
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <I2C_Master_ADD10+0x26>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <I2C_Master_ADD10+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591c:	605a      	str	r2, [r3, #4]
  }
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800592a:	b480      	push	{r7}
 800592c:	b091      	sub	sp, #68	; 0x44
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b22      	cmp	r3, #34	; 0x22
 8005952:	f040 8169 	bne.w	8005c28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <I2C_Master_ADDR+0x54>
 800595e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d10b      	bne.n	800597e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005966:	2300      	movs	r3, #0
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	633b      	str	r3, [r7, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	633b      	str	r3, [r7, #48]	; 0x30
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	e160      	b.n	8005c40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	2b00      	cmp	r3, #0
 8005984:	d11d      	bne.n	80059c2 <I2C_Master_ADDR+0x98>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800598e:	d118      	bne.n	80059c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005990:	2300      	movs	r3, #0
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	651a      	str	r2, [r3, #80]	; 0x50
 80059c0:	e13e      	b.n	8005c40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d113      	bne.n	80059f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e115      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	f040 808a 	bne.w	8005b14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a06:	d137      	bne.n	8005a78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a26:	d113      	bne.n	8005a50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	e0e7      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e0d3      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d02e      	beq.n	8005adc <I2C_Master_ADDR+0x1b2>
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d02b      	beq.n	8005adc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	2b12      	cmp	r3, #18
 8005a88:	d102      	bne.n	8005a90 <I2C_Master_ADDR+0x166>
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d125      	bne.n	8005adc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d00e      	beq.n	8005ab4 <I2C_Master_ADDR+0x18a>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d00b      	beq.n	8005ab4 <I2C_Master_ADDR+0x18a>
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d008      	beq.n	8005ab4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e007      	b.n	8005ac4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	e0a1      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e085      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d14d      	bne.n	8005bba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d016      	beq.n	8005b52 <I2C_Master_ADDR+0x228>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d013      	beq.n	8005b52 <I2C_Master_ADDR+0x228>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d010      	beq.n	8005b52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e007      	b.n	8005b62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b70:	d117      	bne.n	8005ba2 <I2C_Master_ADDR+0x278>
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b78:	d00b      	beq.n	8005b92 <I2C_Master_ADDR+0x268>
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d008      	beq.n	8005b92 <I2C_Master_ADDR+0x268>
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d005      	beq.n	8005b92 <I2C_Master_ADDR+0x268>
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d002      	beq.n	8005b92 <I2C_Master_ADDR+0x268>
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d107      	bne.n	8005ba2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ba0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	e032      	b.n	8005c20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd8:	d117      	bne.n	8005c0a <I2C_Master_ADDR+0x2e0>
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005be0:	d00b      	beq.n	8005bfa <I2C_Master_ADDR+0x2d0>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d008      	beq.n	8005bfa <I2C_Master_ADDR+0x2d0>
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d005      	beq.n	8005bfa <I2C_Master_ADDR+0x2d0>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d002      	beq.n	8005bfa <I2C_Master_ADDR+0x2d0>
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d107      	bne.n	8005c0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c26:	e00b      	b.n	8005c40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
}
 8005c3e:	e7ff      	b.n	8005c40 <I2C_Master_ADDR+0x316>
 8005c40:	bf00      	nop
 8005c42:	3744      	adds	r7, #68	; 0x44
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02b      	beq.n	8005cbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d114      	bne.n	8005cbe <I2C_SlaveTransmit_TXE+0x72>
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b29      	cmp	r3, #41	; 0x29
 8005c98:	d111      	bne.n	8005cbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2221      	movs	r2, #33	; 0x21
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2228      	movs	r2, #40	; 0x28
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff f9f1 	bl	80050a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d02c      	beq.n	8005d7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d114      	bne.n	8005d7c <I2C_SlaveReceive_RXNE+0x74>
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b2a      	cmp	r3, #42	; 0x2a
 8005d56:	d111      	bne.n	8005d7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2222      	movs	r2, #34	; 0x22
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2228      	movs	r2, #40	; 0x28
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff f99c 	bl	80050b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005de2:	2b28      	cmp	r3, #40	; 0x28
 8005de4:	d127      	bne.n	8005e36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	09db      	lsrs	r3, r3, #7
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	81bb      	strh	r3, [r7, #12]
 8005e18:	e002      	b.n	8005e20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e28:	89ba      	ldrh	r2, [r7, #12]
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff f94a 	bl	80050c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e34:	e00e      	b.n	8005e54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d172      	bne.n	8005fa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b22      	cmp	r3, #34	; 0x22
 8005ebe:	d002      	beq.n	8005ec6 <I2C_Slave_STOPF+0x6a>
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec4:	d135      	bne.n	8005f32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe f891 	bl	8004026 <HAL_DMA_GetState>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d049      	beq.n	8005f9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	4a69      	ldr	r2, [pc, #420]	; (80060b4 <I2C_Slave_STOPF+0x258>)
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe f863 	bl	8003fe2 <HAL_DMA_Abort_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d03d      	beq.n	8005f9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f30:	e035      	b.n	8005f9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f043 0204 	orr.w	r2, r3, #4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe f85b 	bl	8004026 <HAL_DMA_GetState>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d014      	beq.n	8005fa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	4a4e      	ldr	r2, [pc, #312]	; (80060b4 <I2C_Slave_STOPF+0x258>)
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe f82d 	bl	8003fe2 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	e000      	b.n	8005fa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03e      	beq.n	8006028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d112      	bne.n	8005fde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d112      	bne.n	8006012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0204 	orr.w	r2, r3, #4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8b3 	bl	800619c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006036:	e039      	b.n	80060ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2b2a      	cmp	r3, #42	; 0x2a
 800603c:	d109      	bne.n	8006052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2228      	movs	r2, #40	; 0x28
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff f831 	bl	80050b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b28      	cmp	r3, #40	; 0x28
 800605c:	d111      	bne.n	8006082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <I2C_Slave_STOPF+0x25c>)
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff f832 	bl	80050e4 <HAL_I2C_ListenCpltCallback>
}
 8006080:	e014      	b.n	80060ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	2b22      	cmp	r3, #34	; 0x22
 8006088:	d002      	beq.n	8006090 <I2C_Slave_STOPF+0x234>
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b22      	cmp	r3, #34	; 0x22
 800608e:	d10d      	bne.n	80060ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff f804 	bl	80050b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	080066fd 	.word	0x080066fd
 80060b8:	ffff0000 	.word	0xffff0000

080060bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d002      	beq.n	80060de <I2C_Slave_AF+0x22>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d129      	bne.n	8006132 <I2C_Slave_AF+0x76>
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b28      	cmp	r3, #40	; 0x28
 80060e2:	d126      	bne.n	8006132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2c      	ldr	r2, [pc, #176]	; (8006198 <I2C_Slave_AF+0xdc>)
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fe ffda 	bl	80050e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006130:	e02e      	b.n	8006190 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2b21      	cmp	r3, #33	; 0x21
 8006136:	d126      	bne.n	8006186 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <I2C_Slave_AF+0xdc>)
 800613c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2221      	movs	r2, #33	; 0x21
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800616c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fe ff8e 	bl	80050a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006184:	e004      	b.n	8006190 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618e:	615a      	str	r2, [r3, #20]
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	ffff0000 	.word	0xffff0000

0800619c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d002      	beq.n	80061c0 <I2C_ITError+0x24>
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d10a      	bne.n	80061d6 <I2C_ITError+0x3a>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b22      	cmp	r3, #34	; 0x22
 80061c4:	d107      	bne.n	80061d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061dc:	2b28      	cmp	r3, #40	; 0x28
 80061de:	d107      	bne.n	80061f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2228      	movs	r2, #40	; 0x28
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061ee:	e015      	b.n	800621c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fe:	d00a      	beq.n	8006216 <I2C_ITError+0x7a>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b60      	cmp	r3, #96	; 0x60
 8006204:	d007      	beq.n	8006216 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622a:	d162      	bne.n	80062f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d020      	beq.n	800628c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	4a6a      	ldr	r2, [pc, #424]	; (80063f8 <I2C_ITError+0x25c>)
 8006250:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fec3 	bl	8003fe2 <HAL_DMA_Abort_IT>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8089 	beq.w	8006376 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	e074      	b.n	8006376 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	4a59      	ldr	r2, [pc, #356]	; (80063f8 <I2C_ITError+0x25c>)
 8006292:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fea2 	bl	8003fe2 <HAL_DMA_Abort_IT>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d068      	beq.n	8006376 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d10b      	bne.n	80062ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
 80062f0:	e041      	b.n	8006376 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b60      	cmp	r3, #96	; 0x60
 80062fc:	d125      	bne.n	800634a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d10b      	bne.n	8006332 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fe fef6 	bl	8005134 <HAL_I2C_AbortCpltCallback>
 8006348:	e015      	b.n	8006376 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d10b      	bne.n	8006370 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fe fed5 	bl	8005120 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10e      	bne.n	80063a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d113      	bne.n	80063f0 <I2C_ITError+0x254>
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b28      	cmp	r3, #40	; 0x28
 80063cc:	d110      	bne.n	80063f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <I2C_ITError+0x260>)
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fe fe7a 	bl	80050e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	080066fd 	.word	0x080066fd
 80063fc:	ffff0000 	.word	0xffff0000

08006400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4603      	mov	r3, r0
 8006410:	817b      	strh	r3, [r7, #10]
 8006412:	460b      	mov	r3, r1
 8006414:	813b      	strh	r3, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	2200      	movs	r2, #0
 8006432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fa08 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00d      	beq.n	800645e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006450:	d103      	bne.n	800645a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006458:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e05f      	b.n	800651e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800646c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	492d      	ldr	r1, [pc, #180]	; (8006528 <I2C_RequestMemoryWrite+0x128>)
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa40 	bl	80068fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e04c      	b.n	800651e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649c:	6a39      	ldr	r1, [r7, #32]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 faaa 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d107      	bne.n	80064c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e02b      	b.n	800651e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d105      	bne.n	80064d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	611a      	str	r2, [r3, #16]
 80064d6:	e021      	b.n	800651c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064d8:	893b      	ldrh	r3, [r7, #8]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e8:	6a39      	ldr	r1, [r7, #32]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fa84 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d107      	bne.n	800650e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e005      	b.n	800651e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006512:	893b      	ldrh	r3, [r7, #8]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	00010002 	.word	0x00010002

0800652c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	4608      	mov	r0, r1
 8006536:	4611      	mov	r1, r2
 8006538:	461a      	mov	r2, r3
 800653a:	4603      	mov	r3, r0
 800653c:	817b      	strh	r3, [r7, #10]
 800653e:	460b      	mov	r3, r1
 8006540:	813b      	strh	r3, [r7, #8]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006554:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	2200      	movs	r2, #0
 800656e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f96a 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00d      	beq.n	800659a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658c:	d103      	bne.n	8006596 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e0aa      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800659a:	897b      	ldrh	r3, [r7, #10]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	4952      	ldr	r1, [pc, #328]	; (80066f8 <I2C_RequestMemoryRead+0x1cc>)
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f9a2 	bl	80068fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e097      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	6a39      	ldr	r1, [r7, #32]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fa0c 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d107      	bne.n	80065fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e076      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d105      	bne.n	8006614 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006608:	893b      	ldrh	r3, [r7, #8]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	611a      	str	r2, [r3, #16]
 8006612:	e021      	b.n	8006658 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006614:	893b      	ldrh	r3, [r7, #8]
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	b29b      	uxth	r3, r3
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006624:	6a39      	ldr	r1, [r7, #32]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f9e6 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b04      	cmp	r3, #4
 8006638:	d107      	bne.n	800664a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e050      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800664e:	893b      	ldrh	r3, [r7, #8]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	6a39      	ldr	r1, [r7, #32]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f9cb 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	2b04      	cmp	r3, #4
 800666e:	d107      	bne.n	8006680 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e035      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2200      	movs	r2, #0
 800669c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f8d3 	bl	800684c <I2C_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	d103      	bne.n	80066c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e013      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066c8:	897b      	ldrh	r3, [r7, #10]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	4906      	ldr	r1, [pc, #24]	; (80066f8 <I2C_RequestMemoryRead+0x1cc>)
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f90b 	bl	80068fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00010002 	.word	0x00010002

080066fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006716:	4b4b      	ldr	r3, [pc, #300]	; (8006844 <I2C_DMAAbort+0x148>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	08db      	lsrs	r3, r3, #3
 800671c:	4a4a      	ldr	r2, [pc, #296]	; (8006848 <I2C_DMAAbort+0x14c>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0a1a      	lsrs	r2, r3, #8
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	00da      	lsls	r2, r3, #3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006742:	e00a      	b.n	800675a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b01      	subs	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d0ea      	beq.n	8006730 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006766:	2200      	movs	r2, #0
 8006768:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	2200      	movs	r2, #0
 8006778:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006788:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2200      	movs	r2, #0
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	2200      	movs	r2, #0
 800679e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	2200      	movs	r2, #0
 80067ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0201 	bic.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b60      	cmp	r3, #96	; 0x60
 80067ca:	d10e      	bne.n	80067ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2200      	movs	r2, #0
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7fe fca6 	bl	8005134 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067e8:	e027      	b.n	800683a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067ea:	7cfb      	ldrb	r3, [r7, #19]
 80067ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067f0:	2b28      	cmp	r3, #40	; 0x28
 80067f2:	d117      	bne.n	8006824 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006812:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2228      	movs	r2, #40	; 0x28
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006822:	e007      	b.n	8006834 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006834:	6978      	ldr	r0, [r7, #20]
 8006836:	f7fe fc73 	bl	8005120 <HAL_I2C_ErrorCallback>
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000004 	.word	0x20000004
 8006848:	14f8b589 	.word	0x14f8b589

0800684c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800685c:	e025      	b.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d021      	beq.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fd fa0b 	bl	8003c80 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d116      	bne.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0220 	orr.w	r2, r3, #32
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e023      	b.n	80068f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10d      	bne.n	80068d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	43da      	mvns	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	e00c      	b.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	43da      	mvns	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d0b6      	beq.n	800685e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006908:	e051      	b.n	80069ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006918:	d123      	bne.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006928:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006932:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f043 0204 	orr.w	r2, r3, #4
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e046      	b.n	80069f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d021      	beq.n	80069ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fd f989 	bl	8003c80 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d116      	bne.n	80069ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e020      	b.n	80069f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10c      	bne.n	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	43da      	mvns	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	e00b      	b.n	80069ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	43da      	mvns	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d18d      	bne.n	800690a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a04:	e02d      	b.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f900 	bl	8006c0c <I2C_IsAcknowledgeFailed>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e02d      	b.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d021      	beq.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fd f92f 	bl	8003c80 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d116      	bne.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f043 0220 	orr.w	r2, r3, #32
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e007      	b.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d1ca      	bne.n	8006a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a86:	e02d      	b.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f8bf 	bl	8006c0c <I2C_IsAcknowledgeFailed>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e02d      	b.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d021      	beq.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa0:	f7fd f8ee 	bl	8003c80 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d302      	bcc.n	8006ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d116      	bne.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0220 	orr.w	r2, r3, #32
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e007      	b.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d1ca      	bne.n	8006a88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	08db      	lsrs	r3, r3, #3
 8006b0e:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	0a1a      	lsrs	r2, r3, #8
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d107      	bne.n	8006b3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e008      	b.n	8006b4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d0e9      	beq.n	8006b1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	14f8b589 	.word	0x14f8b589

08006b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b6c:	e042      	b.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d119      	bne.n	8006bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0210 	mvn.w	r2, #16
 8006b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e029      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb0:	f7fd f866 	bl	8003c80 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e007      	b.n	8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d1b5      	bne.n	8006b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c22:	d11b      	bne.n	8006c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	f043 0204 	orr.w	r2, r3, #4
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c7a:	d103      	bne.n	8006c84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c82:	e007      	b.n	8006c94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c8c:	d102      	bne.n	8006c94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2208      	movs	r2, #8
 8006c92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e264      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d075      	beq.n	8006daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cbe:	4ba3      	ldr	r3, [pc, #652]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cca:	4ba0      	ldr	r3, [pc, #640]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d112      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cd6:	4b9d      	ldr	r3, [pc, #628]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce2:	d10b      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce4:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d05b      	beq.n	8006da8 <HAL_RCC_OscConfig+0x108>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d157      	bne.n	8006da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e23f      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d106      	bne.n	8006d14 <HAL_RCC_OscConfig+0x74>
 8006d06:	4b91      	ldr	r3, [pc, #580]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a90      	ldr	r2, [pc, #576]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e01d      	b.n	8006d50 <HAL_RCC_OscConfig+0xb0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x98>
 8006d1e:	4b8b      	ldr	r3, [pc, #556]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a8a      	ldr	r2, [pc, #552]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a87      	ldr	r2, [pc, #540]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_OscConfig+0xb0>
 8006d38:	4b84      	ldr	r3, [pc, #528]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a83      	ldr	r2, [pc, #524]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a80      	ldr	r2, [pc, #512]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d58:	f7fc ff92 	bl	8003c80 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d60:	f7fc ff8e 	bl	8003c80 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	; 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e204      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0xc0>
 8006d7e:	e014      	b.n	8006daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fc ff7e 	bl	8003c80 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d88:	f7fc ff7a 	bl	8003c80 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e1f0      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9a:	4b6c      	ldr	r3, [pc, #432]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <HAL_RCC_OscConfig+0xe8>
 8006da6:	e000      	b.n	8006daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d063      	beq.n	8006e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006db6:	4b65      	ldr	r3, [pc, #404]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dc2:	4b62      	ldr	r3, [pc, #392]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11c      	bne.n	8006e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dce:	4b5f      	ldr	r3, [pc, #380]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dda:	4b5c      	ldr	r3, [pc, #368]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_RCC_OscConfig+0x152>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e1c4      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df2:	4b56      	ldr	r3, [pc, #344]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4952      	ldr	r1, [pc, #328]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e06:	e03a      	b.n	8006e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d020      	beq.n	8006e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e10:	4b4f      	ldr	r3, [pc, #316]	; (8006f50 <HAL_RCC_OscConfig+0x2b0>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e16:	f7fc ff33 	bl	8003c80 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e1e:	f7fc ff2f 	bl	8003c80 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e1a5      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e30:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3c:	4b43      	ldr	r3, [pc, #268]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4940      	ldr	r1, [pc, #256]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]
 8006e50:	e015      	b.n	8006e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e52:	4b3f      	ldr	r3, [pc, #252]	; (8006f50 <HAL_RCC_OscConfig+0x2b0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc ff12 	bl	8003c80 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e60:	f7fc ff0e 	bl	8003c80 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e184      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d030      	beq.n	8006eec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d016      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e92:	4b30      	ldr	r3, [pc, #192]	; (8006f54 <HAL_RCC_OscConfig+0x2b4>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e98:	f7fc fef2 	bl	8003c80 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fc feee 	bl	8003c80 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e164      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb2:	4b26      	ldr	r3, [pc, #152]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x200>
 8006ebe:	e015      	b.n	8006eec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec0:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <HAL_RCC_OscConfig+0x2b4>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec6:	f7fc fedb 	bl	8003c80 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ece:	f7fc fed7 	bl	8003c80 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e14d      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80a0 	beq.w	800703a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10f      	bne.n	8006f2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f18:	6413      	str	r3, [r2, #64]	; 0x40
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_RCC_OscConfig+0x2ac>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_OscConfig+0x2b8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d121      	bne.n	8006f7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_RCC_OscConfig+0x2b8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	; (8006f58 <HAL_RCC_OscConfig+0x2b8>)
 8006f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f42:	f7fc fe9d 	bl	8003c80 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f48:	e011      	b.n	8006f6e <HAL_RCC_OscConfig+0x2ce>
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	42470000 	.word	0x42470000
 8006f54:	42470e80 	.word	0x42470e80
 8006f58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f5c:	f7fc fe90 	bl	8003c80 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e106      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f6e:	4b85      	ldr	r3, [pc, #532]	; (8007184 <HAL_RCC_OscConfig+0x4e4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d106      	bne.n	8006f90 <HAL_RCC_OscConfig+0x2f0>
 8006f82:	4b81      	ldr	r3, [pc, #516]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	4a80      	ldr	r2, [pc, #512]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8e:	e01c      	b.n	8006fca <HAL_RCC_OscConfig+0x32a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b05      	cmp	r3, #5
 8006f96:	d10c      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x312>
 8006f98:	4b7b      	ldr	r3, [pc, #492]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	4a7a      	ldr	r2, [pc, #488]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006f9e:	f043 0304 	orr.w	r3, r3, #4
 8006fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa4:	4b78      	ldr	r3, [pc, #480]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	4a77      	ldr	r2, [pc, #476]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb0:	e00b      	b.n	8006fca <HAL_RCC_OscConfig+0x32a>
 8006fb2:	4b75      	ldr	r3, [pc, #468]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a74      	ldr	r2, [pc, #464]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	4b72      	ldr	r3, [pc, #456]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a71      	ldr	r2, [pc, #452]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006fc4:	f023 0304 	bic.w	r3, r3, #4
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d015      	beq.n	8006ffe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd2:	f7fc fe55 	bl	8003c80 <HAL_GetTick>
 8006fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd8:	e00a      	b.n	8006ff0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fda:	f7fc fe51 	bl	8003c80 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e0c5      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff0:	4b65      	ldr	r3, [pc, #404]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0ee      	beq.n	8006fda <HAL_RCC_OscConfig+0x33a>
 8006ffc:	e014      	b.n	8007028 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ffe:	f7fc fe3f 	bl	8003c80 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007004:	e00a      	b.n	800701c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007006:	f7fc fe3b 	bl	8003c80 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f241 3288 	movw	r2, #5000	; 0x1388
 8007014:	4293      	cmp	r3, r2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e0af      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800701c:	4b5a      	ldr	r3, [pc, #360]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1ee      	bne.n	8007006 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d105      	bne.n	800703a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800702e:	4b56      	ldr	r3, [pc, #344]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	4a55      	ldr	r2, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8007034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 809b 	beq.w	800717a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b08      	cmp	r3, #8
 800704e:	d05c      	beq.n	800710a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d141      	bne.n	80070dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007058:	4b4c      	ldr	r3, [pc, #304]	; (800718c <HAL_RCC_OscConfig+0x4ec>)
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705e:	f7fc fe0f 	bl	8003c80 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007066:	f7fc fe0b 	bl	8003c80 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e081      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007078:	4b43      	ldr	r3, [pc, #268]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f0      	bne.n	8007066 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	019b      	lsls	r3, r3, #6
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	3b01      	subs	r3, #1
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	4937      	ldr	r1, [pc, #220]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070ae:	4b37      	ldr	r3, [pc, #220]	; (800718c <HAL_RCC_OscConfig+0x4ec>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b4:	f7fc fde4 	bl	8003c80 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070bc:	f7fc fde0 	bl	8003c80 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e056      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ce:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f0      	beq.n	80070bc <HAL_RCC_OscConfig+0x41c>
 80070da:	e04e      	b.n	800717a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <HAL_RCC_OscConfig+0x4ec>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e2:	f7fc fdcd 	bl	8003c80 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ea:	f7fc fdc9 	bl	8003c80 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e03f      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1f0      	bne.n	80070ea <HAL_RCC_OscConfig+0x44a>
 8007108:	e037      	b.n	800717a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e032      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007116:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <HAL_RCC_OscConfig+0x4e8>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d028      	beq.n	8007176 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d121      	bne.n	8007176 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d11a      	bne.n	8007176 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007146:	4013      	ands	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800714c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800714e:	4293      	cmp	r3, r2
 8007150:	d111      	bne.n	8007176 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	3b01      	subs	r3, #1
 8007160:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007162:	429a      	cmp	r2, r3
 8007164:	d107      	bne.n	8007176 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007172:	429a      	cmp	r2, r3
 8007174:	d001      	beq.n	800717a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40007000 	.word	0x40007000
 8007188:	40023800 	.word	0x40023800
 800718c:	42470060 	.word	0x42470060

08007190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0cc      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071a4:	4b68      	ldr	r3, [pc, #416]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d90c      	bls.n	80071cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b2:	4b65      	ldr	r3, [pc, #404]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d001      	beq.n	80071cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0b8      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d020      	beq.n	800721a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071e4:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4a58      	ldr	r2, [pc, #352]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071fc:	4b53      	ldr	r3, [pc, #332]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4a52      	ldr	r2, [pc, #328]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007208:	4b50      	ldr	r3, [pc, #320]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	494d      	ldr	r1, [pc, #308]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d044      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d107      	bne.n	800723e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d119      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e07f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d003      	beq.n	800724e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800724a:	2b03      	cmp	r3, #3
 800724c:	d107      	bne.n	800725e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e06f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800725e:	4b3b      	ldr	r3, [pc, #236]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e067      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f023 0203 	bic.w	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4934      	ldr	r1, [pc, #208]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	4313      	orrs	r3, r2
 800727e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007280:	f7fc fcfe 	bl	8003c80 <HAL_GetTick>
 8007284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007286:	e00a      	b.n	800729e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007288:	f7fc fcfa 	bl	8003c80 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e04f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729e:	4b2b      	ldr	r3, [pc, #172]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 020c 	and.w	r2, r3, #12
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d1eb      	bne.n	8007288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072b0:	4b25      	ldr	r3, [pc, #148]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d20c      	bcs.n	80072d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b22      	ldr	r3, [pc, #136]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b20      	ldr	r3, [pc, #128]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e032      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e4:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4916      	ldr	r1, [pc, #88]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	490e      	ldr	r1, [pc, #56]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007312:	4313      	orrs	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007316:	f000 f821 	bl	800735c <HAL_RCC_GetSysClockFreq>
 800731a:	4602      	mov	r2, r0
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	490a      	ldr	r1, [pc, #40]	; (8007350 <HAL_RCC_ClockConfig+0x1c0>)
 8007328:	5ccb      	ldrb	r3, [r1, r3]
 800732a:	fa22 f303 	lsr.w	r3, r2, r3
 800732e:	4a09      	ldr	r2, [pc, #36]	; (8007354 <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <HAL_RCC_ClockConfig+0x1c8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f7fc fc5e 	bl	8003bf8 <HAL_InitTick>

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40023c00 	.word	0x40023c00
 800734c:	40023800 	.word	0x40023800
 8007350:	0800e0a0 	.word	0x0800e0a0
 8007354:	20000004 	.word	0x20000004
 8007358:	20000008 	.word	0x20000008

0800735c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800735c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	2300      	movs	r3, #0
 800736e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 030c 	and.w	r3, r3, #12
 800737c:	2b08      	cmp	r3, #8
 800737e:	d00d      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0x40>
 8007380:	2b08      	cmp	r3, #8
 8007382:	f200 80bd 	bhi.w	8007500 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_RCC_GetSysClockFreq+0x34>
 800738a:	2b04      	cmp	r3, #4
 800738c:	d003      	beq.n	8007396 <HAL_RCC_GetSysClockFreq+0x3a>
 800738e:	e0b7      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007390:	4b61      	ldr	r3, [pc, #388]	; (8007518 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007392:	60bb      	str	r3, [r7, #8]
       break;
 8007394:	e0b7      	b.n	8007506 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007396:	4b61      	ldr	r3, [pc, #388]	; (800751c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007398:	60bb      	str	r3, [r7, #8]
      break;
 800739a:	e0b4      	b.n	8007506 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800739c:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073a6:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04d      	beq.n	800744e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073b2:	4b58      	ldr	r3, [pc, #352]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	461a      	mov	r2, r3
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073c2:	f04f 0100 	mov.w	r1, #0
 80073c6:	ea02 0800 	and.w	r8, r2, r0
 80073ca:	ea03 0901 	and.w	r9, r3, r1
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	014b      	lsls	r3, r1, #5
 80073dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80073e0:	0142      	lsls	r2, r0, #5
 80073e2:	4610      	mov	r0, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	ebb0 0008 	subs.w	r0, r0, r8
 80073ea:	eb61 0109 	sbc.w	r1, r1, r9
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	018b      	lsls	r3, r1, #6
 80073f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073fc:	0182      	lsls	r2, r0, #6
 80073fe:	1a12      	subs	r2, r2, r0
 8007400:	eb63 0301 	sbc.w	r3, r3, r1
 8007404:	f04f 0000 	mov.w	r0, #0
 8007408:	f04f 0100 	mov.w	r1, #0
 800740c:	00d9      	lsls	r1, r3, #3
 800740e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007412:	00d0      	lsls	r0, r2, #3
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	eb12 0208 	adds.w	r2, r2, r8
 800741c:	eb43 0309 	adc.w	r3, r3, r9
 8007420:	f04f 0000 	mov.w	r0, #0
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	0259      	lsls	r1, r3, #9
 800742a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800742e:	0250      	lsls	r0, r2, #9
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	461a      	mov	r2, r3
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	f7f9 fc2a 	bl	8000c98 <__aeabi_uldivmod>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4613      	mov	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e04a      	b.n	80074e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	099b      	lsrs	r3, r3, #6
 8007454:	461a      	mov	r2, r3
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800745e:	f04f 0100 	mov.w	r1, #0
 8007462:	ea02 0400 	and.w	r4, r2, r0
 8007466:	ea03 0501 	and.w	r5, r3, r1
 800746a:	4620      	mov	r0, r4
 800746c:	4629      	mov	r1, r5
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	014b      	lsls	r3, r1, #5
 8007478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800747c:	0142      	lsls	r2, r0, #5
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	1b00      	subs	r0, r0, r4
 8007484:	eb61 0105 	sbc.w	r1, r1, r5
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	018b      	lsls	r3, r1, #6
 8007492:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007496:	0182      	lsls	r2, r0, #6
 8007498:	1a12      	subs	r2, r2, r0
 800749a:	eb63 0301 	sbc.w	r3, r3, r1
 800749e:	f04f 0000 	mov.w	r0, #0
 80074a2:	f04f 0100 	mov.w	r1, #0
 80074a6:	00d9      	lsls	r1, r3, #3
 80074a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074ac:	00d0      	lsls	r0, r2, #3
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	1912      	adds	r2, r2, r4
 80074b4:	eb45 0303 	adc.w	r3, r5, r3
 80074b8:	f04f 0000 	mov.w	r0, #0
 80074bc:	f04f 0100 	mov.w	r1, #0
 80074c0:	0299      	lsls	r1, r3, #10
 80074c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80074c6:	0290      	lsls	r0, r2, #10
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4610      	mov	r0, r2
 80074ce:	4619      	mov	r1, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	f7f9 fbde 	bl	8000c98 <__aeabi_uldivmod>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4613      	mov	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	0c1b      	lsrs	r3, r3, #16
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	3301      	adds	r3, #1
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fc:	60bb      	str	r3, [r7, #8]
      break;
 80074fe:	e002      	b.n	8007506 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007502:	60bb      	str	r3, [r7, #8]
      break;
 8007504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007506:	68bb      	ldr	r3, [r7, #8]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800
 8007518:	00f42400 	.word	0x00f42400
 800751c:	007a1200 	.word	0x007a1200

08007520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007524:	4b03      	ldr	r3, [pc, #12]	; (8007534 <HAL_RCC_GetHCLKFreq+0x14>)
 8007526:	681b      	ldr	r3, [r3, #0]
}
 8007528:	4618      	mov	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000004 	.word	0x20000004

08007538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800753c:	f7ff fff0 	bl	8007520 <HAL_RCC_GetHCLKFreq>
 8007540:	4602      	mov	r2, r0
 8007542:	4b05      	ldr	r3, [pc, #20]	; (8007558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	0a9b      	lsrs	r3, r3, #10
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	4903      	ldr	r1, [pc, #12]	; (800755c <HAL_RCC_GetPCLK1Freq+0x24>)
 800754e:	5ccb      	ldrb	r3, [r1, r3]
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40023800 	.word	0x40023800
 800755c:	0800e0b0 	.word	0x0800e0b0

08007560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007564:	f7ff ffdc 	bl	8007520 <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	0b5b      	lsrs	r3, r3, #13
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4903      	ldr	r1, [pc, #12]	; (8007584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40023800 	.word	0x40023800
 8007584:	0800e0b0 	.word	0x0800e0b0

08007588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e03f      	b.n	800761a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fc fa14 	bl	80039dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2224      	movs	r2, #36	; 0x24
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fd7b 	bl	80080c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	695a      	ldr	r2, [r3, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b08a      	sub	sp, #40	; 0x28
 8007626:	af02      	add	r7, sp, #8
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b20      	cmp	r3, #32
 8007640:	d17c      	bne.n	800773c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_UART_Transmit+0x2c>
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e075      	b.n	800773e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_UART_Transmit+0x3e>
 800765c:	2302      	movs	r3, #2
 800765e:	e06e      	b.n	800773e <HAL_UART_Transmit+0x11c>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2221      	movs	r2, #33	; 0x21
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007676:	f7fc fb03 	bl	8003c80 <HAL_GetTick>
 800767a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007690:	d108      	bne.n	80076a4 <HAL_UART_Transmit+0x82>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e003      	b.n	80076ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076b4:	e02a      	b.n	800770c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 faf9 	bl	8007cb8 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e036      	b.n	800773e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	3302      	adds	r3, #2
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e007      	b.n	80076fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	781a      	ldrb	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	3301      	adds	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007702:	b29b      	uxth	r3, r3
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1cf      	bne.n	80076b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	2140      	movs	r1, #64	; 0x40
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fac9 	bl	8007cb8 <UART_WaitOnFlagUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e006      	b.n	800773e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0ba      	sub	sp, #232	; 0xe8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbd3 	bl	8007f52 <UART_Receive_IT>
      return;
 80077ac:	e256      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80de 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
 80077b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80d1 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0201 	orr.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
 8007802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0202 	orr.w	r2, r3, #2
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0204 	orr.w	r2, r3, #4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f043 0208 	orr.w	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 81ed 	beq.w	8007c52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb5e 	bl	8007f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <HAL_UART_IRQHandler+0x17a>
 80078ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d04f      	beq.n	8007962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa66 	bl	8007d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d141      	bne.n	800795a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800790e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800791a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1d9      	bne.n	80078d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4a7d      	ldr	r2, [pc, #500]	; (8007b24 <HAL_UART_IRQHandler+0x3dc>)
 8007930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4618      	mov	r0, r3
 8007938:	f7fc fb53 	bl	8003fe2 <HAL_DMA_Abort_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00e      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f99a 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00a      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f996 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e006      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f992 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800796e:	e170      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	bf00      	nop
    return;
 8007972:	e16e      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 814a 	bne.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8143 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 813c 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	f040 80b4 	bne.w	8007b28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8140 	beq.w	8007c56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079de:	429a      	cmp	r2, r3
 80079e0:	f080 8139 	bcs.w	8007c56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	f000 8088 	beq.w	8007b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1d9      	bne.n	80079fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3314      	adds	r3, #20
 8007a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e1      	bne.n	8007a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3314      	adds	r3, #20
 8007aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ada:	f023 0310 	bic.w	r3, r3, #16
 8007ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e3      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fc f9fc 	bl	8003f02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8c0 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b20:	e099      	b.n	8007c56 <HAL_UART_IRQHandler+0x50e>
 8007b22:	bf00      	nop
 8007b24:	08007e5b 	.word	0x08007e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 808b 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8086 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b72:	647a      	str	r2, [r7, #68]	; 0x44
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e3      	bne.n	8007b4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	623b      	str	r3, [r7, #32]
   return(result);
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bf0:	61fa      	str	r2, [r7, #28]
 8007bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e3      	bne.n	8007bcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f848 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c10:	e023      	b.n	8007c5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
 8007c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f929 	bl	8007e82 <UART_Transmit_IT>
    return;
 8007c30:	e014      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
 8007c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f969 	bl	8007f22 <UART_EndTransmit_IT>
    return;
 8007c50:	e004      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    return;
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c5a:	bf00      	nop
  }
}
 8007c5c:	37e8      	adds	r7, #232	; 0xe8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b090      	sub	sp, #64	; 0x40
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc8:	e050      	b.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d04c      	beq.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cd8:	f7fb ffd2 	bl	8003c80 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d241      	bcs.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	330c      	adds	r3, #12
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d08:	637a      	str	r2, [r7, #52]	; 0x34
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3314      	adds	r3, #20
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3c:	623a      	str	r2, [r7, #32]
 8007d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	6a3a      	ldr	r2, [r7, #32]
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e5      	bne.n	8007d1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e00f      	b.n	8007d8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4013      	ands	r3, r2
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d09f      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3740      	adds	r7, #64	; 0x40
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b095      	sub	sp, #84	; 0x54
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	330c      	adds	r3, #12
 8007dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e5      	bne.n	8007dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d119      	bne.n	8007e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0310 	bic.w	r3, r3, #16
 8007e22:	647b      	str	r3, [r7, #68]	; 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2c:	61ba      	str	r2, [r7, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e4e:	bf00      	nop
 8007e50:	3754      	adds	r7, #84	; 0x54
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff ff09 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e7a:	bf00      	nop
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b21      	cmp	r3, #33	; 0x21
 8007e94:	d13e      	bne.n	8007f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d114      	bne.n	8007eca <UART_Transmit_IT+0x48>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d110      	bne.n	8007eca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	1c9a      	adds	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]
 8007ec8:	e008      	b.n	8007edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	1c59      	adds	r1, r3, #1
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6211      	str	r1, [r2, #32]
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10f      	bne.n	8007f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e000      	b.n	8007f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f14:	2302      	movs	r3, #2
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fe8e 	bl	8007c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b08c      	sub	sp, #48	; 0x30
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b22      	cmp	r3, #34	; 0x22
 8007f64:	f040 80ab 	bne.w	80080be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f70:	d117      	bne.n	8007fa2 <UART_Receive_IT+0x50>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d113      	bne.n	8007fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	1c9a      	adds	r2, r3, #2
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa0:	e026      	b.n	8007ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	d007      	beq.n	8007fc6 <UART_Receive_IT+0x74>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <UART_Receive_IT+0x82>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	e008      	b.n	8007fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008000:	2b00      	cmp	r3, #0
 8008002:	d15a      	bne.n	80080ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0220 	bic.w	r2, r2, #32
 8008012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695a      	ldr	r2, [r3, #20]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	d135      	bne.n	80080b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	613b      	str	r3, [r7, #16]
   return(result);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f023 0310 	bic.w	r3, r3, #16
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	330c      	adds	r3, #12
 8008068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806a:	623a      	str	r2, [r7, #32]
 800806c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	69f9      	ldr	r1, [r7, #28]
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	61bb      	str	r3, [r7, #24]
   return(result);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d10a      	bne.n	80080a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fdf9 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
 80080ae:	e002      	b.n	80080b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fde1 	bl	8007c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e002      	b.n	80080c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080be:	2302      	movs	r3, #2
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3730      	adds	r7, #48	; 0x30
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	b09f      	sub	sp, #124	; 0x7c
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080de:	68d9      	ldr	r1, [r3, #12]
 80080e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	ea40 0301 	orr.w	r3, r0, r1
 80080e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	4313      	orrs	r3, r2
 8008100:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800810c:	f021 010c 	bic.w	r1, r1, #12
 8008110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008116:	430b      	orrs	r3, r1
 8008118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008126:	6999      	ldr	r1, [r3, #24]
 8008128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	ea40 0301 	orr.w	r3, r0, r1
 8008130:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4bc5      	ldr	r3, [pc, #788]	; (800844c <UART_SetConfig+0x384>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d004      	beq.n	8008146 <UART_SetConfig+0x7e>
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4bc3      	ldr	r3, [pc, #780]	; (8008450 <UART_SetConfig+0x388>)
 8008142:	429a      	cmp	r2, r3
 8008144:	d103      	bne.n	800814e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008146:	f7ff fa0b 	bl	8007560 <HAL_RCC_GetPCLK2Freq>
 800814a:	6778      	str	r0, [r7, #116]	; 0x74
 800814c:	e002      	b.n	8008154 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800814e:	f7ff f9f3 	bl	8007538 <HAL_RCC_GetPCLK1Freq>
 8008152:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800815c:	f040 80b6 	bne.w	80082cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008162:	461c      	mov	r4, r3
 8008164:	f04f 0500 	mov.w	r5, #0
 8008168:	4622      	mov	r2, r4
 800816a:	462b      	mov	r3, r5
 800816c:	1891      	adds	r1, r2, r2
 800816e:	6439      	str	r1, [r7, #64]	; 0x40
 8008170:	415b      	adcs	r3, r3
 8008172:	647b      	str	r3, [r7, #68]	; 0x44
 8008174:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008178:	1912      	adds	r2, r2, r4
 800817a:	eb45 0303 	adc.w	r3, r5, r3
 800817e:	f04f 0000 	mov.w	r0, #0
 8008182:	f04f 0100 	mov.w	r1, #0
 8008186:	00d9      	lsls	r1, r3, #3
 8008188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800818c:	00d0      	lsls	r0, r2, #3
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	1911      	adds	r1, r2, r4
 8008194:	6639      	str	r1, [r7, #96]	; 0x60
 8008196:	416b      	adcs	r3, r5
 8008198:	667b      	str	r3, [r7, #100]	; 0x64
 800819a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	461a      	mov	r2, r3
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	1891      	adds	r1, r2, r2
 80081a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80081a8:	415b      	adcs	r3, r3
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081b4:	f7f8 fd70 	bl	8000c98 <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4ba5      	ldr	r3, [pc, #660]	; (8008454 <UART_SetConfig+0x38c>)
 80081be:	fba3 2302 	umull	r2, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	011e      	lsls	r6, r3, #4
 80081c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c8:	461c      	mov	r4, r3
 80081ca:	f04f 0500 	mov.w	r5, #0
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	1891      	adds	r1, r2, r2
 80081d4:	6339      	str	r1, [r7, #48]	; 0x30
 80081d6:	415b      	adcs	r3, r3
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
 80081da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081de:	1912      	adds	r2, r2, r4
 80081e0:	eb45 0303 	adc.w	r3, r5, r3
 80081e4:	f04f 0000 	mov.w	r0, #0
 80081e8:	f04f 0100 	mov.w	r1, #0
 80081ec:	00d9      	lsls	r1, r3, #3
 80081ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081f2:	00d0      	lsls	r0, r2, #3
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	1911      	adds	r1, r2, r4
 80081fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80081fc:	416b      	adcs	r3, r5
 80081fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	461a      	mov	r2, r3
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	1891      	adds	r1, r2, r2
 800820c:	62b9      	str	r1, [r7, #40]	; 0x28
 800820e:	415b      	adcs	r3, r3
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008216:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800821a:	f7f8 fd3d 	bl	8000c98 <__aeabi_uldivmod>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4b8c      	ldr	r3, [pc, #560]	; (8008454 <UART_SetConfig+0x38c>)
 8008224:	fba3 1302 	umull	r1, r3, r3, r2
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	2164      	movs	r1, #100	; 0x64
 800822c:	fb01 f303 	mul.w	r3, r1, r3
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	3332      	adds	r3, #50	; 0x32
 8008236:	4a87      	ldr	r2, [pc, #540]	; (8008454 <UART_SetConfig+0x38c>)
 8008238:	fba2 2303 	umull	r2, r3, r2, r3
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008244:	441e      	add	r6, r3
 8008246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008248:	4618      	mov	r0, r3
 800824a:	f04f 0100 	mov.w	r1, #0
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	1894      	adds	r4, r2, r2
 8008254:	623c      	str	r4, [r7, #32]
 8008256:	415b      	adcs	r3, r3
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800825e:	1812      	adds	r2, r2, r0
 8008260:	eb41 0303 	adc.w	r3, r1, r3
 8008264:	f04f 0400 	mov.w	r4, #0
 8008268:	f04f 0500 	mov.w	r5, #0
 800826c:	00dd      	lsls	r5, r3, #3
 800826e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008272:	00d4      	lsls	r4, r2, #3
 8008274:	4622      	mov	r2, r4
 8008276:	462b      	mov	r3, r5
 8008278:	1814      	adds	r4, r2, r0
 800827a:	653c      	str	r4, [r7, #80]	; 0x50
 800827c:	414b      	adcs	r3, r1
 800827e:	657b      	str	r3, [r7, #84]	; 0x54
 8008280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	461a      	mov	r2, r3
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	1891      	adds	r1, r2, r2
 800828c:	61b9      	str	r1, [r7, #24]
 800828e:	415b      	adcs	r3, r3
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008296:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800829a:	f7f8 fcfd 	bl	8000c98 <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <UART_SetConfig+0x38c>)
 80082a4:	fba3 1302 	umull	r1, r3, r3, r2
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	2164      	movs	r1, #100	; 0x64
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	3332      	adds	r3, #50	; 0x32
 80082b6:	4a67      	ldr	r2, [pc, #412]	; (8008454 <UART_SetConfig+0x38c>)
 80082b8:	fba2 2303 	umull	r2, r3, r2, r3
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	f003 0207 	and.w	r2, r3, #7
 80082c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4432      	add	r2, r6
 80082c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082ca:	e0b9      	b.n	8008440 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ce:	461c      	mov	r4, r3
 80082d0:	f04f 0500 	mov.w	r5, #0
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	1891      	adds	r1, r2, r2
 80082da:	6139      	str	r1, [r7, #16]
 80082dc:	415b      	adcs	r3, r3
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082e4:	1912      	adds	r2, r2, r4
 80082e6:	eb45 0303 	adc.w	r3, r5, r3
 80082ea:	f04f 0000 	mov.w	r0, #0
 80082ee:	f04f 0100 	mov.w	r1, #0
 80082f2:	00d9      	lsls	r1, r3, #3
 80082f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082f8:	00d0      	lsls	r0, r2, #3
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	eb12 0804 	adds.w	r8, r2, r4
 8008302:	eb43 0905 	adc.w	r9, r3, r5
 8008306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	4618      	mov	r0, r3
 800830c:	f04f 0100 	mov.w	r1, #0
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	008b      	lsls	r3, r1, #2
 800831a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800831e:	0082      	lsls	r2, r0, #2
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f8 fcb8 	bl	8000c98 <__aeabi_uldivmod>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4b49      	ldr	r3, [pc, #292]	; (8008454 <UART_SetConfig+0x38c>)
 800832e:	fba3 2302 	umull	r2, r3, r3, r2
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	011e      	lsls	r6, r3, #4
 8008336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008338:	4618      	mov	r0, r3
 800833a:	f04f 0100 	mov.w	r1, #0
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	1894      	adds	r4, r2, r2
 8008344:	60bc      	str	r4, [r7, #8]
 8008346:	415b      	adcs	r3, r3
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800834e:	1812      	adds	r2, r2, r0
 8008350:	eb41 0303 	adc.w	r3, r1, r3
 8008354:	f04f 0400 	mov.w	r4, #0
 8008358:	f04f 0500 	mov.w	r5, #0
 800835c:	00dd      	lsls	r5, r3, #3
 800835e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008362:	00d4      	lsls	r4, r2, #3
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	1814      	adds	r4, r2, r0
 800836a:	64bc      	str	r4, [r7, #72]	; 0x48
 800836c:	414b      	adcs	r3, r1
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	f04f 0100 	mov.w	r1, #0
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	008b      	lsls	r3, r1, #2
 8008384:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008388:	0082      	lsls	r2, r0, #2
 800838a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800838e:	f7f8 fc83 	bl	8000c98 <__aeabi_uldivmod>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4b2f      	ldr	r3, [pc, #188]	; (8008454 <UART_SetConfig+0x38c>)
 8008398:	fba3 1302 	umull	r1, r3, r3, r2
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	2164      	movs	r1, #100	; 0x64
 80083a0:	fb01 f303 	mul.w	r3, r1, r3
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	3332      	adds	r3, #50	; 0x32
 80083aa:	4a2a      	ldr	r2, [pc, #168]	; (8008454 <UART_SetConfig+0x38c>)
 80083ac:	fba2 2303 	umull	r2, r3, r2, r3
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083b6:	441e      	add	r6, r3
 80083b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ba:	4618      	mov	r0, r3
 80083bc:	f04f 0100 	mov.w	r1, #0
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	1894      	adds	r4, r2, r2
 80083c6:	603c      	str	r4, [r7, #0]
 80083c8:	415b      	adcs	r3, r3
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d0:	1812      	adds	r2, r2, r0
 80083d2:	eb41 0303 	adc.w	r3, r1, r3
 80083d6:	f04f 0400 	mov.w	r4, #0
 80083da:	f04f 0500 	mov.w	r5, #0
 80083de:	00dd      	lsls	r5, r3, #3
 80083e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083e4:	00d4      	lsls	r4, r2, #3
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	eb12 0a00 	adds.w	sl, r2, r0
 80083ee:	eb43 0b01 	adc.w	fp, r3, r1
 80083f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	008b      	lsls	r3, r1, #2
 8008406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800840a:	0082      	lsls	r2, r0, #2
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f8 fc42 	bl	8000c98 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <UART_SetConfig+0x38c>)
 800841a:	fba3 1302 	umull	r1, r3, r3, r2
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	2164      	movs	r1, #100	; 0x64
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	3332      	adds	r3, #50	; 0x32
 800842c:	4a09      	ldr	r2, [pc, #36]	; (8008454 <UART_SetConfig+0x38c>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4432      	add	r2, r6
 800843e:	609a      	str	r2, [r3, #8]
}
 8008440:	bf00      	nop
 8008442:	377c      	adds	r7, #124	; 0x7c
 8008444:	46bd      	mov	sp, r7
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	40011000 	.word	0x40011000
 8008450:	40011400 	.word	0x40011400
 8008454:	51eb851f 	.word	0x51eb851f

08008458 <roundf>:
 8008458:	ee10 0a10 	vmov	r0, s0
 800845c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008460:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8008464:	2a16      	cmp	r2, #22
 8008466:	dc15      	bgt.n	8008494 <roundf+0x3c>
 8008468:	2a00      	cmp	r2, #0
 800846a:	da08      	bge.n	800847e <roundf+0x26>
 800846c:	3201      	adds	r2, #1
 800846e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008472:	d101      	bne.n	8008478 <roundf+0x20>
 8008474:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8008478:	ee00 3a10 	vmov	s0, r3
 800847c:	4770      	bx	lr
 800847e:	4908      	ldr	r1, [pc, #32]	; (80084a0 <roundf+0x48>)
 8008480:	4111      	asrs	r1, r2
 8008482:	4208      	tst	r0, r1
 8008484:	d0fa      	beq.n	800847c <roundf+0x24>
 8008486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800848a:	4113      	asrs	r3, r2
 800848c:	4403      	add	r3, r0
 800848e:	ea23 0301 	bic.w	r3, r3, r1
 8008492:	e7f1      	b.n	8008478 <roundf+0x20>
 8008494:	2a80      	cmp	r2, #128	; 0x80
 8008496:	d1f1      	bne.n	800847c <roundf+0x24>
 8008498:	ee30 0a00 	vadd.f32	s0, s0, s0
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	007fffff 	.word	0x007fffff

080084a4 <atan2f>:
 80084a4:	f000 b826 	b.w	80084f4 <__ieee754_atan2f>

080084a8 <sqrtf>:
 80084a8:	b508      	push	{r3, lr}
 80084aa:	ed2d 8b02 	vpush	{d8}
 80084ae:	eeb0 8a40 	vmov.f32	s16, s0
 80084b2:	f000 f8bf 	bl	8008634 <__ieee754_sqrtf>
 80084b6:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <sqrtf+0x44>)
 80084b8:	f993 3000 	ldrsb.w	r3, [r3]
 80084bc:	3301      	adds	r3, #1
 80084be:	d011      	beq.n	80084e4 <sqrtf+0x3c>
 80084c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	d60c      	bvs.n	80084e4 <sqrtf+0x3c>
 80084ca:	eddf 8a09 	vldr	s17, [pc, #36]	; 80084f0 <sqrtf+0x48>
 80084ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80084d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d6:	d505      	bpl.n	80084e4 <sqrtf+0x3c>
 80084d8:	f000 f992 	bl	8008800 <__errno>
 80084dc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80084e0:	2321      	movs	r3, #33	; 0x21
 80084e2:	6003      	str	r3, [r0, #0]
 80084e4:	ecbd 8b02 	vpop	{d8}
 80084e8:	bd08      	pop	{r3, pc}
 80084ea:	bf00      	nop
 80084ec:	2000000d 	.word	0x2000000d
 80084f0:	00000000 	.word	0x00000000

080084f4 <__ieee754_atan2f>:
 80084f4:	ee10 2a90 	vmov	r2, s1
 80084f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80084fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008500:	b510      	push	{r4, lr}
 8008502:	eef0 7a40 	vmov.f32	s15, s0
 8008506:	dc06      	bgt.n	8008516 <__ieee754_atan2f+0x22>
 8008508:	ee10 0a10 	vmov	r0, s0
 800850c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008510:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008514:	dd04      	ble.n	8008520 <__ieee754_atan2f+0x2c>
 8008516:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800851a:	eeb0 0a67 	vmov.f32	s0, s15
 800851e:	bd10      	pop	{r4, pc}
 8008520:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008524:	d103      	bne.n	800852e <__ieee754_atan2f+0x3a>
 8008526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852a:	f000 b887 	b.w	800863c <atanf>
 800852e:	1794      	asrs	r4, r2, #30
 8008530:	f004 0402 	and.w	r4, r4, #2
 8008534:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008538:	b943      	cbnz	r3, 800854c <__ieee754_atan2f+0x58>
 800853a:	2c02      	cmp	r4, #2
 800853c:	d05e      	beq.n	80085fc <__ieee754_atan2f+0x108>
 800853e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008610 <__ieee754_atan2f+0x11c>
 8008542:	2c03      	cmp	r4, #3
 8008544:	bf08      	it	eq
 8008546:	eef0 7a47 	vmoveq.f32	s15, s14
 800854a:	e7e6      	b.n	800851a <__ieee754_atan2f+0x26>
 800854c:	b941      	cbnz	r1, 8008560 <__ieee754_atan2f+0x6c>
 800854e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008614 <__ieee754_atan2f+0x120>
 8008552:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008618 <__ieee754_atan2f+0x124>
 8008556:	2800      	cmp	r0, #0
 8008558:	bfb8      	it	lt
 800855a:	eef0 7a40 	vmovlt.f32	s15, s0
 800855e:	e7dc      	b.n	800851a <__ieee754_atan2f+0x26>
 8008560:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008564:	d110      	bne.n	8008588 <__ieee754_atan2f+0x94>
 8008566:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800856a:	f104 34ff 	add.w	r4, r4, #4294967295
 800856e:	d107      	bne.n	8008580 <__ieee754_atan2f+0x8c>
 8008570:	2c02      	cmp	r4, #2
 8008572:	d846      	bhi.n	8008602 <__ieee754_atan2f+0x10e>
 8008574:	4b29      	ldr	r3, [pc, #164]	; (800861c <__ieee754_atan2f+0x128>)
 8008576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800857a:	edd4 7a00 	vldr	s15, [r4]
 800857e:	e7cc      	b.n	800851a <__ieee754_atan2f+0x26>
 8008580:	2c02      	cmp	r4, #2
 8008582:	d841      	bhi.n	8008608 <__ieee754_atan2f+0x114>
 8008584:	4b26      	ldr	r3, [pc, #152]	; (8008620 <__ieee754_atan2f+0x12c>)
 8008586:	e7f6      	b.n	8008576 <__ieee754_atan2f+0x82>
 8008588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800858c:	d0df      	beq.n	800854e <__ieee754_atan2f+0x5a>
 800858e:	1a5b      	subs	r3, r3, r1
 8008590:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008594:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008598:	da1a      	bge.n	80085d0 <__ieee754_atan2f+0xdc>
 800859a:	2a00      	cmp	r2, #0
 800859c:	da01      	bge.n	80085a2 <__ieee754_atan2f+0xae>
 800859e:	313c      	adds	r1, #60	; 0x3c
 80085a0:	db19      	blt.n	80085d6 <__ieee754_atan2f+0xe2>
 80085a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80085a6:	f000 f91d 	bl	80087e4 <fabsf>
 80085aa:	f000 f847 	bl	800863c <atanf>
 80085ae:	eef0 7a40 	vmov.f32	s15, s0
 80085b2:	2c01      	cmp	r4, #1
 80085b4:	d012      	beq.n	80085dc <__ieee754_atan2f+0xe8>
 80085b6:	2c02      	cmp	r4, #2
 80085b8:	d017      	beq.n	80085ea <__ieee754_atan2f+0xf6>
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	d0ad      	beq.n	800851a <__ieee754_atan2f+0x26>
 80085be:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008624 <__ieee754_atan2f+0x130>
 80085c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085c6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008628 <__ieee754_atan2f+0x134>
 80085ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085ce:	e7a4      	b.n	800851a <__ieee754_atan2f+0x26>
 80085d0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008614 <__ieee754_atan2f+0x120>
 80085d4:	e7ed      	b.n	80085b2 <__ieee754_atan2f+0xbe>
 80085d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800862c <__ieee754_atan2f+0x138>
 80085da:	e7ea      	b.n	80085b2 <__ieee754_atan2f+0xbe>
 80085dc:	ee17 3a90 	vmov	r3, s15
 80085e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	ee07 3a90 	vmov	s15, r3
 80085e8:	e797      	b.n	800851a <__ieee754_atan2f+0x26>
 80085ea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008624 <__ieee754_atan2f+0x130>
 80085ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085f2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008628 <__ieee754_atan2f+0x134>
 80085f6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80085fa:	e78e      	b.n	800851a <__ieee754_atan2f+0x26>
 80085fc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008628 <__ieee754_atan2f+0x134>
 8008600:	e78b      	b.n	800851a <__ieee754_atan2f+0x26>
 8008602:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008630 <__ieee754_atan2f+0x13c>
 8008606:	e788      	b.n	800851a <__ieee754_atan2f+0x26>
 8008608:	eddf 7a08 	vldr	s15, [pc, #32]	; 800862c <__ieee754_atan2f+0x138>
 800860c:	e785      	b.n	800851a <__ieee754_atan2f+0x26>
 800860e:	bf00      	nop
 8008610:	c0490fdb 	.word	0xc0490fdb
 8008614:	3fc90fdb 	.word	0x3fc90fdb
 8008618:	bfc90fdb 	.word	0xbfc90fdb
 800861c:	0800e0b8 	.word	0x0800e0b8
 8008620:	0800e0c4 	.word	0x0800e0c4
 8008624:	33bbbd2e 	.word	0x33bbbd2e
 8008628:	40490fdb 	.word	0x40490fdb
 800862c:	00000000 	.word	0x00000000
 8008630:	3f490fdb 	.word	0x3f490fdb

08008634 <__ieee754_sqrtf>:
 8008634:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008638:	4770      	bx	lr
	...

0800863c <atanf>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	ee10 5a10 	vmov	r5, s0
 8008642:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008646:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800864a:	eef0 7a40 	vmov.f32	s15, s0
 800864e:	db10      	blt.n	8008672 <atanf+0x36>
 8008650:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008654:	dd04      	ble.n	8008660 <atanf+0x24>
 8008656:	ee70 7a00 	vadd.f32	s15, s0, s0
 800865a:	eeb0 0a67 	vmov.f32	s0, s15
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008798 <atanf+0x15c>
 8008664:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800879c <atanf+0x160>
 8008668:	2d00      	cmp	r5, #0
 800866a:	bfd8      	it	le
 800866c:	eef0 7a40 	vmovle.f32	s15, s0
 8008670:	e7f3      	b.n	800865a <atanf+0x1e>
 8008672:	4b4b      	ldr	r3, [pc, #300]	; (80087a0 <atanf+0x164>)
 8008674:	429c      	cmp	r4, r3
 8008676:	dc10      	bgt.n	800869a <atanf+0x5e>
 8008678:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800867c:	da0a      	bge.n	8008694 <atanf+0x58>
 800867e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80087a4 <atanf+0x168>
 8008682:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008692:	dce2      	bgt.n	800865a <atanf+0x1e>
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	e013      	b.n	80086c2 <atanf+0x86>
 800869a:	f000 f8a3 	bl	80087e4 <fabsf>
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <atanf+0x16c>)
 80086a0:	429c      	cmp	r4, r3
 80086a2:	dc4f      	bgt.n	8008744 <atanf+0x108>
 80086a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80086a8:	429c      	cmp	r4, r3
 80086aa:	dc41      	bgt.n	8008730 <atanf+0xf4>
 80086ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80086b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80086b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80086b8:	2300      	movs	r3, #0
 80086ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80086be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80086c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80087ac <atanf+0x170>
 80086cc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80087b0 <atanf+0x174>
 80086d0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80087b4 <atanf+0x178>
 80086d4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80087b8 <atanf+0x17c>
 80086d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80086dc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80086e0:	eddf 5a36 	vldr	s11, [pc, #216]	; 80087bc <atanf+0x180>
 80086e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80086e8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80087c0 <atanf+0x184>
 80086ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80086f0:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087c4 <atanf+0x188>
 80086f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80086f8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80087c8 <atanf+0x18c>
 80086fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008700:	eddf 5a32 	vldr	s11, [pc, #200]	; 80087cc <atanf+0x190>
 8008704:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008708:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80087d0 <atanf+0x194>
 800870c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008710:	eddf 5a30 	vldr	s11, [pc, #192]	; 80087d4 <atanf+0x198>
 8008714:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008718:	eea5 0a87 	vfma.f32	s0, s11, s14
 800871c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008720:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008724:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008728:	d121      	bne.n	800876e <atanf+0x132>
 800872a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800872e:	e794      	b.n	800865a <atanf+0x1e>
 8008730:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008734:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008738:	ee30 0a27 	vadd.f32	s0, s0, s15
 800873c:	2301      	movs	r3, #1
 800873e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008742:	e7be      	b.n	80086c2 <atanf+0x86>
 8008744:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <atanf+0x19c>)
 8008746:	429c      	cmp	r4, r3
 8008748:	dc0b      	bgt.n	8008762 <atanf+0x126>
 800874a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800874e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008752:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008756:	2302      	movs	r3, #2
 8008758:	ee70 6a67 	vsub.f32	s13, s0, s15
 800875c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008760:	e7af      	b.n	80086c2 <atanf+0x86>
 8008762:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008766:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800876a:	2303      	movs	r3, #3
 800876c:	e7a9      	b.n	80086c2 <atanf+0x86>
 800876e:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <atanf+0x1a0>)
 8008770:	491b      	ldr	r1, [pc, #108]	; (80087e0 <atanf+0x1a4>)
 8008772:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008776:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800877a:	ed93 7a00 	vldr	s14, [r3]
 800877e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008782:	2d00      	cmp	r5, #0
 8008784:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008788:	ed92 0a00 	vldr	s0, [r2]
 800878c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008790:	bfb8      	it	lt
 8008792:	eef1 7a67 	vneglt.f32	s15, s15
 8008796:	e760      	b.n	800865a <atanf+0x1e>
 8008798:	3fc90fdb 	.word	0x3fc90fdb
 800879c:	bfc90fdb 	.word	0xbfc90fdb
 80087a0:	3edfffff 	.word	0x3edfffff
 80087a4:	7149f2ca 	.word	0x7149f2ca
 80087a8:	3f97ffff 	.word	0x3f97ffff
 80087ac:	3c8569d7 	.word	0x3c8569d7
 80087b0:	3d4bda59 	.word	0x3d4bda59
 80087b4:	bd15a221 	.word	0xbd15a221
 80087b8:	be4ccccd 	.word	0xbe4ccccd
 80087bc:	3d886b35 	.word	0x3d886b35
 80087c0:	3dba2e6e 	.word	0x3dba2e6e
 80087c4:	3e124925 	.word	0x3e124925
 80087c8:	3eaaaaab 	.word	0x3eaaaaab
 80087cc:	bd6ef16b 	.word	0xbd6ef16b
 80087d0:	bd9d8795 	.word	0xbd9d8795
 80087d4:	bde38e38 	.word	0xbde38e38
 80087d8:	401bffff 	.word	0x401bffff
 80087dc:	0800e0d0 	.word	0x0800e0d0
 80087e0:	0800e0e0 	.word	0x0800e0e0

080087e4 <fabsf>:
 80087e4:	ee10 3a10 	vmov	r3, s0
 80087e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ec:	ee00 3a10 	vmov	s0, r3
 80087f0:	4770      	bx	lr
	...

080087f4 <nanf>:
 80087f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087fc <nanf+0x8>
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	7fc00000 	.word	0x7fc00000

08008800 <__errno>:
 8008800:	4b01      	ldr	r3, [pc, #4]	; (8008808 <__errno+0x8>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000010 	.word	0x20000010

0800880c <__libc_init_array>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4d0d      	ldr	r5, [pc, #52]	; (8008844 <__libc_init_array+0x38>)
 8008810:	4c0d      	ldr	r4, [pc, #52]	; (8008848 <__libc_init_array+0x3c>)
 8008812:	1b64      	subs	r4, r4, r5
 8008814:	10a4      	asrs	r4, r4, #2
 8008816:	2600      	movs	r6, #0
 8008818:	42a6      	cmp	r6, r4
 800881a:	d109      	bne.n	8008830 <__libc_init_array+0x24>
 800881c:	4d0b      	ldr	r5, [pc, #44]	; (800884c <__libc_init_array+0x40>)
 800881e:	4c0c      	ldr	r4, [pc, #48]	; (8008850 <__libc_init_array+0x44>)
 8008820:	f004 fd42 	bl	800d2a8 <_init>
 8008824:	1b64      	subs	r4, r4, r5
 8008826:	10a4      	asrs	r4, r4, #2
 8008828:	2600      	movs	r6, #0
 800882a:	42a6      	cmp	r6, r4
 800882c:	d105      	bne.n	800883a <__libc_init_array+0x2e>
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	f855 3b04 	ldr.w	r3, [r5], #4
 8008834:	4798      	blx	r3
 8008836:	3601      	adds	r6, #1
 8008838:	e7ee      	b.n	8008818 <__libc_init_array+0xc>
 800883a:	f855 3b04 	ldr.w	r3, [r5], #4
 800883e:	4798      	blx	r3
 8008840:	3601      	adds	r6, #1
 8008842:	e7f2      	b.n	800882a <__libc_init_array+0x1e>
 8008844:	0800e5ac 	.word	0x0800e5ac
 8008848:	0800e5ac 	.word	0x0800e5ac
 800884c:	0800e5ac 	.word	0x0800e5ac
 8008850:	0800e5b4 	.word	0x0800e5b4

08008854 <malloc>:
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <malloc+0xc>)
 8008856:	4601      	mov	r1, r0
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f000 b87f 	b.w	800895c <_malloc_r>
 800885e:	bf00      	nop
 8008860:	20000010 	.word	0x20000010

08008864 <free>:
 8008864:	4b02      	ldr	r3, [pc, #8]	; (8008870 <free+0xc>)
 8008866:	4601      	mov	r1, r0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f000 b827 	b.w	80088bc <_free_r>
 800886e:	bf00      	nop
 8008870:	20000010 	.word	0x20000010

08008874 <memcmp>:
 8008874:	b530      	push	{r4, r5, lr}
 8008876:	3901      	subs	r1, #1
 8008878:	2400      	movs	r4, #0
 800887a:	42a2      	cmp	r2, r4
 800887c:	d101      	bne.n	8008882 <memcmp+0xe>
 800887e:	2000      	movs	r0, #0
 8008880:	e005      	b.n	800888e <memcmp+0x1a>
 8008882:	5d03      	ldrb	r3, [r0, r4]
 8008884:	3401      	adds	r4, #1
 8008886:	5d0d      	ldrb	r5, [r1, r4]
 8008888:	42ab      	cmp	r3, r5
 800888a:	d0f6      	beq.n	800887a <memcmp+0x6>
 800888c:	1b58      	subs	r0, r3, r5
 800888e:	bd30      	pop	{r4, r5, pc}

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a6:	4291      	cmp	r1, r2
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <memset>:
 80088ac:	4402      	add	r2, r0
 80088ae:	4603      	mov	r3, r0
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d100      	bne.n	80088b6 <memset+0xa>
 80088b4:	4770      	bx	lr
 80088b6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ba:	e7f9      	b.n	80088b0 <memset+0x4>

080088bc <_free_r>:
 80088bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088be:	2900      	cmp	r1, #0
 80088c0:	d048      	beq.n	8008954 <_free_r+0x98>
 80088c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c6:	9001      	str	r0, [sp, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f1a1 0404 	sub.w	r4, r1, #4
 80088ce:	bfb8      	it	lt
 80088d0:	18e4      	addlt	r4, r4, r3
 80088d2:	f003 fb7d 	bl	800bfd0 <__malloc_lock>
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <_free_r+0x9c>)
 80088d8:	9801      	ldr	r0, [sp, #4]
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	4615      	mov	r5, r2
 80088de:	b933      	cbnz	r3, 80088ee <_free_r+0x32>
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6014      	str	r4, [r2, #0]
 80088e4:	b003      	add	sp, #12
 80088e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ea:	f003 bb77 	b.w	800bfdc <__malloc_unlock>
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	d90b      	bls.n	800890a <_free_r+0x4e>
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	1862      	adds	r2, r4, r1
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bf04      	itt	eq
 80088fa:	681a      	ldreq	r2, [r3, #0]
 80088fc:	685b      	ldreq	r3, [r3, #4]
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	bf04      	itt	eq
 8008902:	1852      	addeq	r2, r2, r1
 8008904:	6022      	streq	r2, [r4, #0]
 8008906:	602c      	str	r4, [r5, #0]
 8008908:	e7ec      	b.n	80088e4 <_free_r+0x28>
 800890a:	461a      	mov	r2, r3
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b10b      	cbz	r3, 8008914 <_free_r+0x58>
 8008910:	42a3      	cmp	r3, r4
 8008912:	d9fa      	bls.n	800890a <_free_r+0x4e>
 8008914:	6811      	ldr	r1, [r2, #0]
 8008916:	1855      	adds	r5, r2, r1
 8008918:	42a5      	cmp	r5, r4
 800891a:	d10b      	bne.n	8008934 <_free_r+0x78>
 800891c:	6824      	ldr	r4, [r4, #0]
 800891e:	4421      	add	r1, r4
 8008920:	1854      	adds	r4, r2, r1
 8008922:	42a3      	cmp	r3, r4
 8008924:	6011      	str	r1, [r2, #0]
 8008926:	d1dd      	bne.n	80088e4 <_free_r+0x28>
 8008928:	681c      	ldr	r4, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	6053      	str	r3, [r2, #4]
 800892e:	4421      	add	r1, r4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	e7d7      	b.n	80088e4 <_free_r+0x28>
 8008934:	d902      	bls.n	800893c <_free_r+0x80>
 8008936:	230c      	movs	r3, #12
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	e7d3      	b.n	80088e4 <_free_r+0x28>
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	1961      	adds	r1, r4, r5
 8008940:	428b      	cmp	r3, r1
 8008942:	bf04      	itt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	6063      	str	r3, [r4, #4]
 800894a:	bf04      	itt	eq
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	6054      	str	r4, [r2, #4]
 8008952:	e7c7      	b.n	80088e4 <_free_r+0x28>
 8008954:	b003      	add	sp, #12
 8008956:	bd30      	pop	{r4, r5, pc}
 8008958:	200002ac 	.word	0x200002ac

0800895c <_malloc_r>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	1ccd      	adds	r5, r1, #3
 8008960:	f025 0503 	bic.w	r5, r5, #3
 8008964:	3508      	adds	r5, #8
 8008966:	2d0c      	cmp	r5, #12
 8008968:	bf38      	it	cc
 800896a:	250c      	movcc	r5, #12
 800896c:	2d00      	cmp	r5, #0
 800896e:	4606      	mov	r6, r0
 8008970:	db01      	blt.n	8008976 <_malloc_r+0x1a>
 8008972:	42a9      	cmp	r1, r5
 8008974:	d903      	bls.n	800897e <_malloc_r+0x22>
 8008976:	230c      	movs	r3, #12
 8008978:	6033      	str	r3, [r6, #0]
 800897a:	2000      	movs	r0, #0
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	f003 fb27 	bl	800bfd0 <__malloc_lock>
 8008982:	4921      	ldr	r1, [pc, #132]	; (8008a08 <_malloc_r+0xac>)
 8008984:	680a      	ldr	r2, [r1, #0]
 8008986:	4614      	mov	r4, r2
 8008988:	b99c      	cbnz	r4, 80089b2 <_malloc_r+0x56>
 800898a:	4f20      	ldr	r7, [pc, #128]	; (8008a0c <_malloc_r+0xb0>)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	b923      	cbnz	r3, 800899a <_malloc_r+0x3e>
 8008990:	4621      	mov	r1, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f000 ff5a 	bl	800984c <_sbrk_r>
 8008998:	6038      	str	r0, [r7, #0]
 800899a:	4629      	mov	r1, r5
 800899c:	4630      	mov	r0, r6
 800899e:	f000 ff55 	bl	800984c <_sbrk_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d123      	bne.n	80089ee <_malloc_r+0x92>
 80089a6:	230c      	movs	r3, #12
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	4630      	mov	r0, r6
 80089ac:	f003 fb16 	bl	800bfdc <__malloc_unlock>
 80089b0:	e7e3      	b.n	800897a <_malloc_r+0x1e>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	1b5b      	subs	r3, r3, r5
 80089b6:	d417      	bmi.n	80089e8 <_malloc_r+0x8c>
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d903      	bls.n	80089c4 <_malloc_r+0x68>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	441c      	add	r4, r3
 80089c0:	6025      	str	r5, [r4, #0]
 80089c2:	e004      	b.n	80089ce <_malloc_r+0x72>
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	42a2      	cmp	r2, r4
 80089c8:	bf0c      	ite	eq
 80089ca:	600b      	streq	r3, [r1, #0]
 80089cc:	6053      	strne	r3, [r2, #4]
 80089ce:	4630      	mov	r0, r6
 80089d0:	f003 fb04 	bl	800bfdc <__malloc_unlock>
 80089d4:	f104 000b 	add.w	r0, r4, #11
 80089d8:	1d23      	adds	r3, r4, #4
 80089da:	f020 0007 	bic.w	r0, r0, #7
 80089de:	1ac2      	subs	r2, r0, r3
 80089e0:	d0cc      	beq.n	800897c <_malloc_r+0x20>
 80089e2:	1a1b      	subs	r3, r3, r0
 80089e4:	50a3      	str	r3, [r4, r2]
 80089e6:	e7c9      	b.n	800897c <_malloc_r+0x20>
 80089e8:	4622      	mov	r2, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7cc      	b.n	8008988 <_malloc_r+0x2c>
 80089ee:	1cc4      	adds	r4, r0, #3
 80089f0:	f024 0403 	bic.w	r4, r4, #3
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d0e3      	beq.n	80089c0 <_malloc_r+0x64>
 80089f8:	1a21      	subs	r1, r4, r0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f000 ff26 	bl	800984c <_sbrk_r>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d1dd      	bne.n	80089c0 <_malloc_r+0x64>
 8008a04:	e7cf      	b.n	80089a6 <_malloc_r+0x4a>
 8008a06:	bf00      	nop
 8008a08:	200002ac 	.word	0x200002ac
 8008a0c:	200002b0 	.word	0x200002b0

08008a10 <__cvt>:
 8008a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	ec55 4b10 	vmov	r4, r5, d0
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	460e      	mov	r6, r1
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	462b      	mov	r3, r5
 8008a20:	bfbb      	ittet	lt
 8008a22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a26:	461d      	movlt	r5, r3
 8008a28:	2300      	movge	r3, #0
 8008a2a:	232d      	movlt	r3, #45	; 0x2d
 8008a2c:	700b      	strb	r3, [r1, #0]
 8008a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a34:	4691      	mov	r9, r2
 8008a36:	f023 0820 	bic.w	r8, r3, #32
 8008a3a:	bfbc      	itt	lt
 8008a3c:	4622      	movlt	r2, r4
 8008a3e:	4614      	movlt	r4, r2
 8008a40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a44:	d005      	beq.n	8008a52 <__cvt+0x42>
 8008a46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a4a:	d100      	bne.n	8008a4e <__cvt+0x3e>
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	2102      	movs	r1, #2
 8008a50:	e000      	b.n	8008a54 <__cvt+0x44>
 8008a52:	2103      	movs	r1, #3
 8008a54:	ab03      	add	r3, sp, #12
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	ab02      	add	r3, sp, #8
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	ec45 4b10 	vmov	d0, r4, r5
 8008a60:	4653      	mov	r3, sl
 8008a62:	4632      	mov	r2, r6
 8008a64:	f001 ff24 	bl	800a8b0 <_dtoa_r>
 8008a68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	d102      	bne.n	8008a76 <__cvt+0x66>
 8008a70:	f019 0f01 	tst.w	r9, #1
 8008a74:	d022      	beq.n	8008abc <__cvt+0xac>
 8008a76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a7a:	eb07 0906 	add.w	r9, r7, r6
 8008a7e:	d110      	bne.n	8008aa2 <__cvt+0x92>
 8008a80:	783b      	ldrb	r3, [r7, #0]
 8008a82:	2b30      	cmp	r3, #48	; 0x30
 8008a84:	d10a      	bne.n	8008a9c <__cvt+0x8c>
 8008a86:	2200      	movs	r2, #0
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f8 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a92:	b918      	cbnz	r0, 8008a9c <__cvt+0x8c>
 8008a94:	f1c6 0601 	rsb	r6, r6, #1
 8008a98:	f8ca 6000 	str.w	r6, [sl]
 8008a9c:	f8da 3000 	ldr.w	r3, [sl]
 8008aa0:	4499      	add	r9, r3
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f8 f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aae:	b108      	cbz	r0, 8008ab4 <__cvt+0xa4>
 8008ab0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ab4:	2230      	movs	r2, #48	; 0x30
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	454b      	cmp	r3, r9
 8008aba:	d307      	bcc.n	8008acc <__cvt+0xbc>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ac0:	1bdb      	subs	r3, r3, r7
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	b004      	add	sp, #16
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	1c59      	adds	r1, r3, #1
 8008ace:	9103      	str	r1, [sp, #12]
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	e7f0      	b.n	8008ab6 <__cvt+0xa6>

08008ad4 <__exponent>:
 8008ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	bfb8      	it	lt
 8008adc:	4249      	neglt	r1, r1
 8008ade:	f803 2b02 	strb.w	r2, [r3], #2
 8008ae2:	bfb4      	ite	lt
 8008ae4:	222d      	movlt	r2, #45	; 0x2d
 8008ae6:	222b      	movge	r2, #43	; 0x2b
 8008ae8:	2909      	cmp	r1, #9
 8008aea:	7042      	strb	r2, [r0, #1]
 8008aec:	dd2a      	ble.n	8008b44 <__exponent+0x70>
 8008aee:	f10d 0407 	add.w	r4, sp, #7
 8008af2:	46a4      	mov	ip, r4
 8008af4:	270a      	movs	r7, #10
 8008af6:	46a6      	mov	lr, r4
 8008af8:	460a      	mov	r2, r1
 8008afa:	fb91 f6f7 	sdiv	r6, r1, r7
 8008afe:	fb07 1516 	mls	r5, r7, r6, r1
 8008b02:	3530      	adds	r5, #48	; 0x30
 8008b04:	2a63      	cmp	r2, #99	; 0x63
 8008b06:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b0e:	4631      	mov	r1, r6
 8008b10:	dcf1      	bgt.n	8008af6 <__exponent+0x22>
 8008b12:	3130      	adds	r1, #48	; 0x30
 8008b14:	f1ae 0502 	sub.w	r5, lr, #2
 8008b18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b1c:	1c44      	adds	r4, r0, #1
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4561      	cmp	r1, ip
 8008b22:	d30a      	bcc.n	8008b3a <__exponent+0x66>
 8008b24:	f10d 0209 	add.w	r2, sp, #9
 8008b28:	eba2 020e 	sub.w	r2, r2, lr
 8008b2c:	4565      	cmp	r5, ip
 8008b2e:	bf88      	it	hi
 8008b30:	2200      	movhi	r2, #0
 8008b32:	4413      	add	r3, r2
 8008b34:	1a18      	subs	r0, r3, r0
 8008b36:	b003      	add	sp, #12
 8008b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b42:	e7ed      	b.n	8008b20 <__exponent+0x4c>
 8008b44:	2330      	movs	r3, #48	; 0x30
 8008b46:	3130      	adds	r1, #48	; 0x30
 8008b48:	7083      	strb	r3, [r0, #2]
 8008b4a:	70c1      	strb	r1, [r0, #3]
 8008b4c:	1d03      	adds	r3, r0, #4
 8008b4e:	e7f1      	b.n	8008b34 <__exponent+0x60>

08008b50 <_printf_float>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	ed2d 8b02 	vpush	{d8}
 8008b58:	b08d      	sub	sp, #52	; 0x34
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b60:	4616      	mov	r6, r2
 8008b62:	461f      	mov	r7, r3
 8008b64:	4605      	mov	r5, r0
 8008b66:	f003 f9b5 	bl	800bed4 <_localeconv_r>
 8008b6a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b6e:	4650      	mov	r0, sl
 8008b70:	f7f7 fb36 	bl	80001e0 <strlen>
 8008b74:	2300      	movs	r3, #0
 8008b76:	930a      	str	r3, [sp, #40]	; 0x28
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b84:	3307      	adds	r3, #7
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	f103 0208 	add.w	r2, r3, #8
 8008b8e:	f8c8 2000 	str.w	r2, [r8]
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	4b9f      	ldr	r3, [pc, #636]	; (8008e2c <_printf_float+0x2dc>)
 8008bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	f7f7 ffc1 	bl	8000b3c <__aeabi_dcmpun>
 8008bba:	bb88      	cbnz	r0, 8008c20 <_printf_float+0xd0>
 8008bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc0:	4b9a      	ldr	r3, [pc, #616]	; (8008e2c <_printf_float+0x2dc>)
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc6:	f7f7 ff9b 	bl	8000b00 <__aeabi_dcmple>
 8008bca:	bb48      	cbnz	r0, 8008c20 <_printf_float+0xd0>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	f7f7 ff8a 	bl	8000aec <__aeabi_dcmplt>
 8008bd8:	b110      	cbz	r0, 8008be0 <_printf_float+0x90>
 8008bda:	232d      	movs	r3, #45	; 0x2d
 8008bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be0:	4b93      	ldr	r3, [pc, #588]	; (8008e30 <_printf_float+0x2e0>)
 8008be2:	4894      	ldr	r0, [pc, #592]	; (8008e34 <_printf_float+0x2e4>)
 8008be4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008be8:	bf94      	ite	ls
 8008bea:	4698      	movls	r8, r3
 8008bec:	4680      	movhi	r8, r0
 8008bee:	2303      	movs	r3, #3
 8008bf0:	6123      	str	r3, [r4, #16]
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	f023 0204 	bic.w	r2, r3, #4
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	9700      	str	r7, [sp, #0]
 8008c00:	4633      	mov	r3, r6
 8008c02:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f9d8 	bl	8008fbc <_printf_common>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f040 8090 	bne.w	8008d32 <_printf_float+0x1e2>
 8008c12:	f04f 30ff 	mov.w	r0, #4294967295
 8008c16:	b00d      	add	sp, #52	; 0x34
 8008c18:	ecbd 8b02 	vpop	{d8}
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	f7f7 ff88 	bl	8000b3c <__aeabi_dcmpun>
 8008c2c:	b140      	cbz	r0, 8008c40 <_printf_float+0xf0>
 8008c2e:	464b      	mov	r3, r9
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfbc      	itt	lt
 8008c34:	232d      	movlt	r3, #45	; 0x2d
 8008c36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c3a:	487f      	ldr	r0, [pc, #508]	; (8008e38 <_printf_float+0x2e8>)
 8008c3c:	4b7f      	ldr	r3, [pc, #508]	; (8008e3c <_printf_float+0x2ec>)
 8008c3e:	e7d1      	b.n	8008be4 <_printf_float+0x94>
 8008c40:	6863      	ldr	r3, [r4, #4]
 8008c42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c46:	9206      	str	r2, [sp, #24]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	d13f      	bne.n	8008ccc <_printf_float+0x17c>
 8008c4c:	2306      	movs	r3, #6
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	6861      	ldr	r1, [r4, #4]
 8008c54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c62:	ab09      	add	r3, sp, #36	; 0x24
 8008c64:	ec49 8b10 	vmov	d0, r8, r9
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	6022      	str	r2, [r4, #0]
 8008c6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7ff fecd 	bl	8008a10 <__cvt>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c7a:	2b47      	cmp	r3, #71	; 0x47
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	d108      	bne.n	8008c92 <_printf_float+0x142>
 8008c80:	1cc8      	adds	r0, r1, #3
 8008c82:	db02      	blt.n	8008c8a <_printf_float+0x13a>
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	dd41      	ble.n	8008d0e <_printf_float+0x1be>
 8008c8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c8e:	fa5f fb8b 	uxtb.w	fp, fp
 8008c92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c96:	d820      	bhi.n	8008cda <_printf_float+0x18a>
 8008c98:	3901      	subs	r1, #1
 8008c9a:	465a      	mov	r2, fp
 8008c9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ca2:	f7ff ff17 	bl	8008ad4 <__exponent>
 8008ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ca8:	1813      	adds	r3, r2, r0
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	4681      	mov	r9, r0
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	dc02      	bgt.n	8008cb8 <_printf_float+0x168>
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	07d2      	lsls	r2, r2, #31
 8008cb6:	d501      	bpl.n	8008cbc <_printf_float+0x16c>
 8008cb8:	3301      	adds	r3, #1
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d09c      	beq.n	8008bfe <_printf_float+0xae>
 8008cc4:	232d      	movs	r3, #45	; 0x2d
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cca:	e798      	b.n	8008bfe <_printf_float+0xae>
 8008ccc:	9a06      	ldr	r2, [sp, #24]
 8008cce:	2a47      	cmp	r2, #71	; 0x47
 8008cd0:	d1be      	bne.n	8008c50 <_printf_float+0x100>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1bc      	bne.n	8008c50 <_printf_float+0x100>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e7b9      	b.n	8008c4e <_printf_float+0xfe>
 8008cda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cde:	d118      	bne.n	8008d12 <_printf_float+0x1c2>
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	6863      	ldr	r3, [r4, #4]
 8008ce4:	dd0b      	ble.n	8008cfe <_printf_float+0x1ae>
 8008ce6:	6121      	str	r1, [r4, #16]
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_printf_float+0x1a0>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	07d0      	lsls	r0, r2, #31
 8008cee:	d502      	bpl.n	8008cf6 <_printf_float+0x1a6>
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	440b      	add	r3, r1
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cf8:	f04f 0900 	mov.w	r9, #0
 8008cfc:	e7de      	b.n	8008cbc <_printf_float+0x16c>
 8008cfe:	b913      	cbnz	r3, 8008d06 <_printf_float+0x1b6>
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	07d2      	lsls	r2, r2, #31
 8008d04:	d501      	bpl.n	8008d0a <_printf_float+0x1ba>
 8008d06:	3302      	adds	r3, #2
 8008d08:	e7f4      	b.n	8008cf4 <_printf_float+0x1a4>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e7f2      	b.n	8008cf4 <_printf_float+0x1a4>
 8008d0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d14:	4299      	cmp	r1, r3
 8008d16:	db05      	blt.n	8008d24 <_printf_float+0x1d4>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	6121      	str	r1, [r4, #16]
 8008d1c:	07d8      	lsls	r0, r3, #31
 8008d1e:	d5ea      	bpl.n	8008cf6 <_printf_float+0x1a6>
 8008d20:	1c4b      	adds	r3, r1, #1
 8008d22:	e7e7      	b.n	8008cf4 <_printf_float+0x1a4>
 8008d24:	2900      	cmp	r1, #0
 8008d26:	bfd4      	ite	le
 8008d28:	f1c1 0202 	rsble	r2, r1, #2
 8008d2c:	2201      	movgt	r2, #1
 8008d2e:	4413      	add	r3, r2
 8008d30:	e7e0      	b.n	8008cf4 <_printf_float+0x1a4>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	055a      	lsls	r2, r3, #21
 8008d36:	d407      	bmi.n	8008d48 <_printf_float+0x1f8>
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	d12c      	bne.n	8008da0 <_printf_float+0x250>
 8008d46:	e764      	b.n	8008c12 <_printf_float+0xc2>
 8008d48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d4c:	f240 80e0 	bls.w	8008f10 <_printf_float+0x3c0>
 8008d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d54:	2200      	movs	r2, #0
 8008d56:	2300      	movs	r3, #0
 8008d58:	f7f7 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d034      	beq.n	8008dca <_printf_float+0x27a>
 8008d60:	4a37      	ldr	r2, [pc, #220]	; (8008e40 <_printf_float+0x2f0>)
 8008d62:	2301      	movs	r3, #1
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af51 	beq.w	8008c12 <_printf_float+0xc2>
 8008d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d74:	429a      	cmp	r2, r3
 8008d76:	db02      	blt.n	8008d7e <_printf_float+0x22e>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	07d8      	lsls	r0, r3, #31
 8008d7c:	d510      	bpl.n	8008da0 <_printf_float+0x250>
 8008d7e:	ee18 3a10 	vmov	r3, s16
 8008d82:	4652      	mov	r2, sl
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f af41 	beq.w	8008c12 <_printf_float+0xc2>
 8008d90:	f04f 0800 	mov.w	r8, #0
 8008d94:	f104 091a 	add.w	r9, r4, #26
 8008d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	4543      	cmp	r3, r8
 8008d9e:	dc09      	bgt.n	8008db4 <_printf_float+0x264>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	079b      	lsls	r3, r3, #30
 8008da4:	f100 8105 	bmi.w	8008fb2 <_printf_float+0x462>
 8008da8:	68e0      	ldr	r0, [r4, #12]
 8008daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dac:	4298      	cmp	r0, r3
 8008dae:	bfb8      	it	lt
 8008db0:	4618      	movlt	r0, r3
 8008db2:	e730      	b.n	8008c16 <_printf_float+0xc6>
 8008db4:	2301      	movs	r3, #1
 8008db6:	464a      	mov	r2, r9
 8008db8:	4631      	mov	r1, r6
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	f43f af27 	beq.w	8008c12 <_printf_float+0xc2>
 8008dc4:	f108 0801 	add.w	r8, r8, #1
 8008dc8:	e7e6      	b.n	8008d98 <_printf_float+0x248>
 8008dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dc39      	bgt.n	8008e44 <_printf_float+0x2f4>
 8008dd0:	4a1b      	ldr	r2, [pc, #108]	; (8008e40 <_printf_float+0x2f0>)
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f af19 	beq.w	8008c12 <_printf_float+0xc2>
 8008de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008de4:	4313      	orrs	r3, r2
 8008de6:	d102      	bne.n	8008dee <_printf_float+0x29e>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d5d8      	bpl.n	8008da0 <_printf_float+0x250>
 8008dee:	ee18 3a10 	vmov	r3, s16
 8008df2:	4652      	mov	r2, sl
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f af09 	beq.w	8008c12 <_printf_float+0xc2>
 8008e00:	f04f 0900 	mov.w	r9, #0
 8008e04:	f104 0a1a 	add.w	sl, r4, #26
 8008e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0a:	425b      	negs	r3, r3
 8008e0c:	454b      	cmp	r3, r9
 8008e0e:	dc01      	bgt.n	8008e14 <_printf_float+0x2c4>
 8008e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e12:	e792      	b.n	8008d3a <_printf_float+0x1ea>
 8008e14:	2301      	movs	r3, #1
 8008e16:	4652      	mov	r2, sl
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f aef7 	beq.w	8008c12 <_printf_float+0xc2>
 8008e24:	f109 0901 	add.w	r9, r9, #1
 8008e28:	e7ee      	b.n	8008e08 <_printf_float+0x2b8>
 8008e2a:	bf00      	nop
 8008e2c:	7fefffff 	.word	0x7fefffff
 8008e30:	0800e0f4 	.word	0x0800e0f4
 8008e34:	0800e0f8 	.word	0x0800e0f8
 8008e38:	0800e100 	.word	0x0800e100
 8008e3c:	0800e0fc 	.word	0x0800e0fc
 8008e40:	0800e104 	.word	0x0800e104
 8008e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bfa8      	it	ge
 8008e4c:	461a      	movge	r2, r3
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	4691      	mov	r9, r2
 8008e52:	dc37      	bgt.n	8008ec4 <_printf_float+0x374>
 8008e54:	f04f 0b00 	mov.w	fp, #0
 8008e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5c:	f104 021a 	add.w	r2, r4, #26
 8008e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	eba3 0309 	sub.w	r3, r3, r9
 8008e68:	455b      	cmp	r3, fp
 8008e6a:	dc33      	bgt.n	8008ed4 <_printf_float+0x384>
 8008e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e70:	429a      	cmp	r2, r3
 8008e72:	db3b      	blt.n	8008eec <_printf_float+0x39c>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	07da      	lsls	r2, r3, #31
 8008e78:	d438      	bmi.n	8008eec <_printf_float+0x39c>
 8008e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e7c:	9b05      	ldr	r3, [sp, #20]
 8008e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	eba2 0901 	sub.w	r9, r2, r1
 8008e86:	4599      	cmp	r9, r3
 8008e88:	bfa8      	it	ge
 8008e8a:	4699      	movge	r9, r3
 8008e8c:	f1b9 0f00 	cmp.w	r9, #0
 8008e90:	dc35      	bgt.n	8008efe <_printf_float+0x3ae>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e9a:	f104 0a1a 	add.w	sl, r4, #26
 8008e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	eba3 0309 	sub.w	r3, r3, r9
 8008ea8:	4543      	cmp	r3, r8
 8008eaa:	f77f af79 	ble.w	8008da0 <_printf_float+0x250>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	f43f aeaa 	beq.w	8008c12 <_printf_float+0xc2>
 8008ebe:	f108 0801 	add.w	r8, r8, #1
 8008ec2:	e7ec      	b.n	8008e9e <_printf_float+0x34e>
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4642      	mov	r2, r8
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d1c0      	bne.n	8008e54 <_printf_float+0x304>
 8008ed2:	e69e      	b.n	8008c12 <_printf_float+0xc2>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	9205      	str	r2, [sp, #20]
 8008edc:	47b8      	blx	r7
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f43f ae97 	beq.w	8008c12 <_printf_float+0xc2>
 8008ee4:	9a05      	ldr	r2, [sp, #20]
 8008ee6:	f10b 0b01 	add.w	fp, fp, #1
 8008eea:	e7b9      	b.n	8008e60 <_printf_float+0x310>
 8008eec:	ee18 3a10 	vmov	r3, s16
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1be      	bne.n	8008e7a <_printf_float+0x32a>
 8008efc:	e689      	b.n	8008c12 <_printf_float+0xc2>
 8008efe:	9a05      	ldr	r2, [sp, #20]
 8008f00:	464b      	mov	r3, r9
 8008f02:	4442      	add	r2, r8
 8008f04:	4631      	mov	r1, r6
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d1c1      	bne.n	8008e92 <_printf_float+0x342>
 8008f0e:	e680      	b.n	8008c12 <_printf_float+0xc2>
 8008f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f12:	2a01      	cmp	r2, #1
 8008f14:	dc01      	bgt.n	8008f1a <_printf_float+0x3ca>
 8008f16:	07db      	lsls	r3, r3, #31
 8008f18:	d538      	bpl.n	8008f8c <_printf_float+0x43c>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	f43f ae74 	beq.w	8008c12 <_printf_float+0xc2>
 8008f2a:	ee18 3a10 	vmov	r3, s16
 8008f2e:	4652      	mov	r2, sl
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	f43f ae6b 	beq.w	8008c12 <_printf_float+0xc2>
 8008f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f40:	2200      	movs	r2, #0
 8008f42:	2300      	movs	r3, #0
 8008f44:	f7f7 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f48:	b9d8      	cbnz	r0, 8008f82 <_printf_float+0x432>
 8008f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4c:	f108 0201 	add.w	r2, r8, #1
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d10e      	bne.n	8008f7a <_printf_float+0x42a>
 8008f5c:	e659      	b.n	8008c12 <_printf_float+0xc2>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	4652      	mov	r2, sl
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f43f ae52 	beq.w	8008c12 <_printf_float+0xc2>
 8008f6e:	f108 0801 	add.w	r8, r8, #1
 8008f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4543      	cmp	r3, r8
 8008f78:	dcf1      	bgt.n	8008f5e <_printf_float+0x40e>
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f80:	e6dc      	b.n	8008d3c <_printf_float+0x1ec>
 8008f82:	f04f 0800 	mov.w	r8, #0
 8008f86:	f104 0a1a 	add.w	sl, r4, #26
 8008f8a:	e7f2      	b.n	8008f72 <_printf_float+0x422>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4642      	mov	r2, r8
 8008f90:	e7df      	b.n	8008f52 <_printf_float+0x402>
 8008f92:	2301      	movs	r3, #1
 8008f94:	464a      	mov	r2, r9
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae38 	beq.w	8008c12 <_printf_float+0xc2>
 8008fa2:	f108 0801 	add.w	r8, r8, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	4543      	cmp	r3, r8
 8008fae:	dcf0      	bgt.n	8008f92 <_printf_float+0x442>
 8008fb0:	e6fa      	b.n	8008da8 <_printf_float+0x258>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	f104 0919 	add.w	r9, r4, #25
 8008fba:	e7f4      	b.n	8008fa6 <_printf_float+0x456>

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009008:	1e13      	subs	r3, r2, #0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009018:	4649      	mov	r1, r9
 800901a:	4638      	mov	r0, r7
 800901c:	47c0      	blx	r8
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	68e5      	ldr	r5, [r4, #12]
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	f003 0306 	and.w	r3, r3, #6
 800902c:	2b04      	cmp	r3, #4
 800902e:	bf08      	it	eq
 8009030:	1aad      	subeq	r5, r5, r2
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4649      	mov	r1, r9
 8009058:	4638      	mov	r0, r7
 800905a:	47c0      	blx	r8
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	; 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4649      	mov	r1, r9
 800908a:	4638      	mov	r0, r7
 800908c:	47c0      	blx	r8
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	4691      	mov	r9, r2
 80090a0:	7e27      	ldrb	r7, [r4, #24]
 80090a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090a4:	2f78      	cmp	r7, #120	; 0x78
 80090a6:	4680      	mov	r8, r0
 80090a8:	469a      	mov	sl, r3
 80090aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	; 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d8 	beq.w	800926a <_printf_i+0x1d2>
 80090ba:	2f58      	cmp	r7, #88	; 0x58
 80090bc:	f000 80a3 	beq.w	8009206 <_printf_i+0x16e>
 80090c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a001      	add	r0, pc, #4	; (adr r0, 80090d8 <_printf_i+0x40>)
 80090d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009251 	.word	0x08009251
 8009108:	08009175 	.word	0x08009175
 800910c:	08009233 	.word	0x08009233
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009273 	.word	0x08009273
 800911c:	080090c1 	.word	0x080090c1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	0800923b 	.word	0x0800923b
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	600a      	str	r2, [r1, #0]
 8009138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e0a3      	b.n	800928c <_printf_i+0x1f4>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	6808      	ldr	r0, [r1, #0]
 8009148:	062e      	lsls	r6, r5, #24
 800914a:	f100 0304 	add.w	r3, r0, #4
 800914e:	d50a      	bpl.n	8009166 <_printf_i+0xce>
 8009150:	6805      	ldr	r5, [r0, #0]
 8009152:	600b      	str	r3, [r1, #0]
 8009154:	2d00      	cmp	r5, #0
 8009156:	da03      	bge.n	8009160 <_printf_i+0xc8>
 8009158:	232d      	movs	r3, #45	; 0x2d
 800915a:	426d      	negs	r5, r5
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	485e      	ldr	r0, [pc, #376]	; (80092dc <_printf_i+0x244>)
 8009162:	230a      	movs	r3, #10
 8009164:	e019      	b.n	800919a <_printf_i+0x102>
 8009166:	f015 0f40 	tst.w	r5, #64	; 0x40
 800916a:	6805      	ldr	r5, [r0, #0]
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	bf18      	it	ne
 8009170:	b22d      	sxthne	r5, r5
 8009172:	e7ef      	b.n	8009154 <_printf_i+0xbc>
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	1d18      	adds	r0, r3, #4
 800917a:	6008      	str	r0, [r1, #0]
 800917c:	0628      	lsls	r0, r5, #24
 800917e:	d501      	bpl.n	8009184 <_printf_i+0xec>
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	e002      	b.n	800918a <_printf_i+0xf2>
 8009184:	0669      	lsls	r1, r5, #25
 8009186:	d5fb      	bpl.n	8009180 <_printf_i+0xe8>
 8009188:	881d      	ldrh	r5, [r3, #0]
 800918a:	4854      	ldr	r0, [pc, #336]	; (80092dc <_printf_i+0x244>)
 800918c:	2f6f      	cmp	r7, #111	; 0x6f
 800918e:	bf0c      	ite	eq
 8009190:	2308      	moveq	r3, #8
 8009192:	230a      	movne	r3, #10
 8009194:	2100      	movs	r1, #0
 8009196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800919a:	6866      	ldr	r6, [r4, #4]
 800919c:	60a6      	str	r6, [r4, #8]
 800919e:	2e00      	cmp	r6, #0
 80091a0:	bfa2      	ittt	ge
 80091a2:	6821      	ldrge	r1, [r4, #0]
 80091a4:	f021 0104 	bicge.w	r1, r1, #4
 80091a8:	6021      	strge	r1, [r4, #0]
 80091aa:	b90d      	cbnz	r5, 80091b0 <_printf_i+0x118>
 80091ac:	2e00      	cmp	r6, #0
 80091ae:	d04d      	beq.n	800924c <_printf_i+0x1b4>
 80091b0:	4616      	mov	r6, r2
 80091b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091b6:	fb03 5711 	mls	r7, r3, r1, r5
 80091ba:	5dc7      	ldrb	r7, [r0, r7]
 80091bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091c0:	462f      	mov	r7, r5
 80091c2:	42bb      	cmp	r3, r7
 80091c4:	460d      	mov	r5, r1
 80091c6:	d9f4      	bls.n	80091b2 <_printf_i+0x11a>
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d10b      	bne.n	80091e4 <_printf_i+0x14c>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	07df      	lsls	r7, r3, #31
 80091d0:	d508      	bpl.n	80091e4 <_printf_i+0x14c>
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	4299      	cmp	r1, r3
 80091d8:	bfde      	ittt	le
 80091da:	2330      	movle	r3, #48	; 0x30
 80091dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091e4:	1b92      	subs	r2, r2, r6
 80091e6:	6122      	str	r2, [r4, #16]
 80091e8:	f8cd a000 	str.w	sl, [sp]
 80091ec:	464b      	mov	r3, r9
 80091ee:	aa03      	add	r2, sp, #12
 80091f0:	4621      	mov	r1, r4
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7ff fee2 	bl	8008fbc <_printf_common>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d14c      	bne.n	8009296 <_printf_i+0x1fe>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b004      	add	sp, #16
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	4835      	ldr	r0, [pc, #212]	; (80092dc <_printf_i+0x244>)
 8009208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	680e      	ldr	r6, [r1, #0]
 8009210:	061f      	lsls	r7, r3, #24
 8009212:	f856 5b04 	ldr.w	r5, [r6], #4
 8009216:	600e      	str	r6, [r1, #0]
 8009218:	d514      	bpl.n	8009244 <_printf_i+0x1ac>
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	bf44      	itt	mi
 800921e:	f043 0320 	orrmi.w	r3, r3, #32
 8009222:	6023      	strmi	r3, [r4, #0]
 8009224:	b91d      	cbnz	r5, 800922e <_printf_i+0x196>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	f023 0320 	bic.w	r3, r3, #32
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	2310      	movs	r3, #16
 8009230:	e7b0      	b.n	8009194 <_printf_i+0xfc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f043 0320 	orr.w	r3, r3, #32
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	2378      	movs	r3, #120	; 0x78
 800923c:	4828      	ldr	r0, [pc, #160]	; (80092e0 <_printf_i+0x248>)
 800923e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009242:	e7e3      	b.n	800920c <_printf_i+0x174>
 8009244:	065e      	lsls	r6, r3, #25
 8009246:	bf48      	it	mi
 8009248:	b2ad      	uxthmi	r5, r5
 800924a:	e7e6      	b.n	800921a <_printf_i+0x182>
 800924c:	4616      	mov	r6, r2
 800924e:	e7bb      	b.n	80091c8 <_printf_i+0x130>
 8009250:	680b      	ldr	r3, [r1, #0]
 8009252:	6826      	ldr	r6, [r4, #0]
 8009254:	6960      	ldr	r0, [r4, #20]
 8009256:	1d1d      	adds	r5, r3, #4
 8009258:	600d      	str	r5, [r1, #0]
 800925a:	0635      	lsls	r5, r6, #24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	d501      	bpl.n	8009264 <_printf_i+0x1cc>
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	e002      	b.n	800926a <_printf_i+0x1d2>
 8009264:	0671      	lsls	r1, r6, #25
 8009266:	d5fb      	bpl.n	8009260 <_printf_i+0x1c8>
 8009268:	8018      	strh	r0, [r3, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	4616      	mov	r6, r2
 8009270:	e7ba      	b.n	80091e8 <_printf_i+0x150>
 8009272:	680b      	ldr	r3, [r1, #0]
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	600a      	str	r2, [r1, #0]
 8009278:	681e      	ldr	r6, [r3, #0]
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	2100      	movs	r1, #0
 800927e:	4630      	mov	r0, r6
 8009280:	f7f6 ffb6 	bl	80001f0 <memchr>
 8009284:	b108      	cbz	r0, 800928a <_printf_i+0x1f2>
 8009286:	1b80      	subs	r0, r0, r6
 8009288:	6060      	str	r0, [r4, #4]
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	2300      	movs	r3, #0
 8009290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009294:	e7a8      	b.n	80091e8 <_printf_i+0x150>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d0ab      	beq.n	80091fc <_printf_i+0x164>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	079b      	lsls	r3, r3, #30
 80092a8:	d413      	bmi.n	80092d2 <_printf_i+0x23a>
 80092aa:	68e0      	ldr	r0, [r4, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	4298      	cmp	r0, r3
 80092b0:	bfb8      	it	lt
 80092b2:	4618      	movlt	r0, r3
 80092b4:	e7a4      	b.n	8009200 <_printf_i+0x168>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4632      	mov	r2, r6
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	47d0      	blx	sl
 80092c0:	3001      	adds	r0, #1
 80092c2:	d09b      	beq.n	80091fc <_printf_i+0x164>
 80092c4:	3501      	adds	r5, #1
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	9903      	ldr	r1, [sp, #12]
 80092ca:	1a5b      	subs	r3, r3, r1
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dcf2      	bgt.n	80092b6 <_printf_i+0x21e>
 80092d0:	e7eb      	b.n	80092aa <_printf_i+0x212>
 80092d2:	2500      	movs	r5, #0
 80092d4:	f104 0619 	add.w	r6, r4, #25
 80092d8:	e7f5      	b.n	80092c6 <_printf_i+0x22e>
 80092da:	bf00      	nop
 80092dc:	0800e106 	.word	0x0800e106
 80092e0:	0800e117 	.word	0x0800e117

080092e4 <_scanf_float>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	b087      	sub	sp, #28
 80092ea:	4617      	mov	r7, r2
 80092ec:	9303      	str	r3, [sp, #12]
 80092ee:	688b      	ldr	r3, [r1, #8]
 80092f0:	1e5a      	subs	r2, r3, #1
 80092f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80092f6:	bf83      	ittte	hi
 80092f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80092fc:	195b      	addhi	r3, r3, r5
 80092fe:	9302      	strhi	r3, [sp, #8]
 8009300:	2300      	movls	r3, #0
 8009302:	bf86      	itte	hi
 8009304:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009308:	608b      	strhi	r3, [r1, #8]
 800930a:	9302      	strls	r3, [sp, #8]
 800930c:	680b      	ldr	r3, [r1, #0]
 800930e:	468b      	mov	fp, r1
 8009310:	2500      	movs	r5, #0
 8009312:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009316:	f84b 3b1c 	str.w	r3, [fp], #28
 800931a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800931e:	4680      	mov	r8, r0
 8009320:	460c      	mov	r4, r1
 8009322:	465e      	mov	r6, fp
 8009324:	46aa      	mov	sl, r5
 8009326:	46a9      	mov	r9, r5
 8009328:	9501      	str	r5, [sp, #4]
 800932a:	68a2      	ldr	r2, [r4, #8]
 800932c:	b152      	cbz	r2, 8009344 <_scanf_float+0x60>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b4e      	cmp	r3, #78	; 0x4e
 8009334:	d864      	bhi.n	8009400 <_scanf_float+0x11c>
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d83c      	bhi.n	80093b4 <_scanf_float+0xd0>
 800933a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800933e:	b2c8      	uxtb	r0, r1
 8009340:	280e      	cmp	r0, #14
 8009342:	d93a      	bls.n	80093ba <_scanf_float+0xd6>
 8009344:	f1b9 0f00 	cmp.w	r9, #0
 8009348:	d003      	beq.n	8009352 <_scanf_float+0x6e>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009356:	f1ba 0f01 	cmp.w	sl, #1
 800935a:	f200 8113 	bhi.w	8009584 <_scanf_float+0x2a0>
 800935e:	455e      	cmp	r6, fp
 8009360:	f200 8105 	bhi.w	800956e <_scanf_float+0x28a>
 8009364:	2501      	movs	r5, #1
 8009366:	4628      	mov	r0, r5
 8009368:	b007      	add	sp, #28
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009372:	2a0d      	cmp	r2, #13
 8009374:	d8e6      	bhi.n	8009344 <_scanf_float+0x60>
 8009376:	a101      	add	r1, pc, #4	; (adr r1, 800937c <_scanf_float+0x98>)
 8009378:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800937c:	080094bb 	.word	0x080094bb
 8009380:	08009345 	.word	0x08009345
 8009384:	08009345 	.word	0x08009345
 8009388:	08009345 	.word	0x08009345
 800938c:	0800951b 	.word	0x0800951b
 8009390:	080094f3 	.word	0x080094f3
 8009394:	08009345 	.word	0x08009345
 8009398:	08009345 	.word	0x08009345
 800939c:	080094c9 	.word	0x080094c9
 80093a0:	08009345 	.word	0x08009345
 80093a4:	08009345 	.word	0x08009345
 80093a8:	08009345 	.word	0x08009345
 80093ac:	08009345 	.word	0x08009345
 80093b0:	08009481 	.word	0x08009481
 80093b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093b8:	e7db      	b.n	8009372 <_scanf_float+0x8e>
 80093ba:	290e      	cmp	r1, #14
 80093bc:	d8c2      	bhi.n	8009344 <_scanf_float+0x60>
 80093be:	a001      	add	r0, pc, #4	; (adr r0, 80093c4 <_scanf_float+0xe0>)
 80093c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093c4:	08009473 	.word	0x08009473
 80093c8:	08009345 	.word	0x08009345
 80093cc:	08009473 	.word	0x08009473
 80093d0:	08009507 	.word	0x08009507
 80093d4:	08009345 	.word	0x08009345
 80093d8:	08009421 	.word	0x08009421
 80093dc:	0800945d 	.word	0x0800945d
 80093e0:	0800945d 	.word	0x0800945d
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	0800945d 	.word	0x0800945d
 80093ec:	0800945d 	.word	0x0800945d
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	0800945d 	.word	0x0800945d
 80093fc:	0800945d 	.word	0x0800945d
 8009400:	2b6e      	cmp	r3, #110	; 0x6e
 8009402:	d809      	bhi.n	8009418 <_scanf_float+0x134>
 8009404:	2b60      	cmp	r3, #96	; 0x60
 8009406:	d8b2      	bhi.n	800936e <_scanf_float+0x8a>
 8009408:	2b54      	cmp	r3, #84	; 0x54
 800940a:	d077      	beq.n	80094fc <_scanf_float+0x218>
 800940c:	2b59      	cmp	r3, #89	; 0x59
 800940e:	d199      	bne.n	8009344 <_scanf_float+0x60>
 8009410:	2d07      	cmp	r5, #7
 8009412:	d197      	bne.n	8009344 <_scanf_float+0x60>
 8009414:	2508      	movs	r5, #8
 8009416:	e029      	b.n	800946c <_scanf_float+0x188>
 8009418:	2b74      	cmp	r3, #116	; 0x74
 800941a:	d06f      	beq.n	80094fc <_scanf_float+0x218>
 800941c:	2b79      	cmp	r3, #121	; 0x79
 800941e:	e7f6      	b.n	800940e <_scanf_float+0x12a>
 8009420:	6821      	ldr	r1, [r4, #0]
 8009422:	05c8      	lsls	r0, r1, #23
 8009424:	d51a      	bpl.n	800945c <_scanf_float+0x178>
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800942c:	6021      	str	r1, [r4, #0]
 800942e:	f109 0901 	add.w	r9, r9, #1
 8009432:	b11b      	cbz	r3, 800943c <_scanf_float+0x158>
 8009434:	3b01      	subs	r3, #1
 8009436:	3201      	adds	r2, #1
 8009438:	9302      	str	r3, [sp, #8]
 800943a:	60a2      	str	r2, [r4, #8]
 800943c:	68a3      	ldr	r3, [r4, #8]
 800943e:	3b01      	subs	r3, #1
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	3301      	adds	r3, #1
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3b01      	subs	r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	f340 8084 	ble.w	800955c <_scanf_float+0x278>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	e766      	b.n	800932a <_scanf_float+0x46>
 800945c:	eb1a 0f05 	cmn.w	sl, r5
 8009460:	f47f af70 	bne.w	8009344 <_scanf_float+0x60>
 8009464:	6822      	ldr	r2, [r4, #0]
 8009466:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	f806 3b01 	strb.w	r3, [r6], #1
 8009470:	e7e4      	b.n	800943c <_scanf_float+0x158>
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	0610      	lsls	r0, r2, #24
 8009476:	f57f af65 	bpl.w	8009344 <_scanf_float+0x60>
 800947a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800947e:	e7f4      	b.n	800946a <_scanf_float+0x186>
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	d10e      	bne.n	80094a4 <_scanf_float+0x1c0>
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	d10e      	bne.n	80094aa <_scanf_float+0x1c6>
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009492:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009496:	d108      	bne.n	80094aa <_scanf_float+0x1c6>
 8009498:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	f04f 0a01 	mov.w	sl, #1
 80094a2:	e7e3      	b.n	800946c <_scanf_float+0x188>
 80094a4:	f1ba 0f02 	cmp.w	sl, #2
 80094a8:	d055      	beq.n	8009556 <_scanf_float+0x272>
 80094aa:	2d01      	cmp	r5, #1
 80094ac:	d002      	beq.n	80094b4 <_scanf_float+0x1d0>
 80094ae:	2d04      	cmp	r5, #4
 80094b0:	f47f af48 	bne.w	8009344 <_scanf_float+0x60>
 80094b4:	3501      	adds	r5, #1
 80094b6:	b2ed      	uxtb	r5, r5
 80094b8:	e7d8      	b.n	800946c <_scanf_float+0x188>
 80094ba:	f1ba 0f01 	cmp.w	sl, #1
 80094be:	f47f af41 	bne.w	8009344 <_scanf_float+0x60>
 80094c2:	f04f 0a02 	mov.w	sl, #2
 80094c6:	e7d1      	b.n	800946c <_scanf_float+0x188>
 80094c8:	b97d      	cbnz	r5, 80094ea <_scanf_float+0x206>
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	f47f af3c 	bne.w	800934a <_scanf_float+0x66>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094dc:	f47f af39 	bne.w	8009352 <_scanf_float+0x6e>
 80094e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094e4:	6022      	str	r2, [r4, #0]
 80094e6:	2501      	movs	r5, #1
 80094e8:	e7c0      	b.n	800946c <_scanf_float+0x188>
 80094ea:	2d03      	cmp	r5, #3
 80094ec:	d0e2      	beq.n	80094b4 <_scanf_float+0x1d0>
 80094ee:	2d05      	cmp	r5, #5
 80094f0:	e7de      	b.n	80094b0 <_scanf_float+0x1cc>
 80094f2:	2d02      	cmp	r5, #2
 80094f4:	f47f af26 	bne.w	8009344 <_scanf_float+0x60>
 80094f8:	2503      	movs	r5, #3
 80094fa:	e7b7      	b.n	800946c <_scanf_float+0x188>
 80094fc:	2d06      	cmp	r5, #6
 80094fe:	f47f af21 	bne.w	8009344 <_scanf_float+0x60>
 8009502:	2507      	movs	r5, #7
 8009504:	e7b2      	b.n	800946c <_scanf_float+0x188>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	0591      	lsls	r1, r2, #22
 800950a:	f57f af1b 	bpl.w	8009344 <_scanf_float+0x60>
 800950e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	f8cd 9004 	str.w	r9, [sp, #4]
 8009518:	e7a8      	b.n	800946c <_scanf_float+0x188>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009520:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009524:	d006      	beq.n	8009534 <_scanf_float+0x250>
 8009526:	0550      	lsls	r0, r2, #21
 8009528:	f57f af0c 	bpl.w	8009344 <_scanf_float+0x60>
 800952c:	f1b9 0f00 	cmp.w	r9, #0
 8009530:	f43f af0f 	beq.w	8009352 <_scanf_float+0x6e>
 8009534:	0591      	lsls	r1, r2, #22
 8009536:	bf58      	it	pl
 8009538:	9901      	ldrpl	r1, [sp, #4]
 800953a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800953e:	bf58      	it	pl
 8009540:	eba9 0101 	subpl.w	r1, r9, r1
 8009544:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009548:	bf58      	it	pl
 800954a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800954e:	6022      	str	r2, [r4, #0]
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	e78a      	b.n	800946c <_scanf_float+0x188>
 8009556:	f04f 0a03 	mov.w	sl, #3
 800955a:	e787      	b.n	800946c <_scanf_float+0x188>
 800955c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009560:	4639      	mov	r1, r7
 8009562:	4640      	mov	r0, r8
 8009564:	4798      	blx	r3
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f aedf 	beq.w	800932a <_scanf_float+0x46>
 800956c:	e6ea      	b.n	8009344 <_scanf_float+0x60>
 800956e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009576:	463a      	mov	r2, r7
 8009578:	4640      	mov	r0, r8
 800957a:	4798      	blx	r3
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	3b01      	subs	r3, #1
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	e6ec      	b.n	800935e <_scanf_float+0x7a>
 8009584:	1e6b      	subs	r3, r5, #1
 8009586:	2b06      	cmp	r3, #6
 8009588:	d825      	bhi.n	80095d6 <_scanf_float+0x2f2>
 800958a:	2d02      	cmp	r5, #2
 800958c:	d836      	bhi.n	80095fc <_scanf_float+0x318>
 800958e:	455e      	cmp	r6, fp
 8009590:	f67f aee8 	bls.w	8009364 <_scanf_float+0x80>
 8009594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009598:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800959c:	463a      	mov	r2, r7
 800959e:	4640      	mov	r0, r8
 80095a0:	4798      	blx	r3
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	6123      	str	r3, [r4, #16]
 80095a8:	e7f1      	b.n	800958e <_scanf_float+0x2aa>
 80095aa:	9802      	ldr	r0, [sp, #8]
 80095ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	463a      	mov	r2, r7
 80095b8:	4640      	mov	r0, r8
 80095ba:	4798      	blx	r3
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	3b01      	subs	r3, #1
 80095c0:	6123      	str	r3, [r4, #16]
 80095c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095c6:	fa5f fa8a 	uxtb.w	sl, sl
 80095ca:	f1ba 0f02 	cmp.w	sl, #2
 80095ce:	d1ec      	bne.n	80095aa <_scanf_float+0x2c6>
 80095d0:	3d03      	subs	r5, #3
 80095d2:	b2ed      	uxtb	r5, r5
 80095d4:	1b76      	subs	r6, r6, r5
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	05da      	lsls	r2, r3, #23
 80095da:	d52f      	bpl.n	800963c <_scanf_float+0x358>
 80095dc:	055b      	lsls	r3, r3, #21
 80095de:	d510      	bpl.n	8009602 <_scanf_float+0x31e>
 80095e0:	455e      	cmp	r6, fp
 80095e2:	f67f aebf 	bls.w	8009364 <_scanf_float+0x80>
 80095e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ee:	463a      	mov	r2, r7
 80095f0:	4640      	mov	r0, r8
 80095f2:	4798      	blx	r3
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	6123      	str	r3, [r4, #16]
 80095fa:	e7f1      	b.n	80095e0 <_scanf_float+0x2fc>
 80095fc:	46aa      	mov	sl, r5
 80095fe:	9602      	str	r6, [sp, #8]
 8009600:	e7df      	b.n	80095c2 <_scanf_float+0x2de>
 8009602:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	2965      	cmp	r1, #101	; 0x65
 800960a:	f103 33ff 	add.w	r3, r3, #4294967295
 800960e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	d00c      	beq.n	8009630 <_scanf_float+0x34c>
 8009616:	2945      	cmp	r1, #69	; 0x45
 8009618:	d00a      	beq.n	8009630 <_scanf_float+0x34c>
 800961a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800961e:	463a      	mov	r2, r7
 8009620:	4640      	mov	r0, r8
 8009622:	4798      	blx	r3
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800962a:	3b01      	subs	r3, #1
 800962c:	1eb5      	subs	r5, r6, #2
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009634:	463a      	mov	r2, r7
 8009636:	4640      	mov	r0, r8
 8009638:	4798      	blx	r3
 800963a:	462e      	mov	r6, r5
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	f015 0510 	ands.w	r5, r5, #16
 8009642:	d158      	bne.n	80096f6 <_scanf_float+0x412>
 8009644:	7035      	strb	r5, [r6, #0]
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009650:	d11c      	bne.n	800968c <_scanf_float+0x3a8>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	454b      	cmp	r3, r9
 8009656:	eba3 0209 	sub.w	r2, r3, r9
 800965a:	d124      	bne.n	80096a6 <_scanf_float+0x3c2>
 800965c:	2200      	movs	r2, #0
 800965e:	4659      	mov	r1, fp
 8009660:	4640      	mov	r0, r8
 8009662:	f000 ff4b 	bl	800a4fc <_strtod_r>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	6821      	ldr	r1, [r4, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f011 0f02 	tst.w	r1, #2
 8009670:	ec57 6b10 	vmov	r6, r7, d0
 8009674:	f103 0204 	add.w	r2, r3, #4
 8009678:	d020      	beq.n	80096bc <_scanf_float+0x3d8>
 800967a:	9903      	ldr	r1, [sp, #12]
 800967c:	600a      	str	r2, [r1, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	e9c3 6700 	strd	r6, r7, [r3]
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	3301      	adds	r3, #1
 8009688:	60e3      	str	r3, [r4, #12]
 800968a:	e66c      	b.n	8009366 <_scanf_float+0x82>
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0e4      	beq.n	800965c <_scanf_float+0x378>
 8009692:	9905      	ldr	r1, [sp, #20]
 8009694:	230a      	movs	r3, #10
 8009696:	462a      	mov	r2, r5
 8009698:	3101      	adds	r1, #1
 800969a:	4640      	mov	r0, r8
 800969c:	f000 ffb8 	bl	800a610 <_strtol_r>
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	9e05      	ldr	r6, [sp, #20]
 80096a4:	1ac2      	subs	r2, r0, r3
 80096a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096aa:	429e      	cmp	r6, r3
 80096ac:	bf28      	it	cs
 80096ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096b2:	4912      	ldr	r1, [pc, #72]	; (80096fc <_scanf_float+0x418>)
 80096b4:	4630      	mov	r0, r6
 80096b6:	f000 f8d9 	bl	800986c <siprintf>
 80096ba:	e7cf      	b.n	800965c <_scanf_float+0x378>
 80096bc:	f011 0f04 	tst.w	r1, #4
 80096c0:	9903      	ldr	r1, [sp, #12]
 80096c2:	600a      	str	r2, [r1, #0]
 80096c4:	d1db      	bne.n	800967e <_scanf_float+0x39a>
 80096c6:	f8d3 8000 	ldr.w	r8, [r3]
 80096ca:	ee10 2a10 	vmov	r2, s0
 80096ce:	ee10 0a10 	vmov	r0, s0
 80096d2:	463b      	mov	r3, r7
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f7 fa31 	bl	8000b3c <__aeabi_dcmpun>
 80096da:	b128      	cbz	r0, 80096e8 <_scanf_float+0x404>
 80096dc:	4808      	ldr	r0, [pc, #32]	; (8009700 <_scanf_float+0x41c>)
 80096de:	f7ff f889 	bl	80087f4 <nanf>
 80096e2:	ed88 0a00 	vstr	s0, [r8]
 80096e6:	e7cd      	b.n	8009684 <_scanf_float+0x3a0>
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 fa84 	bl	8000bf8 <__aeabi_d2f>
 80096f0:	f8c8 0000 	str.w	r0, [r8]
 80096f4:	e7c6      	b.n	8009684 <_scanf_float+0x3a0>
 80096f6:	2500      	movs	r5, #0
 80096f8:	e635      	b.n	8009366 <_scanf_float+0x82>
 80096fa:	bf00      	nop
 80096fc:	0800e128 	.word	0x0800e128
 8009700:	0800e5a0 	.word	0x0800e5a0

08009704 <iprintf>:
 8009704:	b40f      	push	{r0, r1, r2, r3}
 8009706:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <iprintf+0x2c>)
 8009708:	b513      	push	{r0, r1, r4, lr}
 800970a:	681c      	ldr	r4, [r3, #0]
 800970c:	b124      	cbz	r4, 8009718 <iprintf+0x14>
 800970e:	69a3      	ldr	r3, [r4, #24]
 8009710:	b913      	cbnz	r3, 8009718 <iprintf+0x14>
 8009712:	4620      	mov	r0, r4
 8009714:	f001 ffd2 	bl	800b6bc <__sinit>
 8009718:	ab05      	add	r3, sp, #20
 800971a:	9a04      	ldr	r2, [sp, #16]
 800971c:	68a1      	ldr	r1, [r4, #8]
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	4620      	mov	r0, r4
 8009722:	f003 fad7 	bl	800ccd4 <_vfiprintf_r>
 8009726:	b002      	add	sp, #8
 8009728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800972c:	b004      	add	sp, #16
 800972e:	4770      	bx	lr
 8009730:	20000010 	.word	0x20000010

08009734 <putchar>:
 8009734:	4b09      	ldr	r3, [pc, #36]	; (800975c <putchar+0x28>)
 8009736:	b513      	push	{r0, r1, r4, lr}
 8009738:	681c      	ldr	r4, [r3, #0]
 800973a:	4601      	mov	r1, r0
 800973c:	b134      	cbz	r4, 800974c <putchar+0x18>
 800973e:	69a3      	ldr	r3, [r4, #24]
 8009740:	b923      	cbnz	r3, 800974c <putchar+0x18>
 8009742:	9001      	str	r0, [sp, #4]
 8009744:	4620      	mov	r0, r4
 8009746:	f001 ffb9 	bl	800b6bc <__sinit>
 800974a:	9901      	ldr	r1, [sp, #4]
 800974c:	68a2      	ldr	r2, [r4, #8]
 800974e:	4620      	mov	r0, r4
 8009750:	b002      	add	sp, #8
 8009752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009756:	f003 bbed 	b.w	800cf34 <_putc_r>
 800975a:	bf00      	nop
 800975c:	20000010 	.word	0x20000010

08009760 <_puts_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	460e      	mov	r6, r1
 8009764:	4605      	mov	r5, r0
 8009766:	b118      	cbz	r0, 8009770 <_puts_r+0x10>
 8009768:	6983      	ldr	r3, [r0, #24]
 800976a:	b90b      	cbnz	r3, 8009770 <_puts_r+0x10>
 800976c:	f001 ffa6 	bl	800b6bc <__sinit>
 8009770:	69ab      	ldr	r3, [r5, #24]
 8009772:	68ac      	ldr	r4, [r5, #8]
 8009774:	b913      	cbnz	r3, 800977c <_puts_r+0x1c>
 8009776:	4628      	mov	r0, r5
 8009778:	f001 ffa0 	bl	800b6bc <__sinit>
 800977c:	4b2c      	ldr	r3, [pc, #176]	; (8009830 <_puts_r+0xd0>)
 800977e:	429c      	cmp	r4, r3
 8009780:	d120      	bne.n	80097c4 <_puts_r+0x64>
 8009782:	686c      	ldr	r4, [r5, #4]
 8009784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009786:	07db      	lsls	r3, r3, #31
 8009788:	d405      	bmi.n	8009796 <_puts_r+0x36>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	0598      	lsls	r0, r3, #22
 800978e:	d402      	bmi.n	8009796 <_puts_r+0x36>
 8009790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009792:	f002 fba4 	bl	800bede <__retarget_lock_acquire_recursive>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	0719      	lsls	r1, r3, #28
 800979a:	d51d      	bpl.n	80097d8 <_puts_r+0x78>
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	b1db      	cbz	r3, 80097d8 <_puts_r+0x78>
 80097a0:	3e01      	subs	r6, #1
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097a8:	3b01      	subs	r3, #1
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	bb39      	cbnz	r1, 80097fe <_puts_r+0x9e>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da38      	bge.n	8009824 <_puts_r+0xc4>
 80097b2:	4622      	mov	r2, r4
 80097b4:	210a      	movs	r1, #10
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 ff2c 	bl	800a614 <__swbuf_r>
 80097bc:	3001      	adds	r0, #1
 80097be:	d011      	beq.n	80097e4 <_puts_r+0x84>
 80097c0:	250a      	movs	r5, #10
 80097c2:	e011      	b.n	80097e8 <_puts_r+0x88>
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <_puts_r+0xd4>)
 80097c6:	429c      	cmp	r4, r3
 80097c8:	d101      	bne.n	80097ce <_puts_r+0x6e>
 80097ca:	68ac      	ldr	r4, [r5, #8]
 80097cc:	e7da      	b.n	8009784 <_puts_r+0x24>
 80097ce:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <_puts_r+0xd8>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	bf08      	it	eq
 80097d4:	68ec      	ldreq	r4, [r5, #12]
 80097d6:	e7d5      	b.n	8009784 <_puts_r+0x24>
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 ff6c 	bl	800a6b8 <__swsetup_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0dd      	beq.n	80097a0 <_puts_r+0x40>
 80097e4:	f04f 35ff 	mov.w	r5, #4294967295
 80097e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d405      	bmi.n	80097fa <_puts_r+0x9a>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	059b      	lsls	r3, r3, #22
 80097f2:	d402      	bmi.n	80097fa <_puts_r+0x9a>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f002 fb73 	bl	800bee0 <__retarget_lock_release_recursive>
 80097fa:	4628      	mov	r0, r5
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da04      	bge.n	800980c <_puts_r+0xac>
 8009802:	69a2      	ldr	r2, [r4, #24]
 8009804:	429a      	cmp	r2, r3
 8009806:	dc06      	bgt.n	8009816 <_puts_r+0xb6>
 8009808:	290a      	cmp	r1, #10
 800980a:	d004      	beq.n	8009816 <_puts_r+0xb6>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	6022      	str	r2, [r4, #0]
 8009812:	7019      	strb	r1, [r3, #0]
 8009814:	e7c5      	b.n	80097a2 <_puts_r+0x42>
 8009816:	4622      	mov	r2, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f000 fefb 	bl	800a614 <__swbuf_r>
 800981e:	3001      	adds	r0, #1
 8009820:	d1bf      	bne.n	80097a2 <_puts_r+0x42>
 8009822:	e7df      	b.n	80097e4 <_puts_r+0x84>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	250a      	movs	r5, #10
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	6022      	str	r2, [r4, #0]
 800982c:	701d      	strb	r5, [r3, #0]
 800982e:	e7db      	b.n	80097e8 <_puts_r+0x88>
 8009830:	0800e338 	.word	0x0800e338
 8009834:	0800e358 	.word	0x0800e358
 8009838:	0800e318 	.word	0x0800e318

0800983c <puts>:
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <puts+0xc>)
 800983e:	4601      	mov	r1, r0
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f7ff bf8d 	b.w	8009760 <_puts_r>
 8009846:	bf00      	nop
 8009848:	20000010 	.word	0x20000010

0800984c <_sbrk_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d06      	ldr	r5, [pc, #24]	; (8009868 <_sbrk_r+0x1c>)
 8009850:	2300      	movs	r3, #0
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	f7f9 fffa 	bl	8003850 <_sbrk>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_sbrk_r+0x1a>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	b103      	cbz	r3, 8009866 <_sbrk_r+0x1a>
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	20000438 	.word	0x20000438

0800986c <siprintf>:
 800986c:	b40e      	push	{r1, r2, r3}
 800986e:	b500      	push	{lr}
 8009870:	b09c      	sub	sp, #112	; 0x70
 8009872:	ab1d      	add	r3, sp, #116	; 0x74
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	9006      	str	r0, [sp, #24]
 8009878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800987c:	4809      	ldr	r0, [pc, #36]	; (80098a4 <siprintf+0x38>)
 800987e:	9107      	str	r1, [sp, #28]
 8009880:	9104      	str	r1, [sp, #16]
 8009882:	4909      	ldr	r1, [pc, #36]	; (80098a8 <siprintf+0x3c>)
 8009884:	f853 2b04 	ldr.w	r2, [r3], #4
 8009888:	9105      	str	r1, [sp, #20]
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	a902      	add	r1, sp, #8
 8009890:	f003 f8f6 	bl	800ca80 <_svfiprintf_r>
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	b01c      	add	sp, #112	; 0x70
 800989c:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a0:	b003      	add	sp, #12
 80098a2:	4770      	bx	lr
 80098a4:	20000010 	.word	0x20000010
 80098a8:	ffff0208 	.word	0xffff0208

080098ac <sulp>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	4604      	mov	r4, r0
 80098b0:	460d      	mov	r5, r1
 80098b2:	ec45 4b10 	vmov	d0, r4, r5
 80098b6:	4616      	mov	r6, r2
 80098b8:	f002 ff02 	bl	800c6c0 <__ulp>
 80098bc:	ec51 0b10 	vmov	r0, r1, d0
 80098c0:	b17e      	cbz	r6, 80098e2 <sulp+0x36>
 80098c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dd09      	ble.n	80098e2 <sulp+0x36>
 80098ce:	051b      	lsls	r3, r3, #20
 80098d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80098d4:	2400      	movs	r4, #0
 80098d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80098da:	4622      	mov	r2, r4
 80098dc:	462b      	mov	r3, r5
 80098de:	f7f6 fe93 	bl	8000608 <__aeabi_dmul>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	0000      	movs	r0, r0
	...

080098e8 <_strtod_l>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	b0a3      	sub	sp, #140	; 0x8c
 80098ee:	461f      	mov	r7, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	931e      	str	r3, [sp, #120]	; 0x78
 80098f4:	4ba4      	ldr	r3, [pc, #656]	; (8009b88 <_strtod_l+0x2a0>)
 80098f6:	9219      	str	r2, [sp, #100]	; 0x64
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	9307      	str	r3, [sp, #28]
 80098fc:	4604      	mov	r4, r0
 80098fe:	4618      	mov	r0, r3
 8009900:	4688      	mov	r8, r1
 8009902:	f7f6 fc6d 	bl	80001e0 <strlen>
 8009906:	f04f 0a00 	mov.w	sl, #0
 800990a:	4605      	mov	r5, r0
 800990c:	f04f 0b00 	mov.w	fp, #0
 8009910:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	2a2b      	cmp	r2, #43	; 0x2b
 800991a:	d04c      	beq.n	80099b6 <_strtod_l+0xce>
 800991c:	d839      	bhi.n	8009992 <_strtod_l+0xaa>
 800991e:	2a0d      	cmp	r2, #13
 8009920:	d832      	bhi.n	8009988 <_strtod_l+0xa0>
 8009922:	2a08      	cmp	r2, #8
 8009924:	d832      	bhi.n	800998c <_strtod_l+0xa4>
 8009926:	2a00      	cmp	r2, #0
 8009928:	d03c      	beq.n	80099a4 <_strtod_l+0xbc>
 800992a:	2300      	movs	r3, #0
 800992c:	930e      	str	r3, [sp, #56]	; 0x38
 800992e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009930:	7833      	ldrb	r3, [r6, #0]
 8009932:	2b30      	cmp	r3, #48	; 0x30
 8009934:	f040 80b4 	bne.w	8009aa0 <_strtod_l+0x1b8>
 8009938:	7873      	ldrb	r3, [r6, #1]
 800993a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800993e:	2b58      	cmp	r3, #88	; 0x58
 8009940:	d16c      	bne.n	8009a1c <_strtod_l+0x134>
 8009942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	ab1e      	add	r3, sp, #120	; 0x78
 8009948:	9702      	str	r7, [sp, #8]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	4a8f      	ldr	r2, [pc, #572]	; (8009b8c <_strtod_l+0x2a4>)
 800994e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009950:	a91d      	add	r1, sp, #116	; 0x74
 8009952:	4620      	mov	r0, r4
 8009954:	f001 ffb6 	bl	800b8c4 <__gethex>
 8009958:	f010 0707 	ands.w	r7, r0, #7
 800995c:	4605      	mov	r5, r0
 800995e:	d005      	beq.n	800996c <_strtod_l+0x84>
 8009960:	2f06      	cmp	r7, #6
 8009962:	d12a      	bne.n	80099ba <_strtod_l+0xd2>
 8009964:	3601      	adds	r6, #1
 8009966:	2300      	movs	r3, #0
 8009968:	961d      	str	r6, [sp, #116]	; 0x74
 800996a:	930e      	str	r3, [sp, #56]	; 0x38
 800996c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 8596 	bne.w	800a4a0 <_strtod_l+0xbb8>
 8009974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009976:	b1db      	cbz	r3, 80099b0 <_strtod_l+0xc8>
 8009978:	4652      	mov	r2, sl
 800997a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800997e:	ec43 2b10 	vmov	d0, r2, r3
 8009982:	b023      	add	sp, #140	; 0x8c
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	2a20      	cmp	r2, #32
 800998a:	d1ce      	bne.n	800992a <_strtod_l+0x42>
 800998c:	3301      	adds	r3, #1
 800998e:	931d      	str	r3, [sp, #116]	; 0x74
 8009990:	e7c0      	b.n	8009914 <_strtod_l+0x2c>
 8009992:	2a2d      	cmp	r2, #45	; 0x2d
 8009994:	d1c9      	bne.n	800992a <_strtod_l+0x42>
 8009996:	2201      	movs	r2, #1
 8009998:	920e      	str	r2, [sp, #56]	; 0x38
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	921d      	str	r2, [sp, #116]	; 0x74
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1c4      	bne.n	800992e <_strtod_l+0x46>
 80099a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 8576 	bne.w	800a49c <_strtod_l+0xbb4>
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	e7e3      	b.n	800997e <_strtod_l+0x96>
 80099b6:	2200      	movs	r2, #0
 80099b8:	e7ee      	b.n	8009998 <_strtod_l+0xb0>
 80099ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099bc:	b13a      	cbz	r2, 80099ce <_strtod_l+0xe6>
 80099be:	2135      	movs	r1, #53	; 0x35
 80099c0:	a820      	add	r0, sp, #128	; 0x80
 80099c2:	f002 ff88 	bl	800c8d6 <__copybits>
 80099c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099c8:	4620      	mov	r0, r4
 80099ca:	f002 fb4d 	bl	800c068 <_Bfree>
 80099ce:	3f01      	subs	r7, #1
 80099d0:	2f05      	cmp	r7, #5
 80099d2:	d807      	bhi.n	80099e4 <_strtod_l+0xfc>
 80099d4:	e8df f007 	tbb	[pc, r7]
 80099d8:	1d180b0e 	.word	0x1d180b0e
 80099dc:	030e      	.short	0x030e
 80099de:	f04f 0b00 	mov.w	fp, #0
 80099e2:	46da      	mov	sl, fp
 80099e4:	0728      	lsls	r0, r5, #28
 80099e6:	d5c1      	bpl.n	800996c <_strtod_l+0x84>
 80099e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80099ec:	e7be      	b.n	800996c <_strtod_l+0x84>
 80099ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80099f2:	e7f7      	b.n	80099e4 <_strtod_l+0xfc>
 80099f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80099f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80099fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80099fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a06:	e7ed      	b.n	80099e4 <_strtod_l+0xfc>
 8009a08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009b90 <_strtod_l+0x2a8>
 8009a0c:	f04f 0a00 	mov.w	sl, #0
 8009a10:	e7e8      	b.n	80099e4 <_strtod_l+0xfc>
 8009a12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a16:	f04f 3aff 	mov.w	sl, #4294967295
 8009a1a:	e7e3      	b.n	80099e4 <_strtod_l+0xfc>
 8009a1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	921d      	str	r2, [sp, #116]	; 0x74
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	2b30      	cmp	r3, #48	; 0x30
 8009a26:	d0f9      	beq.n	8009a1c <_strtod_l+0x134>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d09f      	beq.n	800996c <_strtod_l+0x84>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a3c:	464f      	mov	r7, r9
 8009a3e:	220a      	movs	r2, #10
 8009a40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a42:	7806      	ldrb	r6, [r0, #0]
 8009a44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a48:	b2d9      	uxtb	r1, r3
 8009a4a:	2909      	cmp	r1, #9
 8009a4c:	d92a      	bls.n	8009aa4 <_strtod_l+0x1bc>
 8009a4e:	9907      	ldr	r1, [sp, #28]
 8009a50:	462a      	mov	r2, r5
 8009a52:	f003 fb04 	bl	800d05e <strncmp>
 8009a56:	b398      	cbz	r0, 8009ac0 <_strtod_l+0x1d8>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	4633      	mov	r3, r6
 8009a5c:	463d      	mov	r5, r7
 8009a5e:	9007      	str	r0, [sp, #28]
 8009a60:	4602      	mov	r2, r0
 8009a62:	2b65      	cmp	r3, #101	; 0x65
 8009a64:	d001      	beq.n	8009a6a <_strtod_l+0x182>
 8009a66:	2b45      	cmp	r3, #69	; 0x45
 8009a68:	d118      	bne.n	8009a9c <_strtod_l+0x1b4>
 8009a6a:	b91d      	cbnz	r5, 8009a74 <_strtod_l+0x18c>
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	4303      	orrs	r3, r0
 8009a70:	d098      	beq.n	80099a4 <_strtod_l+0xbc>
 8009a72:	2500      	movs	r5, #0
 8009a74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009a78:	f108 0301 	add.w	r3, r8, #1
 8009a7c:	931d      	str	r3, [sp, #116]	; 0x74
 8009a7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009a82:	2b2b      	cmp	r3, #43	; 0x2b
 8009a84:	d075      	beq.n	8009b72 <_strtod_l+0x28a>
 8009a86:	2b2d      	cmp	r3, #45	; 0x2d
 8009a88:	d07b      	beq.n	8009b82 <_strtod_l+0x29a>
 8009a8a:	f04f 0c00 	mov.w	ip, #0
 8009a8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009a92:	2909      	cmp	r1, #9
 8009a94:	f240 8082 	bls.w	8009b9c <_strtod_l+0x2b4>
 8009a98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	e09d      	b.n	8009bdc <_strtod_l+0x2f4>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e7c4      	b.n	8009a2e <_strtod_l+0x146>
 8009aa4:	2f08      	cmp	r7, #8
 8009aa6:	bfd8      	it	le
 8009aa8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009aaa:	f100 0001 	add.w	r0, r0, #1
 8009aae:	bfda      	itte	le
 8009ab0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ab4:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ab6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009aba:	3701      	adds	r7, #1
 8009abc:	901d      	str	r0, [sp, #116]	; 0x74
 8009abe:	e7bf      	b.n	8009a40 <_strtod_l+0x158>
 8009ac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ac2:	195a      	adds	r2, r3, r5
 8009ac4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ac6:	5d5b      	ldrb	r3, [r3, r5]
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	d037      	beq.n	8009b3c <_strtod_l+0x254>
 8009acc:	9007      	str	r0, [sp, #28]
 8009ace:	463d      	mov	r5, r7
 8009ad0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ad4:	2a09      	cmp	r2, #9
 8009ad6:	d912      	bls.n	8009afe <_strtod_l+0x216>
 8009ad8:	2201      	movs	r2, #1
 8009ada:	e7c2      	b.n	8009a62 <_strtod_l+0x17a>
 8009adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	921d      	str	r2, [sp, #116]	; 0x74
 8009ae2:	785b      	ldrb	r3, [r3, #1]
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	2b30      	cmp	r3, #48	; 0x30
 8009ae8:	d0f8      	beq.n	8009adc <_strtod_l+0x1f4>
 8009aea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009aee:	2a08      	cmp	r2, #8
 8009af0:	f200 84db 	bhi.w	800a4aa <_strtod_l+0xbc2>
 8009af4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009af6:	9007      	str	r0, [sp, #28]
 8009af8:	2000      	movs	r0, #0
 8009afa:	920a      	str	r2, [sp, #40]	; 0x28
 8009afc:	4605      	mov	r5, r0
 8009afe:	3b30      	subs	r3, #48	; 0x30
 8009b00:	f100 0201 	add.w	r2, r0, #1
 8009b04:	d014      	beq.n	8009b30 <_strtod_l+0x248>
 8009b06:	9907      	ldr	r1, [sp, #28]
 8009b08:	4411      	add	r1, r2
 8009b0a:	9107      	str	r1, [sp, #28]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	eb00 0e05 	add.w	lr, r0, r5
 8009b12:	210a      	movs	r1, #10
 8009b14:	4572      	cmp	r2, lr
 8009b16:	d113      	bne.n	8009b40 <_strtod_l+0x258>
 8009b18:	182a      	adds	r2, r5, r0
 8009b1a:	2a08      	cmp	r2, #8
 8009b1c:	f105 0501 	add.w	r5, r5, #1
 8009b20:	4405      	add	r5, r0
 8009b22:	dc1c      	bgt.n	8009b5e <_strtod_l+0x276>
 8009b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b26:	220a      	movs	r2, #10
 8009b28:	fb02 3301 	mla	r3, r2, r1, r3
 8009b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2e:	2200      	movs	r2, #0
 8009b30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b32:	1c59      	adds	r1, r3, #1
 8009b34:	911d      	str	r1, [sp, #116]	; 0x74
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	4610      	mov	r0, r2
 8009b3a:	e7c9      	b.n	8009ad0 <_strtod_l+0x1e8>
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	e7d2      	b.n	8009ae6 <_strtod_l+0x1fe>
 8009b40:	2a08      	cmp	r2, #8
 8009b42:	dc04      	bgt.n	8009b4e <_strtod_l+0x266>
 8009b44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b46:	434e      	muls	r6, r1
 8009b48:	9609      	str	r6, [sp, #36]	; 0x24
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	e7e2      	b.n	8009b14 <_strtod_l+0x22c>
 8009b4e:	f102 0c01 	add.w	ip, r2, #1
 8009b52:	f1bc 0f10 	cmp.w	ip, #16
 8009b56:	bfd8      	it	le
 8009b58:	fb01 f909 	mulle.w	r9, r1, r9
 8009b5c:	e7f5      	b.n	8009b4a <_strtod_l+0x262>
 8009b5e:	2d10      	cmp	r5, #16
 8009b60:	bfdc      	itt	le
 8009b62:	220a      	movle	r2, #10
 8009b64:	fb02 3909 	mlale	r9, r2, r9, r3
 8009b68:	e7e1      	b.n	8009b2e <_strtod_l+0x246>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9307      	str	r3, [sp, #28]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	e77c      	b.n	8009a6c <_strtod_l+0x184>
 8009b72:	f04f 0c00 	mov.w	ip, #0
 8009b76:	f108 0302 	add.w	r3, r8, #2
 8009b7a:	931d      	str	r3, [sp, #116]	; 0x74
 8009b7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009b80:	e785      	b.n	8009a8e <_strtod_l+0x1a6>
 8009b82:	f04f 0c01 	mov.w	ip, #1
 8009b86:	e7f6      	b.n	8009b76 <_strtod_l+0x28e>
 8009b88:	0800e3e4 	.word	0x0800e3e4
 8009b8c:	0800e130 	.word	0x0800e130
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b96:	1c59      	adds	r1, r3, #1
 8009b98:	911d      	str	r1, [sp, #116]	; 0x74
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b30      	cmp	r3, #48	; 0x30
 8009b9e:	d0f9      	beq.n	8009b94 <_strtod_l+0x2ac>
 8009ba0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009ba4:	2908      	cmp	r1, #8
 8009ba6:	f63f af79 	bhi.w	8009a9c <_strtod_l+0x1b4>
 8009baa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bb4:	1c59      	adds	r1, r3, #1
 8009bb6:	911d      	str	r1, [sp, #116]	; 0x74
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009bbe:	2e09      	cmp	r6, #9
 8009bc0:	d937      	bls.n	8009c32 <_strtod_l+0x34a>
 8009bc2:	9e08      	ldr	r6, [sp, #32]
 8009bc4:	1b89      	subs	r1, r1, r6
 8009bc6:	2908      	cmp	r1, #8
 8009bc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009bcc:	dc02      	bgt.n	8009bd4 <_strtod_l+0x2ec>
 8009bce:	4576      	cmp	r6, lr
 8009bd0:	bfa8      	it	ge
 8009bd2:	4676      	movge	r6, lr
 8009bd4:	f1bc 0f00 	cmp.w	ip, #0
 8009bd8:	d000      	beq.n	8009bdc <_strtod_l+0x2f4>
 8009bda:	4276      	negs	r6, r6
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	d14f      	bne.n	8009c80 <_strtod_l+0x398>
 8009be0:	9904      	ldr	r1, [sp, #16]
 8009be2:	4301      	orrs	r1, r0
 8009be4:	f47f aec2 	bne.w	800996c <_strtod_l+0x84>
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	f47f aedb 	bne.w	80099a4 <_strtod_l+0xbc>
 8009bee:	2b69      	cmp	r3, #105	; 0x69
 8009bf0:	d027      	beq.n	8009c42 <_strtod_l+0x35a>
 8009bf2:	dc24      	bgt.n	8009c3e <_strtod_l+0x356>
 8009bf4:	2b49      	cmp	r3, #73	; 0x49
 8009bf6:	d024      	beq.n	8009c42 <_strtod_l+0x35a>
 8009bf8:	2b4e      	cmp	r3, #78	; 0x4e
 8009bfa:	f47f aed3 	bne.w	80099a4 <_strtod_l+0xbc>
 8009bfe:	499e      	ldr	r1, [pc, #632]	; (8009e78 <_strtod_l+0x590>)
 8009c00:	a81d      	add	r0, sp, #116	; 0x74
 8009c02:	f002 f8b7 	bl	800bd74 <__match>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f43f aecc 	beq.w	80099a4 <_strtod_l+0xbc>
 8009c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b28      	cmp	r3, #40	; 0x28
 8009c12:	d12d      	bne.n	8009c70 <_strtod_l+0x388>
 8009c14:	4999      	ldr	r1, [pc, #612]	; (8009e7c <_strtod_l+0x594>)
 8009c16:	aa20      	add	r2, sp, #128	; 0x80
 8009c18:	a81d      	add	r0, sp, #116	; 0x74
 8009c1a:	f002 f8bf 	bl	800bd9c <__hexnan>
 8009c1e:	2805      	cmp	r0, #5
 8009c20:	d126      	bne.n	8009c70 <_strtod_l+0x388>
 8009c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009c28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c30:	e69c      	b.n	800996c <_strtod_l+0x84>
 8009c32:	210a      	movs	r1, #10
 8009c34:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009c38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c3c:	e7b9      	b.n	8009bb2 <_strtod_l+0x2ca>
 8009c3e:	2b6e      	cmp	r3, #110	; 0x6e
 8009c40:	e7db      	b.n	8009bfa <_strtod_l+0x312>
 8009c42:	498f      	ldr	r1, [pc, #572]	; (8009e80 <_strtod_l+0x598>)
 8009c44:	a81d      	add	r0, sp, #116	; 0x74
 8009c46:	f002 f895 	bl	800bd74 <__match>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f aeaa 	beq.w	80099a4 <_strtod_l+0xbc>
 8009c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c52:	498c      	ldr	r1, [pc, #560]	; (8009e84 <_strtod_l+0x59c>)
 8009c54:	3b01      	subs	r3, #1
 8009c56:	a81d      	add	r0, sp, #116	; 0x74
 8009c58:	931d      	str	r3, [sp, #116]	; 0x74
 8009c5a:	f002 f88b 	bl	800bd74 <__match>
 8009c5e:	b910      	cbnz	r0, 8009c66 <_strtod_l+0x37e>
 8009c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c62:	3301      	adds	r3, #1
 8009c64:	931d      	str	r3, [sp, #116]	; 0x74
 8009c66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009e94 <_strtod_l+0x5ac>
 8009c6a:	f04f 0a00 	mov.w	sl, #0
 8009c6e:	e67d      	b.n	800996c <_strtod_l+0x84>
 8009c70:	4885      	ldr	r0, [pc, #532]	; (8009e88 <_strtod_l+0x5a0>)
 8009c72:	f003 f9a9 	bl	800cfc8 <nan>
 8009c76:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c7e:	e675      	b.n	800996c <_strtod_l+0x84>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c84:	1af3      	subs	r3, r6, r3
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	bf08      	it	eq
 8009c8a:	462f      	moveq	r7, r5
 8009c8c:	2d10      	cmp	r5, #16
 8009c8e:	9308      	str	r3, [sp, #32]
 8009c90:	46a8      	mov	r8, r5
 8009c92:	bfa8      	it	ge
 8009c94:	f04f 0810 	movge.w	r8, #16
 8009c98:	f7f6 fc3c 	bl	8000514 <__aeabi_ui2d>
 8009c9c:	2d09      	cmp	r5, #9
 8009c9e:	4682      	mov	sl, r0
 8009ca0:	468b      	mov	fp, r1
 8009ca2:	dd13      	ble.n	8009ccc <_strtod_l+0x3e4>
 8009ca4:	4b79      	ldr	r3, [pc, #484]	; (8009e8c <_strtod_l+0x5a4>)
 8009ca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009caa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cae:	f7f6 fcab 	bl	8000608 <__aeabi_dmul>
 8009cb2:	4682      	mov	sl, r0
 8009cb4:	4648      	mov	r0, r9
 8009cb6:	468b      	mov	fp, r1
 8009cb8:	f7f6 fc2c 	bl	8000514 <__aeabi_ui2d>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	f7f6 faea 	bl	800029c <__adddf3>
 8009cc8:	4682      	mov	sl, r0
 8009cca:	468b      	mov	fp, r1
 8009ccc:	2d0f      	cmp	r5, #15
 8009cce:	dc38      	bgt.n	8009d42 <_strtod_l+0x45a>
 8009cd0:	9b08      	ldr	r3, [sp, #32]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f ae4a 	beq.w	800996c <_strtod_l+0x84>
 8009cd8:	dd24      	ble.n	8009d24 <_strtod_l+0x43c>
 8009cda:	2b16      	cmp	r3, #22
 8009cdc:	dc0b      	bgt.n	8009cf6 <_strtod_l+0x40e>
 8009cde:	4d6b      	ldr	r5, [pc, #428]	; (8009e8c <_strtod_l+0x5a4>)
 8009ce0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009ce4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009ce8:	4652      	mov	r2, sl
 8009cea:	465b      	mov	r3, fp
 8009cec:	f7f6 fc8c 	bl	8000608 <__aeabi_dmul>
 8009cf0:	4682      	mov	sl, r0
 8009cf2:	468b      	mov	fp, r1
 8009cf4:	e63a      	b.n	800996c <_strtod_l+0x84>
 8009cf6:	9a08      	ldr	r2, [sp, #32]
 8009cf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	db20      	blt.n	8009d42 <_strtod_l+0x45a>
 8009d00:	4c62      	ldr	r4, [pc, #392]	; (8009e8c <_strtod_l+0x5a4>)
 8009d02:	f1c5 050f 	rsb	r5, r5, #15
 8009d06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d12:	f7f6 fc79 	bl	8000608 <__aeabi_dmul>
 8009d16:	9b08      	ldr	r3, [sp, #32]
 8009d18:	1b5d      	subs	r5, r3, r5
 8009d1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d22:	e7e3      	b.n	8009cec <_strtod_l+0x404>
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	3316      	adds	r3, #22
 8009d28:	db0b      	blt.n	8009d42 <_strtod_l+0x45a>
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	4a57      	ldr	r2, [pc, #348]	; (8009e8c <_strtod_l+0x5a4>)
 8009d2e:	1b9e      	subs	r6, r3, r6
 8009d30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009d34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d38:	4650      	mov	r0, sl
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	f7f6 fd8e 	bl	800085c <__aeabi_ddiv>
 8009d40:	e7d6      	b.n	8009cf0 <_strtod_l+0x408>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	eba5 0808 	sub.w	r8, r5, r8
 8009d48:	4498      	add	r8, r3
 8009d4a:	f1b8 0f00 	cmp.w	r8, #0
 8009d4e:	dd71      	ble.n	8009e34 <_strtod_l+0x54c>
 8009d50:	f018 030f 	ands.w	r3, r8, #15
 8009d54:	d00a      	beq.n	8009d6c <_strtod_l+0x484>
 8009d56:	494d      	ldr	r1, [pc, #308]	; (8009e8c <_strtod_l+0x5a4>)
 8009d58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d5c:	4652      	mov	r2, sl
 8009d5e:	465b      	mov	r3, fp
 8009d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d64:	f7f6 fc50 	bl	8000608 <__aeabi_dmul>
 8009d68:	4682      	mov	sl, r0
 8009d6a:	468b      	mov	fp, r1
 8009d6c:	f038 080f 	bics.w	r8, r8, #15
 8009d70:	d04d      	beq.n	8009e0e <_strtod_l+0x526>
 8009d72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009d76:	dd22      	ble.n	8009dbe <_strtod_l+0x4d6>
 8009d78:	2500      	movs	r5, #0
 8009d7a:	462e      	mov	r6, r5
 8009d7c:	9509      	str	r5, [sp, #36]	; 0x24
 8009d7e:	9507      	str	r5, [sp, #28]
 8009d80:	2322      	movs	r3, #34	; 0x22
 8009d82:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009e94 <_strtod_l+0x5ac>
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	f04f 0a00 	mov.w	sl, #0
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f43f adec 	beq.w	800996c <_strtod_l+0x84>
 8009d94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009d96:	4620      	mov	r0, r4
 8009d98:	f002 f966 	bl	800c068 <_Bfree>
 8009d9c:	9907      	ldr	r1, [sp, #28]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f002 f962 	bl	800c068 <_Bfree>
 8009da4:	4631      	mov	r1, r6
 8009da6:	4620      	mov	r0, r4
 8009da8:	f002 f95e 	bl	800c068 <_Bfree>
 8009dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dae:	4620      	mov	r0, r4
 8009db0:	f002 f95a 	bl	800c068 <_Bfree>
 8009db4:	4629      	mov	r1, r5
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 f956 	bl	800c068 <_Bfree>
 8009dbc:	e5d6      	b.n	800996c <_strtod_l+0x84>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	4699      	mov	r9, r3
 8009dca:	f1b8 0f01 	cmp.w	r8, #1
 8009dce:	dc21      	bgt.n	8009e14 <_strtod_l+0x52c>
 8009dd0:	b10b      	cbz	r3, 8009dd6 <_strtod_l+0x4ee>
 8009dd2:	4682      	mov	sl, r0
 8009dd4:	468b      	mov	fp, r1
 8009dd6:	4b2e      	ldr	r3, [pc, #184]	; (8009e90 <_strtod_l+0x5a8>)
 8009dd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009ddc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009de0:	4652      	mov	r2, sl
 8009de2:	465b      	mov	r3, fp
 8009de4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009de8:	f7f6 fc0e 	bl	8000608 <__aeabi_dmul>
 8009dec:	4b29      	ldr	r3, [pc, #164]	; (8009e94 <_strtod_l+0x5ac>)
 8009dee:	460a      	mov	r2, r1
 8009df0:	400b      	ands	r3, r1
 8009df2:	4929      	ldr	r1, [pc, #164]	; (8009e98 <_strtod_l+0x5b0>)
 8009df4:	428b      	cmp	r3, r1
 8009df6:	4682      	mov	sl, r0
 8009df8:	d8be      	bhi.n	8009d78 <_strtod_l+0x490>
 8009dfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009dfe:	428b      	cmp	r3, r1
 8009e00:	bf86      	itte	hi
 8009e02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009e9c <_strtod_l+0x5b4>
 8009e06:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	e081      	b.n	8009f18 <_strtod_l+0x630>
 8009e14:	f018 0f01 	tst.w	r8, #1
 8009e18:	d007      	beq.n	8009e2a <_strtod_l+0x542>
 8009e1a:	4b1d      	ldr	r3, [pc, #116]	; (8009e90 <_strtod_l+0x5a8>)
 8009e1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f7f6 fbf0 	bl	8000608 <__aeabi_dmul>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f109 0901 	add.w	r9, r9, #1
 8009e2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e32:	e7ca      	b.n	8009dca <_strtod_l+0x4e2>
 8009e34:	d0eb      	beq.n	8009e0e <_strtod_l+0x526>
 8009e36:	f1c8 0800 	rsb	r8, r8, #0
 8009e3a:	f018 020f 	ands.w	r2, r8, #15
 8009e3e:	d00a      	beq.n	8009e56 <_strtod_l+0x56e>
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <_strtod_l+0x5a4>)
 8009e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e46:	4650      	mov	r0, sl
 8009e48:	4659      	mov	r1, fp
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fd05 	bl	800085c <__aeabi_ddiv>
 8009e52:	4682      	mov	sl, r0
 8009e54:	468b      	mov	fp, r1
 8009e56:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009e5a:	d0d8      	beq.n	8009e0e <_strtod_l+0x526>
 8009e5c:	f1b8 0f1f 	cmp.w	r8, #31
 8009e60:	dd1e      	ble.n	8009ea0 <_strtod_l+0x5b8>
 8009e62:	2500      	movs	r5, #0
 8009e64:	462e      	mov	r6, r5
 8009e66:	9509      	str	r5, [sp, #36]	; 0x24
 8009e68:	9507      	str	r5, [sp, #28]
 8009e6a:	2322      	movs	r3, #34	; 0x22
 8009e6c:	f04f 0a00 	mov.w	sl, #0
 8009e70:	f04f 0b00 	mov.w	fp, #0
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	e789      	b.n	8009d8c <_strtod_l+0x4a4>
 8009e78:	0800e101 	.word	0x0800e101
 8009e7c:	0800e144 	.word	0x0800e144
 8009e80:	0800e0f9 	.word	0x0800e0f9
 8009e84:	0800e284 	.word	0x0800e284
 8009e88:	0800e5a0 	.word	0x0800e5a0
 8009e8c:	0800e480 	.word	0x0800e480
 8009e90:	0800e458 	.word	0x0800e458
 8009e94:	7ff00000 	.word	0x7ff00000
 8009e98:	7ca00000 	.word	0x7ca00000
 8009e9c:	7fefffff 	.word	0x7fefffff
 8009ea0:	f018 0310 	ands.w	r3, r8, #16
 8009ea4:	bf18      	it	ne
 8009ea6:	236a      	movne	r3, #106	; 0x6a
 8009ea8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a260 <_strtod_l+0x978>
 8009eac:	9304      	str	r3, [sp, #16]
 8009eae:	4650      	mov	r0, sl
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f018 0f01 	tst.w	r8, #1
 8009eb8:	d004      	beq.n	8009ec4 <_strtod_l+0x5dc>
 8009eba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ebe:	f7f6 fba3 	bl	8000608 <__aeabi_dmul>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ec8:	f109 0908 	add.w	r9, r9, #8
 8009ecc:	d1f2      	bne.n	8009eb4 <_strtod_l+0x5cc>
 8009ece:	b10b      	cbz	r3, 8009ed4 <_strtod_l+0x5ec>
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	468b      	mov	fp, r1
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	b1bb      	cbz	r3, 8009f08 <_strtod_l+0x620>
 8009ed8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009edc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	4659      	mov	r1, fp
 8009ee4:	dd10      	ble.n	8009f08 <_strtod_l+0x620>
 8009ee6:	2b1f      	cmp	r3, #31
 8009ee8:	f340 8128 	ble.w	800a13c <_strtod_l+0x854>
 8009eec:	2b34      	cmp	r3, #52	; 0x34
 8009eee:	bfde      	ittt	le
 8009ef0:	3b20      	suble	r3, #32
 8009ef2:	f04f 32ff 	movle.w	r2, #4294967295
 8009ef6:	fa02 f303 	lslle.w	r3, r2, r3
 8009efa:	f04f 0a00 	mov.w	sl, #0
 8009efe:	bfcc      	ite	gt
 8009f00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f04:	ea03 0b01 	andle.w	fp, r3, r1
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	4659      	mov	r1, fp
 8009f10:	f7f6 fde2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d1a4      	bne.n	8009e62 <_strtod_l+0x57a>
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f1e:	462b      	mov	r3, r5
 8009f20:	463a      	mov	r2, r7
 8009f22:	4620      	mov	r0, r4
 8009f24:	f002 f90c 	bl	800c140 <__s2b>
 8009f28:	9009      	str	r0, [sp, #36]	; 0x24
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f43f af24 	beq.w	8009d78 <_strtod_l+0x490>
 8009f30:	9b07      	ldr	r3, [sp, #28]
 8009f32:	1b9e      	subs	r6, r3, r6
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	bfb4      	ite	lt
 8009f3a:	4633      	movlt	r3, r6
 8009f3c:	2300      	movge	r3, #0
 8009f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	2500      	movs	r5, #0
 8009f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f48:	9318      	str	r3, [sp, #96]	; 0x60
 8009f4a:	462e      	mov	r6, r5
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	4620      	mov	r0, r4
 8009f50:	6859      	ldr	r1, [r3, #4]
 8009f52:	f002 f849 	bl	800bfe8 <_Balloc>
 8009f56:	9007      	str	r0, [sp, #28]
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	f43f af11 	beq.w	8009d80 <_strtod_l+0x498>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f60:	691a      	ldr	r2, [r3, #16]
 8009f62:	3202      	adds	r2, #2
 8009f64:	f103 010c 	add.w	r1, r3, #12
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	300c      	adds	r0, #12
 8009f6c:	f7fe fc90 	bl	8008890 <memcpy>
 8009f70:	ec4b ab10 	vmov	d0, sl, fp
 8009f74:	aa20      	add	r2, sp, #128	; 0x80
 8009f76:	a91f      	add	r1, sp, #124	; 0x7c
 8009f78:	4620      	mov	r0, r4
 8009f7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009f7e:	f002 fc1b 	bl	800c7b8 <__d2b>
 8009f82:	901e      	str	r0, [sp, #120]	; 0x78
 8009f84:	2800      	cmp	r0, #0
 8009f86:	f43f aefb 	beq.w	8009d80 <_strtod_l+0x498>
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f002 f971 	bl	800c274 <__i2b>
 8009f92:	4606      	mov	r6, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f43f aef3 	beq.w	8009d80 <_strtod_l+0x498>
 8009f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f9c:	9904      	ldr	r1, [sp, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfab      	itete	ge
 8009fa2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009fa4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009fa6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009fa8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009fac:	bfac      	ite	ge
 8009fae:	eb03 0902 	addge.w	r9, r3, r2
 8009fb2:	1ad7      	sublt	r7, r2, r3
 8009fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fb6:	eba3 0801 	sub.w	r8, r3, r1
 8009fba:	4490      	add	r8, r2
 8009fbc:	4ba3      	ldr	r3, [pc, #652]	; (800a24c <_strtod_l+0x964>)
 8009fbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fc2:	4598      	cmp	r8, r3
 8009fc4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fc8:	f280 80cc 	bge.w	800a164 <_strtod_l+0x87c>
 8009fcc:	eba3 0308 	sub.w	r3, r3, r8
 8009fd0:	2b1f      	cmp	r3, #31
 8009fd2:	eba2 0203 	sub.w	r2, r2, r3
 8009fd6:	f04f 0101 	mov.w	r1, #1
 8009fda:	f300 80b6 	bgt.w	800a14a <_strtod_l+0x862>
 8009fde:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe2:	9311      	str	r3, [sp, #68]	; 0x44
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe8:	eb09 0802 	add.w	r8, r9, r2
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	45c1      	cmp	r9, r8
 8009ff0:	4417      	add	r7, r2
 8009ff2:	441f      	add	r7, r3
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	bfa8      	it	ge
 8009ff8:	4643      	movge	r3, r8
 8009ffa:	42bb      	cmp	r3, r7
 8009ffc:	bfa8      	it	ge
 8009ffe:	463b      	movge	r3, r7
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfc2      	ittt	gt
 800a004:	eba8 0803 	subgt.w	r8, r8, r3
 800a008:	1aff      	subgt	r7, r7, r3
 800a00a:	eba9 0903 	subgt.w	r9, r9, r3
 800a00e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	dd17      	ble.n	800a044 <_strtod_l+0x75c>
 800a014:	4631      	mov	r1, r6
 800a016:	461a      	mov	r2, r3
 800a018:	4620      	mov	r0, r4
 800a01a:	f002 f9e7 	bl	800c3ec <__pow5mult>
 800a01e:	4606      	mov	r6, r0
 800a020:	2800      	cmp	r0, #0
 800a022:	f43f aead 	beq.w	8009d80 <_strtod_l+0x498>
 800a026:	4601      	mov	r1, r0
 800a028:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a02a:	4620      	mov	r0, r4
 800a02c:	f002 f938 	bl	800c2a0 <__multiply>
 800a030:	900f      	str	r0, [sp, #60]	; 0x3c
 800a032:	2800      	cmp	r0, #0
 800a034:	f43f aea4 	beq.w	8009d80 <_strtod_l+0x498>
 800a038:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a03a:	4620      	mov	r0, r4
 800a03c:	f002 f814 	bl	800c068 <_Bfree>
 800a040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a042:	931e      	str	r3, [sp, #120]	; 0x78
 800a044:	f1b8 0f00 	cmp.w	r8, #0
 800a048:	f300 8091 	bgt.w	800a16e <_strtod_l+0x886>
 800a04c:	9b08      	ldr	r3, [sp, #32]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dd08      	ble.n	800a064 <_strtod_l+0x77c>
 800a052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a054:	9907      	ldr	r1, [sp, #28]
 800a056:	4620      	mov	r0, r4
 800a058:	f002 f9c8 	bl	800c3ec <__pow5mult>
 800a05c:	9007      	str	r0, [sp, #28]
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f ae8e 	beq.w	8009d80 <_strtod_l+0x498>
 800a064:	2f00      	cmp	r7, #0
 800a066:	dd08      	ble.n	800a07a <_strtod_l+0x792>
 800a068:	9907      	ldr	r1, [sp, #28]
 800a06a:	463a      	mov	r2, r7
 800a06c:	4620      	mov	r0, r4
 800a06e:	f002 fa17 	bl	800c4a0 <__lshift>
 800a072:	9007      	str	r0, [sp, #28]
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f ae83 	beq.w	8009d80 <_strtod_l+0x498>
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	dd08      	ble.n	800a092 <_strtod_l+0x7aa>
 800a080:	4631      	mov	r1, r6
 800a082:	464a      	mov	r2, r9
 800a084:	4620      	mov	r0, r4
 800a086:	f002 fa0b 	bl	800c4a0 <__lshift>
 800a08a:	4606      	mov	r6, r0
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f43f ae77 	beq.w	8009d80 <_strtod_l+0x498>
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a096:	4620      	mov	r0, r4
 800a098:	f002 fa8a 	bl	800c5b0 <__mdiff>
 800a09c:	4605      	mov	r5, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f43f ae6e 	beq.w	8009d80 <_strtod_l+0x498>
 800a0a4:	68c3      	ldr	r3, [r0, #12]
 800a0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60c3      	str	r3, [r0, #12]
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	f002 fa63 	bl	800c578 <__mcmp>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	da65      	bge.n	800a182 <_strtod_l+0x89a>
 800a0b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a0bc:	f040 8087 	bne.w	800a1ce <_strtod_l+0x8e6>
 800a0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f040 8082 	bne.w	800a1ce <_strtod_l+0x8e6>
 800a0ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0ce:	0d1b      	lsrs	r3, r3, #20
 800a0d0:	051b      	lsls	r3, r3, #20
 800a0d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0d6:	d97a      	bls.n	800a1ce <_strtod_l+0x8e6>
 800a0d8:	696b      	ldr	r3, [r5, #20]
 800a0da:	b913      	cbnz	r3, 800a0e2 <_strtod_l+0x7fa>
 800a0dc:	692b      	ldr	r3, [r5, #16]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	dd75      	ble.n	800a1ce <_strtod_l+0x8e6>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f002 f9da 	bl	800c4a0 <__lshift>
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	f002 fa42 	bl	800c578 <__mcmp>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	dd6a      	ble.n	800a1ce <_strtod_l+0x8e6>
 800a0f8:	9904      	ldr	r1, [sp, #16]
 800a0fa:	4a55      	ldr	r2, [pc, #340]	; (800a250 <_strtod_l+0x968>)
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	2900      	cmp	r1, #0
 800a100:	f000 8085 	beq.w	800a20e <_strtod_l+0x926>
 800a104:	ea02 010b 	and.w	r1, r2, fp
 800a108:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a10c:	dc7f      	bgt.n	800a20e <_strtod_l+0x926>
 800a10e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a112:	f77f aeaa 	ble.w	8009e6a <_strtod_l+0x582>
 800a116:	4a4f      	ldr	r2, [pc, #316]	; (800a254 <_strtod_l+0x96c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a11e:	4650      	mov	r0, sl
 800a120:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a124:	4659      	mov	r1, fp
 800a126:	f7f6 fa6f 	bl	8000608 <__aeabi_dmul>
 800a12a:	460b      	mov	r3, r1
 800a12c:	4303      	orrs	r3, r0
 800a12e:	bf08      	it	eq
 800a130:	2322      	moveq	r3, #34	; 0x22
 800a132:	4682      	mov	sl, r0
 800a134:	468b      	mov	fp, r1
 800a136:	bf08      	it	eq
 800a138:	6023      	streq	r3, [r4, #0]
 800a13a:	e62b      	b.n	8009d94 <_strtod_l+0x4ac>
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	fa02 f303 	lsl.w	r3, r2, r3
 800a144:	ea03 0a0a 	and.w	sl, r3, sl
 800a148:	e6de      	b.n	8009f08 <_strtod_l+0x620>
 800a14a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a14e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a152:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a156:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a15a:	fa01 f308 	lsl.w	r3, r1, r8
 800a15e:	930c      	str	r3, [sp, #48]	; 0x30
 800a160:	9111      	str	r1, [sp, #68]	; 0x44
 800a162:	e741      	b.n	8009fe8 <_strtod_l+0x700>
 800a164:	2300      	movs	r3, #0
 800a166:	930c      	str	r3, [sp, #48]	; 0x30
 800a168:	2301      	movs	r3, #1
 800a16a:	9311      	str	r3, [sp, #68]	; 0x44
 800a16c:	e73c      	b.n	8009fe8 <_strtod_l+0x700>
 800a16e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a170:	4642      	mov	r2, r8
 800a172:	4620      	mov	r0, r4
 800a174:	f002 f994 	bl	800c4a0 <__lshift>
 800a178:	901e      	str	r0, [sp, #120]	; 0x78
 800a17a:	2800      	cmp	r0, #0
 800a17c:	f47f af66 	bne.w	800a04c <_strtod_l+0x764>
 800a180:	e5fe      	b.n	8009d80 <_strtod_l+0x498>
 800a182:	465f      	mov	r7, fp
 800a184:	d16e      	bne.n	800a264 <_strtod_l+0x97c>
 800a186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a18c:	b342      	cbz	r2, 800a1e0 <_strtod_l+0x8f8>
 800a18e:	4a32      	ldr	r2, [pc, #200]	; (800a258 <_strtod_l+0x970>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d128      	bne.n	800a1e6 <_strtod_l+0x8fe>
 800a194:	9b04      	ldr	r3, [sp, #16]
 800a196:	4650      	mov	r0, sl
 800a198:	b1eb      	cbz	r3, 800a1d6 <_strtod_l+0x8ee>
 800a19a:	4a2d      	ldr	r2, [pc, #180]	; (800a250 <_strtod_l+0x968>)
 800a19c:	403a      	ands	r2, r7
 800a19e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a1a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a1a6:	d819      	bhi.n	800a1dc <_strtod_l+0x8f4>
 800a1a8:	0d12      	lsrs	r2, r2, #20
 800a1aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	d117      	bne.n	800a1e6 <_strtod_l+0x8fe>
 800a1b6:	4b29      	ldr	r3, [pc, #164]	; (800a25c <_strtod_l+0x974>)
 800a1b8:	429f      	cmp	r7, r3
 800a1ba:	d102      	bne.n	800a1c2 <_strtod_l+0x8da>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f43f addf 	beq.w	8009d80 <_strtod_l+0x498>
 800a1c2:	4b23      	ldr	r3, [pc, #140]	; (800a250 <_strtod_l+0x968>)
 800a1c4:	403b      	ands	r3, r7
 800a1c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a1ca:	f04f 0a00 	mov.w	sl, #0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1a0      	bne.n	800a116 <_strtod_l+0x82e>
 800a1d4:	e5de      	b.n	8009d94 <_strtod_l+0x4ac>
 800a1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1da:	e7ea      	b.n	800a1b2 <_strtod_l+0x8ca>
 800a1dc:	460b      	mov	r3, r1
 800a1de:	e7e8      	b.n	800a1b2 <_strtod_l+0x8ca>
 800a1e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a1e4:	d088      	beq.n	800a0f8 <_strtod_l+0x810>
 800a1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e8:	b1db      	cbz	r3, 800a222 <_strtod_l+0x93a>
 800a1ea:	423b      	tst	r3, r7
 800a1ec:	d0ef      	beq.n	800a1ce <_strtod_l+0x8e6>
 800a1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f0:	9a04      	ldr	r2, [sp, #16]
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	4659      	mov	r1, fp
 800a1f6:	b1c3      	cbz	r3, 800a22a <_strtod_l+0x942>
 800a1f8:	f7ff fb58 	bl	80098ac <sulp>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a204:	f7f6 f84a 	bl	800029c <__adddf3>
 800a208:	4682      	mov	sl, r0
 800a20a:	468b      	mov	fp, r1
 800a20c:	e7df      	b.n	800a1ce <_strtod_l+0x8e6>
 800a20e:	4013      	ands	r3, r2
 800a210:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a214:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a218:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a21c:	f04f 3aff 	mov.w	sl, #4294967295
 800a220:	e7d5      	b.n	800a1ce <_strtod_l+0x8e6>
 800a222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a224:	ea13 0f0a 	tst.w	r3, sl
 800a228:	e7e0      	b.n	800a1ec <_strtod_l+0x904>
 800a22a:	f7ff fb3f 	bl	80098ac <sulp>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a236:	f7f6 f82f 	bl	8000298 <__aeabi_dsub>
 800a23a:	2200      	movs	r2, #0
 800a23c:	2300      	movs	r3, #0
 800a23e:	4682      	mov	sl, r0
 800a240:	468b      	mov	fp, r1
 800a242:	f7f6 fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 800a246:	2800      	cmp	r0, #0
 800a248:	d0c1      	beq.n	800a1ce <_strtod_l+0x8e6>
 800a24a:	e60e      	b.n	8009e6a <_strtod_l+0x582>
 800a24c:	fffffc02 	.word	0xfffffc02
 800a250:	7ff00000 	.word	0x7ff00000
 800a254:	39500000 	.word	0x39500000
 800a258:	000fffff 	.word	0x000fffff
 800a25c:	7fefffff 	.word	0x7fefffff
 800a260:	0800e158 	.word	0x0800e158
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	f002 fb02 	bl	800c870 <__ratio>
 800a26c:	ec59 8b10 	vmov	r8, r9, d0
 800a270:	ee10 0a10 	vmov	r0, s0
 800a274:	2200      	movs	r2, #0
 800a276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a27a:	4649      	mov	r1, r9
 800a27c:	f7f6 fc40 	bl	8000b00 <__aeabi_dcmple>
 800a280:	2800      	cmp	r0, #0
 800a282:	d07c      	beq.n	800a37e <_strtod_l+0xa96>
 800a284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d04c      	beq.n	800a324 <_strtod_l+0xa3c>
 800a28a:	4b95      	ldr	r3, [pc, #596]	; (800a4e0 <_strtod_l+0xbf8>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a292:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a4e0 <_strtod_l+0xbf8>
 800a296:	f04f 0800 	mov.w	r8, #0
 800a29a:	4b92      	ldr	r3, [pc, #584]	; (800a4e4 <_strtod_l+0xbfc>)
 800a29c:	403b      	ands	r3, r7
 800a29e:	9311      	str	r3, [sp, #68]	; 0x44
 800a2a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2a2:	4b91      	ldr	r3, [pc, #580]	; (800a4e8 <_strtod_l+0xc00>)
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	f040 80b2 	bne.w	800a40e <_strtod_l+0xb26>
 800a2aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a2b6:	ec4b ab10 	vmov	d0, sl, fp
 800a2ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a2be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2c2:	f002 f9fd 	bl	800c6c0 <__ulp>
 800a2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ca:	ec53 2b10 	vmov	r2, r3, d0
 800a2ce:	f7f6 f99b 	bl	8000608 <__aeabi_dmul>
 800a2d2:	4652      	mov	r2, sl
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	f7f5 ffe1 	bl	800029c <__adddf3>
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4981      	ldr	r1, [pc, #516]	; (800a4e4 <_strtod_l+0xbfc>)
 800a2de:	4a83      	ldr	r2, [pc, #524]	; (800a4ec <_strtod_l+0xc04>)
 800a2e0:	4019      	ands	r1, r3
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	d95e      	bls.n	800a3a6 <_strtod_l+0xabe>
 800a2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d103      	bne.n	800a2fa <_strtod_l+0xa12>
 800a2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	f43f ad43 	beq.w	8009d80 <_strtod_l+0x498>
 800a2fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a4f8 <_strtod_l+0xc10>
 800a2fe:	f04f 3aff 	mov.w	sl, #4294967295
 800a302:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a304:	4620      	mov	r0, r4
 800a306:	f001 feaf 	bl	800c068 <_Bfree>
 800a30a:	9907      	ldr	r1, [sp, #28]
 800a30c:	4620      	mov	r0, r4
 800a30e:	f001 feab 	bl	800c068 <_Bfree>
 800a312:	4631      	mov	r1, r6
 800a314:	4620      	mov	r0, r4
 800a316:	f001 fea7 	bl	800c068 <_Bfree>
 800a31a:	4629      	mov	r1, r5
 800a31c:	4620      	mov	r0, r4
 800a31e:	f001 fea3 	bl	800c068 <_Bfree>
 800a322:	e613      	b.n	8009f4c <_strtod_l+0x664>
 800a324:	f1ba 0f00 	cmp.w	sl, #0
 800a328:	d11b      	bne.n	800a362 <_strtod_l+0xa7a>
 800a32a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a32e:	b9f3      	cbnz	r3, 800a36e <_strtod_l+0xa86>
 800a330:	4b6b      	ldr	r3, [pc, #428]	; (800a4e0 <_strtod_l+0xbf8>)
 800a332:	2200      	movs	r2, #0
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f6 fbd8 	bl	8000aec <__aeabi_dcmplt>
 800a33c:	b9d0      	cbnz	r0, 800a374 <_strtod_l+0xa8c>
 800a33e:	4640      	mov	r0, r8
 800a340:	4649      	mov	r1, r9
 800a342:	4b6b      	ldr	r3, [pc, #428]	; (800a4f0 <_strtod_l+0xc08>)
 800a344:	2200      	movs	r2, #0
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	4680      	mov	r8, r0
 800a34c:	4689      	mov	r9, r1
 800a34e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a352:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a356:	931b      	str	r3, [sp, #108]	; 0x6c
 800a358:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a35c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a360:	e79b      	b.n	800a29a <_strtod_l+0x9b2>
 800a362:	f1ba 0f01 	cmp.w	sl, #1
 800a366:	d102      	bne.n	800a36e <_strtod_l+0xa86>
 800a368:	2f00      	cmp	r7, #0
 800a36a:	f43f ad7e 	beq.w	8009e6a <_strtod_l+0x582>
 800a36e:	4b61      	ldr	r3, [pc, #388]	; (800a4f4 <_strtod_l+0xc0c>)
 800a370:	2200      	movs	r2, #0
 800a372:	e78c      	b.n	800a28e <_strtod_l+0x9a6>
 800a374:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4f0 <_strtod_l+0xc08>
 800a378:	f04f 0800 	mov.w	r8, #0
 800a37c:	e7e7      	b.n	800a34e <_strtod_l+0xa66>
 800a37e:	4b5c      	ldr	r3, [pc, #368]	; (800a4f0 <_strtod_l+0xc08>)
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	2200      	movs	r2, #0
 800a386:	f7f6 f93f 	bl	8000608 <__aeabi_dmul>
 800a38a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	b933      	cbnz	r3, 800a3a0 <_strtod_l+0xab8>
 800a392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a396:	9012      	str	r0, [sp, #72]	; 0x48
 800a398:	9313      	str	r3, [sp, #76]	; 0x4c
 800a39a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a39e:	e7dd      	b.n	800a35c <_strtod_l+0xa74>
 800a3a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a3a4:	e7f9      	b.n	800a39a <_strtod_l+0xab2>
 800a3a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1a8      	bne.n	800a302 <_strtod_l+0xa1a>
 800a3b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3b6:	0d1b      	lsrs	r3, r3, #20
 800a3b8:	051b      	lsls	r3, r3, #20
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d1a1      	bne.n	800a302 <_strtod_l+0xa1a>
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	f7f6 fc81 	bl	8000cc8 <__aeabi_d2lz>
 800a3c6:	f7f6 f8f1 	bl	80005ac <__aeabi_l2d>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f5 ff61 	bl	8000298 <__aeabi_dsub>
 800a3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3dc:	ea43 030a 	orr.w	r3, r3, sl
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	d053      	beq.n	800a490 <_strtod_l+0xba8>
 800a3e8:	a335      	add	r3, pc, #212	; (adr r3, 800a4c0 <_strtod_l+0xbd8>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f6 fb7d 	bl	8000aec <__aeabi_dcmplt>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f47f acce 	bne.w	8009d94 <_strtod_l+0x4ac>
 800a3f8:	a333      	add	r3, pc, #204	; (adr r3, 800a4c8 <_strtod_l+0xbe0>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	4640      	mov	r0, r8
 800a400:	4649      	mov	r1, r9
 800a402:	f7f6 fb91 	bl	8000b28 <__aeabi_dcmpgt>
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f af7b 	beq.w	800a302 <_strtod_l+0xa1a>
 800a40c:	e4c2      	b.n	8009d94 <_strtod_l+0x4ac>
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	b333      	cbz	r3, 800a460 <_strtod_l+0xb78>
 800a412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a414:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a418:	d822      	bhi.n	800a460 <_strtod_l+0xb78>
 800a41a:	a32d      	add	r3, pc, #180	; (adr r3, 800a4d0 <_strtod_l+0xbe8>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 fb6c 	bl	8000b00 <__aeabi_dcmple>
 800a428:	b1a0      	cbz	r0, 800a454 <_strtod_l+0xb6c>
 800a42a:	4649      	mov	r1, r9
 800a42c:	4640      	mov	r0, r8
 800a42e:	f7f6 fbc3 	bl	8000bb8 <__aeabi_d2uiz>
 800a432:	2801      	cmp	r0, #1
 800a434:	bf38      	it	cc
 800a436:	2001      	movcc	r0, #1
 800a438:	f7f6 f86c 	bl	8000514 <__aeabi_ui2d>
 800a43c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a43e:	4680      	mov	r8, r0
 800a440:	4689      	mov	r9, r1
 800a442:	bb13      	cbnz	r3, 800a48a <_strtod_l+0xba2>
 800a444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a448:	9014      	str	r0, [sp, #80]	; 0x50
 800a44a:	9315      	str	r3, [sp, #84]	; 0x54
 800a44c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a450:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a458:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	930d      	str	r3, [sp, #52]	; 0x34
 800a460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a464:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a46c:	f002 f928 	bl	800c6c0 <__ulp>
 800a470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a474:	ec53 2b10 	vmov	r2, r3, d0
 800a478:	f7f6 f8c6 	bl	8000608 <__aeabi_dmul>
 800a47c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a480:	f7f5 ff0c 	bl	800029c <__adddf3>
 800a484:	4682      	mov	sl, r0
 800a486:	468b      	mov	fp, r1
 800a488:	e78f      	b.n	800a3aa <_strtod_l+0xac2>
 800a48a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a48e:	e7dd      	b.n	800a44c <_strtod_l+0xb64>
 800a490:	a311      	add	r3, pc, #68	; (adr r3, 800a4d8 <_strtod_l+0xbf0>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f6 fb29 	bl	8000aec <__aeabi_dcmplt>
 800a49a:	e7b4      	b.n	800a406 <_strtod_l+0xb1e>
 800a49c:	2300      	movs	r3, #0
 800a49e:	930e      	str	r3, [sp, #56]	; 0x38
 800a4a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	f7ff ba65 	b.w	8009974 <_strtod_l+0x8c>
 800a4aa:	2b65      	cmp	r3, #101	; 0x65
 800a4ac:	f43f ab5d 	beq.w	8009b6a <_strtod_l+0x282>
 800a4b0:	2b45      	cmp	r3, #69	; 0x45
 800a4b2:	f43f ab5a 	beq.w	8009b6a <_strtod_l+0x282>
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f7ff bb92 	b.w	8009be0 <_strtod_l+0x2f8>
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	94a03595 	.word	0x94a03595
 800a4c4:	3fdfffff 	.word	0x3fdfffff
 800a4c8:	35afe535 	.word	0x35afe535
 800a4cc:	3fe00000 	.word	0x3fe00000
 800a4d0:	ffc00000 	.word	0xffc00000
 800a4d4:	41dfffff 	.word	0x41dfffff
 800a4d8:	94a03595 	.word	0x94a03595
 800a4dc:	3fcfffff 	.word	0x3fcfffff
 800a4e0:	3ff00000 	.word	0x3ff00000
 800a4e4:	7ff00000 	.word	0x7ff00000
 800a4e8:	7fe00000 	.word	0x7fe00000
 800a4ec:	7c9fffff 	.word	0x7c9fffff
 800a4f0:	3fe00000 	.word	0x3fe00000
 800a4f4:	bff00000 	.word	0xbff00000
 800a4f8:	7fefffff 	.word	0x7fefffff

0800a4fc <_strtod_r>:
 800a4fc:	4b01      	ldr	r3, [pc, #4]	; (800a504 <_strtod_r+0x8>)
 800a4fe:	f7ff b9f3 	b.w	80098e8 <_strtod_l>
 800a502:	bf00      	nop
 800a504:	20000078 	.word	0x20000078

0800a508 <_strtol_l.isra.0>:
 800a508:	2b01      	cmp	r3, #1
 800a50a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a50e:	d001      	beq.n	800a514 <_strtol_l.isra.0+0xc>
 800a510:	2b24      	cmp	r3, #36	; 0x24
 800a512:	d906      	bls.n	800a522 <_strtol_l.isra.0+0x1a>
 800a514:	f7fe f974 	bl	8008800 <__errno>
 800a518:	2316      	movs	r3, #22
 800a51a:	6003      	str	r3, [r0, #0]
 800a51c:	2000      	movs	r0, #0
 800a51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a522:	4f3a      	ldr	r7, [pc, #232]	; (800a60c <_strtol_l.isra.0+0x104>)
 800a524:	468e      	mov	lr, r1
 800a526:	4676      	mov	r6, lr
 800a528:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a52c:	5de5      	ldrb	r5, [r4, r7]
 800a52e:	f015 0508 	ands.w	r5, r5, #8
 800a532:	d1f8      	bne.n	800a526 <_strtol_l.isra.0+0x1e>
 800a534:	2c2d      	cmp	r4, #45	; 0x2d
 800a536:	d134      	bne.n	800a5a2 <_strtol_l.isra.0+0x9a>
 800a538:	f89e 4000 	ldrb.w	r4, [lr]
 800a53c:	f04f 0801 	mov.w	r8, #1
 800a540:	f106 0e02 	add.w	lr, r6, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d05c      	beq.n	800a602 <_strtol_l.isra.0+0xfa>
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d10c      	bne.n	800a566 <_strtol_l.isra.0+0x5e>
 800a54c:	2c30      	cmp	r4, #48	; 0x30
 800a54e:	d10a      	bne.n	800a566 <_strtol_l.isra.0+0x5e>
 800a550:	f89e 4000 	ldrb.w	r4, [lr]
 800a554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a558:	2c58      	cmp	r4, #88	; 0x58
 800a55a:	d14d      	bne.n	800a5f8 <_strtol_l.isra.0+0xf0>
 800a55c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a560:	2310      	movs	r3, #16
 800a562:	f10e 0e02 	add.w	lr, lr, #2
 800a566:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a56a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a56e:	2600      	movs	r6, #0
 800a570:	fbbc f9f3 	udiv	r9, ip, r3
 800a574:	4635      	mov	r5, r6
 800a576:	fb03 ca19 	mls	sl, r3, r9, ip
 800a57a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a57e:	2f09      	cmp	r7, #9
 800a580:	d818      	bhi.n	800a5b4 <_strtol_l.isra.0+0xac>
 800a582:	463c      	mov	r4, r7
 800a584:	42a3      	cmp	r3, r4
 800a586:	dd24      	ble.n	800a5d2 <_strtol_l.isra.0+0xca>
 800a588:	2e00      	cmp	r6, #0
 800a58a:	db1f      	blt.n	800a5cc <_strtol_l.isra.0+0xc4>
 800a58c:	45a9      	cmp	r9, r5
 800a58e:	d31d      	bcc.n	800a5cc <_strtol_l.isra.0+0xc4>
 800a590:	d101      	bne.n	800a596 <_strtol_l.isra.0+0x8e>
 800a592:	45a2      	cmp	sl, r4
 800a594:	db1a      	blt.n	800a5cc <_strtol_l.isra.0+0xc4>
 800a596:	fb05 4503 	mla	r5, r5, r3, r4
 800a59a:	2601      	movs	r6, #1
 800a59c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a5a0:	e7eb      	b.n	800a57a <_strtol_l.isra.0+0x72>
 800a5a2:	2c2b      	cmp	r4, #43	; 0x2b
 800a5a4:	bf08      	it	eq
 800a5a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a5aa:	46a8      	mov	r8, r5
 800a5ac:	bf08      	it	eq
 800a5ae:	f106 0e02 	addeq.w	lr, r6, #2
 800a5b2:	e7c7      	b.n	800a544 <_strtol_l.isra.0+0x3c>
 800a5b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a5b8:	2f19      	cmp	r7, #25
 800a5ba:	d801      	bhi.n	800a5c0 <_strtol_l.isra.0+0xb8>
 800a5bc:	3c37      	subs	r4, #55	; 0x37
 800a5be:	e7e1      	b.n	800a584 <_strtol_l.isra.0+0x7c>
 800a5c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a5c4:	2f19      	cmp	r7, #25
 800a5c6:	d804      	bhi.n	800a5d2 <_strtol_l.isra.0+0xca>
 800a5c8:	3c57      	subs	r4, #87	; 0x57
 800a5ca:	e7db      	b.n	800a584 <_strtol_l.isra.0+0x7c>
 800a5cc:	f04f 36ff 	mov.w	r6, #4294967295
 800a5d0:	e7e4      	b.n	800a59c <_strtol_l.isra.0+0x94>
 800a5d2:	2e00      	cmp	r6, #0
 800a5d4:	da05      	bge.n	800a5e2 <_strtol_l.isra.0+0xda>
 800a5d6:	2322      	movs	r3, #34	; 0x22
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	4665      	mov	r5, ip
 800a5dc:	b942      	cbnz	r2, 800a5f0 <_strtol_l.isra.0+0xe8>
 800a5de:	4628      	mov	r0, r5
 800a5e0:	e79d      	b.n	800a51e <_strtol_l.isra.0+0x16>
 800a5e2:	f1b8 0f00 	cmp.w	r8, #0
 800a5e6:	d000      	beq.n	800a5ea <_strtol_l.isra.0+0xe2>
 800a5e8:	426d      	negs	r5, r5
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	d0f7      	beq.n	800a5de <_strtol_l.isra.0+0xd6>
 800a5ee:	b10e      	cbz	r6, 800a5f4 <_strtol_l.isra.0+0xec>
 800a5f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a5f4:	6011      	str	r1, [r2, #0]
 800a5f6:	e7f2      	b.n	800a5de <_strtol_l.isra.0+0xd6>
 800a5f8:	2430      	movs	r4, #48	; 0x30
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1b3      	bne.n	800a566 <_strtol_l.isra.0+0x5e>
 800a5fe:	2308      	movs	r3, #8
 800a600:	e7b1      	b.n	800a566 <_strtol_l.isra.0+0x5e>
 800a602:	2c30      	cmp	r4, #48	; 0x30
 800a604:	d0a4      	beq.n	800a550 <_strtol_l.isra.0+0x48>
 800a606:	230a      	movs	r3, #10
 800a608:	e7ad      	b.n	800a566 <_strtol_l.isra.0+0x5e>
 800a60a:	bf00      	nop
 800a60c:	0800e181 	.word	0x0800e181

0800a610 <_strtol_r>:
 800a610:	f7ff bf7a 	b.w	800a508 <_strtol_l.isra.0>

0800a614 <__swbuf_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	460e      	mov	r6, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	4605      	mov	r5, r0
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x12>
 800a61e:	6983      	ldr	r3, [r0, #24]
 800a620:	b90b      	cbnz	r3, 800a626 <__swbuf_r+0x12>
 800a622:	f001 f84b 	bl	800b6bc <__sinit>
 800a626:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <__swbuf_r+0x98>)
 800a628:	429c      	cmp	r4, r3
 800a62a:	d12b      	bne.n	800a684 <__swbuf_r+0x70>
 800a62c:	686c      	ldr	r4, [r5, #4]
 800a62e:	69a3      	ldr	r3, [r4, #24]
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	d52f      	bpl.n	800a698 <__swbuf_r+0x84>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b36b      	cbz	r3, 800a698 <__swbuf_r+0x84>
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	1ac0      	subs	r0, r0, r3
 800a642:	6963      	ldr	r3, [r4, #20]
 800a644:	b2f6      	uxtb	r6, r6
 800a646:	4283      	cmp	r3, r0
 800a648:	4637      	mov	r7, r6
 800a64a:	dc04      	bgt.n	800a656 <__swbuf_r+0x42>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 ffa0 	bl	800b594 <_fflush_r>
 800a654:	bb30      	cbnz	r0, 800a6a4 <__swbuf_r+0x90>
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	3b01      	subs	r3, #1
 800a65a:	60a3      	str	r3, [r4, #8]
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	6022      	str	r2, [r4, #0]
 800a662:	701e      	strb	r6, [r3, #0]
 800a664:	6963      	ldr	r3, [r4, #20]
 800a666:	3001      	adds	r0, #1
 800a668:	4283      	cmp	r3, r0
 800a66a:	d004      	beq.n	800a676 <__swbuf_r+0x62>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	07db      	lsls	r3, r3, #31
 800a670:	d506      	bpl.n	800a680 <__swbuf_r+0x6c>
 800a672:	2e0a      	cmp	r6, #10
 800a674:	d104      	bne.n	800a680 <__swbuf_r+0x6c>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 ff8b 	bl	800b594 <_fflush_r>
 800a67e:	b988      	cbnz	r0, 800a6a4 <__swbuf_r+0x90>
 800a680:	4638      	mov	r0, r7
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <__swbuf_r+0x9c>)
 800a686:	429c      	cmp	r4, r3
 800a688:	d101      	bne.n	800a68e <__swbuf_r+0x7a>
 800a68a:	68ac      	ldr	r4, [r5, #8]
 800a68c:	e7cf      	b.n	800a62e <__swbuf_r+0x1a>
 800a68e:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <__swbuf_r+0xa0>)
 800a690:	429c      	cmp	r4, r3
 800a692:	bf08      	it	eq
 800a694:	68ec      	ldreq	r4, [r5, #12]
 800a696:	e7ca      	b.n	800a62e <__swbuf_r+0x1a>
 800a698:	4621      	mov	r1, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	f000 f80c 	bl	800a6b8 <__swsetup_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0cb      	beq.n	800a63c <__swbuf_r+0x28>
 800a6a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6a8:	e7ea      	b.n	800a680 <__swbuf_r+0x6c>
 800a6aa:	bf00      	nop
 800a6ac:	0800e338 	.word	0x0800e338
 800a6b0:	0800e358 	.word	0x0800e358
 800a6b4:	0800e318 	.word	0x0800e318

0800a6b8 <__swsetup_r>:
 800a6b8:	4b32      	ldr	r3, [pc, #200]	; (800a784 <__swsetup_r+0xcc>)
 800a6ba:	b570      	push	{r4, r5, r6, lr}
 800a6bc:	681d      	ldr	r5, [r3, #0]
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	b125      	cbz	r5, 800a6ce <__swsetup_r+0x16>
 800a6c4:	69ab      	ldr	r3, [r5, #24]
 800a6c6:	b913      	cbnz	r3, 800a6ce <__swsetup_r+0x16>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 fff7 	bl	800b6bc <__sinit>
 800a6ce:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <__swsetup_r+0xd0>)
 800a6d0:	429c      	cmp	r4, r3
 800a6d2:	d10f      	bne.n	800a6f4 <__swsetup_r+0x3c>
 800a6d4:	686c      	ldr	r4, [r5, #4]
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6dc:	0719      	lsls	r1, r3, #28
 800a6de:	d42c      	bmi.n	800a73a <__swsetup_r+0x82>
 800a6e0:	06dd      	lsls	r5, r3, #27
 800a6e2:	d411      	bmi.n	800a708 <__swsetup_r+0x50>
 800a6e4:	2309      	movs	r3, #9
 800a6e6:	6033      	str	r3, [r6, #0]
 800a6e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	e03e      	b.n	800a772 <__swsetup_r+0xba>
 800a6f4:	4b25      	ldr	r3, [pc, #148]	; (800a78c <__swsetup_r+0xd4>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d101      	bne.n	800a6fe <__swsetup_r+0x46>
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	e7eb      	b.n	800a6d6 <__swsetup_r+0x1e>
 800a6fe:	4b24      	ldr	r3, [pc, #144]	; (800a790 <__swsetup_r+0xd8>)
 800a700:	429c      	cmp	r4, r3
 800a702:	bf08      	it	eq
 800a704:	68ec      	ldreq	r4, [r5, #12]
 800a706:	e7e6      	b.n	800a6d6 <__swsetup_r+0x1e>
 800a708:	0758      	lsls	r0, r3, #29
 800a70a:	d512      	bpl.n	800a732 <__swsetup_r+0x7a>
 800a70c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a70e:	b141      	cbz	r1, 800a722 <__swsetup_r+0x6a>
 800a710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <__swsetup_r+0x66>
 800a718:	4630      	mov	r0, r6
 800a71a:	f7fe f8cf 	bl	80088bc <_free_r>
 800a71e:	2300      	movs	r3, #0
 800a720:	6363      	str	r3, [r4, #52]	; 0x34
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	2300      	movs	r3, #0
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f043 0308 	orr.w	r3, r3, #8
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	b94b      	cbnz	r3, 800a752 <__swsetup_r+0x9a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a748:	d003      	beq.n	800a752 <__swsetup_r+0x9a>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4630      	mov	r0, r6
 800a74e:	f001 fbed 	bl	800bf2c <__smakebuf_r>
 800a752:	89a0      	ldrh	r0, [r4, #12]
 800a754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a758:	f010 0301 	ands.w	r3, r0, #1
 800a75c:	d00a      	beq.n	800a774 <__swsetup_r+0xbc>
 800a75e:	2300      	movs	r3, #0
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6963      	ldr	r3, [r4, #20]
 800a764:	425b      	negs	r3, r3
 800a766:	61a3      	str	r3, [r4, #24]
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	b943      	cbnz	r3, 800a77e <__swsetup_r+0xc6>
 800a76c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a770:	d1ba      	bne.n	800a6e8 <__swsetup_r+0x30>
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	0781      	lsls	r1, r0, #30
 800a776:	bf58      	it	pl
 800a778:	6963      	ldrpl	r3, [r4, #20]
 800a77a:	60a3      	str	r3, [r4, #8]
 800a77c:	e7f4      	b.n	800a768 <__swsetup_r+0xb0>
 800a77e:	2000      	movs	r0, #0
 800a780:	e7f7      	b.n	800a772 <__swsetup_r+0xba>
 800a782:	bf00      	nop
 800a784:	20000010 	.word	0x20000010
 800a788:	0800e338 	.word	0x0800e338
 800a78c:	0800e358 	.word	0x0800e358
 800a790:	0800e318 	.word	0x0800e318

0800a794 <quorem>:
 800a794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	6903      	ldr	r3, [r0, #16]
 800a79a:	690c      	ldr	r4, [r1, #16]
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	4607      	mov	r7, r0
 800a7a0:	f2c0 8081 	blt.w	800a8a6 <quorem+0x112>
 800a7a4:	3c01      	subs	r4, #1
 800a7a6:	f101 0814 	add.w	r8, r1, #20
 800a7aa:	f100 0514 	add.w	r5, r0, #20
 800a7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7cc:	d331      	bcc.n	800a832 <quorem+0x9e>
 800a7ce:	f04f 0e00 	mov.w	lr, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	46ac      	mov	ip, r5
 800a7d6:	46f2      	mov	sl, lr
 800a7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7dc:	b293      	uxth	r3, r2
 800a7de:	fb06 e303 	mla	r3, r6, r3, lr
 800a7e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7ec:	0c12      	lsrs	r2, r2, #16
 800a7ee:	f8dc a000 	ldr.w	sl, [ip]
 800a7f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a7f6:	fa13 f38a 	uxtah	r3, r3, sl
 800a7fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7fe:	fa1f fa82 	uxth.w	sl, r2
 800a802:	f8dc 2000 	ldr.w	r2, [ip]
 800a806:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a80a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a814:	4581      	cmp	r9, r0
 800a816:	f84c 3b04 	str.w	r3, [ip], #4
 800a81a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a81e:	d2db      	bcs.n	800a7d8 <quorem+0x44>
 800a820:	f855 300b 	ldr.w	r3, [r5, fp]
 800a824:	b92b      	cbnz	r3, 800a832 <quorem+0x9e>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	3b04      	subs	r3, #4
 800a82a:	429d      	cmp	r5, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	d32e      	bcc.n	800a88e <quorem+0xfa>
 800a830:	613c      	str	r4, [r7, #16]
 800a832:	4638      	mov	r0, r7
 800a834:	f001 fea0 	bl	800c578 <__mcmp>
 800a838:	2800      	cmp	r0, #0
 800a83a:	db24      	blt.n	800a886 <quorem+0xf2>
 800a83c:	3601      	adds	r6, #1
 800a83e:	4628      	mov	r0, r5
 800a840:	f04f 0c00 	mov.w	ip, #0
 800a844:	f858 2b04 	ldr.w	r2, [r8], #4
 800a848:	f8d0 e000 	ldr.w	lr, [r0]
 800a84c:	b293      	uxth	r3, r2
 800a84e:	ebac 0303 	sub.w	r3, ip, r3
 800a852:	0c12      	lsrs	r2, r2, #16
 800a854:	fa13 f38e 	uxtah	r3, r3, lr
 800a858:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a85c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a860:	b29b      	uxth	r3, r3
 800a862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a866:	45c1      	cmp	r9, r8
 800a868:	f840 3b04 	str.w	r3, [r0], #4
 800a86c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a870:	d2e8      	bcs.n	800a844 <quorem+0xb0>
 800a872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a87a:	b922      	cbnz	r2, 800a886 <quorem+0xf2>
 800a87c:	3b04      	subs	r3, #4
 800a87e:	429d      	cmp	r5, r3
 800a880:	461a      	mov	r2, r3
 800a882:	d30a      	bcc.n	800a89a <quorem+0x106>
 800a884:	613c      	str	r4, [r7, #16]
 800a886:	4630      	mov	r0, r6
 800a888:	b003      	add	sp, #12
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	6812      	ldr	r2, [r2, #0]
 800a890:	3b04      	subs	r3, #4
 800a892:	2a00      	cmp	r2, #0
 800a894:	d1cc      	bne.n	800a830 <quorem+0x9c>
 800a896:	3c01      	subs	r4, #1
 800a898:	e7c7      	b.n	800a82a <quorem+0x96>
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	d1f0      	bne.n	800a884 <quorem+0xf0>
 800a8a2:	3c01      	subs	r4, #1
 800a8a4:	e7eb      	b.n	800a87e <quorem+0xea>
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e7ee      	b.n	800a888 <quorem+0xf4>
 800a8aa:	0000      	movs	r0, r0
 800a8ac:	0000      	movs	r0, r0
	...

0800a8b0 <_dtoa_r>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ed2d 8b02 	vpush	{d8}
 800a8b8:	ec57 6b10 	vmov	r6, r7, d0
 800a8bc:	b095      	sub	sp, #84	; 0x54
 800a8be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8d0:	b975      	cbnz	r5, 800a8f0 <_dtoa_r+0x40>
 800a8d2:	2010      	movs	r0, #16
 800a8d4:	f7fd ffbe 	bl	8008854 <malloc>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6260      	str	r0, [r4, #36]	; 0x24
 800a8dc:	b920      	cbnz	r0, 800a8e8 <_dtoa_r+0x38>
 800a8de:	4bb2      	ldr	r3, [pc, #712]	; (800aba8 <_dtoa_r+0x2f8>)
 800a8e0:	21ea      	movs	r1, #234	; 0xea
 800a8e2:	48b2      	ldr	r0, [pc, #712]	; (800abac <_dtoa_r+0x2fc>)
 800a8e4:	f002 fbec 	bl	800d0c0 <__assert_func>
 800a8e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8ec:	6005      	str	r5, [r0, #0]
 800a8ee:	60c5      	str	r5, [r0, #12]
 800a8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	b151      	cbz	r1, 800a90c <_dtoa_r+0x5c>
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	604a      	str	r2, [r1, #4]
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4093      	lsls	r3, r2
 800a8fe:	608b      	str	r3, [r1, #8]
 800a900:	4620      	mov	r0, r4
 800a902:	f001 fbb1 	bl	800c068 <_Bfree>
 800a906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	1e3b      	subs	r3, r7, #0
 800a90e:	bfb9      	ittee	lt
 800a910:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a914:	9303      	strlt	r3, [sp, #12]
 800a916:	2300      	movge	r3, #0
 800a918:	f8c8 3000 	strge.w	r3, [r8]
 800a91c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a920:	4ba3      	ldr	r3, [pc, #652]	; (800abb0 <_dtoa_r+0x300>)
 800a922:	bfbc      	itt	lt
 800a924:	2201      	movlt	r2, #1
 800a926:	f8c8 2000 	strlt.w	r2, [r8]
 800a92a:	ea33 0309 	bics.w	r3, r3, r9
 800a92e:	d11b      	bne.n	800a968 <_dtoa_r+0xb8>
 800a930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a932:	f242 730f 	movw	r3, #9999	; 0x270f
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a93c:	4333      	orrs	r3, r6
 800a93e:	f000 857a 	beq.w	800b436 <_dtoa_r+0xb86>
 800a942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a944:	b963      	cbnz	r3, 800a960 <_dtoa_r+0xb0>
 800a946:	4b9b      	ldr	r3, [pc, #620]	; (800abb4 <_dtoa_r+0x304>)
 800a948:	e024      	b.n	800a994 <_dtoa_r+0xe4>
 800a94a:	4b9b      	ldr	r3, [pc, #620]	; (800abb8 <_dtoa_r+0x308>)
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	9800      	ldr	r0, [sp, #0]
 800a956:	b015      	add	sp, #84	; 0x54
 800a958:	ecbd 8b02 	vpop	{d8}
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a960:	4b94      	ldr	r3, [pc, #592]	; (800abb4 <_dtoa_r+0x304>)
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	3303      	adds	r3, #3
 800a966:	e7f3      	b.n	800a950 <_dtoa_r+0xa0>
 800a968:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a96c:	2200      	movs	r2, #0
 800a96e:	ec51 0b17 	vmov	r0, r1, d7
 800a972:	2300      	movs	r3, #0
 800a974:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a978:	f7f6 f8ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800a97c:	4680      	mov	r8, r0
 800a97e:	b158      	cbz	r0, 800a998 <_dtoa_r+0xe8>
 800a980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a982:	2301      	movs	r3, #1
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8551 	beq.w	800b430 <_dtoa_r+0xb80>
 800a98e:	488b      	ldr	r0, [pc, #556]	; (800abbc <_dtoa_r+0x30c>)
 800a990:	6018      	str	r0, [r3, #0]
 800a992:	1e43      	subs	r3, r0, #1
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	e7dd      	b.n	800a954 <_dtoa_r+0xa4>
 800a998:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a99c:	aa12      	add	r2, sp, #72	; 0x48
 800a99e:	a913      	add	r1, sp, #76	; 0x4c
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f001 ff09 	bl	800c7b8 <__d2b>
 800a9a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9aa:	4683      	mov	fp, r0
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	d07c      	beq.n	800aaaa <_dtoa_r+0x1fa>
 800a9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a9be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ca:	4b7d      	ldr	r3, [pc, #500]	; (800abc0 <_dtoa_r+0x310>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 fc61 	bl	8000298 <__aeabi_dsub>
 800a9d6:	a36e      	add	r3, pc, #440	; (adr r3, 800ab90 <_dtoa_r+0x2e0>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	f7f5 fe14 	bl	8000608 <__aeabi_dmul>
 800a9e0:	a36d      	add	r3, pc, #436	; (adr r3, 800ab98 <_dtoa_r+0x2e8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fc59 	bl	800029c <__adddf3>
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	f7f5 fda0 	bl	8000534 <__aeabi_i2d>
 800a9f4:	a36a      	add	r3, pc, #424	; (adr r3, 800aba0 <_dtoa_r+0x2f0>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fe05 	bl	8000608 <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 fc49 	bl	800029c <__adddf3>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	f7f6 f8ab 	bl	8000b68 <__aeabi_d2iz>
 800aa12:	2200      	movs	r2, #0
 800aa14:	4682      	mov	sl, r0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f6 f866 	bl	8000aec <__aeabi_dcmplt>
 800aa20:	b148      	cbz	r0, 800aa36 <_dtoa_r+0x186>
 800aa22:	4650      	mov	r0, sl
 800aa24:	f7f5 fd86 	bl	8000534 <__aeabi_i2d>
 800aa28:	4632      	mov	r2, r6
 800aa2a:	463b      	mov	r3, r7
 800aa2c:	f7f6 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa30:	b908      	cbnz	r0, 800aa36 <_dtoa_r+0x186>
 800aa32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa36:	f1ba 0f16 	cmp.w	sl, #22
 800aa3a:	d854      	bhi.n	800aae6 <_dtoa_r+0x236>
 800aa3c:	4b61      	ldr	r3, [pc, #388]	; (800abc4 <_dtoa_r+0x314>)
 800aa3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa4a:	f7f6 f84f 	bl	8000aec <__aeabi_dcmplt>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d04b      	beq.n	800aaea <_dtoa_r+0x23a>
 800aa52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa56:	2300      	movs	r3, #0
 800aa58:	930e      	str	r3, [sp, #56]	; 0x38
 800aa5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa5c:	1b5d      	subs	r5, r3, r5
 800aa5e:	1e6b      	subs	r3, r5, #1
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	bf43      	ittte	mi
 800aa64:	2300      	movmi	r3, #0
 800aa66:	f1c5 0801 	rsbmi	r8, r5, #1
 800aa6a:	9304      	strmi	r3, [sp, #16]
 800aa6c:	f04f 0800 	movpl.w	r8, #0
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	db3b      	blt.n	800aaee <_dtoa_r+0x23e>
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aa7c:	4453      	add	r3, sl
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	2300      	movs	r3, #0
 800aa82:	9306      	str	r3, [sp, #24]
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d869      	bhi.n	800ab5e <_dtoa_r+0x2ae>
 800aa8a:	2b05      	cmp	r3, #5
 800aa8c:	bfc4      	itt	gt
 800aa8e:	3b04      	subgt	r3, #4
 800aa90:	9305      	strgt	r3, [sp, #20]
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	f1a3 0302 	sub.w	r3, r3, #2
 800aa98:	bfcc      	ite	gt
 800aa9a:	2500      	movgt	r5, #0
 800aa9c:	2501      	movle	r5, #1
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d869      	bhi.n	800ab76 <_dtoa_r+0x2c6>
 800aaa2:	e8df f003 	tbb	[pc, r3]
 800aaa6:	4e2c      	.short	0x4e2c
 800aaa8:	5a4c      	.short	0x5a4c
 800aaaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aaae:	441d      	add	r5, r3
 800aab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	bfc1      	itttt	gt
 800aab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aabc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aac0:	fa09 f303 	lslgt.w	r3, r9, r3
 800aac4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aac8:	bfda      	itte	le
 800aaca:	f1c3 0320 	rsble	r3, r3, #32
 800aace:	fa06 f003 	lslle.w	r0, r6, r3
 800aad2:	4318      	orrgt	r0, r3
 800aad4:	f7f5 fd1e 	bl	8000514 <__aeabi_ui2d>
 800aad8:	2301      	movs	r3, #1
 800aada:	4606      	mov	r6, r0
 800aadc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aae0:	3d01      	subs	r5, #1
 800aae2:	9310      	str	r3, [sp, #64]	; 0x40
 800aae4:	e771      	b.n	800a9ca <_dtoa_r+0x11a>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7b6      	b.n	800aa58 <_dtoa_r+0x1a8>
 800aaea:	900e      	str	r0, [sp, #56]	; 0x38
 800aaec:	e7b5      	b.n	800aa5a <_dtoa_r+0x1aa>
 800aaee:	f1ca 0300 	rsb	r3, sl, #0
 800aaf2:	9306      	str	r3, [sp, #24]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	eba8 080a 	sub.w	r8, r8, sl
 800aafa:	930d      	str	r3, [sp, #52]	; 0x34
 800aafc:	e7c2      	b.n	800aa84 <_dtoa_r+0x1d4>
 800aafe:	2300      	movs	r3, #0
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dc39      	bgt.n	800ab7c <_dtoa_r+0x2cc>
 800ab08:	f04f 0901 	mov.w	r9, #1
 800ab0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab10:	464b      	mov	r3, r9
 800ab12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab18:	2200      	movs	r2, #0
 800ab1a:	6042      	str	r2, [r0, #4]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	f102 0614 	add.w	r6, r2, #20
 800ab22:	429e      	cmp	r6, r3
 800ab24:	6841      	ldr	r1, [r0, #4]
 800ab26:	d92f      	bls.n	800ab88 <_dtoa_r+0x2d8>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f001 fa5d 	bl	800bfe8 <_Balloc>
 800ab2e:	9000      	str	r0, [sp, #0]
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d14b      	bne.n	800abcc <_dtoa_r+0x31c>
 800ab34:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <_dtoa_r+0x318>)
 800ab36:	4602      	mov	r2, r0
 800ab38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab3c:	e6d1      	b.n	800a8e2 <_dtoa_r+0x32>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e7de      	b.n	800ab00 <_dtoa_r+0x250>
 800ab42:	2300      	movs	r3, #0
 800ab44:	9308      	str	r3, [sp, #32]
 800ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab48:	eb0a 0903 	add.w	r9, sl, r3
 800ab4c:	f109 0301 	add.w	r3, r9, #1
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	bfb8      	it	lt
 800ab56:	2301      	movlt	r3, #1
 800ab58:	e7dd      	b.n	800ab16 <_dtoa_r+0x266>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e7f2      	b.n	800ab44 <_dtoa_r+0x294>
 800ab5e:	2501      	movs	r5, #1
 800ab60:	2300      	movs	r3, #0
 800ab62:	9305      	str	r3, [sp, #20]
 800ab64:	9508      	str	r5, [sp, #32]
 800ab66:	f04f 39ff 	mov.w	r9, #4294967295
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab70:	2312      	movs	r3, #18
 800ab72:	9209      	str	r2, [sp, #36]	; 0x24
 800ab74:	e7cf      	b.n	800ab16 <_dtoa_r+0x266>
 800ab76:	2301      	movs	r3, #1
 800ab78:	9308      	str	r3, [sp, #32]
 800ab7a:	e7f4      	b.n	800ab66 <_dtoa_r+0x2b6>
 800ab7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ab80:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab84:	464b      	mov	r3, r9
 800ab86:	e7c6      	b.n	800ab16 <_dtoa_r+0x266>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	6041      	str	r1, [r0, #4]
 800ab8c:	0052      	lsls	r2, r2, #1
 800ab8e:	e7c6      	b.n	800ab1e <_dtoa_r+0x26e>
 800ab90:	636f4361 	.word	0x636f4361
 800ab94:	3fd287a7 	.word	0x3fd287a7
 800ab98:	8b60c8b3 	.word	0x8b60c8b3
 800ab9c:	3fc68a28 	.word	0x3fc68a28
 800aba0:	509f79fb 	.word	0x509f79fb
 800aba4:	3fd34413 	.word	0x3fd34413
 800aba8:	0800e28e 	.word	0x0800e28e
 800abac:	0800e2a5 	.word	0x0800e2a5
 800abb0:	7ff00000 	.word	0x7ff00000
 800abb4:	0800e28a 	.word	0x0800e28a
 800abb8:	0800e281 	.word	0x0800e281
 800abbc:	0800e105 	.word	0x0800e105
 800abc0:	3ff80000 	.word	0x3ff80000
 800abc4:	0800e480 	.word	0x0800e480
 800abc8:	0800e304 	.word	0x0800e304
 800abcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abce:	9a00      	ldr	r2, [sp, #0]
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	9b01      	ldr	r3, [sp, #4]
 800abd4:	2b0e      	cmp	r3, #14
 800abd6:	f200 80ad 	bhi.w	800ad34 <_dtoa_r+0x484>
 800abda:	2d00      	cmp	r5, #0
 800abdc:	f000 80aa 	beq.w	800ad34 <_dtoa_r+0x484>
 800abe0:	f1ba 0f00 	cmp.w	sl, #0
 800abe4:	dd36      	ble.n	800ac54 <_dtoa_r+0x3a4>
 800abe6:	4ac3      	ldr	r2, [pc, #780]	; (800aef4 <_dtoa_r+0x644>)
 800abe8:	f00a 030f 	and.w	r3, sl, #15
 800abec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abf0:	ed93 7b00 	vldr	d7, [r3]
 800abf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800abf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800abfc:	eeb0 8a47 	vmov.f32	s16, s14
 800ac00:	eef0 8a67 	vmov.f32	s17, s15
 800ac04:	d016      	beq.n	800ac34 <_dtoa_r+0x384>
 800ac06:	4bbc      	ldr	r3, [pc, #752]	; (800aef8 <_dtoa_r+0x648>)
 800ac08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac10:	f7f5 fe24 	bl	800085c <__aeabi_ddiv>
 800ac14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac18:	f007 070f 	and.w	r7, r7, #15
 800ac1c:	2503      	movs	r5, #3
 800ac1e:	4eb6      	ldr	r6, [pc, #728]	; (800aef8 <_dtoa_r+0x648>)
 800ac20:	b957      	cbnz	r7, 800ac38 <_dtoa_r+0x388>
 800ac22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac26:	ec53 2b18 	vmov	r2, r3, d8
 800ac2a:	f7f5 fe17 	bl	800085c <__aeabi_ddiv>
 800ac2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac32:	e029      	b.n	800ac88 <_dtoa_r+0x3d8>
 800ac34:	2502      	movs	r5, #2
 800ac36:	e7f2      	b.n	800ac1e <_dtoa_r+0x36e>
 800ac38:	07f9      	lsls	r1, r7, #31
 800ac3a:	d508      	bpl.n	800ac4e <_dtoa_r+0x39e>
 800ac3c:	ec51 0b18 	vmov	r0, r1, d8
 800ac40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac44:	f7f5 fce0 	bl	8000608 <__aeabi_dmul>
 800ac48:	ec41 0b18 	vmov	d8, r0, r1
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	107f      	asrs	r7, r7, #1
 800ac50:	3608      	adds	r6, #8
 800ac52:	e7e5      	b.n	800ac20 <_dtoa_r+0x370>
 800ac54:	f000 80a6 	beq.w	800ada4 <_dtoa_r+0x4f4>
 800ac58:	f1ca 0600 	rsb	r6, sl, #0
 800ac5c:	4ba5      	ldr	r3, [pc, #660]	; (800aef4 <_dtoa_r+0x644>)
 800ac5e:	4fa6      	ldr	r7, [pc, #664]	; (800aef8 <_dtoa_r+0x648>)
 800ac60:	f006 020f 	and.w	r2, r6, #15
 800ac64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac70:	f7f5 fcca 	bl	8000608 <__aeabi_dmul>
 800ac74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac78:	1136      	asrs	r6, r6, #4
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2502      	movs	r5, #2
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	f040 8085 	bne.w	800ad8e <_dtoa_r+0x4de>
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1d2      	bne.n	800ac2e <_dtoa_r+0x37e>
 800ac88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 808c 	beq.w	800ada8 <_dtoa_r+0x4f8>
 800ac90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac94:	4b99      	ldr	r3, [pc, #612]	; (800aefc <_dtoa_r+0x64c>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	4630      	mov	r0, r6
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 ff26 	bl	8000aec <__aeabi_dcmplt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f000 8081 	beq.w	800ada8 <_dtoa_r+0x4f8>
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d07d      	beq.n	800ada8 <_dtoa_r+0x4f8>
 800acac:	f1b9 0f00 	cmp.w	r9, #0
 800acb0:	dd3c      	ble.n	800ad2c <_dtoa_r+0x47c>
 800acb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	2200      	movs	r2, #0
 800acba:	4b91      	ldr	r3, [pc, #580]	; (800af00 <_dtoa_r+0x650>)
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fca2 	bl	8000608 <__aeabi_dmul>
 800acc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc8:	3501      	adds	r5, #1
 800acca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800acce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acd2:	4628      	mov	r0, r5
 800acd4:	f7f5 fc2e 	bl	8000534 <__aeabi_i2d>
 800acd8:	4632      	mov	r2, r6
 800acda:	463b      	mov	r3, r7
 800acdc:	f7f5 fc94 	bl	8000608 <__aeabi_dmul>
 800ace0:	4b88      	ldr	r3, [pc, #544]	; (800af04 <_dtoa_r+0x654>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	f7f5 fada 	bl	800029c <__adddf3>
 800ace8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800acec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d15c      	bne.n	800adb2 <_dtoa_r+0x502>
 800acf8:	4b83      	ldr	r3, [pc, #524]	; (800af08 <_dtoa_r+0x658>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	4630      	mov	r0, r6
 800acfe:	4639      	mov	r1, r7
 800ad00:	f7f5 faca 	bl	8000298 <__aeabi_dsub>
 800ad04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	f7f5 ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f040 8296 	bne.w	800b242 <_dtoa_r+0x992>
 800ad16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad20:	4639      	mov	r1, r7
 800ad22:	f7f5 fee3 	bl	8000aec <__aeabi_dcmplt>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f040 8288 	bne.w	800b23c <_dtoa_r+0x98c>
 800ad2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f2c0 8158 	blt.w	800afec <_dtoa_r+0x73c>
 800ad3c:	f1ba 0f0e 	cmp.w	sl, #14
 800ad40:	f300 8154 	bgt.w	800afec <_dtoa_r+0x73c>
 800ad44:	4b6b      	ldr	r3, [pc, #428]	; (800aef4 <_dtoa_r+0x644>)
 800ad46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f280 80e3 	bge.w	800af1c <_dtoa_r+0x66c>
 800ad56:	9b01      	ldr	r3, [sp, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f300 80df 	bgt.w	800af1c <_dtoa_r+0x66c>
 800ad5e:	f040 826d 	bne.w	800b23c <_dtoa_r+0x98c>
 800ad62:	4b69      	ldr	r3, [pc, #420]	; (800af08 <_dtoa_r+0x658>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 fc4d 	bl	8000608 <__aeabi_dmul>
 800ad6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad72:	f7f5 fecf 	bl	8000b14 <__aeabi_dcmpge>
 800ad76:	9e01      	ldr	r6, [sp, #4]
 800ad78:	4637      	mov	r7, r6
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f040 8243 	bne.w	800b206 <_dtoa_r+0x956>
 800ad80:	9d00      	ldr	r5, [sp, #0]
 800ad82:	2331      	movs	r3, #49	; 0x31
 800ad84:	f805 3b01 	strb.w	r3, [r5], #1
 800ad88:	f10a 0a01 	add.w	sl, sl, #1
 800ad8c:	e23f      	b.n	800b20e <_dtoa_r+0x95e>
 800ad8e:	07f2      	lsls	r2, r6, #31
 800ad90:	d505      	bpl.n	800ad9e <_dtoa_r+0x4ee>
 800ad92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad96:	f7f5 fc37 	bl	8000608 <__aeabi_dmul>
 800ad9a:	3501      	adds	r5, #1
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	1076      	asrs	r6, r6, #1
 800ada0:	3708      	adds	r7, #8
 800ada2:	e76c      	b.n	800ac7e <_dtoa_r+0x3ce>
 800ada4:	2502      	movs	r5, #2
 800ada6:	e76f      	b.n	800ac88 <_dtoa_r+0x3d8>
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	f8cd a01c 	str.w	sl, [sp, #28]
 800adae:	930c      	str	r3, [sp, #48]	; 0x30
 800adb0:	e78d      	b.n	800acce <_dtoa_r+0x41e>
 800adb2:	9900      	ldr	r1, [sp, #0]
 800adb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800adb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adb8:	4b4e      	ldr	r3, [pc, #312]	; (800aef4 <_dtoa_r+0x644>)
 800adba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adbe:	4401      	add	r1, r0
 800adc0:	9102      	str	r1, [sp, #8]
 800adc2:	9908      	ldr	r1, [sp, #32]
 800adc4:	eeb0 8a47 	vmov.f32	s16, s14
 800adc8:	eef0 8a67 	vmov.f32	s17, s15
 800adcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800add0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800add4:	2900      	cmp	r1, #0
 800add6:	d045      	beq.n	800ae64 <_dtoa_r+0x5b4>
 800add8:	494c      	ldr	r1, [pc, #304]	; (800af0c <_dtoa_r+0x65c>)
 800adda:	2000      	movs	r0, #0
 800addc:	f7f5 fd3e 	bl	800085c <__aeabi_ddiv>
 800ade0:	ec53 2b18 	vmov	r2, r3, d8
 800ade4:	f7f5 fa58 	bl	8000298 <__aeabi_dsub>
 800ade8:	9d00      	ldr	r5, [sp, #0]
 800adea:	ec41 0b18 	vmov	d8, r0, r1
 800adee:	4639      	mov	r1, r7
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7f5 feb9 	bl	8000b68 <__aeabi_d2iz>
 800adf6:	900c      	str	r0, [sp, #48]	; 0x30
 800adf8:	f7f5 fb9c 	bl	8000534 <__aeabi_i2d>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4630      	mov	r0, r6
 800ae02:	4639      	mov	r1, r7
 800ae04:	f7f5 fa48 	bl	8000298 <__aeabi_dsub>
 800ae08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae0a:	3330      	adds	r3, #48	; 0x30
 800ae0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ae10:	ec53 2b18 	vmov	r2, r3, d8
 800ae14:	4606      	mov	r6, r0
 800ae16:	460f      	mov	r7, r1
 800ae18:	f7f5 fe68 	bl	8000aec <__aeabi_dcmplt>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d165      	bne.n	800aeec <_dtoa_r+0x63c>
 800ae20:	4632      	mov	r2, r6
 800ae22:	463b      	mov	r3, r7
 800ae24:	4935      	ldr	r1, [pc, #212]	; (800aefc <_dtoa_r+0x64c>)
 800ae26:	2000      	movs	r0, #0
 800ae28:	f7f5 fa36 	bl	8000298 <__aeabi_dsub>
 800ae2c:	ec53 2b18 	vmov	r2, r3, d8
 800ae30:	f7f5 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f040 80b9 	bne.w	800afac <_dtoa_r+0x6fc>
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	429d      	cmp	r5, r3
 800ae3e:	f43f af75 	beq.w	800ad2c <_dtoa_r+0x47c>
 800ae42:	4b2f      	ldr	r3, [pc, #188]	; (800af00 <_dtoa_r+0x650>)
 800ae44:	ec51 0b18 	vmov	r0, r1, d8
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f7f5 fbdd 	bl	8000608 <__aeabi_dmul>
 800ae4e:	4b2c      	ldr	r3, [pc, #176]	; (800af00 <_dtoa_r+0x650>)
 800ae50:	ec41 0b18 	vmov	d8, r0, r1
 800ae54:	2200      	movs	r2, #0
 800ae56:	4630      	mov	r0, r6
 800ae58:	4639      	mov	r1, r7
 800ae5a:	f7f5 fbd5 	bl	8000608 <__aeabi_dmul>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460f      	mov	r7, r1
 800ae62:	e7c4      	b.n	800adee <_dtoa_r+0x53e>
 800ae64:	ec51 0b17 	vmov	r0, r1, d7
 800ae68:	f7f5 fbce 	bl	8000608 <__aeabi_dmul>
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	9d00      	ldr	r5, [sp, #0]
 800ae70:	930c      	str	r3, [sp, #48]	; 0x30
 800ae72:	ec41 0b18 	vmov	d8, r0, r1
 800ae76:	4639      	mov	r1, r7
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f7f5 fe75 	bl	8000b68 <__aeabi_d2iz>
 800ae7e:	9011      	str	r0, [sp, #68]	; 0x44
 800ae80:	f7f5 fb58 	bl	8000534 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 fa04 	bl	8000298 <__aeabi_dsub>
 800ae90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae92:	3330      	adds	r3, #48	; 0x30
 800ae94:	f805 3b01 	strb.w	r3, [r5], #1
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	429d      	cmp	r5, r3
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	460f      	mov	r7, r1
 800aea0:	f04f 0200 	mov.w	r2, #0
 800aea4:	d134      	bne.n	800af10 <_dtoa_r+0x660>
 800aea6:	4b19      	ldr	r3, [pc, #100]	; (800af0c <_dtoa_r+0x65c>)
 800aea8:	ec51 0b18 	vmov	r0, r1, d8
 800aeac:	f7f5 f9f6 	bl	800029c <__adddf3>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fe36 	bl	8000b28 <__aeabi_dcmpgt>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d175      	bne.n	800afac <_dtoa_r+0x6fc>
 800aec0:	ec53 2b18 	vmov	r2, r3, d8
 800aec4:	4911      	ldr	r1, [pc, #68]	; (800af0c <_dtoa_r+0x65c>)
 800aec6:	2000      	movs	r0, #0
 800aec8:	f7f5 f9e6 	bl	8000298 <__aeabi_dsub>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4630      	mov	r0, r6
 800aed2:	4639      	mov	r1, r7
 800aed4:	f7f5 fe0a 	bl	8000aec <__aeabi_dcmplt>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f43f af27 	beq.w	800ad2c <_dtoa_r+0x47c>
 800aede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aee0:	1e6b      	subs	r3, r5, #1
 800aee2:	930c      	str	r3, [sp, #48]	; 0x30
 800aee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aee8:	2b30      	cmp	r3, #48	; 0x30
 800aeea:	d0f8      	beq.n	800aede <_dtoa_r+0x62e>
 800aeec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aef0:	e04a      	b.n	800af88 <_dtoa_r+0x6d8>
 800aef2:	bf00      	nop
 800aef4:	0800e480 	.word	0x0800e480
 800aef8:	0800e458 	.word	0x0800e458
 800aefc:	3ff00000 	.word	0x3ff00000
 800af00:	40240000 	.word	0x40240000
 800af04:	401c0000 	.word	0x401c0000
 800af08:	40140000 	.word	0x40140000
 800af0c:	3fe00000 	.word	0x3fe00000
 800af10:	4baf      	ldr	r3, [pc, #700]	; (800b1d0 <_dtoa_r+0x920>)
 800af12:	f7f5 fb79 	bl	8000608 <__aeabi_dmul>
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	e7ac      	b.n	800ae76 <_dtoa_r+0x5c6>
 800af1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af20:	9d00      	ldr	r5, [sp, #0]
 800af22:	4642      	mov	r2, r8
 800af24:	464b      	mov	r3, r9
 800af26:	4630      	mov	r0, r6
 800af28:	4639      	mov	r1, r7
 800af2a:	f7f5 fc97 	bl	800085c <__aeabi_ddiv>
 800af2e:	f7f5 fe1b 	bl	8000b68 <__aeabi_d2iz>
 800af32:	9002      	str	r0, [sp, #8]
 800af34:	f7f5 fafe 	bl	8000534 <__aeabi_i2d>
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	f7f5 fb64 	bl	8000608 <__aeabi_dmul>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	f7f5 f9a6 	bl	8000298 <__aeabi_dsub>
 800af4c:	9e02      	ldr	r6, [sp, #8]
 800af4e:	9f01      	ldr	r7, [sp, #4]
 800af50:	3630      	adds	r6, #48	; 0x30
 800af52:	f805 6b01 	strb.w	r6, [r5], #1
 800af56:	9e00      	ldr	r6, [sp, #0]
 800af58:	1bae      	subs	r6, r5, r6
 800af5a:	42b7      	cmp	r7, r6
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	d137      	bne.n	800afd2 <_dtoa_r+0x722>
 800af62:	f7f5 f99b 	bl	800029c <__adddf3>
 800af66:	4642      	mov	r2, r8
 800af68:	464b      	mov	r3, r9
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	f7f5 fddb 	bl	8000b28 <__aeabi_dcmpgt>
 800af72:	b9c8      	cbnz	r0, 800afa8 <_dtoa_r+0x6f8>
 800af74:	4642      	mov	r2, r8
 800af76:	464b      	mov	r3, r9
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 800af80:	b110      	cbz	r0, 800af88 <_dtoa_r+0x6d8>
 800af82:	9b02      	ldr	r3, [sp, #8]
 800af84:	07d9      	lsls	r1, r3, #31
 800af86:	d40f      	bmi.n	800afa8 <_dtoa_r+0x6f8>
 800af88:	4620      	mov	r0, r4
 800af8a:	4659      	mov	r1, fp
 800af8c:	f001 f86c 	bl	800c068 <_Bfree>
 800af90:	2300      	movs	r3, #0
 800af92:	702b      	strb	r3, [r5, #0]
 800af94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af96:	f10a 0001 	add.w	r0, sl, #1
 800af9a:	6018      	str	r0, [r3, #0]
 800af9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f43f acd8 	beq.w	800a954 <_dtoa_r+0xa4>
 800afa4:	601d      	str	r5, [r3, #0]
 800afa6:	e4d5      	b.n	800a954 <_dtoa_r+0xa4>
 800afa8:	f8cd a01c 	str.w	sl, [sp, #28]
 800afac:	462b      	mov	r3, r5
 800afae:	461d      	mov	r5, r3
 800afb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afb4:	2a39      	cmp	r2, #57	; 0x39
 800afb6:	d108      	bne.n	800afca <_dtoa_r+0x71a>
 800afb8:	9a00      	ldr	r2, [sp, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d1f7      	bne.n	800afae <_dtoa_r+0x6fe>
 800afbe:	9a07      	ldr	r2, [sp, #28]
 800afc0:	9900      	ldr	r1, [sp, #0]
 800afc2:	3201      	adds	r2, #1
 800afc4:	9207      	str	r2, [sp, #28]
 800afc6:	2230      	movs	r2, #48	; 0x30
 800afc8:	700a      	strb	r2, [r1, #0]
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	3201      	adds	r2, #1
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	e78c      	b.n	800aeec <_dtoa_r+0x63c>
 800afd2:	4b7f      	ldr	r3, [pc, #508]	; (800b1d0 <_dtoa_r+0x920>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	f7f5 fb17 	bl	8000608 <__aeabi_dmul>
 800afda:	2200      	movs	r2, #0
 800afdc:	2300      	movs	r3, #0
 800afde:	4606      	mov	r6, r0
 800afe0:	460f      	mov	r7, r1
 800afe2:	f7f5 fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d09b      	beq.n	800af22 <_dtoa_r+0x672>
 800afea:	e7cd      	b.n	800af88 <_dtoa_r+0x6d8>
 800afec:	9a08      	ldr	r2, [sp, #32]
 800afee:	2a00      	cmp	r2, #0
 800aff0:	f000 80c4 	beq.w	800b17c <_dtoa_r+0x8cc>
 800aff4:	9a05      	ldr	r2, [sp, #20]
 800aff6:	2a01      	cmp	r2, #1
 800aff8:	f300 80a8 	bgt.w	800b14c <_dtoa_r+0x89c>
 800affc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800affe:	2a00      	cmp	r2, #0
 800b000:	f000 80a0 	beq.w	800b144 <_dtoa_r+0x894>
 800b004:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b008:	9e06      	ldr	r6, [sp, #24]
 800b00a:	4645      	mov	r5, r8
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	2101      	movs	r1, #1
 800b010:	441a      	add	r2, r3
 800b012:	4620      	mov	r0, r4
 800b014:	4498      	add	r8, r3
 800b016:	9204      	str	r2, [sp, #16]
 800b018:	f001 f92c 	bl	800c274 <__i2b>
 800b01c:	4607      	mov	r7, r0
 800b01e:	2d00      	cmp	r5, #0
 800b020:	dd0b      	ble.n	800b03a <_dtoa_r+0x78a>
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	dd08      	ble.n	800b03a <_dtoa_r+0x78a>
 800b028:	42ab      	cmp	r3, r5
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	bfa8      	it	ge
 800b02e:	462b      	movge	r3, r5
 800b030:	eba8 0803 	sub.w	r8, r8, r3
 800b034:	1aed      	subs	r5, r5, r3
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	b1fb      	cbz	r3, 800b07e <_dtoa_r+0x7ce>
 800b03e:	9b08      	ldr	r3, [sp, #32]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 809f 	beq.w	800b184 <_dtoa_r+0x8d4>
 800b046:	2e00      	cmp	r6, #0
 800b048:	dd11      	ble.n	800b06e <_dtoa_r+0x7be>
 800b04a:	4639      	mov	r1, r7
 800b04c:	4632      	mov	r2, r6
 800b04e:	4620      	mov	r0, r4
 800b050:	f001 f9cc 	bl	800c3ec <__pow5mult>
 800b054:	465a      	mov	r2, fp
 800b056:	4601      	mov	r1, r0
 800b058:	4607      	mov	r7, r0
 800b05a:	4620      	mov	r0, r4
 800b05c:	f001 f920 	bl	800c2a0 <__multiply>
 800b060:	4659      	mov	r1, fp
 800b062:	9007      	str	r0, [sp, #28]
 800b064:	4620      	mov	r0, r4
 800b066:	f000 ffff 	bl	800c068 <_Bfree>
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	469b      	mov	fp, r3
 800b06e:	9b06      	ldr	r3, [sp, #24]
 800b070:	1b9a      	subs	r2, r3, r6
 800b072:	d004      	beq.n	800b07e <_dtoa_r+0x7ce>
 800b074:	4659      	mov	r1, fp
 800b076:	4620      	mov	r0, r4
 800b078:	f001 f9b8 	bl	800c3ec <__pow5mult>
 800b07c:	4683      	mov	fp, r0
 800b07e:	2101      	movs	r1, #1
 800b080:	4620      	mov	r0, r4
 800b082:	f001 f8f7 	bl	800c274 <__i2b>
 800b086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b088:	2b00      	cmp	r3, #0
 800b08a:	4606      	mov	r6, r0
 800b08c:	dd7c      	ble.n	800b188 <_dtoa_r+0x8d8>
 800b08e:	461a      	mov	r2, r3
 800b090:	4601      	mov	r1, r0
 800b092:	4620      	mov	r0, r4
 800b094:	f001 f9aa 	bl	800c3ec <__pow5mult>
 800b098:	9b05      	ldr	r3, [sp, #20]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	4606      	mov	r6, r0
 800b09e:	dd76      	ble.n	800b18e <_dtoa_r+0x8de>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9306      	str	r3, [sp, #24]
 800b0a4:	6933      	ldr	r3, [r6, #16]
 800b0a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0aa:	6918      	ldr	r0, [r3, #16]
 800b0ac:	f001 f892 	bl	800c1d4 <__hi0bits>
 800b0b0:	f1c0 0020 	rsb	r0, r0, #32
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	4418      	add	r0, r3
 800b0b8:	f010 001f 	ands.w	r0, r0, #31
 800b0bc:	f000 8086 	beq.w	800b1cc <_dtoa_r+0x91c>
 800b0c0:	f1c0 0320 	rsb	r3, r0, #32
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	dd7f      	ble.n	800b1c8 <_dtoa_r+0x918>
 800b0c8:	f1c0 001c 	rsb	r0, r0, #28
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	4403      	add	r3, r0
 800b0d0:	4480      	add	r8, r0
 800b0d2:	4405      	add	r5, r0
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	dd05      	ble.n	800b0e8 <_dtoa_r+0x838>
 800b0dc:	4659      	mov	r1, fp
 800b0de:	4642      	mov	r2, r8
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f001 f9dd 	bl	800c4a0 <__lshift>
 800b0e6:	4683      	mov	fp, r0
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	dd05      	ble.n	800b0fa <_dtoa_r+0x84a>
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f001 f9d4 	bl	800c4a0 <__lshift>
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d069      	beq.n	800b1d4 <_dtoa_r+0x924>
 800b100:	4631      	mov	r1, r6
 800b102:	4658      	mov	r0, fp
 800b104:	f001 fa38 	bl	800c578 <__mcmp>
 800b108:	2800      	cmp	r0, #0
 800b10a:	da63      	bge.n	800b1d4 <_dtoa_r+0x924>
 800b10c:	2300      	movs	r3, #0
 800b10e:	4659      	mov	r1, fp
 800b110:	220a      	movs	r2, #10
 800b112:	4620      	mov	r0, r4
 800b114:	f000 ffca 	bl	800c0ac <__multadd>
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b11e:	4683      	mov	fp, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 818f 	beq.w	800b444 <_dtoa_r+0xb94>
 800b126:	4639      	mov	r1, r7
 800b128:	2300      	movs	r3, #0
 800b12a:	220a      	movs	r2, #10
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 ffbd 	bl	800c0ac <__multadd>
 800b132:	f1b9 0f00 	cmp.w	r9, #0
 800b136:	4607      	mov	r7, r0
 800b138:	f300 808e 	bgt.w	800b258 <_dtoa_r+0x9a8>
 800b13c:	9b05      	ldr	r3, [sp, #20]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	dc50      	bgt.n	800b1e4 <_dtoa_r+0x934>
 800b142:	e089      	b.n	800b258 <_dtoa_r+0x9a8>
 800b144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b14a:	e75d      	b.n	800b008 <_dtoa_r+0x758>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	1e5e      	subs	r6, r3, #1
 800b150:	9b06      	ldr	r3, [sp, #24]
 800b152:	42b3      	cmp	r3, r6
 800b154:	bfbf      	itttt	lt
 800b156:	9b06      	ldrlt	r3, [sp, #24]
 800b158:	9606      	strlt	r6, [sp, #24]
 800b15a:	1af2      	sublt	r2, r6, r3
 800b15c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b15e:	bfb6      	itet	lt
 800b160:	189b      	addlt	r3, r3, r2
 800b162:	1b9e      	subge	r6, r3, r6
 800b164:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	bfb8      	it	lt
 800b16a:	2600      	movlt	r6, #0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	bfb5      	itete	lt
 800b170:	eba8 0503 	sublt.w	r5, r8, r3
 800b174:	9b01      	ldrge	r3, [sp, #4]
 800b176:	2300      	movlt	r3, #0
 800b178:	4645      	movge	r5, r8
 800b17a:	e747      	b.n	800b00c <_dtoa_r+0x75c>
 800b17c:	9e06      	ldr	r6, [sp, #24]
 800b17e:	9f08      	ldr	r7, [sp, #32]
 800b180:	4645      	mov	r5, r8
 800b182:	e74c      	b.n	800b01e <_dtoa_r+0x76e>
 800b184:	9a06      	ldr	r2, [sp, #24]
 800b186:	e775      	b.n	800b074 <_dtoa_r+0x7c4>
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	dc18      	bgt.n	800b1c0 <_dtoa_r+0x910>
 800b18e:	9b02      	ldr	r3, [sp, #8]
 800b190:	b9b3      	cbnz	r3, 800b1c0 <_dtoa_r+0x910>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b198:	b9a3      	cbnz	r3, 800b1c4 <_dtoa_r+0x914>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1a0:	0d1b      	lsrs	r3, r3, #20
 800b1a2:	051b      	lsls	r3, r3, #20
 800b1a4:	b12b      	cbz	r3, 800b1b2 <_dtoa_r+0x902>
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	f108 0801 	add.w	r8, r8, #1
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	9306      	str	r3, [sp, #24]
 800b1b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f47f af74 	bne.w	800b0a4 <_dtoa_r+0x7f4>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	e779      	b.n	800b0b4 <_dtoa_r+0x804>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e7f6      	b.n	800b1b2 <_dtoa_r+0x902>
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	e7f4      	b.n	800b1b2 <_dtoa_r+0x902>
 800b1c8:	d085      	beq.n	800b0d6 <_dtoa_r+0x826>
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	301c      	adds	r0, #28
 800b1ce:	e77d      	b.n	800b0cc <_dtoa_r+0x81c>
 800b1d0:	40240000 	.word	0x40240000
 800b1d4:	9b01      	ldr	r3, [sp, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dc38      	bgt.n	800b24c <_dtoa_r+0x99c>
 800b1da:	9b05      	ldr	r3, [sp, #20]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	dd35      	ble.n	800b24c <_dtoa_r+0x99c>
 800b1e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b1e4:	f1b9 0f00 	cmp.w	r9, #0
 800b1e8:	d10d      	bne.n	800b206 <_dtoa_r+0x956>
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	464b      	mov	r3, r9
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 ff5b 	bl	800c0ac <__multadd>
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f001 f9bc 	bl	800c578 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	f73f adbd 	bgt.w	800ad80 <_dtoa_r+0x4d0>
 800b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b208:	9d00      	ldr	r5, [sp, #0]
 800b20a:	ea6f 0a03 	mvn.w	sl, r3
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	4631      	mov	r1, r6
 800b214:	4620      	mov	r0, r4
 800b216:	f000 ff27 	bl	800c068 <_Bfree>
 800b21a:	2f00      	cmp	r7, #0
 800b21c:	f43f aeb4 	beq.w	800af88 <_dtoa_r+0x6d8>
 800b220:	f1b8 0f00 	cmp.w	r8, #0
 800b224:	d005      	beq.n	800b232 <_dtoa_r+0x982>
 800b226:	45b8      	cmp	r8, r7
 800b228:	d003      	beq.n	800b232 <_dtoa_r+0x982>
 800b22a:	4641      	mov	r1, r8
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 ff1b 	bl	800c068 <_Bfree>
 800b232:	4639      	mov	r1, r7
 800b234:	4620      	mov	r0, r4
 800b236:	f000 ff17 	bl	800c068 <_Bfree>
 800b23a:	e6a5      	b.n	800af88 <_dtoa_r+0x6d8>
 800b23c:	2600      	movs	r6, #0
 800b23e:	4637      	mov	r7, r6
 800b240:	e7e1      	b.n	800b206 <_dtoa_r+0x956>
 800b242:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b244:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b248:	4637      	mov	r7, r6
 800b24a:	e599      	b.n	800ad80 <_dtoa_r+0x4d0>
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f000 80fd 	beq.w	800b452 <_dtoa_r+0xba2>
 800b258:	2d00      	cmp	r5, #0
 800b25a:	dd05      	ble.n	800b268 <_dtoa_r+0x9b8>
 800b25c:	4639      	mov	r1, r7
 800b25e:	462a      	mov	r2, r5
 800b260:	4620      	mov	r0, r4
 800b262:	f001 f91d 	bl	800c4a0 <__lshift>
 800b266:	4607      	mov	r7, r0
 800b268:	9b06      	ldr	r3, [sp, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d05c      	beq.n	800b328 <_dtoa_r+0xa78>
 800b26e:	6879      	ldr	r1, [r7, #4]
 800b270:	4620      	mov	r0, r4
 800b272:	f000 feb9 	bl	800bfe8 <_Balloc>
 800b276:	4605      	mov	r5, r0
 800b278:	b928      	cbnz	r0, 800b286 <_dtoa_r+0x9d6>
 800b27a:	4b80      	ldr	r3, [pc, #512]	; (800b47c <_dtoa_r+0xbcc>)
 800b27c:	4602      	mov	r2, r0
 800b27e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b282:	f7ff bb2e 	b.w	800a8e2 <_dtoa_r+0x32>
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	3202      	adds	r2, #2
 800b28a:	0092      	lsls	r2, r2, #2
 800b28c:	f107 010c 	add.w	r1, r7, #12
 800b290:	300c      	adds	r0, #12
 800b292:	f7fd fafd 	bl	8008890 <memcpy>
 800b296:	2201      	movs	r2, #1
 800b298:	4629      	mov	r1, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	f001 f900 	bl	800c4a0 <__lshift>
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	444b      	add	r3, r9
 800b2aa:	9307      	str	r3, [sp, #28]
 800b2ac:	9b02      	ldr	r3, [sp, #8]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	46b8      	mov	r8, r7
 800b2b4:	9306      	str	r3, [sp, #24]
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	4658      	mov	r0, fp
 800b2c0:	9302      	str	r3, [sp, #8]
 800b2c2:	f7ff fa67 	bl	800a794 <quorem>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	3330      	adds	r3, #48	; 0x30
 800b2ca:	9004      	str	r0, [sp, #16]
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	4658      	mov	r0, fp
 800b2d0:	9308      	str	r3, [sp, #32]
 800b2d2:	f001 f951 	bl	800c578 <__mcmp>
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	4681      	mov	r9, r0
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f001 f967 	bl	800c5b0 <__mdiff>
 800b2e2:	68c2      	ldr	r2, [r0, #12]
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	bb02      	cbnz	r2, 800b32c <_dtoa_r+0xa7c>
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	4658      	mov	r0, fp
 800b2ee:	f001 f943 	bl	800c578 <__mcmp>
 800b2f2:	9b08      	ldr	r3, [sp, #32]
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b2fe:	f000 feb3 	bl	800c068 <_Bfree>
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b306:	9d01      	ldr	r5, [sp, #4]
 800b308:	ea43 0102 	orr.w	r1, r3, r2
 800b30c:	9b06      	ldr	r3, [sp, #24]
 800b30e:	430b      	orrs	r3, r1
 800b310:	9b08      	ldr	r3, [sp, #32]
 800b312:	d10d      	bne.n	800b330 <_dtoa_r+0xa80>
 800b314:	2b39      	cmp	r3, #57	; 0x39
 800b316:	d029      	beq.n	800b36c <_dtoa_r+0xabc>
 800b318:	f1b9 0f00 	cmp.w	r9, #0
 800b31c:	dd01      	ble.n	800b322 <_dtoa_r+0xa72>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	3331      	adds	r3, #49	; 0x31
 800b322:	9a02      	ldr	r2, [sp, #8]
 800b324:	7013      	strb	r3, [r2, #0]
 800b326:	e774      	b.n	800b212 <_dtoa_r+0x962>
 800b328:	4638      	mov	r0, r7
 800b32a:	e7b9      	b.n	800b2a0 <_dtoa_r+0x9f0>
 800b32c:	2201      	movs	r2, #1
 800b32e:	e7e2      	b.n	800b2f6 <_dtoa_r+0xa46>
 800b330:	f1b9 0f00 	cmp.w	r9, #0
 800b334:	db06      	blt.n	800b344 <_dtoa_r+0xa94>
 800b336:	9905      	ldr	r1, [sp, #20]
 800b338:	ea41 0909 	orr.w	r9, r1, r9
 800b33c:	9906      	ldr	r1, [sp, #24]
 800b33e:	ea59 0101 	orrs.w	r1, r9, r1
 800b342:	d120      	bne.n	800b386 <_dtoa_r+0xad6>
 800b344:	2a00      	cmp	r2, #0
 800b346:	ddec      	ble.n	800b322 <_dtoa_r+0xa72>
 800b348:	4659      	mov	r1, fp
 800b34a:	2201      	movs	r2, #1
 800b34c:	4620      	mov	r0, r4
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	f001 f8a6 	bl	800c4a0 <__lshift>
 800b354:	4631      	mov	r1, r6
 800b356:	4683      	mov	fp, r0
 800b358:	f001 f90e 	bl	800c578 <__mcmp>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	dc02      	bgt.n	800b368 <_dtoa_r+0xab8>
 800b362:	d1de      	bne.n	800b322 <_dtoa_r+0xa72>
 800b364:	07da      	lsls	r2, r3, #31
 800b366:	d5dc      	bpl.n	800b322 <_dtoa_r+0xa72>
 800b368:	2b39      	cmp	r3, #57	; 0x39
 800b36a:	d1d8      	bne.n	800b31e <_dtoa_r+0xa6e>
 800b36c:	9a02      	ldr	r2, [sp, #8]
 800b36e:	2339      	movs	r3, #57	; 0x39
 800b370:	7013      	strb	r3, [r2, #0]
 800b372:	462b      	mov	r3, r5
 800b374:	461d      	mov	r5, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b37c:	2a39      	cmp	r2, #57	; 0x39
 800b37e:	d050      	beq.n	800b422 <_dtoa_r+0xb72>
 800b380:	3201      	adds	r2, #1
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	e745      	b.n	800b212 <_dtoa_r+0x962>
 800b386:	2a00      	cmp	r2, #0
 800b388:	dd03      	ble.n	800b392 <_dtoa_r+0xae2>
 800b38a:	2b39      	cmp	r3, #57	; 0x39
 800b38c:	d0ee      	beq.n	800b36c <_dtoa_r+0xabc>
 800b38e:	3301      	adds	r3, #1
 800b390:	e7c7      	b.n	800b322 <_dtoa_r+0xa72>
 800b392:	9a01      	ldr	r2, [sp, #4]
 800b394:	9907      	ldr	r1, [sp, #28]
 800b396:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b39a:	428a      	cmp	r2, r1
 800b39c:	d02a      	beq.n	800b3f4 <_dtoa_r+0xb44>
 800b39e:	4659      	mov	r1, fp
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fe81 	bl	800c0ac <__multadd>
 800b3aa:	45b8      	cmp	r8, r7
 800b3ac:	4683      	mov	fp, r0
 800b3ae:	f04f 0300 	mov.w	r3, #0
 800b3b2:	f04f 020a 	mov.w	r2, #10
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	d107      	bne.n	800b3cc <_dtoa_r+0xb1c>
 800b3bc:	f000 fe76 	bl	800c0ac <__multadd>
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	9b01      	ldr	r3, [sp, #4]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	e775      	b.n	800b2b8 <_dtoa_r+0xa08>
 800b3cc:	f000 fe6e 	bl	800c0ac <__multadd>
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	220a      	movs	r2, #10
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fe67 	bl	800c0ac <__multadd>
 800b3de:	4607      	mov	r7, r0
 800b3e0:	e7f0      	b.n	800b3c4 <_dtoa_r+0xb14>
 800b3e2:	f1b9 0f00 	cmp.w	r9, #0
 800b3e6:	9a00      	ldr	r2, [sp, #0]
 800b3e8:	bfcc      	ite	gt
 800b3ea:	464d      	movgt	r5, r9
 800b3ec:	2501      	movle	r5, #1
 800b3ee:	4415      	add	r5, r2
 800b3f0:	f04f 0800 	mov.w	r8, #0
 800b3f4:	4659      	mov	r1, fp
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	9301      	str	r3, [sp, #4]
 800b3fc:	f001 f850 	bl	800c4a0 <__lshift>
 800b400:	4631      	mov	r1, r6
 800b402:	4683      	mov	fp, r0
 800b404:	f001 f8b8 	bl	800c578 <__mcmp>
 800b408:	2800      	cmp	r0, #0
 800b40a:	dcb2      	bgt.n	800b372 <_dtoa_r+0xac2>
 800b40c:	d102      	bne.n	800b414 <_dtoa_r+0xb64>
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	07db      	lsls	r3, r3, #31
 800b412:	d4ae      	bmi.n	800b372 <_dtoa_r+0xac2>
 800b414:	462b      	mov	r3, r5
 800b416:	461d      	mov	r5, r3
 800b418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b41c:	2a30      	cmp	r2, #48	; 0x30
 800b41e:	d0fa      	beq.n	800b416 <_dtoa_r+0xb66>
 800b420:	e6f7      	b.n	800b212 <_dtoa_r+0x962>
 800b422:	9a00      	ldr	r2, [sp, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d1a5      	bne.n	800b374 <_dtoa_r+0xac4>
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	2331      	movs	r3, #49	; 0x31
 800b42e:	e779      	b.n	800b324 <_dtoa_r+0xa74>
 800b430:	4b13      	ldr	r3, [pc, #76]	; (800b480 <_dtoa_r+0xbd0>)
 800b432:	f7ff baaf 	b.w	800a994 <_dtoa_r+0xe4>
 800b436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f47f aa86 	bne.w	800a94a <_dtoa_r+0x9a>
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <_dtoa_r+0xbd4>)
 800b440:	f7ff baa8 	b.w	800a994 <_dtoa_r+0xe4>
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	dc03      	bgt.n	800b452 <_dtoa_r+0xba2>
 800b44a:	9b05      	ldr	r3, [sp, #20]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	f73f aec9 	bgt.w	800b1e4 <_dtoa_r+0x934>
 800b452:	9d00      	ldr	r5, [sp, #0]
 800b454:	4631      	mov	r1, r6
 800b456:	4658      	mov	r0, fp
 800b458:	f7ff f99c 	bl	800a794 <quorem>
 800b45c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b460:	f805 3b01 	strb.w	r3, [r5], #1
 800b464:	9a00      	ldr	r2, [sp, #0]
 800b466:	1aaa      	subs	r2, r5, r2
 800b468:	4591      	cmp	r9, r2
 800b46a:	ddba      	ble.n	800b3e2 <_dtoa_r+0xb32>
 800b46c:	4659      	mov	r1, fp
 800b46e:	2300      	movs	r3, #0
 800b470:	220a      	movs	r2, #10
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fe1a 	bl	800c0ac <__multadd>
 800b478:	4683      	mov	fp, r0
 800b47a:	e7eb      	b.n	800b454 <_dtoa_r+0xba4>
 800b47c:	0800e304 	.word	0x0800e304
 800b480:	0800e104 	.word	0x0800e104
 800b484:	0800e281 	.word	0x0800e281

0800b488 <__sflush_r>:
 800b488:	898a      	ldrh	r2, [r1, #12]
 800b48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	4605      	mov	r5, r0
 800b490:	0710      	lsls	r0, r2, #28
 800b492:	460c      	mov	r4, r1
 800b494:	d458      	bmi.n	800b548 <__sflush_r+0xc0>
 800b496:	684b      	ldr	r3, [r1, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dc05      	bgt.n	800b4a8 <__sflush_r+0x20>
 800b49c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dc02      	bgt.n	800b4a8 <__sflush_r+0x20>
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	d0f9      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4b4:	682f      	ldr	r7, [r5, #0]
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	d032      	beq.n	800b520 <__sflush_r+0x98>
 800b4ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	075a      	lsls	r2, r3, #29
 800b4c0:	d505      	bpl.n	800b4ce <__sflush_r+0x46>
 800b4c2:	6863      	ldr	r3, [r4, #4]
 800b4c4:	1ac0      	subs	r0, r0, r3
 800b4c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4c8:	b10b      	cbz	r3, 800b4ce <__sflush_r+0x46>
 800b4ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4cc:	1ac0      	subs	r0, r0, r3
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4d4:	6a21      	ldr	r1, [r4, #32]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b0      	blx	r6
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	d106      	bne.n	800b4ee <__sflush_r+0x66>
 800b4e0:	6829      	ldr	r1, [r5, #0]
 800b4e2:	291d      	cmp	r1, #29
 800b4e4:	d82c      	bhi.n	800b540 <__sflush_r+0xb8>
 800b4e6:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <__sflush_r+0x108>)
 800b4e8:	40ca      	lsrs	r2, r1
 800b4ea:	07d6      	lsls	r6, r2, #31
 800b4ec:	d528      	bpl.n	800b540 <__sflush_r+0xb8>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	6062      	str	r2, [r4, #4]
 800b4f2:	04d9      	lsls	r1, r3, #19
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	6022      	str	r2, [r4, #0]
 800b4f8:	d504      	bpl.n	800b504 <__sflush_r+0x7c>
 800b4fa:	1c42      	adds	r2, r0, #1
 800b4fc:	d101      	bne.n	800b502 <__sflush_r+0x7a>
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	b903      	cbnz	r3, 800b504 <__sflush_r+0x7c>
 800b502:	6560      	str	r0, [r4, #84]	; 0x54
 800b504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b506:	602f      	str	r7, [r5, #0]
 800b508:	2900      	cmp	r1, #0
 800b50a:	d0ca      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b510:	4299      	cmp	r1, r3
 800b512:	d002      	beq.n	800b51a <__sflush_r+0x92>
 800b514:	4628      	mov	r0, r5
 800b516:	f7fd f9d1 	bl	80088bc <_free_r>
 800b51a:	2000      	movs	r0, #0
 800b51c:	6360      	str	r0, [r4, #52]	; 0x34
 800b51e:	e7c1      	b.n	800b4a4 <__sflush_r+0x1c>
 800b520:	6a21      	ldr	r1, [r4, #32]
 800b522:	2301      	movs	r3, #1
 800b524:	4628      	mov	r0, r5
 800b526:	47b0      	blx	r6
 800b528:	1c41      	adds	r1, r0, #1
 800b52a:	d1c7      	bne.n	800b4bc <__sflush_r+0x34>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0c4      	beq.n	800b4bc <__sflush_r+0x34>
 800b532:	2b1d      	cmp	r3, #29
 800b534:	d001      	beq.n	800b53a <__sflush_r+0xb2>
 800b536:	2b16      	cmp	r3, #22
 800b538:	d101      	bne.n	800b53e <__sflush_r+0xb6>
 800b53a:	602f      	str	r7, [r5, #0]
 800b53c:	e7b1      	b.n	800b4a2 <__sflush_r+0x1a>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b544:	81a3      	strh	r3, [r4, #12]
 800b546:	e7ad      	b.n	800b4a4 <__sflush_r+0x1c>
 800b548:	690f      	ldr	r7, [r1, #16]
 800b54a:	2f00      	cmp	r7, #0
 800b54c:	d0a9      	beq.n	800b4a2 <__sflush_r+0x1a>
 800b54e:	0793      	lsls	r3, r2, #30
 800b550:	680e      	ldr	r6, [r1, #0]
 800b552:	bf08      	it	eq
 800b554:	694b      	ldreq	r3, [r1, #20]
 800b556:	600f      	str	r7, [r1, #0]
 800b558:	bf18      	it	ne
 800b55a:	2300      	movne	r3, #0
 800b55c:	eba6 0807 	sub.w	r8, r6, r7
 800b560:	608b      	str	r3, [r1, #8]
 800b562:	f1b8 0f00 	cmp.w	r8, #0
 800b566:	dd9c      	ble.n	800b4a2 <__sflush_r+0x1a>
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b56c:	4643      	mov	r3, r8
 800b56e:	463a      	mov	r2, r7
 800b570:	4628      	mov	r0, r5
 800b572:	47b0      	blx	r6
 800b574:	2800      	cmp	r0, #0
 800b576:	dc06      	bgt.n	800b586 <__sflush_r+0xfe>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	e78e      	b.n	800b4a4 <__sflush_r+0x1c>
 800b586:	4407      	add	r7, r0
 800b588:	eba8 0800 	sub.w	r8, r8, r0
 800b58c:	e7e9      	b.n	800b562 <__sflush_r+0xda>
 800b58e:	bf00      	nop
 800b590:	20400001 	.word	0x20400001

0800b594 <_fflush_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	690b      	ldr	r3, [r1, #16]
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b913      	cbnz	r3, 800b5a4 <_fflush_r+0x10>
 800b59e:	2500      	movs	r5, #0
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	b118      	cbz	r0, 800b5ae <_fflush_r+0x1a>
 800b5a6:	6983      	ldr	r3, [r0, #24]
 800b5a8:	b90b      	cbnz	r3, 800b5ae <_fflush_r+0x1a>
 800b5aa:	f000 f887 	bl	800b6bc <__sinit>
 800b5ae:	4b14      	ldr	r3, [pc, #80]	; (800b600 <_fflush_r+0x6c>)
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d11b      	bne.n	800b5ec <_fflush_r+0x58>
 800b5b4:	686c      	ldr	r4, [r5, #4]
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0ef      	beq.n	800b59e <_fflush_r+0xa>
 800b5be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5c0:	07d0      	lsls	r0, r2, #31
 800b5c2:	d404      	bmi.n	800b5ce <_fflush_r+0x3a>
 800b5c4:	0599      	lsls	r1, r3, #22
 800b5c6:	d402      	bmi.n	800b5ce <_fflush_r+0x3a>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ca:	f000 fc88 	bl	800bede <__retarget_lock_acquire_recursive>
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	f7ff ff59 	bl	800b488 <__sflush_r>
 800b5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5d8:	07da      	lsls	r2, r3, #31
 800b5da:	4605      	mov	r5, r0
 800b5dc:	d4e0      	bmi.n	800b5a0 <_fflush_r+0xc>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	059b      	lsls	r3, r3, #22
 800b5e2:	d4dd      	bmi.n	800b5a0 <_fflush_r+0xc>
 800b5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e6:	f000 fc7b 	bl	800bee0 <__retarget_lock_release_recursive>
 800b5ea:	e7d9      	b.n	800b5a0 <_fflush_r+0xc>
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <_fflush_r+0x70>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d101      	bne.n	800b5f6 <_fflush_r+0x62>
 800b5f2:	68ac      	ldr	r4, [r5, #8]
 800b5f4:	e7df      	b.n	800b5b6 <_fflush_r+0x22>
 800b5f6:	4b04      	ldr	r3, [pc, #16]	; (800b608 <_fflush_r+0x74>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	bf08      	it	eq
 800b5fc:	68ec      	ldreq	r4, [r5, #12]
 800b5fe:	e7da      	b.n	800b5b6 <_fflush_r+0x22>
 800b600:	0800e338 	.word	0x0800e338
 800b604:	0800e358 	.word	0x0800e358
 800b608:	0800e318 	.word	0x0800e318

0800b60c <std>:
 800b60c:	2300      	movs	r3, #0
 800b60e:	b510      	push	{r4, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	e9c0 3300 	strd	r3, r3, [r0]
 800b616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b61a:	6083      	str	r3, [r0, #8]
 800b61c:	8181      	strh	r1, [r0, #12]
 800b61e:	6643      	str	r3, [r0, #100]	; 0x64
 800b620:	81c2      	strh	r2, [r0, #14]
 800b622:	6183      	str	r3, [r0, #24]
 800b624:	4619      	mov	r1, r3
 800b626:	2208      	movs	r2, #8
 800b628:	305c      	adds	r0, #92	; 0x5c
 800b62a:	f7fd f93f 	bl	80088ac <memset>
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <std+0x38>)
 800b630:	6263      	str	r3, [r4, #36]	; 0x24
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <std+0x3c>)
 800b634:	62a3      	str	r3, [r4, #40]	; 0x28
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <std+0x40>)
 800b638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <std+0x44>)
 800b63c:	6224      	str	r4, [r4, #32]
 800b63e:	6323      	str	r3, [r4, #48]	; 0x30
 800b640:	bd10      	pop	{r4, pc}
 800b642:	bf00      	nop
 800b644:	0800cfd9 	.word	0x0800cfd9
 800b648:	0800cffb 	.word	0x0800cffb
 800b64c:	0800d033 	.word	0x0800d033
 800b650:	0800d057 	.word	0x0800d057

0800b654 <_cleanup_r>:
 800b654:	4901      	ldr	r1, [pc, #4]	; (800b65c <_cleanup_r+0x8>)
 800b656:	f000 b8af 	b.w	800b7b8 <_fwalk_reent>
 800b65a:	bf00      	nop
 800b65c:	0800b595 	.word	0x0800b595

0800b660 <__sfmoreglue>:
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	1e4a      	subs	r2, r1, #1
 800b664:	2568      	movs	r5, #104	; 0x68
 800b666:	4355      	muls	r5, r2
 800b668:	460e      	mov	r6, r1
 800b66a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b66e:	f7fd f975 	bl	800895c <_malloc_r>
 800b672:	4604      	mov	r4, r0
 800b674:	b140      	cbz	r0, 800b688 <__sfmoreglue+0x28>
 800b676:	2100      	movs	r1, #0
 800b678:	e9c0 1600 	strd	r1, r6, [r0]
 800b67c:	300c      	adds	r0, #12
 800b67e:	60a0      	str	r0, [r4, #8]
 800b680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b684:	f7fd f912 	bl	80088ac <memset>
 800b688:	4620      	mov	r0, r4
 800b68a:	bd70      	pop	{r4, r5, r6, pc}

0800b68c <__sfp_lock_acquire>:
 800b68c:	4801      	ldr	r0, [pc, #4]	; (800b694 <__sfp_lock_acquire+0x8>)
 800b68e:	f000 bc26 	b.w	800bede <__retarget_lock_acquire_recursive>
 800b692:	bf00      	nop
 800b694:	20000434 	.word	0x20000434

0800b698 <__sfp_lock_release>:
 800b698:	4801      	ldr	r0, [pc, #4]	; (800b6a0 <__sfp_lock_release+0x8>)
 800b69a:	f000 bc21 	b.w	800bee0 <__retarget_lock_release_recursive>
 800b69e:	bf00      	nop
 800b6a0:	20000434 	.word	0x20000434

0800b6a4 <__sinit_lock_acquire>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	; (800b6ac <__sinit_lock_acquire+0x8>)
 800b6a6:	f000 bc1a 	b.w	800bede <__retarget_lock_acquire_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	2000042f 	.word	0x2000042f

0800b6b0 <__sinit_lock_release>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__sinit_lock_release+0x8>)
 800b6b2:	f000 bc15 	b.w	800bee0 <__retarget_lock_release_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	2000042f 	.word	0x2000042f

0800b6bc <__sinit>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	4604      	mov	r4, r0
 800b6c0:	f7ff fff0 	bl	800b6a4 <__sinit_lock_acquire>
 800b6c4:	69a3      	ldr	r3, [r4, #24]
 800b6c6:	b11b      	cbz	r3, 800b6d0 <__sinit+0x14>
 800b6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6cc:	f7ff bff0 	b.w	800b6b0 <__sinit_lock_release>
 800b6d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6d4:	6523      	str	r3, [r4, #80]	; 0x50
 800b6d6:	4b13      	ldr	r3, [pc, #76]	; (800b724 <__sinit+0x68>)
 800b6d8:	4a13      	ldr	r2, [pc, #76]	; (800b728 <__sinit+0x6c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	bf04      	itt	eq
 800b6e2:	2301      	moveq	r3, #1
 800b6e4:	61a3      	streq	r3, [r4, #24]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 f820 	bl	800b72c <__sfp>
 800b6ec:	6060      	str	r0, [r4, #4]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 f81c 	bl	800b72c <__sfp>
 800b6f4:	60a0      	str	r0, [r4, #8]
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 f818 	bl	800b72c <__sfp>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	60e0      	str	r0, [r4, #12]
 800b700:	2104      	movs	r1, #4
 800b702:	6860      	ldr	r0, [r4, #4]
 800b704:	f7ff ff82 	bl	800b60c <std>
 800b708:	68a0      	ldr	r0, [r4, #8]
 800b70a:	2201      	movs	r2, #1
 800b70c:	2109      	movs	r1, #9
 800b70e:	f7ff ff7d 	bl	800b60c <std>
 800b712:	68e0      	ldr	r0, [r4, #12]
 800b714:	2202      	movs	r2, #2
 800b716:	2112      	movs	r1, #18
 800b718:	f7ff ff78 	bl	800b60c <std>
 800b71c:	2301      	movs	r3, #1
 800b71e:	61a3      	str	r3, [r4, #24]
 800b720:	e7d2      	b.n	800b6c8 <__sinit+0xc>
 800b722:	bf00      	nop
 800b724:	0800e0f0 	.word	0x0800e0f0
 800b728:	0800b655 	.word	0x0800b655

0800b72c <__sfp>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	4607      	mov	r7, r0
 800b730:	f7ff ffac 	bl	800b68c <__sfp_lock_acquire>
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <__sfp+0x84>)
 800b736:	681e      	ldr	r6, [r3, #0]
 800b738:	69b3      	ldr	r3, [r6, #24]
 800b73a:	b913      	cbnz	r3, 800b742 <__sfp+0x16>
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7ff ffbd 	bl	800b6bc <__sinit>
 800b742:	3648      	adds	r6, #72	; 0x48
 800b744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b748:	3b01      	subs	r3, #1
 800b74a:	d503      	bpl.n	800b754 <__sfp+0x28>
 800b74c:	6833      	ldr	r3, [r6, #0]
 800b74e:	b30b      	cbz	r3, 800b794 <__sfp+0x68>
 800b750:	6836      	ldr	r6, [r6, #0]
 800b752:	e7f7      	b.n	800b744 <__sfp+0x18>
 800b754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b758:	b9d5      	cbnz	r5, 800b790 <__sfp+0x64>
 800b75a:	4b16      	ldr	r3, [pc, #88]	; (800b7b4 <__sfp+0x88>)
 800b75c:	60e3      	str	r3, [r4, #12]
 800b75e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b762:	6665      	str	r5, [r4, #100]	; 0x64
 800b764:	f000 fbba 	bl	800bedc <__retarget_lock_init_recursive>
 800b768:	f7ff ff96 	bl	800b698 <__sfp_lock_release>
 800b76c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b774:	6025      	str	r5, [r4, #0]
 800b776:	61a5      	str	r5, [r4, #24]
 800b778:	2208      	movs	r2, #8
 800b77a:	4629      	mov	r1, r5
 800b77c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b780:	f7fd f894 	bl	80088ac <memset>
 800b784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b78c:	4620      	mov	r0, r4
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b790:	3468      	adds	r4, #104	; 0x68
 800b792:	e7d9      	b.n	800b748 <__sfp+0x1c>
 800b794:	2104      	movs	r1, #4
 800b796:	4638      	mov	r0, r7
 800b798:	f7ff ff62 	bl	800b660 <__sfmoreglue>
 800b79c:	4604      	mov	r4, r0
 800b79e:	6030      	str	r0, [r6, #0]
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1d5      	bne.n	800b750 <__sfp+0x24>
 800b7a4:	f7ff ff78 	bl	800b698 <__sfp_lock_release>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	603b      	str	r3, [r7, #0]
 800b7ac:	e7ee      	b.n	800b78c <__sfp+0x60>
 800b7ae:	bf00      	nop
 800b7b0:	0800e0f0 	.word	0x0800e0f0
 800b7b4:	ffff0001 	.word	0xffff0001

0800b7b8 <_fwalk_reent>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4606      	mov	r6, r0
 800b7be:	4688      	mov	r8, r1
 800b7c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7c4:	2700      	movs	r7, #0
 800b7c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b7ce:	d505      	bpl.n	800b7dc <_fwalk_reent+0x24>
 800b7d0:	6824      	ldr	r4, [r4, #0]
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	d1f7      	bne.n	800b7c6 <_fwalk_reent+0xe>
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7dc:	89ab      	ldrh	r3, [r5, #12]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d907      	bls.n	800b7f2 <_fwalk_reent+0x3a>
 800b7e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	d003      	beq.n	800b7f2 <_fwalk_reent+0x3a>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	47c0      	blx	r8
 800b7f0:	4307      	orrs	r7, r0
 800b7f2:	3568      	adds	r5, #104	; 0x68
 800b7f4:	e7e9      	b.n	800b7ca <_fwalk_reent+0x12>

0800b7f6 <rshift>:
 800b7f6:	6903      	ldr	r3, [r0, #16]
 800b7f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b800:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b804:	f100 0414 	add.w	r4, r0, #20
 800b808:	dd45      	ble.n	800b896 <rshift+0xa0>
 800b80a:	f011 011f 	ands.w	r1, r1, #31
 800b80e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b812:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b816:	d10c      	bne.n	800b832 <rshift+0x3c>
 800b818:	f100 0710 	add.w	r7, r0, #16
 800b81c:	4629      	mov	r1, r5
 800b81e:	42b1      	cmp	r1, r6
 800b820:	d334      	bcc.n	800b88c <rshift+0x96>
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	1eea      	subs	r2, r5, #3
 800b828:	4296      	cmp	r6, r2
 800b82a:	bf38      	it	cc
 800b82c:	2300      	movcc	r3, #0
 800b82e:	4423      	add	r3, r4
 800b830:	e015      	b.n	800b85e <rshift+0x68>
 800b832:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b836:	f1c1 0820 	rsb	r8, r1, #32
 800b83a:	40cf      	lsrs	r7, r1
 800b83c:	f105 0e04 	add.w	lr, r5, #4
 800b840:	46a1      	mov	r9, r4
 800b842:	4576      	cmp	r6, lr
 800b844:	46f4      	mov	ip, lr
 800b846:	d815      	bhi.n	800b874 <rshift+0x7e>
 800b848:	1a9b      	subs	r3, r3, r2
 800b84a:	009a      	lsls	r2, r3, #2
 800b84c:	3a04      	subs	r2, #4
 800b84e:	3501      	adds	r5, #1
 800b850:	42ae      	cmp	r6, r5
 800b852:	bf38      	it	cc
 800b854:	2200      	movcc	r2, #0
 800b856:	18a3      	adds	r3, r4, r2
 800b858:	50a7      	str	r7, [r4, r2]
 800b85a:	b107      	cbz	r7, 800b85e <rshift+0x68>
 800b85c:	3304      	adds	r3, #4
 800b85e:	1b1a      	subs	r2, r3, r4
 800b860:	42a3      	cmp	r3, r4
 800b862:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b866:	bf08      	it	eq
 800b868:	2300      	moveq	r3, #0
 800b86a:	6102      	str	r2, [r0, #16]
 800b86c:	bf08      	it	eq
 800b86e:	6143      	streq	r3, [r0, #20]
 800b870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b874:	f8dc c000 	ldr.w	ip, [ip]
 800b878:	fa0c fc08 	lsl.w	ip, ip, r8
 800b87c:	ea4c 0707 	orr.w	r7, ip, r7
 800b880:	f849 7b04 	str.w	r7, [r9], #4
 800b884:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b888:	40cf      	lsrs	r7, r1
 800b88a:	e7da      	b.n	800b842 <rshift+0x4c>
 800b88c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b890:	f847 cf04 	str.w	ip, [r7, #4]!
 800b894:	e7c3      	b.n	800b81e <rshift+0x28>
 800b896:	4623      	mov	r3, r4
 800b898:	e7e1      	b.n	800b85e <rshift+0x68>

0800b89a <__hexdig_fun>:
 800b89a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d802      	bhi.n	800b8a8 <__hexdig_fun+0xe>
 800b8a2:	3820      	subs	r0, #32
 800b8a4:	b2c0      	uxtb	r0, r0
 800b8a6:	4770      	bx	lr
 800b8a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b8ac:	2b05      	cmp	r3, #5
 800b8ae:	d801      	bhi.n	800b8b4 <__hexdig_fun+0x1a>
 800b8b0:	3847      	subs	r0, #71	; 0x47
 800b8b2:	e7f7      	b.n	800b8a4 <__hexdig_fun+0xa>
 800b8b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	d801      	bhi.n	800b8c0 <__hexdig_fun+0x26>
 800b8bc:	3827      	subs	r0, #39	; 0x27
 800b8be:	e7f1      	b.n	800b8a4 <__hexdig_fun+0xa>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	4770      	bx	lr

0800b8c4 <__gethex>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	ed2d 8b02 	vpush	{d8}
 800b8cc:	b089      	sub	sp, #36	; 0x24
 800b8ce:	ee08 0a10 	vmov	s16, r0
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	4bbc      	ldr	r3, [pc, #752]	; (800bbc8 <__gethex+0x304>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	468b      	mov	fp, r1
 800b8de:	4690      	mov	r8, r2
 800b8e0:	f7f4 fc7e 	bl	80001e0 <strlen>
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	f8db 2000 	ldr.w	r2, [fp]
 800b8ea:	4403      	add	r3, r0
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	1c93      	adds	r3, r2, #2
 800b8f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8fe:	32fe      	adds	r2, #254	; 0xfe
 800b900:	18d1      	adds	r1, r2, r3
 800b902:	461f      	mov	r7, r3
 800b904:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b908:	9100      	str	r1, [sp, #0]
 800b90a:	2830      	cmp	r0, #48	; 0x30
 800b90c:	d0f8      	beq.n	800b900 <__gethex+0x3c>
 800b90e:	f7ff ffc4 	bl	800b89a <__hexdig_fun>
 800b912:	4604      	mov	r4, r0
 800b914:	2800      	cmp	r0, #0
 800b916:	d13a      	bne.n	800b98e <__gethex+0xca>
 800b918:	9901      	ldr	r1, [sp, #4]
 800b91a:	4652      	mov	r2, sl
 800b91c:	4638      	mov	r0, r7
 800b91e:	f001 fb9e 	bl	800d05e <strncmp>
 800b922:	4605      	mov	r5, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	d168      	bne.n	800b9fa <__gethex+0x136>
 800b928:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b92c:	eb07 060a 	add.w	r6, r7, sl
 800b930:	f7ff ffb3 	bl	800b89a <__hexdig_fun>
 800b934:	2800      	cmp	r0, #0
 800b936:	d062      	beq.n	800b9fe <__gethex+0x13a>
 800b938:	4633      	mov	r3, r6
 800b93a:	7818      	ldrb	r0, [r3, #0]
 800b93c:	2830      	cmp	r0, #48	; 0x30
 800b93e:	461f      	mov	r7, r3
 800b940:	f103 0301 	add.w	r3, r3, #1
 800b944:	d0f9      	beq.n	800b93a <__gethex+0x76>
 800b946:	f7ff ffa8 	bl	800b89a <__hexdig_fun>
 800b94a:	2301      	movs	r3, #1
 800b94c:	fab0 f480 	clz	r4, r0
 800b950:	0964      	lsrs	r4, r4, #5
 800b952:	4635      	mov	r5, r6
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	463a      	mov	r2, r7
 800b958:	4616      	mov	r6, r2
 800b95a:	3201      	adds	r2, #1
 800b95c:	7830      	ldrb	r0, [r6, #0]
 800b95e:	f7ff ff9c 	bl	800b89a <__hexdig_fun>
 800b962:	2800      	cmp	r0, #0
 800b964:	d1f8      	bne.n	800b958 <__gethex+0x94>
 800b966:	9901      	ldr	r1, [sp, #4]
 800b968:	4652      	mov	r2, sl
 800b96a:	4630      	mov	r0, r6
 800b96c:	f001 fb77 	bl	800d05e <strncmp>
 800b970:	b980      	cbnz	r0, 800b994 <__gethex+0xd0>
 800b972:	b94d      	cbnz	r5, 800b988 <__gethex+0xc4>
 800b974:	eb06 050a 	add.w	r5, r6, sl
 800b978:	462a      	mov	r2, r5
 800b97a:	4616      	mov	r6, r2
 800b97c:	3201      	adds	r2, #1
 800b97e:	7830      	ldrb	r0, [r6, #0]
 800b980:	f7ff ff8b 	bl	800b89a <__hexdig_fun>
 800b984:	2800      	cmp	r0, #0
 800b986:	d1f8      	bne.n	800b97a <__gethex+0xb6>
 800b988:	1bad      	subs	r5, r5, r6
 800b98a:	00ad      	lsls	r5, r5, #2
 800b98c:	e004      	b.n	800b998 <__gethex+0xd4>
 800b98e:	2400      	movs	r4, #0
 800b990:	4625      	mov	r5, r4
 800b992:	e7e0      	b.n	800b956 <__gethex+0x92>
 800b994:	2d00      	cmp	r5, #0
 800b996:	d1f7      	bne.n	800b988 <__gethex+0xc4>
 800b998:	7833      	ldrb	r3, [r6, #0]
 800b99a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b99e:	2b50      	cmp	r3, #80	; 0x50
 800b9a0:	d13b      	bne.n	800ba1a <__gethex+0x156>
 800b9a2:	7873      	ldrb	r3, [r6, #1]
 800b9a4:	2b2b      	cmp	r3, #43	; 0x2b
 800b9a6:	d02c      	beq.n	800ba02 <__gethex+0x13e>
 800b9a8:	2b2d      	cmp	r3, #45	; 0x2d
 800b9aa:	d02e      	beq.n	800ba0a <__gethex+0x146>
 800b9ac:	1c71      	adds	r1, r6, #1
 800b9ae:	f04f 0900 	mov.w	r9, #0
 800b9b2:	7808      	ldrb	r0, [r1, #0]
 800b9b4:	f7ff ff71 	bl	800b89a <__hexdig_fun>
 800b9b8:	1e43      	subs	r3, r0, #1
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b18      	cmp	r3, #24
 800b9be:	d82c      	bhi.n	800ba1a <__gethex+0x156>
 800b9c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b9c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9c8:	f7ff ff67 	bl	800b89a <__hexdig_fun>
 800b9cc:	1e43      	subs	r3, r0, #1
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b18      	cmp	r3, #24
 800b9d2:	d91d      	bls.n	800ba10 <__gethex+0x14c>
 800b9d4:	f1b9 0f00 	cmp.w	r9, #0
 800b9d8:	d000      	beq.n	800b9dc <__gethex+0x118>
 800b9da:	4252      	negs	r2, r2
 800b9dc:	4415      	add	r5, r2
 800b9de:	f8cb 1000 	str.w	r1, [fp]
 800b9e2:	b1e4      	cbz	r4, 800ba1e <__gethex+0x15a>
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bf14      	ite	ne
 800b9ea:	2700      	movne	r7, #0
 800b9ec:	2706      	moveq	r7, #6
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	b009      	add	sp, #36	; 0x24
 800b9f2:	ecbd 8b02 	vpop	{d8}
 800b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	4625      	mov	r5, r4
 800b9fe:	2401      	movs	r4, #1
 800ba00:	e7ca      	b.n	800b998 <__gethex+0xd4>
 800ba02:	f04f 0900 	mov.w	r9, #0
 800ba06:	1cb1      	adds	r1, r6, #2
 800ba08:	e7d3      	b.n	800b9b2 <__gethex+0xee>
 800ba0a:	f04f 0901 	mov.w	r9, #1
 800ba0e:	e7fa      	b.n	800ba06 <__gethex+0x142>
 800ba10:	230a      	movs	r3, #10
 800ba12:	fb03 0202 	mla	r2, r3, r2, r0
 800ba16:	3a10      	subs	r2, #16
 800ba18:	e7d4      	b.n	800b9c4 <__gethex+0x100>
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	e7df      	b.n	800b9de <__gethex+0x11a>
 800ba1e:	1bf3      	subs	r3, r6, r7
 800ba20:	3b01      	subs	r3, #1
 800ba22:	4621      	mov	r1, r4
 800ba24:	2b07      	cmp	r3, #7
 800ba26:	dc0b      	bgt.n	800ba40 <__gethex+0x17c>
 800ba28:	ee18 0a10 	vmov	r0, s16
 800ba2c:	f000 fadc 	bl	800bfe8 <_Balloc>
 800ba30:	4604      	mov	r4, r0
 800ba32:	b940      	cbnz	r0, 800ba46 <__gethex+0x182>
 800ba34:	4b65      	ldr	r3, [pc, #404]	; (800bbcc <__gethex+0x308>)
 800ba36:	4602      	mov	r2, r0
 800ba38:	21de      	movs	r1, #222	; 0xde
 800ba3a:	4865      	ldr	r0, [pc, #404]	; (800bbd0 <__gethex+0x30c>)
 800ba3c:	f001 fb40 	bl	800d0c0 <__assert_func>
 800ba40:	3101      	adds	r1, #1
 800ba42:	105b      	asrs	r3, r3, #1
 800ba44:	e7ee      	b.n	800ba24 <__gethex+0x160>
 800ba46:	f100 0914 	add.w	r9, r0, #20
 800ba4a:	f04f 0b00 	mov.w	fp, #0
 800ba4e:	f1ca 0301 	rsb	r3, sl, #1
 800ba52:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba56:	f8cd b000 	str.w	fp, [sp]
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	42b7      	cmp	r7, r6
 800ba5e:	d340      	bcc.n	800bae2 <__gethex+0x21e>
 800ba60:	9802      	ldr	r0, [sp, #8]
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	f840 3b04 	str.w	r3, [r0], #4
 800ba68:	eba0 0009 	sub.w	r0, r0, r9
 800ba6c:	1080      	asrs	r0, r0, #2
 800ba6e:	0146      	lsls	r6, r0, #5
 800ba70:	6120      	str	r0, [r4, #16]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fbae 	bl	800c1d4 <__hi0bits>
 800ba78:	1a30      	subs	r0, r6, r0
 800ba7a:	f8d8 6000 	ldr.w	r6, [r8]
 800ba7e:	42b0      	cmp	r0, r6
 800ba80:	dd63      	ble.n	800bb4a <__gethex+0x286>
 800ba82:	1b87      	subs	r7, r0, r6
 800ba84:	4639      	mov	r1, r7
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 ff48 	bl	800c91c <__any_on>
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	b1a8      	cbz	r0, 800babc <__gethex+0x1f8>
 800ba90:	1e7b      	subs	r3, r7, #1
 800ba92:	1159      	asrs	r1, r3, #5
 800ba94:	f003 021f 	and.w	r2, r3, #31
 800ba98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba9c:	f04f 0a01 	mov.w	sl, #1
 800baa0:	fa0a f202 	lsl.w	r2, sl, r2
 800baa4:	420a      	tst	r2, r1
 800baa6:	d009      	beq.n	800babc <__gethex+0x1f8>
 800baa8:	4553      	cmp	r3, sl
 800baaa:	dd05      	ble.n	800bab8 <__gethex+0x1f4>
 800baac:	1eb9      	subs	r1, r7, #2
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 ff34 	bl	800c91c <__any_on>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d145      	bne.n	800bb44 <__gethex+0x280>
 800bab8:	f04f 0a02 	mov.w	sl, #2
 800babc:	4639      	mov	r1, r7
 800babe:	4620      	mov	r0, r4
 800bac0:	f7ff fe99 	bl	800b7f6 <rshift>
 800bac4:	443d      	add	r5, r7
 800bac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baca:	42ab      	cmp	r3, r5
 800bacc:	da4c      	bge.n	800bb68 <__gethex+0x2a4>
 800bace:	ee18 0a10 	vmov	r0, s16
 800bad2:	4621      	mov	r1, r4
 800bad4:	f000 fac8 	bl	800c068 <_Bfree>
 800bad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bada:	2300      	movs	r3, #0
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	27a3      	movs	r7, #163	; 0xa3
 800bae0:	e785      	b.n	800b9ee <__gethex+0x12a>
 800bae2:	1e73      	subs	r3, r6, #1
 800bae4:	9a05      	ldr	r2, [sp, #20]
 800bae6:	9303      	str	r3, [sp, #12]
 800bae8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baec:	4293      	cmp	r3, r2
 800baee:	d019      	beq.n	800bb24 <__gethex+0x260>
 800baf0:	f1bb 0f20 	cmp.w	fp, #32
 800baf4:	d107      	bne.n	800bb06 <__gethex+0x242>
 800baf6:	9b02      	ldr	r3, [sp, #8]
 800baf8:	9a00      	ldr	r2, [sp, #0]
 800bafa:	f843 2b04 	str.w	r2, [r3], #4
 800bafe:	9302      	str	r3, [sp, #8]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	469b      	mov	fp, r3
 800bb06:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bb0a:	f7ff fec6 	bl	800b89a <__hexdig_fun>
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	f000 000f 	and.w	r0, r0, #15
 800bb14:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb18:	4303      	orrs	r3, r0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	f10b 0b04 	add.w	fp, fp, #4
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	e00d      	b.n	800bb40 <__gethex+0x27c>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	9a06      	ldr	r2, [sp, #24]
 800bb28:	4413      	add	r3, r2
 800bb2a:	42bb      	cmp	r3, r7
 800bb2c:	d3e0      	bcc.n	800baf0 <__gethex+0x22c>
 800bb2e:	4618      	mov	r0, r3
 800bb30:	9901      	ldr	r1, [sp, #4]
 800bb32:	9307      	str	r3, [sp, #28]
 800bb34:	4652      	mov	r2, sl
 800bb36:	f001 fa92 	bl	800d05e <strncmp>
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d1d7      	bne.n	800baf0 <__gethex+0x22c>
 800bb40:	461e      	mov	r6, r3
 800bb42:	e78b      	b.n	800ba5c <__gethex+0x198>
 800bb44:	f04f 0a03 	mov.w	sl, #3
 800bb48:	e7b8      	b.n	800babc <__gethex+0x1f8>
 800bb4a:	da0a      	bge.n	800bb62 <__gethex+0x29e>
 800bb4c:	1a37      	subs	r7, r6, r0
 800bb4e:	4621      	mov	r1, r4
 800bb50:	ee18 0a10 	vmov	r0, s16
 800bb54:	463a      	mov	r2, r7
 800bb56:	f000 fca3 	bl	800c4a0 <__lshift>
 800bb5a:	1bed      	subs	r5, r5, r7
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	f100 0914 	add.w	r9, r0, #20
 800bb62:	f04f 0a00 	mov.w	sl, #0
 800bb66:	e7ae      	b.n	800bac6 <__gethex+0x202>
 800bb68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb6c:	42a8      	cmp	r0, r5
 800bb6e:	dd72      	ble.n	800bc56 <__gethex+0x392>
 800bb70:	1b45      	subs	r5, r0, r5
 800bb72:	42ae      	cmp	r6, r5
 800bb74:	dc36      	bgt.n	800bbe4 <__gethex+0x320>
 800bb76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d02a      	beq.n	800bbd4 <__gethex+0x310>
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d02c      	beq.n	800bbdc <__gethex+0x318>
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d115      	bne.n	800bbb2 <__gethex+0x2ee>
 800bb86:	42ae      	cmp	r6, r5
 800bb88:	d113      	bne.n	800bbb2 <__gethex+0x2ee>
 800bb8a:	2e01      	cmp	r6, #1
 800bb8c:	d10b      	bne.n	800bba6 <__gethex+0x2e2>
 800bb8e:	9a04      	ldr	r2, [sp, #16]
 800bb90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	2301      	movs	r3, #1
 800bb98:	6123      	str	r3, [r4, #16]
 800bb9a:	f8c9 3000 	str.w	r3, [r9]
 800bb9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bba0:	2762      	movs	r7, #98	; 0x62
 800bba2:	601c      	str	r4, [r3, #0]
 800bba4:	e723      	b.n	800b9ee <__gethex+0x12a>
 800bba6:	1e71      	subs	r1, r6, #1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 feb7 	bl	800c91c <__any_on>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d1ed      	bne.n	800bb8e <__gethex+0x2ca>
 800bbb2:	ee18 0a10 	vmov	r0, s16
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	f000 fa56 	bl	800c068 <_Bfree>
 800bbbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	2750      	movs	r7, #80	; 0x50
 800bbc4:	e713      	b.n	800b9ee <__gethex+0x12a>
 800bbc6:	bf00      	nop
 800bbc8:	0800e3e4 	.word	0x0800e3e4
 800bbcc:	0800e304 	.word	0x0800e304
 800bbd0:	0800e378 	.word	0x0800e378
 800bbd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1eb      	bne.n	800bbb2 <__gethex+0x2ee>
 800bbda:	e7d8      	b.n	800bb8e <__gethex+0x2ca>
 800bbdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1d5      	bne.n	800bb8e <__gethex+0x2ca>
 800bbe2:	e7e6      	b.n	800bbb2 <__gethex+0x2ee>
 800bbe4:	1e6f      	subs	r7, r5, #1
 800bbe6:	f1ba 0f00 	cmp.w	sl, #0
 800bbea:	d131      	bne.n	800bc50 <__gethex+0x38c>
 800bbec:	b127      	cbz	r7, 800bbf8 <__gethex+0x334>
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fe93 	bl	800c91c <__any_on>
 800bbf6:	4682      	mov	sl, r0
 800bbf8:	117b      	asrs	r3, r7, #5
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bc00:	f007 071f 	and.w	r7, r7, #31
 800bc04:	fa01 f707 	lsl.w	r7, r1, r7
 800bc08:	421f      	tst	r7, r3
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	bf18      	it	ne
 800bc10:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc14:	1b76      	subs	r6, r6, r5
 800bc16:	f7ff fdee 	bl	800b7f6 <rshift>
 800bc1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc1e:	2702      	movs	r7, #2
 800bc20:	f1ba 0f00 	cmp.w	sl, #0
 800bc24:	d048      	beq.n	800bcb8 <__gethex+0x3f4>
 800bc26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d015      	beq.n	800bc5a <__gethex+0x396>
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d017      	beq.n	800bc62 <__gethex+0x39e>
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d109      	bne.n	800bc4a <__gethex+0x386>
 800bc36:	f01a 0f02 	tst.w	sl, #2
 800bc3a:	d006      	beq.n	800bc4a <__gethex+0x386>
 800bc3c:	f8d9 0000 	ldr.w	r0, [r9]
 800bc40:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc44:	f01a 0f01 	tst.w	sl, #1
 800bc48:	d10e      	bne.n	800bc68 <__gethex+0x3a4>
 800bc4a:	f047 0710 	orr.w	r7, r7, #16
 800bc4e:	e033      	b.n	800bcb8 <__gethex+0x3f4>
 800bc50:	f04f 0a01 	mov.w	sl, #1
 800bc54:	e7d0      	b.n	800bbf8 <__gethex+0x334>
 800bc56:	2701      	movs	r7, #1
 800bc58:	e7e2      	b.n	800bc20 <__gethex+0x35c>
 800bc5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc5c:	f1c3 0301 	rsb	r3, r3, #1
 800bc60:	9315      	str	r3, [sp, #84]	; 0x54
 800bc62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0f0      	beq.n	800bc4a <__gethex+0x386>
 800bc68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc6c:	f104 0314 	add.w	r3, r4, #20
 800bc70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc78:	f04f 0c00 	mov.w	ip, #0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc86:	d01c      	beq.n	800bcc2 <__gethex+0x3fe>
 800bc88:	3201      	adds	r2, #1
 800bc8a:	6002      	str	r2, [r0, #0]
 800bc8c:	2f02      	cmp	r7, #2
 800bc8e:	f104 0314 	add.w	r3, r4, #20
 800bc92:	d13f      	bne.n	800bd14 <__gethex+0x450>
 800bc94:	f8d8 2000 	ldr.w	r2, [r8]
 800bc98:	3a01      	subs	r2, #1
 800bc9a:	42b2      	cmp	r2, r6
 800bc9c:	d10a      	bne.n	800bcb4 <__gethex+0x3f0>
 800bc9e:	1171      	asrs	r1, r6, #5
 800bca0:	2201      	movs	r2, #1
 800bca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bca6:	f006 061f 	and.w	r6, r6, #31
 800bcaa:	fa02 f606 	lsl.w	r6, r2, r6
 800bcae:	421e      	tst	r6, r3
 800bcb0:	bf18      	it	ne
 800bcb2:	4617      	movne	r7, r2
 800bcb4:	f047 0720 	orr.w	r7, r7, #32
 800bcb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcba:	601c      	str	r4, [r3, #0]
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	601d      	str	r5, [r3, #0]
 800bcc0:	e695      	b.n	800b9ee <__gethex+0x12a>
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcc8:	d8d8      	bhi.n	800bc7c <__gethex+0x3b8>
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	459b      	cmp	fp, r3
 800bcce:	db19      	blt.n	800bd04 <__gethex+0x440>
 800bcd0:	6861      	ldr	r1, [r4, #4]
 800bcd2:	ee18 0a10 	vmov	r0, s16
 800bcd6:	3101      	adds	r1, #1
 800bcd8:	f000 f986 	bl	800bfe8 <_Balloc>
 800bcdc:	4681      	mov	r9, r0
 800bcde:	b918      	cbnz	r0, 800bce8 <__gethex+0x424>
 800bce0:	4b1a      	ldr	r3, [pc, #104]	; (800bd4c <__gethex+0x488>)
 800bce2:	4602      	mov	r2, r0
 800bce4:	2184      	movs	r1, #132	; 0x84
 800bce6:	e6a8      	b.n	800ba3a <__gethex+0x176>
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	3202      	adds	r2, #2
 800bcec:	f104 010c 	add.w	r1, r4, #12
 800bcf0:	0092      	lsls	r2, r2, #2
 800bcf2:	300c      	adds	r0, #12
 800bcf4:	f7fc fdcc 	bl	8008890 <memcpy>
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	ee18 0a10 	vmov	r0, s16
 800bcfe:	f000 f9b3 	bl	800c068 <_Bfree>
 800bd02:	464c      	mov	r4, r9
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd0c:	6122      	str	r2, [r4, #16]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	615a      	str	r2, [r3, #20]
 800bd12:	e7bb      	b.n	800bc8c <__gethex+0x3c8>
 800bd14:	6922      	ldr	r2, [r4, #16]
 800bd16:	455a      	cmp	r2, fp
 800bd18:	dd0b      	ble.n	800bd32 <__gethex+0x46e>
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7ff fd6a 	bl	800b7f6 <rshift>
 800bd22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd26:	3501      	adds	r5, #1
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	f6ff aed0 	blt.w	800bace <__gethex+0x20a>
 800bd2e:	2701      	movs	r7, #1
 800bd30:	e7c0      	b.n	800bcb4 <__gethex+0x3f0>
 800bd32:	f016 061f 	ands.w	r6, r6, #31
 800bd36:	d0fa      	beq.n	800bd2e <__gethex+0x46a>
 800bd38:	449a      	add	sl, r3
 800bd3a:	f1c6 0620 	rsb	r6, r6, #32
 800bd3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bd42:	f000 fa47 	bl	800c1d4 <__hi0bits>
 800bd46:	42b0      	cmp	r0, r6
 800bd48:	dbe7      	blt.n	800bd1a <__gethex+0x456>
 800bd4a:	e7f0      	b.n	800bd2e <__gethex+0x46a>
 800bd4c:	0800e304 	.word	0x0800e304

0800bd50 <L_shift>:
 800bd50:	f1c2 0208 	rsb	r2, r2, #8
 800bd54:	0092      	lsls	r2, r2, #2
 800bd56:	b570      	push	{r4, r5, r6, lr}
 800bd58:	f1c2 0620 	rsb	r6, r2, #32
 800bd5c:	6843      	ldr	r3, [r0, #4]
 800bd5e:	6804      	ldr	r4, [r0, #0]
 800bd60:	fa03 f506 	lsl.w	r5, r3, r6
 800bd64:	432c      	orrs	r4, r5
 800bd66:	40d3      	lsrs	r3, r2
 800bd68:	6004      	str	r4, [r0, #0]
 800bd6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd6e:	4288      	cmp	r0, r1
 800bd70:	d3f4      	bcc.n	800bd5c <L_shift+0xc>
 800bd72:	bd70      	pop	{r4, r5, r6, pc}

0800bd74 <__match>:
 800bd74:	b530      	push	{r4, r5, lr}
 800bd76:	6803      	ldr	r3, [r0, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7e:	b914      	cbnz	r4, 800bd86 <__match+0x12>
 800bd80:	6003      	str	r3, [r0, #0]
 800bd82:	2001      	movs	r0, #1
 800bd84:	bd30      	pop	{r4, r5, pc}
 800bd86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd8e:	2d19      	cmp	r5, #25
 800bd90:	bf98      	it	ls
 800bd92:	3220      	addls	r2, #32
 800bd94:	42a2      	cmp	r2, r4
 800bd96:	d0f0      	beq.n	800bd7a <__match+0x6>
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e7f3      	b.n	800bd84 <__match+0x10>

0800bd9c <__hexnan>:
 800bd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda0:	680b      	ldr	r3, [r1, #0]
 800bda2:	6801      	ldr	r1, [r0, #0]
 800bda4:	115e      	asrs	r6, r3, #5
 800bda6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdaa:	f013 031f 	ands.w	r3, r3, #31
 800bdae:	b087      	sub	sp, #28
 800bdb0:	bf18      	it	ne
 800bdb2:	3604      	addne	r6, #4
 800bdb4:	2500      	movs	r5, #0
 800bdb6:	1f37      	subs	r7, r6, #4
 800bdb8:	4682      	mov	sl, r0
 800bdba:	4690      	mov	r8, r2
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdc2:	46b9      	mov	r9, r7
 800bdc4:	463c      	mov	r4, r7
 800bdc6:	9502      	str	r5, [sp, #8]
 800bdc8:	46ab      	mov	fp, r5
 800bdca:	784a      	ldrb	r2, [r1, #1]
 800bdcc:	1c4b      	adds	r3, r1, #1
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	b342      	cbz	r2, 800be24 <__hexnan+0x88>
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	9105      	str	r1, [sp, #20]
 800bdd6:	9204      	str	r2, [sp, #16]
 800bdd8:	f7ff fd5f 	bl	800b89a <__hexdig_fun>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d14f      	bne.n	800be80 <__hexnan+0xe4>
 800bde0:	9a04      	ldr	r2, [sp, #16]
 800bde2:	9905      	ldr	r1, [sp, #20]
 800bde4:	2a20      	cmp	r2, #32
 800bde6:	d818      	bhi.n	800be1a <__hexnan+0x7e>
 800bde8:	9b02      	ldr	r3, [sp, #8]
 800bdea:	459b      	cmp	fp, r3
 800bdec:	dd13      	ble.n	800be16 <__hexnan+0x7a>
 800bdee:	454c      	cmp	r4, r9
 800bdf0:	d206      	bcs.n	800be00 <__hexnan+0x64>
 800bdf2:	2d07      	cmp	r5, #7
 800bdf4:	dc04      	bgt.n	800be00 <__hexnan+0x64>
 800bdf6:	462a      	mov	r2, r5
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f7ff ffa8 	bl	800bd50 <L_shift>
 800be00:	4544      	cmp	r4, r8
 800be02:	d950      	bls.n	800bea6 <__hexnan+0x10a>
 800be04:	2300      	movs	r3, #0
 800be06:	f1a4 0904 	sub.w	r9, r4, #4
 800be0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800be0e:	f8cd b008 	str.w	fp, [sp, #8]
 800be12:	464c      	mov	r4, r9
 800be14:	461d      	mov	r5, r3
 800be16:	9903      	ldr	r1, [sp, #12]
 800be18:	e7d7      	b.n	800bdca <__hexnan+0x2e>
 800be1a:	2a29      	cmp	r2, #41	; 0x29
 800be1c:	d156      	bne.n	800becc <__hexnan+0x130>
 800be1e:	3102      	adds	r1, #2
 800be20:	f8ca 1000 	str.w	r1, [sl]
 800be24:	f1bb 0f00 	cmp.w	fp, #0
 800be28:	d050      	beq.n	800becc <__hexnan+0x130>
 800be2a:	454c      	cmp	r4, r9
 800be2c:	d206      	bcs.n	800be3c <__hexnan+0xa0>
 800be2e:	2d07      	cmp	r5, #7
 800be30:	dc04      	bgt.n	800be3c <__hexnan+0xa0>
 800be32:	462a      	mov	r2, r5
 800be34:	4649      	mov	r1, r9
 800be36:	4620      	mov	r0, r4
 800be38:	f7ff ff8a 	bl	800bd50 <L_shift>
 800be3c:	4544      	cmp	r4, r8
 800be3e:	d934      	bls.n	800beaa <__hexnan+0x10e>
 800be40:	f1a8 0204 	sub.w	r2, r8, #4
 800be44:	4623      	mov	r3, r4
 800be46:	f853 1b04 	ldr.w	r1, [r3], #4
 800be4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800be4e:	429f      	cmp	r7, r3
 800be50:	d2f9      	bcs.n	800be46 <__hexnan+0xaa>
 800be52:	1b3b      	subs	r3, r7, r4
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	3304      	adds	r3, #4
 800be5a:	3401      	adds	r4, #1
 800be5c:	3e03      	subs	r6, #3
 800be5e:	42b4      	cmp	r4, r6
 800be60:	bf88      	it	hi
 800be62:	2304      	movhi	r3, #4
 800be64:	4443      	add	r3, r8
 800be66:	2200      	movs	r2, #0
 800be68:	f843 2b04 	str.w	r2, [r3], #4
 800be6c:	429f      	cmp	r7, r3
 800be6e:	d2fb      	bcs.n	800be68 <__hexnan+0xcc>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	b91b      	cbnz	r3, 800be7c <__hexnan+0xe0>
 800be74:	4547      	cmp	r7, r8
 800be76:	d127      	bne.n	800bec8 <__hexnan+0x12c>
 800be78:	2301      	movs	r3, #1
 800be7a:	603b      	str	r3, [r7, #0]
 800be7c:	2005      	movs	r0, #5
 800be7e:	e026      	b.n	800bece <__hexnan+0x132>
 800be80:	3501      	adds	r5, #1
 800be82:	2d08      	cmp	r5, #8
 800be84:	f10b 0b01 	add.w	fp, fp, #1
 800be88:	dd06      	ble.n	800be98 <__hexnan+0xfc>
 800be8a:	4544      	cmp	r4, r8
 800be8c:	d9c3      	bls.n	800be16 <__hexnan+0x7a>
 800be8e:	2300      	movs	r3, #0
 800be90:	f844 3c04 	str.w	r3, [r4, #-4]
 800be94:	2501      	movs	r5, #1
 800be96:	3c04      	subs	r4, #4
 800be98:	6822      	ldr	r2, [r4, #0]
 800be9a:	f000 000f 	and.w	r0, r0, #15
 800be9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	e7b7      	b.n	800be16 <__hexnan+0x7a>
 800bea6:	2508      	movs	r5, #8
 800bea8:	e7b5      	b.n	800be16 <__hexnan+0x7a>
 800beaa:	9b01      	ldr	r3, [sp, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0df      	beq.n	800be70 <__hexnan+0xd4>
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	f1c3 0320 	rsb	r3, r3, #32
 800beb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bebc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bec0:	401a      	ands	r2, r3
 800bec2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bec6:	e7d3      	b.n	800be70 <__hexnan+0xd4>
 800bec8:	3f04      	subs	r7, #4
 800beca:	e7d1      	b.n	800be70 <__hexnan+0xd4>
 800becc:	2004      	movs	r0, #4
 800bece:	b007      	add	sp, #28
 800bed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bed4 <_localeconv_r>:
 800bed4:	4800      	ldr	r0, [pc, #0]	; (800bed8 <_localeconv_r+0x4>)
 800bed6:	4770      	bx	lr
 800bed8:	20000168 	.word	0x20000168

0800bedc <__retarget_lock_init_recursive>:
 800bedc:	4770      	bx	lr

0800bede <__retarget_lock_acquire_recursive>:
 800bede:	4770      	bx	lr

0800bee0 <__retarget_lock_release_recursive>:
 800bee0:	4770      	bx	lr

0800bee2 <__swhatbuf_r>:
 800bee2:	b570      	push	{r4, r5, r6, lr}
 800bee4:	460e      	mov	r6, r1
 800bee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beea:	2900      	cmp	r1, #0
 800beec:	b096      	sub	sp, #88	; 0x58
 800beee:	4614      	mov	r4, r2
 800bef0:	461d      	mov	r5, r3
 800bef2:	da07      	bge.n	800bf04 <__swhatbuf_r+0x22>
 800bef4:	2300      	movs	r3, #0
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	89b3      	ldrh	r3, [r6, #12]
 800befa:	061a      	lsls	r2, r3, #24
 800befc:	d410      	bmi.n	800bf20 <__swhatbuf_r+0x3e>
 800befe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf02:	e00e      	b.n	800bf22 <__swhatbuf_r+0x40>
 800bf04:	466a      	mov	r2, sp
 800bf06:	f001 f91b 	bl	800d140 <_fstat_r>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	dbf2      	blt.n	800bef4 <__swhatbuf_r+0x12>
 800bf0e:	9a01      	ldr	r2, [sp, #4]
 800bf10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf18:	425a      	negs	r2, r3
 800bf1a:	415a      	adcs	r2, r3
 800bf1c:	602a      	str	r2, [r5, #0]
 800bf1e:	e7ee      	b.n	800befe <__swhatbuf_r+0x1c>
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	2000      	movs	r0, #0
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	b016      	add	sp, #88	; 0x58
 800bf28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf2c <__smakebuf_r>:
 800bf2c:	898b      	ldrh	r3, [r1, #12]
 800bf2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf30:	079d      	lsls	r5, r3, #30
 800bf32:	4606      	mov	r6, r0
 800bf34:	460c      	mov	r4, r1
 800bf36:	d507      	bpl.n	800bf48 <__smakebuf_r+0x1c>
 800bf38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2301      	movs	r3, #1
 800bf42:	6163      	str	r3, [r4, #20]
 800bf44:	b002      	add	sp, #8
 800bf46:	bd70      	pop	{r4, r5, r6, pc}
 800bf48:	ab01      	add	r3, sp, #4
 800bf4a:	466a      	mov	r2, sp
 800bf4c:	f7ff ffc9 	bl	800bee2 <__swhatbuf_r>
 800bf50:	9900      	ldr	r1, [sp, #0]
 800bf52:	4605      	mov	r5, r0
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7fc fd01 	bl	800895c <_malloc_r>
 800bf5a:	b948      	cbnz	r0, 800bf70 <__smakebuf_r+0x44>
 800bf5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf60:	059a      	lsls	r2, r3, #22
 800bf62:	d4ef      	bmi.n	800bf44 <__smakebuf_r+0x18>
 800bf64:	f023 0303 	bic.w	r3, r3, #3
 800bf68:	f043 0302 	orr.w	r3, r3, #2
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	e7e3      	b.n	800bf38 <__smakebuf_r+0xc>
 800bf70:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <__smakebuf_r+0x7c>)
 800bf72:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	6020      	str	r0, [r4, #0]
 800bf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf7c:	81a3      	strh	r3, [r4, #12]
 800bf7e:	9b00      	ldr	r3, [sp, #0]
 800bf80:	6163      	str	r3, [r4, #20]
 800bf82:	9b01      	ldr	r3, [sp, #4]
 800bf84:	6120      	str	r0, [r4, #16]
 800bf86:	b15b      	cbz	r3, 800bfa0 <__smakebuf_r+0x74>
 800bf88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f001 f8e9 	bl	800d164 <_isatty_r>
 800bf92:	b128      	cbz	r0, 800bfa0 <__smakebuf_r+0x74>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f023 0303 	bic.w	r3, r3, #3
 800bf9a:	f043 0301 	orr.w	r3, r3, #1
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	89a0      	ldrh	r0, [r4, #12]
 800bfa2:	4305      	orrs	r5, r0
 800bfa4:	81a5      	strh	r5, [r4, #12]
 800bfa6:	e7cd      	b.n	800bf44 <__smakebuf_r+0x18>
 800bfa8:	0800b655 	.word	0x0800b655

0800bfac <__ascii_mbtowc>:
 800bfac:	b082      	sub	sp, #8
 800bfae:	b901      	cbnz	r1, 800bfb2 <__ascii_mbtowc+0x6>
 800bfb0:	a901      	add	r1, sp, #4
 800bfb2:	b142      	cbz	r2, 800bfc6 <__ascii_mbtowc+0x1a>
 800bfb4:	b14b      	cbz	r3, 800bfca <__ascii_mbtowc+0x1e>
 800bfb6:	7813      	ldrb	r3, [r2, #0]
 800bfb8:	600b      	str	r3, [r1, #0]
 800bfba:	7812      	ldrb	r2, [r2, #0]
 800bfbc:	1e10      	subs	r0, r2, #0
 800bfbe:	bf18      	it	ne
 800bfc0:	2001      	movne	r0, #1
 800bfc2:	b002      	add	sp, #8
 800bfc4:	4770      	bx	lr
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	e7fb      	b.n	800bfc2 <__ascii_mbtowc+0x16>
 800bfca:	f06f 0001 	mvn.w	r0, #1
 800bfce:	e7f8      	b.n	800bfc2 <__ascii_mbtowc+0x16>

0800bfd0 <__malloc_lock>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	; (800bfd8 <__malloc_lock+0x8>)
 800bfd2:	f7ff bf84 	b.w	800bede <__retarget_lock_acquire_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	20000430 	.word	0x20000430

0800bfdc <__malloc_unlock>:
 800bfdc:	4801      	ldr	r0, [pc, #4]	; (800bfe4 <__malloc_unlock+0x8>)
 800bfde:	f7ff bf7f 	b.w	800bee0 <__retarget_lock_release_recursive>
 800bfe2:	bf00      	nop
 800bfe4:	20000430 	.word	0x20000430

0800bfe8 <_Balloc>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfec:	4604      	mov	r4, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	b976      	cbnz	r6, 800c010 <_Balloc+0x28>
 800bff2:	2010      	movs	r0, #16
 800bff4:	f7fc fc2e 	bl	8008854 <malloc>
 800bff8:	4602      	mov	r2, r0
 800bffa:	6260      	str	r0, [r4, #36]	; 0x24
 800bffc:	b920      	cbnz	r0, 800c008 <_Balloc+0x20>
 800bffe:	4b18      	ldr	r3, [pc, #96]	; (800c060 <_Balloc+0x78>)
 800c000:	4818      	ldr	r0, [pc, #96]	; (800c064 <_Balloc+0x7c>)
 800c002:	2166      	movs	r1, #102	; 0x66
 800c004:	f001 f85c 	bl	800d0c0 <__assert_func>
 800c008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c00c:	6006      	str	r6, [r0, #0]
 800c00e:	60c6      	str	r6, [r0, #12]
 800c010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c012:	68f3      	ldr	r3, [r6, #12]
 800c014:	b183      	cbz	r3, 800c038 <_Balloc+0x50>
 800c016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c01e:	b9b8      	cbnz	r0, 800c050 <_Balloc+0x68>
 800c020:	2101      	movs	r1, #1
 800c022:	fa01 f605 	lsl.w	r6, r1, r5
 800c026:	1d72      	adds	r2, r6, #5
 800c028:	0092      	lsls	r2, r2, #2
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fc97 	bl	800c95e <_calloc_r>
 800c030:	b160      	cbz	r0, 800c04c <_Balloc+0x64>
 800c032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c036:	e00e      	b.n	800c056 <_Balloc+0x6e>
 800c038:	2221      	movs	r2, #33	; 0x21
 800c03a:	2104      	movs	r1, #4
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 fc8e 	bl	800c95e <_calloc_r>
 800c042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c044:	60f0      	str	r0, [r6, #12]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e4      	bne.n	800c016 <_Balloc+0x2e>
 800c04c:	2000      	movs	r0, #0
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	6802      	ldr	r2, [r0, #0]
 800c052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c056:	2300      	movs	r3, #0
 800c058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c05c:	e7f7      	b.n	800c04e <_Balloc+0x66>
 800c05e:	bf00      	nop
 800c060:	0800e28e 	.word	0x0800e28e
 800c064:	0800e3f8 	.word	0x0800e3f8

0800c068 <_Bfree>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c06c:	4605      	mov	r5, r0
 800c06e:	460c      	mov	r4, r1
 800c070:	b976      	cbnz	r6, 800c090 <_Bfree+0x28>
 800c072:	2010      	movs	r0, #16
 800c074:	f7fc fbee 	bl	8008854 <malloc>
 800c078:	4602      	mov	r2, r0
 800c07a:	6268      	str	r0, [r5, #36]	; 0x24
 800c07c:	b920      	cbnz	r0, 800c088 <_Bfree+0x20>
 800c07e:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <_Bfree+0x3c>)
 800c080:	4809      	ldr	r0, [pc, #36]	; (800c0a8 <_Bfree+0x40>)
 800c082:	218a      	movs	r1, #138	; 0x8a
 800c084:	f001 f81c 	bl	800d0c0 <__assert_func>
 800c088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c08c:	6006      	str	r6, [r0, #0]
 800c08e:	60c6      	str	r6, [r0, #12]
 800c090:	b13c      	cbz	r4, 800c0a2 <_Bfree+0x3a>
 800c092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c094:	6862      	ldr	r2, [r4, #4]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c09c:	6021      	str	r1, [r4, #0]
 800c09e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	0800e28e 	.word	0x0800e28e
 800c0a8:	0800e3f8 	.word	0x0800e3f8

0800c0ac <__multadd>:
 800c0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b0:	690e      	ldr	r6, [r1, #16]
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	4698      	mov	r8, r3
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	f101 0014 	add.w	r0, r1, #20
 800c0bc:	2300      	movs	r3, #0
 800c0be:	6805      	ldr	r5, [r0, #0]
 800c0c0:	b2a9      	uxth	r1, r5
 800c0c2:	fb02 8101 	mla	r1, r2, r1, r8
 800c0c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c0ca:	0c2d      	lsrs	r5, r5, #16
 800c0cc:	fb02 c505 	mla	r5, r2, r5, ip
 800c0d0:	b289      	uxth	r1, r1
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c0d8:	429e      	cmp	r6, r3
 800c0da:	f840 1b04 	str.w	r1, [r0], #4
 800c0de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c0e2:	dcec      	bgt.n	800c0be <__multadd+0x12>
 800c0e4:	f1b8 0f00 	cmp.w	r8, #0
 800c0e8:	d022      	beq.n	800c130 <__multadd+0x84>
 800c0ea:	68a3      	ldr	r3, [r4, #8]
 800c0ec:	42b3      	cmp	r3, r6
 800c0ee:	dc19      	bgt.n	800c124 <__multadd+0x78>
 800c0f0:	6861      	ldr	r1, [r4, #4]
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	3101      	adds	r1, #1
 800c0f6:	f7ff ff77 	bl	800bfe8 <_Balloc>
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	b928      	cbnz	r0, 800c10a <__multadd+0x5e>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <__multadd+0x8c>)
 800c102:	480e      	ldr	r0, [pc, #56]	; (800c13c <__multadd+0x90>)
 800c104:	21b5      	movs	r1, #181	; 0xb5
 800c106:	f000 ffdb 	bl	800d0c0 <__assert_func>
 800c10a:	6922      	ldr	r2, [r4, #16]
 800c10c:	3202      	adds	r2, #2
 800c10e:	f104 010c 	add.w	r1, r4, #12
 800c112:	0092      	lsls	r2, r2, #2
 800c114:	300c      	adds	r0, #12
 800c116:	f7fc fbbb 	bl	8008890 <memcpy>
 800c11a:	4621      	mov	r1, r4
 800c11c:	4638      	mov	r0, r7
 800c11e:	f7ff ffa3 	bl	800c068 <_Bfree>
 800c122:	462c      	mov	r4, r5
 800c124:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c128:	3601      	adds	r6, #1
 800c12a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c12e:	6126      	str	r6, [r4, #16]
 800c130:	4620      	mov	r0, r4
 800c132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c136:	bf00      	nop
 800c138:	0800e304 	.word	0x0800e304
 800c13c:	0800e3f8 	.word	0x0800e3f8

0800c140 <__s2b>:
 800c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	4615      	mov	r5, r2
 800c148:	461f      	mov	r7, r3
 800c14a:	2209      	movs	r2, #9
 800c14c:	3308      	adds	r3, #8
 800c14e:	4606      	mov	r6, r0
 800c150:	fb93 f3f2 	sdiv	r3, r3, r2
 800c154:	2100      	movs	r1, #0
 800c156:	2201      	movs	r2, #1
 800c158:	429a      	cmp	r2, r3
 800c15a:	db09      	blt.n	800c170 <__s2b+0x30>
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff ff43 	bl	800bfe8 <_Balloc>
 800c162:	b940      	cbnz	r0, 800c176 <__s2b+0x36>
 800c164:	4602      	mov	r2, r0
 800c166:	4b19      	ldr	r3, [pc, #100]	; (800c1cc <__s2b+0x8c>)
 800c168:	4819      	ldr	r0, [pc, #100]	; (800c1d0 <__s2b+0x90>)
 800c16a:	21ce      	movs	r1, #206	; 0xce
 800c16c:	f000 ffa8 	bl	800d0c0 <__assert_func>
 800c170:	0052      	lsls	r2, r2, #1
 800c172:	3101      	adds	r1, #1
 800c174:	e7f0      	b.n	800c158 <__s2b+0x18>
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	6143      	str	r3, [r0, #20]
 800c17a:	2d09      	cmp	r5, #9
 800c17c:	f04f 0301 	mov.w	r3, #1
 800c180:	6103      	str	r3, [r0, #16]
 800c182:	dd16      	ble.n	800c1b2 <__s2b+0x72>
 800c184:	f104 0909 	add.w	r9, r4, #9
 800c188:	46c8      	mov	r8, r9
 800c18a:	442c      	add	r4, r5
 800c18c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c190:	4601      	mov	r1, r0
 800c192:	3b30      	subs	r3, #48	; 0x30
 800c194:	220a      	movs	r2, #10
 800c196:	4630      	mov	r0, r6
 800c198:	f7ff ff88 	bl	800c0ac <__multadd>
 800c19c:	45a0      	cmp	r8, r4
 800c19e:	d1f5      	bne.n	800c18c <__s2b+0x4c>
 800c1a0:	f1a5 0408 	sub.w	r4, r5, #8
 800c1a4:	444c      	add	r4, r9
 800c1a6:	1b2d      	subs	r5, r5, r4
 800c1a8:	1963      	adds	r3, r4, r5
 800c1aa:	42bb      	cmp	r3, r7
 800c1ac:	db04      	blt.n	800c1b8 <__s2b+0x78>
 800c1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b2:	340a      	adds	r4, #10
 800c1b4:	2509      	movs	r5, #9
 800c1b6:	e7f6      	b.n	800c1a6 <__s2b+0x66>
 800c1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1bc:	4601      	mov	r1, r0
 800c1be:	3b30      	subs	r3, #48	; 0x30
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff ff72 	bl	800c0ac <__multadd>
 800c1c8:	e7ee      	b.n	800c1a8 <__s2b+0x68>
 800c1ca:	bf00      	nop
 800c1cc:	0800e304 	.word	0x0800e304
 800c1d0:	0800e3f8 	.word	0x0800e3f8

0800c1d4 <__hi0bits>:
 800c1d4:	0c03      	lsrs	r3, r0, #16
 800c1d6:	041b      	lsls	r3, r3, #16
 800c1d8:	b9d3      	cbnz	r3, 800c210 <__hi0bits+0x3c>
 800c1da:	0400      	lsls	r0, r0, #16
 800c1dc:	2310      	movs	r3, #16
 800c1de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1e2:	bf04      	itt	eq
 800c1e4:	0200      	lsleq	r0, r0, #8
 800c1e6:	3308      	addeq	r3, #8
 800c1e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1ec:	bf04      	itt	eq
 800c1ee:	0100      	lsleq	r0, r0, #4
 800c1f0:	3304      	addeq	r3, #4
 800c1f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1f6:	bf04      	itt	eq
 800c1f8:	0080      	lsleq	r0, r0, #2
 800c1fa:	3302      	addeq	r3, #2
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	db05      	blt.n	800c20c <__hi0bits+0x38>
 800c200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c204:	f103 0301 	add.w	r3, r3, #1
 800c208:	bf08      	it	eq
 800c20a:	2320      	moveq	r3, #32
 800c20c:	4618      	mov	r0, r3
 800c20e:	4770      	bx	lr
 800c210:	2300      	movs	r3, #0
 800c212:	e7e4      	b.n	800c1de <__hi0bits+0xa>

0800c214 <__lo0bits>:
 800c214:	6803      	ldr	r3, [r0, #0]
 800c216:	f013 0207 	ands.w	r2, r3, #7
 800c21a:	4601      	mov	r1, r0
 800c21c:	d00b      	beq.n	800c236 <__lo0bits+0x22>
 800c21e:	07da      	lsls	r2, r3, #31
 800c220:	d424      	bmi.n	800c26c <__lo0bits+0x58>
 800c222:	0798      	lsls	r0, r3, #30
 800c224:	bf49      	itett	mi
 800c226:	085b      	lsrmi	r3, r3, #1
 800c228:	089b      	lsrpl	r3, r3, #2
 800c22a:	2001      	movmi	r0, #1
 800c22c:	600b      	strmi	r3, [r1, #0]
 800c22e:	bf5c      	itt	pl
 800c230:	600b      	strpl	r3, [r1, #0]
 800c232:	2002      	movpl	r0, #2
 800c234:	4770      	bx	lr
 800c236:	b298      	uxth	r0, r3
 800c238:	b9b0      	cbnz	r0, 800c268 <__lo0bits+0x54>
 800c23a:	0c1b      	lsrs	r3, r3, #16
 800c23c:	2010      	movs	r0, #16
 800c23e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c242:	bf04      	itt	eq
 800c244:	0a1b      	lsreq	r3, r3, #8
 800c246:	3008      	addeq	r0, #8
 800c248:	071a      	lsls	r2, r3, #28
 800c24a:	bf04      	itt	eq
 800c24c:	091b      	lsreq	r3, r3, #4
 800c24e:	3004      	addeq	r0, #4
 800c250:	079a      	lsls	r2, r3, #30
 800c252:	bf04      	itt	eq
 800c254:	089b      	lsreq	r3, r3, #2
 800c256:	3002      	addeq	r0, #2
 800c258:	07da      	lsls	r2, r3, #31
 800c25a:	d403      	bmi.n	800c264 <__lo0bits+0x50>
 800c25c:	085b      	lsrs	r3, r3, #1
 800c25e:	f100 0001 	add.w	r0, r0, #1
 800c262:	d005      	beq.n	800c270 <__lo0bits+0x5c>
 800c264:	600b      	str	r3, [r1, #0]
 800c266:	4770      	bx	lr
 800c268:	4610      	mov	r0, r2
 800c26a:	e7e8      	b.n	800c23e <__lo0bits+0x2a>
 800c26c:	2000      	movs	r0, #0
 800c26e:	4770      	bx	lr
 800c270:	2020      	movs	r0, #32
 800c272:	4770      	bx	lr

0800c274 <__i2b>:
 800c274:	b510      	push	{r4, lr}
 800c276:	460c      	mov	r4, r1
 800c278:	2101      	movs	r1, #1
 800c27a:	f7ff feb5 	bl	800bfe8 <_Balloc>
 800c27e:	4602      	mov	r2, r0
 800c280:	b928      	cbnz	r0, 800c28e <__i2b+0x1a>
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <__i2b+0x24>)
 800c284:	4805      	ldr	r0, [pc, #20]	; (800c29c <__i2b+0x28>)
 800c286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c28a:	f000 ff19 	bl	800d0c0 <__assert_func>
 800c28e:	2301      	movs	r3, #1
 800c290:	6144      	str	r4, [r0, #20]
 800c292:	6103      	str	r3, [r0, #16]
 800c294:	bd10      	pop	{r4, pc}
 800c296:	bf00      	nop
 800c298:	0800e304 	.word	0x0800e304
 800c29c:	0800e3f8 	.word	0x0800e3f8

0800c2a0 <__multiply>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	690a      	ldr	r2, [r1, #16]
 800c2a8:	6923      	ldr	r3, [r4, #16]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	bfb8      	it	lt
 800c2ae:	460b      	movlt	r3, r1
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	bfbc      	itt	lt
 800c2b4:	4625      	movlt	r5, r4
 800c2b6:	461c      	movlt	r4, r3
 800c2b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c2bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c2c0:	68ab      	ldr	r3, [r5, #8]
 800c2c2:	6869      	ldr	r1, [r5, #4]
 800c2c4:	eb0a 0709 	add.w	r7, sl, r9
 800c2c8:	42bb      	cmp	r3, r7
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	bfb8      	it	lt
 800c2ce:	3101      	addlt	r1, #1
 800c2d0:	f7ff fe8a 	bl	800bfe8 <_Balloc>
 800c2d4:	b930      	cbnz	r0, 800c2e4 <__multiply+0x44>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	4b42      	ldr	r3, [pc, #264]	; (800c3e4 <__multiply+0x144>)
 800c2da:	4843      	ldr	r0, [pc, #268]	; (800c3e8 <__multiply+0x148>)
 800c2dc:	f240 115d 	movw	r1, #349	; 0x15d
 800c2e0:	f000 feee 	bl	800d0c0 <__assert_func>
 800c2e4:	f100 0614 	add.w	r6, r0, #20
 800c2e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c2ec:	4633      	mov	r3, r6
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	4543      	cmp	r3, r8
 800c2f2:	d31e      	bcc.n	800c332 <__multiply+0x92>
 800c2f4:	f105 0c14 	add.w	ip, r5, #20
 800c2f8:	f104 0314 	add.w	r3, r4, #20
 800c2fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c300:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c304:	9202      	str	r2, [sp, #8]
 800c306:	ebac 0205 	sub.w	r2, ip, r5
 800c30a:	3a15      	subs	r2, #21
 800c30c:	f022 0203 	bic.w	r2, r2, #3
 800c310:	3204      	adds	r2, #4
 800c312:	f105 0115 	add.w	r1, r5, #21
 800c316:	458c      	cmp	ip, r1
 800c318:	bf38      	it	cc
 800c31a:	2204      	movcc	r2, #4
 800c31c:	9201      	str	r2, [sp, #4]
 800c31e:	9a02      	ldr	r2, [sp, #8]
 800c320:	9303      	str	r3, [sp, #12]
 800c322:	429a      	cmp	r2, r3
 800c324:	d808      	bhi.n	800c338 <__multiply+0x98>
 800c326:	2f00      	cmp	r7, #0
 800c328:	dc55      	bgt.n	800c3d6 <__multiply+0x136>
 800c32a:	6107      	str	r7, [r0, #16]
 800c32c:	b005      	add	sp, #20
 800c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c332:	f843 2b04 	str.w	r2, [r3], #4
 800c336:	e7db      	b.n	800c2f0 <__multiply+0x50>
 800c338:	f8b3 a000 	ldrh.w	sl, [r3]
 800c33c:	f1ba 0f00 	cmp.w	sl, #0
 800c340:	d020      	beq.n	800c384 <__multiply+0xe4>
 800c342:	f105 0e14 	add.w	lr, r5, #20
 800c346:	46b1      	mov	r9, r6
 800c348:	2200      	movs	r2, #0
 800c34a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c34e:	f8d9 b000 	ldr.w	fp, [r9]
 800c352:	b2a1      	uxth	r1, r4
 800c354:	fa1f fb8b 	uxth.w	fp, fp
 800c358:	fb0a b101 	mla	r1, sl, r1, fp
 800c35c:	4411      	add	r1, r2
 800c35e:	f8d9 2000 	ldr.w	r2, [r9]
 800c362:	0c24      	lsrs	r4, r4, #16
 800c364:	0c12      	lsrs	r2, r2, #16
 800c366:	fb0a 2404 	mla	r4, sl, r4, r2
 800c36a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c36e:	b289      	uxth	r1, r1
 800c370:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c374:	45f4      	cmp	ip, lr
 800c376:	f849 1b04 	str.w	r1, [r9], #4
 800c37a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c37e:	d8e4      	bhi.n	800c34a <__multiply+0xaa>
 800c380:	9901      	ldr	r1, [sp, #4]
 800c382:	5072      	str	r2, [r6, r1]
 800c384:	9a03      	ldr	r2, [sp, #12]
 800c386:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c38a:	3304      	adds	r3, #4
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	d01f      	beq.n	800c3d2 <__multiply+0x132>
 800c392:	6834      	ldr	r4, [r6, #0]
 800c394:	f105 0114 	add.w	r1, r5, #20
 800c398:	46b6      	mov	lr, r6
 800c39a:	f04f 0a00 	mov.w	sl, #0
 800c39e:	880a      	ldrh	r2, [r1, #0]
 800c3a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c3a4:	fb09 b202 	mla	r2, r9, r2, fp
 800c3a8:	4492      	add	sl, r2
 800c3aa:	b2a4      	uxth	r4, r4
 800c3ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c3b0:	f84e 4b04 	str.w	r4, [lr], #4
 800c3b4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c3b8:	f8be 2000 	ldrh.w	r2, [lr]
 800c3bc:	0c24      	lsrs	r4, r4, #16
 800c3be:	fb09 2404 	mla	r4, r9, r4, r2
 800c3c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c3c6:	458c      	cmp	ip, r1
 800c3c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c3cc:	d8e7      	bhi.n	800c39e <__multiply+0xfe>
 800c3ce:	9a01      	ldr	r2, [sp, #4]
 800c3d0:	50b4      	str	r4, [r6, r2]
 800c3d2:	3604      	adds	r6, #4
 800c3d4:	e7a3      	b.n	800c31e <__multiply+0x7e>
 800c3d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1a5      	bne.n	800c32a <__multiply+0x8a>
 800c3de:	3f01      	subs	r7, #1
 800c3e0:	e7a1      	b.n	800c326 <__multiply+0x86>
 800c3e2:	bf00      	nop
 800c3e4:	0800e304 	.word	0x0800e304
 800c3e8:	0800e3f8 	.word	0x0800e3f8

0800c3ec <__pow5mult>:
 800c3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	f012 0203 	ands.w	r2, r2, #3
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	d007      	beq.n	800c40c <__pow5mult+0x20>
 800c3fc:	4c25      	ldr	r4, [pc, #148]	; (800c494 <__pow5mult+0xa8>)
 800c3fe:	3a01      	subs	r2, #1
 800c400:	2300      	movs	r3, #0
 800c402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c406:	f7ff fe51 	bl	800c0ac <__multadd>
 800c40a:	4607      	mov	r7, r0
 800c40c:	10ad      	asrs	r5, r5, #2
 800c40e:	d03d      	beq.n	800c48c <__pow5mult+0xa0>
 800c410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c412:	b97c      	cbnz	r4, 800c434 <__pow5mult+0x48>
 800c414:	2010      	movs	r0, #16
 800c416:	f7fc fa1d 	bl	8008854 <malloc>
 800c41a:	4602      	mov	r2, r0
 800c41c:	6270      	str	r0, [r6, #36]	; 0x24
 800c41e:	b928      	cbnz	r0, 800c42c <__pow5mult+0x40>
 800c420:	4b1d      	ldr	r3, [pc, #116]	; (800c498 <__pow5mult+0xac>)
 800c422:	481e      	ldr	r0, [pc, #120]	; (800c49c <__pow5mult+0xb0>)
 800c424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c428:	f000 fe4a 	bl	800d0c0 <__assert_func>
 800c42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c430:	6004      	str	r4, [r0, #0]
 800c432:	60c4      	str	r4, [r0, #12]
 800c434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c43c:	b94c      	cbnz	r4, 800c452 <__pow5mult+0x66>
 800c43e:	f240 2171 	movw	r1, #625	; 0x271
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ff16 	bl	800c274 <__i2b>
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c44e:	4604      	mov	r4, r0
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	f04f 0900 	mov.w	r9, #0
 800c456:	07eb      	lsls	r3, r5, #31
 800c458:	d50a      	bpl.n	800c470 <__pow5mult+0x84>
 800c45a:	4639      	mov	r1, r7
 800c45c:	4622      	mov	r2, r4
 800c45e:	4630      	mov	r0, r6
 800c460:	f7ff ff1e 	bl	800c2a0 <__multiply>
 800c464:	4639      	mov	r1, r7
 800c466:	4680      	mov	r8, r0
 800c468:	4630      	mov	r0, r6
 800c46a:	f7ff fdfd 	bl	800c068 <_Bfree>
 800c46e:	4647      	mov	r7, r8
 800c470:	106d      	asrs	r5, r5, #1
 800c472:	d00b      	beq.n	800c48c <__pow5mult+0xa0>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	b938      	cbnz	r0, 800c488 <__pow5mult+0x9c>
 800c478:	4622      	mov	r2, r4
 800c47a:	4621      	mov	r1, r4
 800c47c:	4630      	mov	r0, r6
 800c47e:	f7ff ff0f 	bl	800c2a0 <__multiply>
 800c482:	6020      	str	r0, [r4, #0]
 800c484:	f8c0 9000 	str.w	r9, [r0]
 800c488:	4604      	mov	r4, r0
 800c48a:	e7e4      	b.n	800c456 <__pow5mult+0x6a>
 800c48c:	4638      	mov	r0, r7
 800c48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c492:	bf00      	nop
 800c494:	0800e548 	.word	0x0800e548
 800c498:	0800e28e 	.word	0x0800e28e
 800c49c:	0800e3f8 	.word	0x0800e3f8

0800c4a0 <__lshift>:
 800c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	6849      	ldr	r1, [r1, #4]
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4ae:	68a3      	ldr	r3, [r4, #8]
 800c4b0:	4607      	mov	r7, r0
 800c4b2:	4691      	mov	r9, r2
 800c4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4b8:	f108 0601 	add.w	r6, r8, #1
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	db0b      	blt.n	800c4d8 <__lshift+0x38>
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	f7ff fd91 	bl	800bfe8 <_Balloc>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b948      	cbnz	r0, 800c4de <__lshift+0x3e>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b28      	ldr	r3, [pc, #160]	; (800c570 <__lshift+0xd0>)
 800c4ce:	4829      	ldr	r0, [pc, #164]	; (800c574 <__lshift+0xd4>)
 800c4d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4d4:	f000 fdf4 	bl	800d0c0 <__assert_func>
 800c4d8:	3101      	adds	r1, #1
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	e7ee      	b.n	800c4bc <__lshift+0x1c>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f100 0114 	add.w	r1, r0, #20
 800c4e4:	f100 0210 	add.w	r2, r0, #16
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	4553      	cmp	r3, sl
 800c4ec:	db33      	blt.n	800c556 <__lshift+0xb6>
 800c4ee:	6920      	ldr	r0, [r4, #16]
 800c4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4f4:	f104 0314 	add.w	r3, r4, #20
 800c4f8:	f019 091f 	ands.w	r9, r9, #31
 800c4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c504:	d02b      	beq.n	800c55e <__lshift+0xbe>
 800c506:	f1c9 0e20 	rsb	lr, r9, #32
 800c50a:	468a      	mov	sl, r1
 800c50c:	2200      	movs	r2, #0
 800c50e:	6818      	ldr	r0, [r3, #0]
 800c510:	fa00 f009 	lsl.w	r0, r0, r9
 800c514:	4302      	orrs	r2, r0
 800c516:	f84a 2b04 	str.w	r2, [sl], #4
 800c51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51e:	459c      	cmp	ip, r3
 800c520:	fa22 f20e 	lsr.w	r2, r2, lr
 800c524:	d8f3      	bhi.n	800c50e <__lshift+0x6e>
 800c526:	ebac 0304 	sub.w	r3, ip, r4
 800c52a:	3b15      	subs	r3, #21
 800c52c:	f023 0303 	bic.w	r3, r3, #3
 800c530:	3304      	adds	r3, #4
 800c532:	f104 0015 	add.w	r0, r4, #21
 800c536:	4584      	cmp	ip, r0
 800c538:	bf38      	it	cc
 800c53a:	2304      	movcc	r3, #4
 800c53c:	50ca      	str	r2, [r1, r3]
 800c53e:	b10a      	cbz	r2, 800c544 <__lshift+0xa4>
 800c540:	f108 0602 	add.w	r6, r8, #2
 800c544:	3e01      	subs	r6, #1
 800c546:	4638      	mov	r0, r7
 800c548:	612e      	str	r6, [r5, #16]
 800c54a:	4621      	mov	r1, r4
 800c54c:	f7ff fd8c 	bl	800c068 <_Bfree>
 800c550:	4628      	mov	r0, r5
 800c552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c556:	f842 0f04 	str.w	r0, [r2, #4]!
 800c55a:	3301      	adds	r3, #1
 800c55c:	e7c5      	b.n	800c4ea <__lshift+0x4a>
 800c55e:	3904      	subs	r1, #4
 800c560:	f853 2b04 	ldr.w	r2, [r3], #4
 800c564:	f841 2f04 	str.w	r2, [r1, #4]!
 800c568:	459c      	cmp	ip, r3
 800c56a:	d8f9      	bhi.n	800c560 <__lshift+0xc0>
 800c56c:	e7ea      	b.n	800c544 <__lshift+0xa4>
 800c56e:	bf00      	nop
 800c570:	0800e304 	.word	0x0800e304
 800c574:	0800e3f8 	.word	0x0800e3f8

0800c578 <__mcmp>:
 800c578:	b530      	push	{r4, r5, lr}
 800c57a:	6902      	ldr	r2, [r0, #16]
 800c57c:	690c      	ldr	r4, [r1, #16]
 800c57e:	1b12      	subs	r2, r2, r4
 800c580:	d10e      	bne.n	800c5a0 <__mcmp+0x28>
 800c582:	f100 0314 	add.w	r3, r0, #20
 800c586:	3114      	adds	r1, #20
 800c588:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c58c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c590:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c594:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c598:	42a5      	cmp	r5, r4
 800c59a:	d003      	beq.n	800c5a4 <__mcmp+0x2c>
 800c59c:	d305      	bcc.n	800c5aa <__mcmp+0x32>
 800c59e:	2201      	movs	r2, #1
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	bd30      	pop	{r4, r5, pc}
 800c5a4:	4283      	cmp	r3, r0
 800c5a6:	d3f3      	bcc.n	800c590 <__mcmp+0x18>
 800c5a8:	e7fa      	b.n	800c5a0 <__mcmp+0x28>
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ae:	e7f7      	b.n	800c5a0 <__mcmp+0x28>

0800c5b0 <__mdiff>:
 800c5b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	4617      	mov	r7, r2
 800c5be:	f7ff ffdb 	bl	800c578 <__mcmp>
 800c5c2:	1e05      	subs	r5, r0, #0
 800c5c4:	d110      	bne.n	800c5e8 <__mdiff+0x38>
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7ff fd0d 	bl	800bfe8 <_Balloc>
 800c5ce:	b930      	cbnz	r0, 800c5de <__mdiff+0x2e>
 800c5d0:	4b39      	ldr	r3, [pc, #228]	; (800c6b8 <__mdiff+0x108>)
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	f240 2132 	movw	r1, #562	; 0x232
 800c5d8:	4838      	ldr	r0, [pc, #224]	; (800c6bc <__mdiff+0x10c>)
 800c5da:	f000 fd71 	bl	800d0c0 <__assert_func>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	bfa4      	itt	ge
 800c5ea:	463b      	movge	r3, r7
 800c5ec:	4627      	movge	r7, r4
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	bfa6      	itte	ge
 800c5f4:	461c      	movge	r4, r3
 800c5f6:	2500      	movge	r5, #0
 800c5f8:	2501      	movlt	r5, #1
 800c5fa:	f7ff fcf5 	bl	800bfe8 <_Balloc>
 800c5fe:	b920      	cbnz	r0, 800c60a <__mdiff+0x5a>
 800c600:	4b2d      	ldr	r3, [pc, #180]	; (800c6b8 <__mdiff+0x108>)
 800c602:	4602      	mov	r2, r0
 800c604:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c608:	e7e6      	b.n	800c5d8 <__mdiff+0x28>
 800c60a:	693e      	ldr	r6, [r7, #16]
 800c60c:	60c5      	str	r5, [r0, #12]
 800c60e:	6925      	ldr	r5, [r4, #16]
 800c610:	f107 0114 	add.w	r1, r7, #20
 800c614:	f104 0914 	add.w	r9, r4, #20
 800c618:	f100 0e14 	add.w	lr, r0, #20
 800c61c:	f107 0210 	add.w	r2, r7, #16
 800c620:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c624:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c628:	46f2      	mov	sl, lr
 800c62a:	2700      	movs	r7, #0
 800c62c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c634:	fa1f f883 	uxth.w	r8, r3
 800c638:	fa17 f78b 	uxtah	r7, r7, fp
 800c63c:	0c1b      	lsrs	r3, r3, #16
 800c63e:	eba7 0808 	sub.w	r8, r7, r8
 800c642:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c646:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c64a:	fa1f f888 	uxth.w	r8, r8
 800c64e:	141f      	asrs	r7, r3, #16
 800c650:	454d      	cmp	r5, r9
 800c652:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c656:	f84a 3b04 	str.w	r3, [sl], #4
 800c65a:	d8e7      	bhi.n	800c62c <__mdiff+0x7c>
 800c65c:	1b2b      	subs	r3, r5, r4
 800c65e:	3b15      	subs	r3, #21
 800c660:	f023 0303 	bic.w	r3, r3, #3
 800c664:	3304      	adds	r3, #4
 800c666:	3415      	adds	r4, #21
 800c668:	42a5      	cmp	r5, r4
 800c66a:	bf38      	it	cc
 800c66c:	2304      	movcc	r3, #4
 800c66e:	4419      	add	r1, r3
 800c670:	4473      	add	r3, lr
 800c672:	469e      	mov	lr, r3
 800c674:	460d      	mov	r5, r1
 800c676:	4565      	cmp	r5, ip
 800c678:	d30e      	bcc.n	800c698 <__mdiff+0xe8>
 800c67a:	f10c 0203 	add.w	r2, ip, #3
 800c67e:	1a52      	subs	r2, r2, r1
 800c680:	f022 0203 	bic.w	r2, r2, #3
 800c684:	3903      	subs	r1, #3
 800c686:	458c      	cmp	ip, r1
 800c688:	bf38      	it	cc
 800c68a:	2200      	movcc	r2, #0
 800c68c:	441a      	add	r2, r3
 800c68e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c692:	b17b      	cbz	r3, 800c6b4 <__mdiff+0x104>
 800c694:	6106      	str	r6, [r0, #16]
 800c696:	e7a5      	b.n	800c5e4 <__mdiff+0x34>
 800c698:	f855 8b04 	ldr.w	r8, [r5], #4
 800c69c:	fa17 f488 	uxtah	r4, r7, r8
 800c6a0:	1422      	asrs	r2, r4, #16
 800c6a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c6a6:	b2a4      	uxth	r4, r4
 800c6a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c6ac:	f84e 4b04 	str.w	r4, [lr], #4
 800c6b0:	1417      	asrs	r7, r2, #16
 800c6b2:	e7e0      	b.n	800c676 <__mdiff+0xc6>
 800c6b4:	3e01      	subs	r6, #1
 800c6b6:	e7ea      	b.n	800c68e <__mdiff+0xde>
 800c6b8:	0800e304 	.word	0x0800e304
 800c6bc:	0800e3f8 	.word	0x0800e3f8

0800c6c0 <__ulp>:
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	ed8d 0b00 	vstr	d0, [sp]
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	4912      	ldr	r1, [pc, #72]	; (800c714 <__ulp+0x54>)
 800c6ca:	4019      	ands	r1, r3
 800c6cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	dd05      	ble.n	800c6e0 <__ulp+0x20>
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	ec43 2b10 	vmov	d0, r2, r3
 800c6dc:	b002      	add	sp, #8
 800c6de:	4770      	bx	lr
 800c6e0:	4249      	negs	r1, r1
 800c6e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c6e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	f04f 0300 	mov.w	r3, #0
 800c6f2:	da04      	bge.n	800c6fe <__ulp+0x3e>
 800c6f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6f8:	fa41 f300 	asr.w	r3, r1, r0
 800c6fc:	e7ec      	b.n	800c6d8 <__ulp+0x18>
 800c6fe:	f1a0 0114 	sub.w	r1, r0, #20
 800c702:	291e      	cmp	r1, #30
 800c704:	bfda      	itte	le
 800c706:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c70a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c70e:	2101      	movgt	r1, #1
 800c710:	460a      	mov	r2, r1
 800c712:	e7e1      	b.n	800c6d8 <__ulp+0x18>
 800c714:	7ff00000 	.word	0x7ff00000

0800c718 <__b2d>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	6905      	ldr	r5, [r0, #16]
 800c71c:	f100 0714 	add.w	r7, r0, #20
 800c720:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c724:	1f2e      	subs	r6, r5, #4
 800c726:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7ff fd52 	bl	800c1d4 <__hi0bits>
 800c730:	f1c0 0320 	rsb	r3, r0, #32
 800c734:	280a      	cmp	r0, #10
 800c736:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c7b4 <__b2d+0x9c>
 800c73a:	600b      	str	r3, [r1, #0]
 800c73c:	dc14      	bgt.n	800c768 <__b2d+0x50>
 800c73e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c742:	fa24 f10e 	lsr.w	r1, r4, lr
 800c746:	42b7      	cmp	r7, r6
 800c748:	ea41 030c 	orr.w	r3, r1, ip
 800c74c:	bf34      	ite	cc
 800c74e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c752:	2100      	movcs	r1, #0
 800c754:	3015      	adds	r0, #21
 800c756:	fa04 f000 	lsl.w	r0, r4, r0
 800c75a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c75e:	ea40 0201 	orr.w	r2, r0, r1
 800c762:	ec43 2b10 	vmov	d0, r2, r3
 800c766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c768:	42b7      	cmp	r7, r6
 800c76a:	bf3a      	itte	cc
 800c76c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c770:	f1a5 0608 	subcc.w	r6, r5, #8
 800c774:	2100      	movcs	r1, #0
 800c776:	380b      	subs	r0, #11
 800c778:	d017      	beq.n	800c7aa <__b2d+0x92>
 800c77a:	f1c0 0c20 	rsb	ip, r0, #32
 800c77e:	fa04 f500 	lsl.w	r5, r4, r0
 800c782:	42be      	cmp	r6, r7
 800c784:	fa21 f40c 	lsr.w	r4, r1, ip
 800c788:	ea45 0504 	orr.w	r5, r5, r4
 800c78c:	bf8c      	ite	hi
 800c78e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c792:	2400      	movls	r4, #0
 800c794:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c798:	fa01 f000 	lsl.w	r0, r1, r0
 800c79c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c7a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c7a4:	ea40 0204 	orr.w	r2, r0, r4
 800c7a8:	e7db      	b.n	800c762 <__b2d+0x4a>
 800c7aa:	ea44 030c 	orr.w	r3, r4, ip
 800c7ae:	460a      	mov	r2, r1
 800c7b0:	e7d7      	b.n	800c762 <__b2d+0x4a>
 800c7b2:	bf00      	nop
 800c7b4:	3ff00000 	.word	0x3ff00000

0800c7b8 <__d2b>:
 800c7b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	4689      	mov	r9, r1
 800c7be:	2101      	movs	r1, #1
 800c7c0:	ec57 6b10 	vmov	r6, r7, d0
 800c7c4:	4690      	mov	r8, r2
 800c7c6:	f7ff fc0f 	bl	800bfe8 <_Balloc>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	b930      	cbnz	r0, 800c7dc <__d2b+0x24>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	4b25      	ldr	r3, [pc, #148]	; (800c868 <__d2b+0xb0>)
 800c7d2:	4826      	ldr	r0, [pc, #152]	; (800c86c <__d2b+0xb4>)
 800c7d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c7d8:	f000 fc72 	bl	800d0c0 <__assert_func>
 800c7dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c7e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7e4:	bb35      	cbnz	r5, 800c834 <__d2b+0x7c>
 800c7e6:	2e00      	cmp	r6, #0
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	d028      	beq.n	800c83e <__d2b+0x86>
 800c7ec:	4668      	mov	r0, sp
 800c7ee:	9600      	str	r6, [sp, #0]
 800c7f0:	f7ff fd10 	bl	800c214 <__lo0bits>
 800c7f4:	9900      	ldr	r1, [sp, #0]
 800c7f6:	b300      	cbz	r0, 800c83a <__d2b+0x82>
 800c7f8:	9a01      	ldr	r2, [sp, #4]
 800c7fa:	f1c0 0320 	rsb	r3, r0, #32
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	430b      	orrs	r3, r1
 800c804:	40c2      	lsrs	r2, r0
 800c806:	6163      	str	r3, [r4, #20]
 800c808:	9201      	str	r2, [sp, #4]
 800c80a:	9b01      	ldr	r3, [sp, #4]
 800c80c:	61a3      	str	r3, [r4, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	bf14      	ite	ne
 800c812:	2202      	movne	r2, #2
 800c814:	2201      	moveq	r2, #1
 800c816:	6122      	str	r2, [r4, #16]
 800c818:	b1d5      	cbz	r5, 800c850 <__d2b+0x98>
 800c81a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c81e:	4405      	add	r5, r0
 800c820:	f8c9 5000 	str.w	r5, [r9]
 800c824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c828:	f8c8 0000 	str.w	r0, [r8]
 800c82c:	4620      	mov	r0, r4
 800c82e:	b003      	add	sp, #12
 800c830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c838:	e7d5      	b.n	800c7e6 <__d2b+0x2e>
 800c83a:	6161      	str	r1, [r4, #20]
 800c83c:	e7e5      	b.n	800c80a <__d2b+0x52>
 800c83e:	a801      	add	r0, sp, #4
 800c840:	f7ff fce8 	bl	800c214 <__lo0bits>
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	6163      	str	r3, [r4, #20]
 800c848:	2201      	movs	r2, #1
 800c84a:	6122      	str	r2, [r4, #16]
 800c84c:	3020      	adds	r0, #32
 800c84e:	e7e3      	b.n	800c818 <__d2b+0x60>
 800c850:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c858:	f8c9 0000 	str.w	r0, [r9]
 800c85c:	6918      	ldr	r0, [r3, #16]
 800c85e:	f7ff fcb9 	bl	800c1d4 <__hi0bits>
 800c862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c866:	e7df      	b.n	800c828 <__d2b+0x70>
 800c868:	0800e304 	.word	0x0800e304
 800c86c:	0800e3f8 	.word	0x0800e3f8

0800c870 <__ratio>:
 800c870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	4688      	mov	r8, r1
 800c876:	4669      	mov	r1, sp
 800c878:	4681      	mov	r9, r0
 800c87a:	f7ff ff4d 	bl	800c718 <__b2d>
 800c87e:	a901      	add	r1, sp, #4
 800c880:	4640      	mov	r0, r8
 800c882:	ec55 4b10 	vmov	r4, r5, d0
 800c886:	f7ff ff47 	bl	800c718 <__b2d>
 800c88a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c88e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c892:	eba3 0c02 	sub.w	ip, r3, r2
 800c896:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c8a0:	ec51 0b10 	vmov	r0, r1, d0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	bfd6      	itet	le
 800c8a8:	460a      	movle	r2, r1
 800c8aa:	462a      	movgt	r2, r5
 800c8ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8b0:	468b      	mov	fp, r1
 800c8b2:	462f      	mov	r7, r5
 800c8b4:	bfd4      	ite	le
 800c8b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c8ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8be:	4620      	mov	r0, r4
 800c8c0:	ee10 2a10 	vmov	r2, s0
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f3 ffc8 	bl	800085c <__aeabi_ddiv>
 800c8cc:	ec41 0b10 	vmov	d0, r0, r1
 800c8d0:	b003      	add	sp, #12
 800c8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8d6 <__copybits>:
 800c8d6:	3901      	subs	r1, #1
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	1149      	asrs	r1, r1, #5
 800c8dc:	6914      	ldr	r4, [r2, #16]
 800c8de:	3101      	adds	r1, #1
 800c8e0:	f102 0314 	add.w	r3, r2, #20
 800c8e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8ec:	1f05      	subs	r5, r0, #4
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	d30c      	bcc.n	800c90c <__copybits+0x36>
 800c8f2:	1aa3      	subs	r3, r4, r2
 800c8f4:	3b11      	subs	r3, #17
 800c8f6:	f023 0303 	bic.w	r3, r3, #3
 800c8fa:	3211      	adds	r2, #17
 800c8fc:	42a2      	cmp	r2, r4
 800c8fe:	bf88      	it	hi
 800c900:	2300      	movhi	r3, #0
 800c902:	4418      	add	r0, r3
 800c904:	2300      	movs	r3, #0
 800c906:	4288      	cmp	r0, r1
 800c908:	d305      	bcc.n	800c916 <__copybits+0x40>
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c910:	f845 6f04 	str.w	r6, [r5, #4]!
 800c914:	e7eb      	b.n	800c8ee <__copybits+0x18>
 800c916:	f840 3b04 	str.w	r3, [r0], #4
 800c91a:	e7f4      	b.n	800c906 <__copybits+0x30>

0800c91c <__any_on>:
 800c91c:	f100 0214 	add.w	r2, r0, #20
 800c920:	6900      	ldr	r0, [r0, #16]
 800c922:	114b      	asrs	r3, r1, #5
 800c924:	4298      	cmp	r0, r3
 800c926:	b510      	push	{r4, lr}
 800c928:	db11      	blt.n	800c94e <__any_on+0x32>
 800c92a:	dd0a      	ble.n	800c942 <__any_on+0x26>
 800c92c:	f011 011f 	ands.w	r1, r1, #31
 800c930:	d007      	beq.n	800c942 <__any_on+0x26>
 800c932:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c936:	fa24 f001 	lsr.w	r0, r4, r1
 800c93a:	fa00 f101 	lsl.w	r1, r0, r1
 800c93e:	428c      	cmp	r4, r1
 800c940:	d10b      	bne.n	800c95a <__any_on+0x3e>
 800c942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c946:	4293      	cmp	r3, r2
 800c948:	d803      	bhi.n	800c952 <__any_on+0x36>
 800c94a:	2000      	movs	r0, #0
 800c94c:	bd10      	pop	{r4, pc}
 800c94e:	4603      	mov	r3, r0
 800c950:	e7f7      	b.n	800c942 <__any_on+0x26>
 800c952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c956:	2900      	cmp	r1, #0
 800c958:	d0f5      	beq.n	800c946 <__any_on+0x2a>
 800c95a:	2001      	movs	r0, #1
 800c95c:	e7f6      	b.n	800c94c <__any_on+0x30>

0800c95e <_calloc_r>:
 800c95e:	b513      	push	{r0, r1, r4, lr}
 800c960:	434a      	muls	r2, r1
 800c962:	4611      	mov	r1, r2
 800c964:	9201      	str	r2, [sp, #4]
 800c966:	f7fb fff9 	bl	800895c <_malloc_r>
 800c96a:	4604      	mov	r4, r0
 800c96c:	b118      	cbz	r0, 800c976 <_calloc_r+0x18>
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	2100      	movs	r1, #0
 800c972:	f7fb ff9b 	bl	80088ac <memset>
 800c976:	4620      	mov	r0, r4
 800c978:	b002      	add	sp, #8
 800c97a:	bd10      	pop	{r4, pc}

0800c97c <_realloc_r>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	4607      	mov	r7, r0
 800c980:	4614      	mov	r4, r2
 800c982:	460e      	mov	r6, r1
 800c984:	b921      	cbnz	r1, 800c990 <_realloc_r+0x14>
 800c986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c98a:	4611      	mov	r1, r2
 800c98c:	f7fb bfe6 	b.w	800895c <_malloc_r>
 800c990:	b922      	cbnz	r2, 800c99c <_realloc_r+0x20>
 800c992:	f7fb ff93 	bl	80088bc <_free_r>
 800c996:	4625      	mov	r5, r4
 800c998:	4628      	mov	r0, r5
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	f000 fc1e 	bl	800d1dc <_malloc_usable_size_r>
 800c9a0:	42a0      	cmp	r0, r4
 800c9a2:	d20f      	bcs.n	800c9c4 <_realloc_r+0x48>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f7fb ffd8 	bl	800895c <_malloc_r>
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d0f2      	beq.n	800c998 <_realloc_r+0x1c>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	f7fb ff6b 	bl	8008890 <memcpy>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7fb ff7d 	bl	80088bc <_free_r>
 800c9c2:	e7e9      	b.n	800c998 <_realloc_r+0x1c>
 800c9c4:	4635      	mov	r5, r6
 800c9c6:	e7e7      	b.n	800c998 <_realloc_r+0x1c>

0800c9c8 <__ssputs_r>:
 800c9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	688e      	ldr	r6, [r1, #8]
 800c9ce:	429e      	cmp	r6, r3
 800c9d0:	4682      	mov	sl, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	4690      	mov	r8, r2
 800c9d6:	461f      	mov	r7, r3
 800c9d8:	d838      	bhi.n	800ca4c <__ssputs_r+0x84>
 800c9da:	898a      	ldrh	r2, [r1, #12]
 800c9dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9e0:	d032      	beq.n	800ca48 <__ssputs_r+0x80>
 800c9e2:	6825      	ldr	r5, [r4, #0]
 800c9e4:	6909      	ldr	r1, [r1, #16]
 800c9e6:	eba5 0901 	sub.w	r9, r5, r1
 800c9ea:	6965      	ldr	r5, [r4, #20]
 800c9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	444b      	add	r3, r9
 800c9f8:	106d      	asrs	r5, r5, #1
 800c9fa:	429d      	cmp	r5, r3
 800c9fc:	bf38      	it	cc
 800c9fe:	461d      	movcc	r5, r3
 800ca00:	0553      	lsls	r3, r2, #21
 800ca02:	d531      	bpl.n	800ca68 <__ssputs_r+0xa0>
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7fb ffa9 	bl	800895c <_malloc_r>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	b950      	cbnz	r0, 800ca24 <__ssputs_r+0x5c>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	f8ca 3000 	str.w	r3, [sl]
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca24:	6921      	ldr	r1, [r4, #16]
 800ca26:	464a      	mov	r2, r9
 800ca28:	f7fb ff32 	bl	8008890 <memcpy>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	6126      	str	r6, [r4, #16]
 800ca3a:	6165      	str	r5, [r4, #20]
 800ca3c:	444e      	add	r6, r9
 800ca3e:	eba5 0509 	sub.w	r5, r5, r9
 800ca42:	6026      	str	r6, [r4, #0]
 800ca44:	60a5      	str	r5, [r4, #8]
 800ca46:	463e      	mov	r6, r7
 800ca48:	42be      	cmp	r6, r7
 800ca4a:	d900      	bls.n	800ca4e <__ssputs_r+0x86>
 800ca4c:	463e      	mov	r6, r7
 800ca4e:	4632      	mov	r2, r6
 800ca50:	6820      	ldr	r0, [r4, #0]
 800ca52:	4641      	mov	r1, r8
 800ca54:	f000 fba8 	bl	800d1a8 <memmove>
 800ca58:	68a3      	ldr	r3, [r4, #8]
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	1b9b      	subs	r3, r3, r6
 800ca5e:	4432      	add	r2, r6
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	6022      	str	r2, [r4, #0]
 800ca64:	2000      	movs	r0, #0
 800ca66:	e7db      	b.n	800ca20 <__ssputs_r+0x58>
 800ca68:	462a      	mov	r2, r5
 800ca6a:	f7ff ff87 	bl	800c97c <_realloc_r>
 800ca6e:	4606      	mov	r6, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1e1      	bne.n	800ca38 <__ssputs_r+0x70>
 800ca74:	6921      	ldr	r1, [r4, #16]
 800ca76:	4650      	mov	r0, sl
 800ca78:	f7fb ff20 	bl	80088bc <_free_r>
 800ca7c:	e7c7      	b.n	800ca0e <__ssputs_r+0x46>
	...

0800ca80 <_svfiprintf_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	4698      	mov	r8, r3
 800ca86:	898b      	ldrh	r3, [r1, #12]
 800ca88:	061b      	lsls	r3, r3, #24
 800ca8a:	b09d      	sub	sp, #116	; 0x74
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	460d      	mov	r5, r1
 800ca90:	4614      	mov	r4, r2
 800ca92:	d50e      	bpl.n	800cab2 <_svfiprintf_r+0x32>
 800ca94:	690b      	ldr	r3, [r1, #16]
 800ca96:	b963      	cbnz	r3, 800cab2 <_svfiprintf_r+0x32>
 800ca98:	2140      	movs	r1, #64	; 0x40
 800ca9a:	f7fb ff5f 	bl	800895c <_malloc_r>
 800ca9e:	6028      	str	r0, [r5, #0]
 800caa0:	6128      	str	r0, [r5, #16]
 800caa2:	b920      	cbnz	r0, 800caae <_svfiprintf_r+0x2e>
 800caa4:	230c      	movs	r3, #12
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e0d1      	b.n	800cc52 <_svfiprintf_r+0x1d2>
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	616b      	str	r3, [r5, #20]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9309      	str	r3, [sp, #36]	; 0x24
 800cab6:	2320      	movs	r3, #32
 800cab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac0:	2330      	movs	r3, #48	; 0x30
 800cac2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc6c <_svfiprintf_r+0x1ec>
 800cac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caca:	f04f 0901 	mov.w	r9, #1
 800cace:	4623      	mov	r3, r4
 800cad0:	469a      	mov	sl, r3
 800cad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad6:	b10a      	cbz	r2, 800cadc <_svfiprintf_r+0x5c>
 800cad8:	2a25      	cmp	r2, #37	; 0x25
 800cada:	d1f9      	bne.n	800cad0 <_svfiprintf_r+0x50>
 800cadc:	ebba 0b04 	subs.w	fp, sl, r4
 800cae0:	d00b      	beq.n	800cafa <_svfiprintf_r+0x7a>
 800cae2:	465b      	mov	r3, fp
 800cae4:	4622      	mov	r2, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff ff6d 	bl	800c9c8 <__ssputs_r>
 800caee:	3001      	adds	r0, #1
 800caf0:	f000 80aa 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800caf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf6:	445a      	add	r2, fp
 800caf8:	9209      	str	r2, [sp, #36]	; 0x24
 800cafa:	f89a 3000 	ldrb.w	r3, [sl]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80a2 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800cb04:	2300      	movs	r3, #0
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0e:	f10a 0a01 	add.w	sl, sl, #1
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	9307      	str	r3, [sp, #28]
 800cb16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb1a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb1c:	4654      	mov	r4, sl
 800cb1e:	2205      	movs	r2, #5
 800cb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb24:	4851      	ldr	r0, [pc, #324]	; (800cc6c <_svfiprintf_r+0x1ec>)
 800cb26:	f7f3 fb63 	bl	80001f0 <memchr>
 800cb2a:	9a04      	ldr	r2, [sp, #16]
 800cb2c:	b9d8      	cbnz	r0, 800cb66 <_svfiprintf_r+0xe6>
 800cb2e:	06d0      	lsls	r0, r2, #27
 800cb30:	bf44      	itt	mi
 800cb32:	2320      	movmi	r3, #32
 800cb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb38:	0711      	lsls	r1, r2, #28
 800cb3a:	bf44      	itt	mi
 800cb3c:	232b      	movmi	r3, #43	; 0x2b
 800cb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb42:	f89a 3000 	ldrb.w	r3, [sl]
 800cb46:	2b2a      	cmp	r3, #42	; 0x2a
 800cb48:	d015      	beq.n	800cb76 <_svfiprintf_r+0xf6>
 800cb4a:	9a07      	ldr	r2, [sp, #28]
 800cb4c:	4654      	mov	r4, sl
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f04f 0c0a 	mov.w	ip, #10
 800cb54:	4621      	mov	r1, r4
 800cb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb5a:	3b30      	subs	r3, #48	; 0x30
 800cb5c:	2b09      	cmp	r3, #9
 800cb5e:	d94e      	bls.n	800cbfe <_svfiprintf_r+0x17e>
 800cb60:	b1b0      	cbz	r0, 800cb90 <_svfiprintf_r+0x110>
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	e014      	b.n	800cb90 <_svfiprintf_r+0x110>
 800cb66:	eba0 0308 	sub.w	r3, r0, r8
 800cb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	46a2      	mov	sl, r4
 800cb74:	e7d2      	b.n	800cb1c <_svfiprintf_r+0x9c>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	1d19      	adds	r1, r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	9103      	str	r1, [sp, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfbb      	ittet	lt
 800cb82:	425b      	neglt	r3, r3
 800cb84:	f042 0202 	orrlt.w	r2, r2, #2
 800cb88:	9307      	strge	r3, [sp, #28]
 800cb8a:	9307      	strlt	r3, [sp, #28]
 800cb8c:	bfb8      	it	lt
 800cb8e:	9204      	strlt	r2, [sp, #16]
 800cb90:	7823      	ldrb	r3, [r4, #0]
 800cb92:	2b2e      	cmp	r3, #46	; 0x2e
 800cb94:	d10c      	bne.n	800cbb0 <_svfiprintf_r+0x130>
 800cb96:	7863      	ldrb	r3, [r4, #1]
 800cb98:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9a:	d135      	bne.n	800cc08 <_svfiprintf_r+0x188>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	1d1a      	adds	r2, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	9203      	str	r2, [sp, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfb8      	it	lt
 800cba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbac:	3402      	adds	r4, #2
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc7c <_svfiprintf_r+0x1fc>
 800cbb4:	7821      	ldrb	r1, [r4, #0]
 800cbb6:	2203      	movs	r2, #3
 800cbb8:	4650      	mov	r0, sl
 800cbba:	f7f3 fb19 	bl	80001f0 <memchr>
 800cbbe:	b140      	cbz	r0, 800cbd2 <_svfiprintf_r+0x152>
 800cbc0:	2340      	movs	r3, #64	; 0x40
 800cbc2:	eba0 000a 	sub.w	r0, r0, sl
 800cbc6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	4303      	orrs	r3, r0
 800cbce:	3401      	adds	r4, #1
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	4826      	ldr	r0, [pc, #152]	; (800cc70 <_svfiprintf_r+0x1f0>)
 800cbd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbdc:	2206      	movs	r2, #6
 800cbde:	f7f3 fb07 	bl	80001f0 <memchr>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d038      	beq.n	800cc58 <_svfiprintf_r+0x1d8>
 800cbe6:	4b23      	ldr	r3, [pc, #140]	; (800cc74 <_svfiprintf_r+0x1f4>)
 800cbe8:	bb1b      	cbnz	r3, 800cc32 <_svfiprintf_r+0x1b2>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf8:	4433      	add	r3, r6
 800cbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfc:	e767      	b.n	800cace <_svfiprintf_r+0x4e>
 800cbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc02:	460c      	mov	r4, r1
 800cc04:	2001      	movs	r0, #1
 800cc06:	e7a5      	b.n	800cb54 <_svfiprintf_r+0xd4>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	3401      	adds	r4, #1
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0c0a 	mov.w	ip, #10
 800cc14:	4620      	mov	r0, r4
 800cc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1a:	3a30      	subs	r2, #48	; 0x30
 800cc1c:	2a09      	cmp	r2, #9
 800cc1e:	d903      	bls.n	800cc28 <_svfiprintf_r+0x1a8>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c5      	beq.n	800cbb0 <_svfiprintf_r+0x130>
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	e7c3      	b.n	800cbb0 <_svfiprintf_r+0x130>
 800cc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e7f0      	b.n	800cc14 <_svfiprintf_r+0x194>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7fb ff87 	bl	8008b50 <_printf_float>
 800cc42:	1c42      	adds	r2, r0, #1
 800cc44:	4606      	mov	r6, r0
 800cc46:	d1d6      	bne.n	800cbf6 <_svfiprintf_r+0x176>
 800cc48:	89ab      	ldrh	r3, [r5, #12]
 800cc4a:	065b      	lsls	r3, r3, #25
 800cc4c:	f53f af2c 	bmi.w	800caa8 <_svfiprintf_r+0x28>
 800cc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc52:	b01d      	add	sp, #116	; 0x74
 800cc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc58:	ab03      	add	r3, sp, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc60:	a904      	add	r1, sp, #16
 800cc62:	4638      	mov	r0, r7
 800cc64:	f7fc fa18 	bl	8009098 <_printf_i>
 800cc68:	e7eb      	b.n	800cc42 <_svfiprintf_r+0x1c2>
 800cc6a:	bf00      	nop
 800cc6c:	0800e554 	.word	0x0800e554
 800cc70:	0800e55e 	.word	0x0800e55e
 800cc74:	08008b51 	.word	0x08008b51
 800cc78:	0800c9c9 	.word	0x0800c9c9
 800cc7c:	0800e55a 	.word	0x0800e55a

0800cc80 <__sfputc_r>:
 800cc80:	6893      	ldr	r3, [r2, #8]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	b410      	push	{r4}
 800cc88:	6093      	str	r3, [r2, #8]
 800cc8a:	da08      	bge.n	800cc9e <__sfputc_r+0x1e>
 800cc8c:	6994      	ldr	r4, [r2, #24]
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	db01      	blt.n	800cc96 <__sfputc_r+0x16>
 800cc92:	290a      	cmp	r1, #10
 800cc94:	d103      	bne.n	800cc9e <__sfputc_r+0x1e>
 800cc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc9a:	f7fd bcbb 	b.w	800a614 <__swbuf_r>
 800cc9e:	6813      	ldr	r3, [r2, #0]
 800cca0:	1c58      	adds	r0, r3, #1
 800cca2:	6010      	str	r0, [r2, #0]
 800cca4:	7019      	strb	r1, [r3, #0]
 800cca6:	4608      	mov	r0, r1
 800cca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <__sfputs_r>:
 800ccae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	460f      	mov	r7, r1
 800ccb4:	4614      	mov	r4, r2
 800ccb6:	18d5      	adds	r5, r2, r3
 800ccb8:	42ac      	cmp	r4, r5
 800ccba:	d101      	bne.n	800ccc0 <__sfputs_r+0x12>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	e007      	b.n	800ccd0 <__sfputs_r+0x22>
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	463a      	mov	r2, r7
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7ff ffda 	bl	800cc80 <__sfputc_r>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d1f3      	bne.n	800ccb8 <__sfputs_r+0xa>
 800ccd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccd4 <_vfiprintf_r>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	460d      	mov	r5, r1
 800ccda:	b09d      	sub	sp, #116	; 0x74
 800ccdc:	4614      	mov	r4, r2
 800ccde:	4698      	mov	r8, r3
 800cce0:	4606      	mov	r6, r0
 800cce2:	b118      	cbz	r0, 800ccec <_vfiprintf_r+0x18>
 800cce4:	6983      	ldr	r3, [r0, #24]
 800cce6:	b90b      	cbnz	r3, 800ccec <_vfiprintf_r+0x18>
 800cce8:	f7fe fce8 	bl	800b6bc <__sinit>
 800ccec:	4b89      	ldr	r3, [pc, #548]	; (800cf14 <_vfiprintf_r+0x240>)
 800ccee:	429d      	cmp	r5, r3
 800ccf0:	d11b      	bne.n	800cd2a <_vfiprintf_r+0x56>
 800ccf2:	6875      	ldr	r5, [r6, #4]
 800ccf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccf6:	07d9      	lsls	r1, r3, #31
 800ccf8:	d405      	bmi.n	800cd06 <_vfiprintf_r+0x32>
 800ccfa:	89ab      	ldrh	r3, [r5, #12]
 800ccfc:	059a      	lsls	r2, r3, #22
 800ccfe:	d402      	bmi.n	800cd06 <_vfiprintf_r+0x32>
 800cd00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd02:	f7ff f8ec 	bl	800bede <__retarget_lock_acquire_recursive>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	071b      	lsls	r3, r3, #28
 800cd0a:	d501      	bpl.n	800cd10 <_vfiprintf_r+0x3c>
 800cd0c:	692b      	ldr	r3, [r5, #16]
 800cd0e:	b9eb      	cbnz	r3, 800cd4c <_vfiprintf_r+0x78>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7fd fcd0 	bl	800a6b8 <__swsetup_r>
 800cd18:	b1c0      	cbz	r0, 800cd4c <_vfiprintf_r+0x78>
 800cd1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd1c:	07dc      	lsls	r4, r3, #31
 800cd1e:	d50e      	bpl.n	800cd3e <_vfiprintf_r+0x6a>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	b01d      	add	sp, #116	; 0x74
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	4b7b      	ldr	r3, [pc, #492]	; (800cf18 <_vfiprintf_r+0x244>)
 800cd2c:	429d      	cmp	r5, r3
 800cd2e:	d101      	bne.n	800cd34 <_vfiprintf_r+0x60>
 800cd30:	68b5      	ldr	r5, [r6, #8]
 800cd32:	e7df      	b.n	800ccf4 <_vfiprintf_r+0x20>
 800cd34:	4b79      	ldr	r3, [pc, #484]	; (800cf1c <_vfiprintf_r+0x248>)
 800cd36:	429d      	cmp	r5, r3
 800cd38:	bf08      	it	eq
 800cd3a:	68f5      	ldreq	r5, [r6, #12]
 800cd3c:	e7da      	b.n	800ccf4 <_vfiprintf_r+0x20>
 800cd3e:	89ab      	ldrh	r3, [r5, #12]
 800cd40:	0598      	lsls	r0, r3, #22
 800cd42:	d4ed      	bmi.n	800cd20 <_vfiprintf_r+0x4c>
 800cd44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd46:	f7ff f8cb 	bl	800bee0 <__retarget_lock_release_recursive>
 800cd4a:	e7e9      	b.n	800cd20 <_vfiprintf_r+0x4c>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd50:	2320      	movs	r3, #32
 800cd52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd5a:	2330      	movs	r3, #48	; 0x30
 800cd5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf20 <_vfiprintf_r+0x24c>
 800cd60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd64:	f04f 0901 	mov.w	r9, #1
 800cd68:	4623      	mov	r3, r4
 800cd6a:	469a      	mov	sl, r3
 800cd6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd70:	b10a      	cbz	r2, 800cd76 <_vfiprintf_r+0xa2>
 800cd72:	2a25      	cmp	r2, #37	; 0x25
 800cd74:	d1f9      	bne.n	800cd6a <_vfiprintf_r+0x96>
 800cd76:	ebba 0b04 	subs.w	fp, sl, r4
 800cd7a:	d00b      	beq.n	800cd94 <_vfiprintf_r+0xc0>
 800cd7c:	465b      	mov	r3, fp
 800cd7e:	4622      	mov	r2, r4
 800cd80:	4629      	mov	r1, r5
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff ff93 	bl	800ccae <__sfputs_r>
 800cd88:	3001      	adds	r0, #1
 800cd8a:	f000 80aa 	beq.w	800cee2 <_vfiprintf_r+0x20e>
 800cd8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd90:	445a      	add	r2, fp
 800cd92:	9209      	str	r2, [sp, #36]	; 0x24
 800cd94:	f89a 3000 	ldrb.w	r3, [sl]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 80a2 	beq.w	800cee2 <_vfiprintf_r+0x20e>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	f04f 32ff 	mov.w	r2, #4294967295
 800cda4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cda8:	f10a 0a01 	add.w	sl, sl, #1
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	9307      	str	r3, [sp, #28]
 800cdb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdb4:	931a      	str	r3, [sp, #104]	; 0x68
 800cdb6:	4654      	mov	r4, sl
 800cdb8:	2205      	movs	r2, #5
 800cdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdbe:	4858      	ldr	r0, [pc, #352]	; (800cf20 <_vfiprintf_r+0x24c>)
 800cdc0:	f7f3 fa16 	bl	80001f0 <memchr>
 800cdc4:	9a04      	ldr	r2, [sp, #16]
 800cdc6:	b9d8      	cbnz	r0, 800ce00 <_vfiprintf_r+0x12c>
 800cdc8:	06d1      	lsls	r1, r2, #27
 800cdca:	bf44      	itt	mi
 800cdcc:	2320      	movmi	r3, #32
 800cdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd2:	0713      	lsls	r3, r2, #28
 800cdd4:	bf44      	itt	mi
 800cdd6:	232b      	movmi	r3, #43	; 0x2b
 800cdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cddc:	f89a 3000 	ldrb.w	r3, [sl]
 800cde0:	2b2a      	cmp	r3, #42	; 0x2a
 800cde2:	d015      	beq.n	800ce10 <_vfiprintf_r+0x13c>
 800cde4:	9a07      	ldr	r2, [sp, #28]
 800cde6:	4654      	mov	r4, sl
 800cde8:	2000      	movs	r0, #0
 800cdea:	f04f 0c0a 	mov.w	ip, #10
 800cdee:	4621      	mov	r1, r4
 800cdf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf4:	3b30      	subs	r3, #48	; 0x30
 800cdf6:	2b09      	cmp	r3, #9
 800cdf8:	d94e      	bls.n	800ce98 <_vfiprintf_r+0x1c4>
 800cdfa:	b1b0      	cbz	r0, 800ce2a <_vfiprintf_r+0x156>
 800cdfc:	9207      	str	r2, [sp, #28]
 800cdfe:	e014      	b.n	800ce2a <_vfiprintf_r+0x156>
 800ce00:	eba0 0308 	sub.w	r3, r0, r8
 800ce04:	fa09 f303 	lsl.w	r3, r9, r3
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	46a2      	mov	sl, r4
 800ce0e:	e7d2      	b.n	800cdb6 <_vfiprintf_r+0xe2>
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	1d19      	adds	r1, r3, #4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	9103      	str	r1, [sp, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfbb      	ittet	lt
 800ce1c:	425b      	neglt	r3, r3
 800ce1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce22:	9307      	strge	r3, [sp, #28]
 800ce24:	9307      	strlt	r3, [sp, #28]
 800ce26:	bfb8      	it	lt
 800ce28:	9204      	strlt	r2, [sp, #16]
 800ce2a:	7823      	ldrb	r3, [r4, #0]
 800ce2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce2e:	d10c      	bne.n	800ce4a <_vfiprintf_r+0x176>
 800ce30:	7863      	ldrb	r3, [r4, #1]
 800ce32:	2b2a      	cmp	r3, #42	; 0x2a
 800ce34:	d135      	bne.n	800cea2 <_vfiprintf_r+0x1ce>
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	1d1a      	adds	r2, r3, #4
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	9203      	str	r2, [sp, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	bfb8      	it	lt
 800ce42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce46:	3402      	adds	r4, #2
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf30 <_vfiprintf_r+0x25c>
 800ce4e:	7821      	ldrb	r1, [r4, #0]
 800ce50:	2203      	movs	r2, #3
 800ce52:	4650      	mov	r0, sl
 800ce54:	f7f3 f9cc 	bl	80001f0 <memchr>
 800ce58:	b140      	cbz	r0, 800ce6c <_vfiprintf_r+0x198>
 800ce5a:	2340      	movs	r3, #64	; 0x40
 800ce5c:	eba0 000a 	sub.w	r0, r0, sl
 800ce60:	fa03 f000 	lsl.w	r0, r3, r0
 800ce64:	9b04      	ldr	r3, [sp, #16]
 800ce66:	4303      	orrs	r3, r0
 800ce68:	3401      	adds	r4, #1
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce70:	482c      	ldr	r0, [pc, #176]	; (800cf24 <_vfiprintf_r+0x250>)
 800ce72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce76:	2206      	movs	r2, #6
 800ce78:	f7f3 f9ba 	bl	80001f0 <memchr>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d03f      	beq.n	800cf00 <_vfiprintf_r+0x22c>
 800ce80:	4b29      	ldr	r3, [pc, #164]	; (800cf28 <_vfiprintf_r+0x254>)
 800ce82:	bb1b      	cbnz	r3, 800cecc <_vfiprintf_r+0x1f8>
 800ce84:	9b03      	ldr	r3, [sp, #12]
 800ce86:	3307      	adds	r3, #7
 800ce88:	f023 0307 	bic.w	r3, r3, #7
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	9303      	str	r3, [sp, #12]
 800ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce92:	443b      	add	r3, r7
 800ce94:	9309      	str	r3, [sp, #36]	; 0x24
 800ce96:	e767      	b.n	800cd68 <_vfiprintf_r+0x94>
 800ce98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	2001      	movs	r0, #1
 800cea0:	e7a5      	b.n	800cdee <_vfiprintf_r+0x11a>
 800cea2:	2300      	movs	r3, #0
 800cea4:	3401      	adds	r4, #1
 800cea6:	9305      	str	r3, [sp, #20]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	f04f 0c0a 	mov.w	ip, #10
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb4:	3a30      	subs	r2, #48	; 0x30
 800ceb6:	2a09      	cmp	r2, #9
 800ceb8:	d903      	bls.n	800cec2 <_vfiprintf_r+0x1ee>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0c5      	beq.n	800ce4a <_vfiprintf_r+0x176>
 800cebe:	9105      	str	r1, [sp, #20]
 800cec0:	e7c3      	b.n	800ce4a <_vfiprintf_r+0x176>
 800cec2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec6:	4604      	mov	r4, r0
 800cec8:	2301      	movs	r3, #1
 800ceca:	e7f0      	b.n	800ceae <_vfiprintf_r+0x1da>
 800cecc:	ab03      	add	r3, sp, #12
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	462a      	mov	r2, r5
 800ced2:	4b16      	ldr	r3, [pc, #88]	; (800cf2c <_vfiprintf_r+0x258>)
 800ced4:	a904      	add	r1, sp, #16
 800ced6:	4630      	mov	r0, r6
 800ced8:	f7fb fe3a 	bl	8008b50 <_printf_float>
 800cedc:	4607      	mov	r7, r0
 800cede:	1c78      	adds	r0, r7, #1
 800cee0:	d1d6      	bne.n	800ce90 <_vfiprintf_r+0x1bc>
 800cee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cee4:	07d9      	lsls	r1, r3, #31
 800cee6:	d405      	bmi.n	800cef4 <_vfiprintf_r+0x220>
 800cee8:	89ab      	ldrh	r3, [r5, #12]
 800ceea:	059a      	lsls	r2, r3, #22
 800ceec:	d402      	bmi.n	800cef4 <_vfiprintf_r+0x220>
 800ceee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef0:	f7fe fff6 	bl	800bee0 <__retarget_lock_release_recursive>
 800cef4:	89ab      	ldrh	r3, [r5, #12]
 800cef6:	065b      	lsls	r3, r3, #25
 800cef8:	f53f af12 	bmi.w	800cd20 <_vfiprintf_r+0x4c>
 800cefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefe:	e711      	b.n	800cd24 <_vfiprintf_r+0x50>
 800cf00:	ab03      	add	r3, sp, #12
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	462a      	mov	r2, r5
 800cf06:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <_vfiprintf_r+0x258>)
 800cf08:	a904      	add	r1, sp, #16
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f7fc f8c4 	bl	8009098 <_printf_i>
 800cf10:	e7e4      	b.n	800cedc <_vfiprintf_r+0x208>
 800cf12:	bf00      	nop
 800cf14:	0800e338 	.word	0x0800e338
 800cf18:	0800e358 	.word	0x0800e358
 800cf1c:	0800e318 	.word	0x0800e318
 800cf20:	0800e554 	.word	0x0800e554
 800cf24:	0800e55e 	.word	0x0800e55e
 800cf28:	08008b51 	.word	0x08008b51
 800cf2c:	0800ccaf 	.word	0x0800ccaf
 800cf30:	0800e55a 	.word	0x0800e55a

0800cf34 <_putc_r>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	460d      	mov	r5, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	b118      	cbz	r0, 800cf46 <_putc_r+0x12>
 800cf3e:	6983      	ldr	r3, [r0, #24]
 800cf40:	b90b      	cbnz	r3, 800cf46 <_putc_r+0x12>
 800cf42:	f7fe fbbb 	bl	800b6bc <__sinit>
 800cf46:	4b1c      	ldr	r3, [pc, #112]	; (800cfb8 <_putc_r+0x84>)
 800cf48:	429c      	cmp	r4, r3
 800cf4a:	d124      	bne.n	800cf96 <_putc_r+0x62>
 800cf4c:	6874      	ldr	r4, [r6, #4]
 800cf4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf50:	07d8      	lsls	r0, r3, #31
 800cf52:	d405      	bmi.n	800cf60 <_putc_r+0x2c>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	0599      	lsls	r1, r3, #22
 800cf58:	d402      	bmi.n	800cf60 <_putc_r+0x2c>
 800cf5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5c:	f7fe ffbf 	bl	800bede <__retarget_lock_acquire_recursive>
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	da05      	bge.n	800cf76 <_putc_r+0x42>
 800cf6a:	69a2      	ldr	r2, [r4, #24]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	db1c      	blt.n	800cfaa <_putc_r+0x76>
 800cf70:	b2eb      	uxtb	r3, r5
 800cf72:	2b0a      	cmp	r3, #10
 800cf74:	d019      	beq.n	800cfaa <_putc_r+0x76>
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	6022      	str	r2, [r4, #0]
 800cf7c:	701d      	strb	r5, [r3, #0]
 800cf7e:	b2ed      	uxtb	r5, r5
 800cf80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf82:	07da      	lsls	r2, r3, #31
 800cf84:	d405      	bmi.n	800cf92 <_putc_r+0x5e>
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	059b      	lsls	r3, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_putc_r+0x5e>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8e:	f7fe ffa7 	bl	800bee0 <__retarget_lock_release_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	bd70      	pop	{r4, r5, r6, pc}
 800cf96:	4b09      	ldr	r3, [pc, #36]	; (800cfbc <_putc_r+0x88>)
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	d101      	bne.n	800cfa0 <_putc_r+0x6c>
 800cf9c:	68b4      	ldr	r4, [r6, #8]
 800cf9e:	e7d6      	b.n	800cf4e <_putc_r+0x1a>
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <_putc_r+0x8c>)
 800cfa2:	429c      	cmp	r4, r3
 800cfa4:	bf08      	it	eq
 800cfa6:	68f4      	ldreq	r4, [r6, #12]
 800cfa8:	e7d1      	b.n	800cf4e <_putc_r+0x1a>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4622      	mov	r2, r4
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f7fd fb30 	bl	800a614 <__swbuf_r>
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	e7e3      	b.n	800cf80 <_putc_r+0x4c>
 800cfb8:	0800e338 	.word	0x0800e338
 800cfbc:	0800e358 	.word	0x0800e358
 800cfc0:	0800e318 	.word	0x0800e318
 800cfc4:	00000000 	.word	0x00000000

0800cfc8 <nan>:
 800cfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfd0 <nan+0x8>
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	7ff80000 	.word	0x7ff80000

0800cfd8 <__sread>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	460c      	mov	r4, r1
 800cfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe0:	f000 f904 	bl	800d1ec <_read_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	bfab      	itete	ge
 800cfe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfea:	89a3      	ldrhlt	r3, [r4, #12]
 800cfec:	181b      	addge	r3, r3, r0
 800cfee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cff2:	bfac      	ite	ge
 800cff4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cff6:	81a3      	strhlt	r3, [r4, #12]
 800cff8:	bd10      	pop	{r4, pc}

0800cffa <__swrite>:
 800cffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffe:	461f      	mov	r7, r3
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	05db      	lsls	r3, r3, #23
 800d004:	4605      	mov	r5, r0
 800d006:	460c      	mov	r4, r1
 800d008:	4616      	mov	r6, r2
 800d00a:	d505      	bpl.n	800d018 <__swrite+0x1e>
 800d00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d010:	2302      	movs	r3, #2
 800d012:	2200      	movs	r2, #0
 800d014:	f000 f8b6 	bl	800d184 <_lseek_r>
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	4632      	mov	r2, r6
 800d026:	463b      	mov	r3, r7
 800d028:	4628      	mov	r0, r5
 800d02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02e:	f000 b835 	b.w	800d09c <_write_r>

0800d032 <__sseek>:
 800d032:	b510      	push	{r4, lr}
 800d034:	460c      	mov	r4, r1
 800d036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03a:	f000 f8a3 	bl	800d184 <_lseek_r>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	bf15      	itete	ne
 800d044:	6560      	strne	r0, [r4, #84]	; 0x54
 800d046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d04a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d04e:	81a3      	strheq	r3, [r4, #12]
 800d050:	bf18      	it	ne
 800d052:	81a3      	strhne	r3, [r4, #12]
 800d054:	bd10      	pop	{r4, pc}

0800d056 <__sclose>:
 800d056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d05a:	f000 b84f 	b.w	800d0fc <_close_r>

0800d05e <strncmp>:
 800d05e:	b510      	push	{r4, lr}
 800d060:	b16a      	cbz	r2, 800d07e <strncmp+0x20>
 800d062:	3901      	subs	r1, #1
 800d064:	1884      	adds	r4, r0, r2
 800d066:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d06a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d06e:	4293      	cmp	r3, r2
 800d070:	d103      	bne.n	800d07a <strncmp+0x1c>
 800d072:	42a0      	cmp	r0, r4
 800d074:	d001      	beq.n	800d07a <strncmp+0x1c>
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1f5      	bne.n	800d066 <strncmp+0x8>
 800d07a:	1a98      	subs	r0, r3, r2
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	4610      	mov	r0, r2
 800d080:	e7fc      	b.n	800d07c <strncmp+0x1e>

0800d082 <__ascii_wctomb>:
 800d082:	b149      	cbz	r1, 800d098 <__ascii_wctomb+0x16>
 800d084:	2aff      	cmp	r2, #255	; 0xff
 800d086:	bf85      	ittet	hi
 800d088:	238a      	movhi	r3, #138	; 0x8a
 800d08a:	6003      	strhi	r3, [r0, #0]
 800d08c:	700a      	strbls	r2, [r1, #0]
 800d08e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d092:	bf98      	it	ls
 800d094:	2001      	movls	r0, #1
 800d096:	4770      	bx	lr
 800d098:	4608      	mov	r0, r1
 800d09a:	4770      	bx	lr

0800d09c <_write_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d07      	ldr	r5, [pc, #28]	; (800d0bc <_write_r+0x20>)
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	602a      	str	r2, [r5, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f7f6 fb7f 	bl	80037ae <_write>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_write_r+0x1e>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_write_r+0x1e>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	20000438 	.word	0x20000438

0800d0c0 <__assert_func>:
 800d0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0c2:	4614      	mov	r4, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <__assert_func+0x2c>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	68d8      	ldr	r0, [r3, #12]
 800d0ce:	b14c      	cbz	r4, 800d0e4 <__assert_func+0x24>
 800d0d0:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <__assert_func+0x30>)
 800d0d2:	9100      	str	r1, [sp, #0]
 800d0d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0d8:	4906      	ldr	r1, [pc, #24]	; (800d0f4 <__assert_func+0x34>)
 800d0da:	462b      	mov	r3, r5
 800d0dc:	f000 f81e 	bl	800d11c <fiprintf>
 800d0e0:	f000 f896 	bl	800d210 <abort>
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <__assert_func+0x38>)
 800d0e6:	461c      	mov	r4, r3
 800d0e8:	e7f3      	b.n	800d0d2 <__assert_func+0x12>
 800d0ea:	bf00      	nop
 800d0ec:	20000010 	.word	0x20000010
 800d0f0:	0800e565 	.word	0x0800e565
 800d0f4:	0800e572 	.word	0x0800e572
 800d0f8:	0800e5a0 	.word	0x0800e5a0

0800d0fc <_close_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d06      	ldr	r5, [pc, #24]	; (800d118 <_close_r+0x1c>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f6 fb6d 	bl	80037e6 <_close>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_close_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_close_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20000438 	.word	0x20000438

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f7ff fdd1 	bl	800ccd4 <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	20000010 	.word	0x20000010

0800d140 <_fstat_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d07      	ldr	r5, [pc, #28]	; (800d160 <_fstat_r+0x20>)
 800d144:	2300      	movs	r3, #0
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	4611      	mov	r1, r2
 800d14c:	602b      	str	r3, [r5, #0]
 800d14e:	f7f6 fb56 	bl	80037fe <_fstat>
 800d152:	1c43      	adds	r3, r0, #1
 800d154:	d102      	bne.n	800d15c <_fstat_r+0x1c>
 800d156:	682b      	ldr	r3, [r5, #0]
 800d158:	b103      	cbz	r3, 800d15c <_fstat_r+0x1c>
 800d15a:	6023      	str	r3, [r4, #0]
 800d15c:	bd38      	pop	{r3, r4, r5, pc}
 800d15e:	bf00      	nop
 800d160:	20000438 	.word	0x20000438

0800d164 <_isatty_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d06      	ldr	r5, [pc, #24]	; (800d180 <_isatty_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f6 fb55 	bl	800381e <_isatty>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_isatty_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_isatty_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	20000438 	.word	0x20000438

0800d184 <_lseek_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d07      	ldr	r5, [pc, #28]	; (800d1a4 <_lseek_r+0x20>)
 800d188:	4604      	mov	r4, r0
 800d18a:	4608      	mov	r0, r1
 800d18c:	4611      	mov	r1, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	602a      	str	r2, [r5, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f7f6 fb4e 	bl	8003834 <_lseek>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_lseek_r+0x1e>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_lseek_r+0x1e>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	20000438 	.word	0x20000438

0800d1a8 <memmove>:
 800d1a8:	4288      	cmp	r0, r1
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	eb01 0402 	add.w	r4, r1, r2
 800d1b0:	d902      	bls.n	800d1b8 <memmove+0x10>
 800d1b2:	4284      	cmp	r4, r0
 800d1b4:	4623      	mov	r3, r4
 800d1b6:	d807      	bhi.n	800d1c8 <memmove+0x20>
 800d1b8:	1e43      	subs	r3, r0, #1
 800d1ba:	42a1      	cmp	r1, r4
 800d1bc:	d008      	beq.n	800d1d0 <memmove+0x28>
 800d1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1c6:	e7f8      	b.n	800d1ba <memmove+0x12>
 800d1c8:	4402      	add	r2, r0
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	428a      	cmp	r2, r1
 800d1ce:	d100      	bne.n	800d1d2 <memmove+0x2a>
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1da:	e7f7      	b.n	800d1cc <memmove+0x24>

0800d1dc <_malloc_usable_size_r>:
 800d1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1e0:	1f18      	subs	r0, r3, #4
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	bfbc      	itt	lt
 800d1e6:	580b      	ldrlt	r3, [r1, r0]
 800d1e8:	18c0      	addlt	r0, r0, r3
 800d1ea:	4770      	bx	lr

0800d1ec <_read_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	; (800d20c <_read_r+0x20>)
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f6 faba 	bl	8003774 <_read>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_read_r+0x1e>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_read_r+0x1e>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	20000438 	.word	0x20000438

0800d210 <abort>:
 800d210:	b508      	push	{r3, lr}
 800d212:	2006      	movs	r0, #6
 800d214:	f000 f82c 	bl	800d270 <raise>
 800d218:	2001      	movs	r0, #1
 800d21a:	f7f6 faa1 	bl	8003760 <_exit>

0800d21e <_raise_r>:
 800d21e:	291f      	cmp	r1, #31
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4604      	mov	r4, r0
 800d224:	460d      	mov	r5, r1
 800d226:	d904      	bls.n	800d232 <_raise_r+0x14>
 800d228:	2316      	movs	r3, #22
 800d22a:	6003      	str	r3, [r0, #0]
 800d22c:	f04f 30ff 	mov.w	r0, #4294967295
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d234:	b112      	cbz	r2, 800d23c <_raise_r+0x1e>
 800d236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d23a:	b94b      	cbnz	r3, 800d250 <_raise_r+0x32>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 f831 	bl	800d2a4 <_getpid_r>
 800d242:	462a      	mov	r2, r5
 800d244:	4601      	mov	r1, r0
 800d246:	4620      	mov	r0, r4
 800d248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d24c:	f000 b818 	b.w	800d280 <_kill_r>
 800d250:	2b01      	cmp	r3, #1
 800d252:	d00a      	beq.n	800d26a <_raise_r+0x4c>
 800d254:	1c59      	adds	r1, r3, #1
 800d256:	d103      	bne.n	800d260 <_raise_r+0x42>
 800d258:	2316      	movs	r3, #22
 800d25a:	6003      	str	r3, [r0, #0]
 800d25c:	2001      	movs	r0, #1
 800d25e:	e7e7      	b.n	800d230 <_raise_r+0x12>
 800d260:	2400      	movs	r4, #0
 800d262:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d266:	4628      	mov	r0, r5
 800d268:	4798      	blx	r3
 800d26a:	2000      	movs	r0, #0
 800d26c:	e7e0      	b.n	800d230 <_raise_r+0x12>
	...

0800d270 <raise>:
 800d270:	4b02      	ldr	r3, [pc, #8]	; (800d27c <raise+0xc>)
 800d272:	4601      	mov	r1, r0
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f7ff bfd2 	b.w	800d21e <_raise_r>
 800d27a:	bf00      	nop
 800d27c:	20000010 	.word	0x20000010

0800d280 <_kill_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4d07      	ldr	r5, [pc, #28]	; (800d2a0 <_kill_r+0x20>)
 800d284:	2300      	movs	r3, #0
 800d286:	4604      	mov	r4, r0
 800d288:	4608      	mov	r0, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	602b      	str	r3, [r5, #0]
 800d28e:	f7f6 fa57 	bl	8003740 <_kill>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	d102      	bne.n	800d29c <_kill_r+0x1c>
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	b103      	cbz	r3, 800d29c <_kill_r+0x1c>
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	bd38      	pop	{r3, r4, r5, pc}
 800d29e:	bf00      	nop
 800d2a0:	20000438 	.word	0x20000438

0800d2a4 <_getpid_r>:
 800d2a4:	f7f6 ba44 	b.w	8003730 <_getpid>

0800d2a8 <_init>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	bf00      	nop
 800d2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ae:	bc08      	pop	{r3}
 800d2b0:	469e      	mov	lr, r3
 800d2b2:	4770      	bx	lr

0800d2b4 <_fini>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	bf00      	nop
 800d2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ba:	bc08      	pop	{r3}
 800d2bc:	469e      	mov	lr, r3
 800d2be:	4770      	bx	lr


DFMmpu6050DMPRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005748  08005748  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005750  08005750  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a94  20000010  08005768  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aa4  08005768  00024aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001914e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330a  00000000  00000000  0003918e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fc  00000000  00000000  0003e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c4f  00000000  00000000  00056144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d0a  00000000  00000000  0006bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fda9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d4  00000000  00000000  000fdaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056d0 	.word	0x080056d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080056d0 	.word	0x080056d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <MX_FREERTOS_Init+0x18>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_FREERTOS_Init+0x1c>)
 80004e2:	f002 fbb1 	bl	8002c48 <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <MX_FREERTOS_Init+0x20>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	0800570c 	.word	0x0800570c
 80004f4:	080004fd 	.word	0x080004fd
 80004f8:	2000493c 	.word	0x2000493c

080004fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f002 fc31 	bl	8002d6c <osDelay>
 800050a:	e7fb      	b.n	8000504 <StartDefaultTask+0x8>

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <MX_GPIO_Init+0xd0>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a25      	ldr	r2, [pc, #148]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_GPIO_Init+0xd0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_GPIO_Init+0xd0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_GPIO_Init+0xd0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <MX_GPIO_Init+0xd4>)
 8000598:	f000 fe9e 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_GPIO_Init+0xd8>)
 80005b4:	f000 fd0c 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b8:	2320      	movs	r3, #32
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_GPIO_Init+0xd4>)
 80005d0:	f000 fcfe 	bl	8000fd0 <HAL_GPIO_Init>

}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	; 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020800 	.word	0x40020800

080005e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x50>)
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <MX_I2C1_Init+0x54>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_I2C1_Init+0x50>)
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_I2C1_Init+0x58>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_I2C1_Init+0x50>)
 8000606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_I2C1_Init+0x50>)
 8000626:	f000 fe71 	bl	800130c <HAL_I2C_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f8d2 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20004940 	.word	0x20004940
 800063c:	40005400 	.word	0x40005400
 8000640:	00061a80 	.word	0x00061a80

08000644 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <HAL_I2C_MspInit+0x84>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d12b      	bne.n	80006be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <HAL_I2C_MspInit+0x88>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <HAL_I2C_MspInit+0x88>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_I2C_MspInit+0x88>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000682:	23c0      	movs	r3, #192	; 0xc0
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000686:	2312      	movs	r3, #18
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000692:	2304      	movs	r3, #4
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <HAL_I2C_MspInit+0x8c>)
 800069e:	f000 fc97 	bl	8000fd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_I2C_MspInit+0x88>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_I2C_MspInit+0x88>)
 80006ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_I2C_MspInit+0x88>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40005400 	.word	0x40005400
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020400 	.word	0x40020400

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fa64 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f812 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f7ff ff14 	bl	800050c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f91e 	bl	8000924 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006e8:	f7ff ff7e 	bl	80005e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006ec:	f000 f8f0 	bl	80008d0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006f0:	f000 f942 	bl	8000978 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006f4:	f002 fa5e 	bl	8002bb4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006f8:	f7ff feee 	bl	80004d8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006fc:	f002 fa7e 	bl	8002bfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x2c>
	...

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 ffd4 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000774:	2310      	movs	r3, #16
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077e:	2304      	movs	r3, #4
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4618      	mov	r0, r3
 800078c:	f000 ff02 	bl	8001594 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 f81f 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f964 	bl	8001a84 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f809 	bl	80007d8 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_MspInit+0x54>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x54>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fb08 	bl	8000e3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f9ec 	bl	8000c48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000870:	f003 fe8a 	bl	8004588 <xTaskGetSchedulerState>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d001      	beq.n	800087e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800087a:	f004 fc75 	bl	8005168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <USART1_IRQHandler+0x10>)
 800088a:	f001 fb45 	bl	8001f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20004994 	.word	0x20004994

08000898 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USART6_IRQHandler+0x10>)
 800089e:	f001 fb3b 	bl	8001f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200049d8 	.word	0x200049d8

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART1_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART1_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART1_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART1_UART_Init+0x4c>)
 8000908:	f001 fab8 	bl	8001e7c <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f7ff ff61 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20004994 	.word	0x20004994
 8000920:	40011000 	.word	0x40011000

08000924 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f001 fa8e 	bl	8001e7c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f7ff ff37 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20004a1c 	.word	0x20004a1c
 8000974:	40004400 	.word	0x40004400

08000978 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART6_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART6_UART_Init+0x4c>)
 80009b0:	f001 fa64 	bl	8001e7c <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f7ff ff0d 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200049d8 	.word	0x200049d8
 80009c8:	40011400 	.word	0x40011400

080009cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a53      	ldr	r2, [pc, #332]	; (8000b38 <HAL_UART_MspInit+0x16c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d135      	bne.n	8000a5a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <HAL_UART_MspInit+0x170>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_UART_MspInit+0x170>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <HAL_UART_MspInit+0x174>)
 8000a44:	f000 fac4 	bl	8000fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2105      	movs	r1, #5
 8000a4c:	2025      	movs	r0, #37	; 0x25
 8000a4e:	f000 f9f6 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a52:	2025      	movs	r0, #37	; 0x25
 8000a54:	f000 fa0f 	bl	8000e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000a58:	e06a      	b.n	8000b30 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a39      	ldr	r2, [pc, #228]	; (8000b44 <HAL_UART_MspInit+0x178>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d12c      	bne.n	8000abe <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4822      	ldr	r0, [pc, #136]	; (8000b40 <HAL_UART_MspInit+0x174>)
 8000ab8:	f000 fa8a 	bl	8000fd0 <HAL_GPIO_Init>
}
 8000abc:	e038      	b.n	8000b30 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <HAL_UART_MspInit+0x17c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d133      	bne.n	8000b30 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x170>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b00:	23c0      	movs	r3, #192	; 0xc0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b10:	2308      	movs	r3, #8
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_UART_MspInit+0x180>)
 8000b1c:	f000 fa58 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2105      	movs	r1, #5
 8000b24:	2047      	movs	r0, #71	; 0x47
 8000b26:	f000 f98a 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b2a:	2047      	movs	r0, #71	; 0x47
 8000b2c:	f000 f9a3 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40011400 	.word	0x40011400
 8000b4c:	40020800 	.word	0x40020800

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff fe97 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 fd6d 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fda7 	bl	80006d4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b94:	08005758 	.word	0x08005758
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20004aa4 	.word	0x20004aa4

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f92b 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe04 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f943 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f90b 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20004a60 	.word	0x20004a60

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20004a60 	.word	0x20004a60

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff feda 	bl	8000c70 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d008      	beq.n	8000edc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e052      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0216 	bic.w	r2, r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000efa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <HAL_DMA_Abort+0x62>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0208 	bic.w	r2, r2, #8
 8000f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2c:	e013      	b.n	8000f56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2e:	f7ff fe9f 	bl	8000c70 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d90c      	bls.n	8000f56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e015      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e4      	bne.n	8000f2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	223f      	movs	r2, #63	; 0x3f
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d004      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00c      	b.n	8000fc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2205      	movs	r2, #5
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e159      	b.n	80012a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8148 	bne.w	800129a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80a2 	beq.w	800129a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a56      	ldr	r2, [pc, #344]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_GPIO_Init+0x2ec>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0x202>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_GPIO_Init+0x2f4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x1fe>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a47      	ldr	r2, [pc, #284]	; (80012c8 <HAL_GPIO_Init+0x2f8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x1fa>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a46      	ldr	r2, [pc, #280]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x1f6>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_GPIO_Init+0x300>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x1f2>
 80011be:	2304      	movs	r3, #4
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x2ec>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_GPIO_Init+0x304>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f aea2 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e12b      	b.n	8001576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d106      	bne.n	8001338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f986 	bl	8000644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2224      	movs	r2, #36	; 0x24
 800133c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800135e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800136e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001370:	f000 fd5c 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8001374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4a81      	ldr	r2, [pc, #516]	; (8001580 <HAL_I2C_Init+0x274>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d807      	bhi.n	8001390 <HAL_I2C_Init+0x84>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4a80      	ldr	r2, [pc, #512]	; (8001584 <HAL_I2C_Init+0x278>)
 8001384:	4293      	cmp	r3, r2
 8001386:	bf94      	ite	ls
 8001388:	2301      	movls	r3, #1
 800138a:	2300      	movhi	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	e006      	b.n	800139e <HAL_I2C_Init+0x92>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a7d      	ldr	r2, [pc, #500]	; (8001588 <HAL_I2C_Init+0x27c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	bf94      	ite	ls
 8001398:	2301      	movls	r3, #1
 800139a:	2300      	movhi	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0e7      	b.n	8001576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a78      	ldr	r2, [pc, #480]	; (800158c <HAL_I2C_Init+0x280>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a6a      	ldr	r2, [pc, #424]	; (8001580 <HAL_I2C_Init+0x274>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d802      	bhi.n	80013e0 <HAL_I2C_Init+0xd4>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	e009      	b.n	80013f4 <HAL_I2C_Init+0xe8>
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	4a69      	ldr	r2, [pc, #420]	; (8001590 <HAL_I2C_Init+0x284>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	099b      	lsrs	r3, r3, #6
 80013f2:	3301      	adds	r3, #1
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	495c      	ldr	r1, [pc, #368]	; (8001580 <HAL_I2C_Init+0x274>)
 8001410:	428b      	cmp	r3, r1
 8001412:	d819      	bhi.n	8001448 <HAL_I2C_Init+0x13c>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e59      	subs	r1, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001422:	1c59      	adds	r1, r3, #1
 8001424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001428:	400b      	ands	r3, r1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00a      	beq.n	8001444 <HAL_I2C_Init+0x138>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e59      	subs	r1, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fbb1 f3f3 	udiv	r3, r1, r3
 800143c:	3301      	adds	r3, #1
 800143e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001442:	e051      	b.n	80014e8 <HAL_I2C_Init+0x1dc>
 8001444:	2304      	movs	r3, #4
 8001446:	e04f      	b.n	80014e8 <HAL_I2C_Init+0x1dc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d111      	bne.n	8001474 <HAL_I2C_Init+0x168>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	440b      	add	r3, r1
 800145e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001462:	3301      	adds	r3, #1
 8001464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	e012      	b.n	800149a <HAL_I2C_Init+0x18e>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e58      	subs	r0, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	0099      	lsls	r1, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	fbb0 f3f3 	udiv	r3, r0, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_Init+0x196>
 800149e:	2301      	movs	r3, #1
 80014a0:	e022      	b.n	80014e8 <HAL_I2C_Init+0x1dc>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10e      	bne.n	80014c8 <HAL_I2C_Init+0x1bc>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1e58      	subs	r0, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6859      	ldr	r1, [r3, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	440b      	add	r3, r1
 80014b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c6:	e00f      	b.n	80014e8 <HAL_I2C_Init+0x1dc>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	0099      	lsls	r1, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	6809      	ldr	r1, [r1, #0]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69da      	ldr	r2, [r3, #28]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6911      	ldr	r1, [r2, #16]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68d2      	ldr	r2, [r2, #12]
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	000186a0 	.word	0x000186a0
 8001584:	001e847f 	.word	0x001e847f
 8001588:	003d08ff 	.word	0x003d08ff
 800158c:	431bde83 	.word	0x431bde83
 8001590:	10624dd3 	.word	0x10624dd3

08001594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e264      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	4ba3      	ldr	r3, [pc, #652]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d00c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d112      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ca:	4b9d      	ldr	r3, [pc, #628]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d6:	d10b      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	4b99      	ldr	r3, [pc, #612]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05b      	beq.n	800169c <HAL_RCC_OscConfig+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d157      	bne.n	800169c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e23f      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x74>
 80015fa:	4b91      	ldr	r3, [pc, #580]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a90      	ldr	r2, [pc, #576]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a87      	ldr	r2, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xb0>
 800162c:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a83      	ldr	r2, [pc, #524]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a80      	ldr	r2, [pc, #512]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb10 	bl	8000c70 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb0c 	bl	8000c70 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e204      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xc0>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fafc 	bl	8000c70 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff faf8 	bl	8000c70 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1f0      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0xe8>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1c4      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4952      	ldr	r1, [pc, #328]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_RCC_OscConfig+0x2b0>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fab1 	bl	8000c70 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff faad 	bl	8000c70 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1a5      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4940      	ldr	r1, [pc, #256]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x2b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fa90 	bl	8000c70 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fa8c 	bl	8000c70 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e184      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d030      	beq.n	80017e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x2b4>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa70 	bl	8000c70 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fa6c 	bl	8000c70 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e164      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x200>
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x2b4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa59 	bl	8000c70 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fa55 	bl	8000c70 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e14d      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a0 	beq.w	800192e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d121      	bne.n	800186e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_RCC_OscConfig+0x2b8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa1b 	bl	8000c70 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e011      	b.n	8001862 <HAL_RCC_OscConfig+0x2ce>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
 800184c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff fa0e 	bl	8000c70 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e106      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_OscConfig+0x4e4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x2f0>
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a80      	ldr	r2, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	e01c      	b.n	80018be <HAL_RCC_OscConfig+0x32a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x312>
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a77      	ldr	r2, [pc, #476]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x32a>
 80018a6:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a74      	ldr	r2, [pc, #464]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff f9d3 	bl	8000c70 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018cc:	e00a      	b.n	80018e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f7ff f9cf 	bl	8000c70 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0c5      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ee      	beq.n	80018ce <HAL_RCC_OscConfig+0x33a>
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f9bd 	bl	8000c70 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f9b9 	bl	8000c70 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0af      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a55      	ldr	r2, [pc, #340]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 809b 	beq.w	8001a6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d05c      	beq.n	80019fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d141      	bne.n	80019d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f98d 	bl	8000c70 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff f989 	bl	8000c70 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e081      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	019b      	lsls	r3, r3, #6
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	061b      	lsls	r3, r3, #24
 800199c:	4937      	ldr	r1, [pc, #220]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f962 	bl	8000c70 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f95e 	bl	8000c70 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e056      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x41c>
 80019ce:	e04e      	b.n	8001a6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_RCC_OscConfig+0x4ec>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff f94b 	bl	8000c70 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff f947 	bl	8000c70 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e03f      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x44a>
 80019fc:	e037      	b.n	8001a6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e032      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_OscConfig+0x4e8>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d028      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d121      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d11a      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d111      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	3b01      	subs	r3, #1
 8001a54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470060 	.word	0x42470060

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0cc      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d044      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e067      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4934      	ldr	r1, [pc, #208]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b74:	f7ff f87c 	bl	8000c70 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f878 	bl	8000c70 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e04f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d20c      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe ffdc 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08005730 	.word	0x08005730
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	2300      	movs	r3, #0
 8001c62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c68:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d00d      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	f200 80bd 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c82:	e0b7      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c86:	60bb      	str	r3, [r7, #8]
       break;
 8001c88:	e0b7      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c8c:	60bb      	str	r3, [r7, #8]
      break;
 8001c8e:	e0b4      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04d      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	461a      	mov	r2, r3
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	ea02 0800 	and.w	r8, r2, r0
 8001cbe:	ea03 0901 	and.w	r9, r3, r1
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cd4:	0142      	lsls	r2, r0, #5
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	ebb0 0008 	subs.w	r0, r0, r8
 8001cde:	eb61 0109 	sbc.w	r1, r1, r9
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	018b      	lsls	r3, r1, #6
 8001cec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cf0:	0182      	lsls	r2, r0, #6
 8001cf2:	1a12      	subs	r2, r2, r0
 8001cf4:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	00d9      	lsls	r1, r3, #3
 8001d02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d06:	00d0      	lsls	r0, r2, #3
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	eb12 0208 	adds.w	r2, r2, r8
 8001d10:	eb43 0309 	adc.w	r3, r3, r9
 8001d14:	f04f 0000 	mov.w	r0, #0
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	0259      	lsls	r1, r3, #9
 8001d1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d22:	0250      	lsls	r0, r2, #9
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	f7fe fa54 	bl	80001e0 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e04a      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	ea02 0400 	and.w	r4, r2, r0
 8001d5a:	ea03 0501 	and.w	r5, r3, r1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	014b      	lsls	r3, r1, #5
 8001d6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d70:	0142      	lsls	r2, r0, #5
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	1b00      	subs	r0, r0, r4
 8001d78:	eb61 0105 	sbc.w	r1, r1, r5
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	018b      	lsls	r3, r1, #6
 8001d86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d8a:	0182      	lsls	r2, r0, #6
 8001d8c:	1a12      	subs	r2, r2, r0
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	00d9      	lsls	r1, r3, #3
 8001d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da0:	00d0      	lsls	r0, r2, #3
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	1912      	adds	r2, r2, r4
 8001da8:	eb45 0303 	adc.w	r3, r5, r3
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	0299      	lsls	r1, r3, #10
 8001db6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dba:	0290      	lsls	r0, r2, #10
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f7fe fa08 	bl	80001e0 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	60bb      	str	r3, [r7, #8]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001df6:	60bb      	str	r3, [r7, #8]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08005740 	.word	0x08005740

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08005740 	.word	0x08005740

08001e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e03f      	b.n	8001f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fd92 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fc7b 	bl	80027bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0ba      	sub	sp, #232	; 0xe8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_UART_IRQHandler+0x66>
 8001f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fb65 	bl	8002646 <UART_Receive_IT>
      return;
 8001f7c:	e256      	b.n	800242c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80de 	beq.w	8002144 <HAL_UART_IRQHandler+0x22c>
 8001f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80d1 	beq.w	8002144 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xae>
 8001fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_UART_IRQHandler+0xd2>
 8001fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_UART_IRQHandler+0xf6>
 8001ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800200e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d011      	beq.n	800203e <HAL_UART_IRQHandler+0x126>
 800201a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f043 0208 	orr.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 81ed 	beq.w	8002422 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_UART_IRQHandler+0x14e>
 8002054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 faf0 	bl	8002646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_UART_IRQHandler+0x17a>
 800208a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d04f      	beq.n	8002132 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9f8 	bl	8002488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d141      	bne.n	800212a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3314      	adds	r3, #20
 80020ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b4:	e853 3f00 	ldrex	r3, [r3]
 80020b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3314      	adds	r3, #20
 80020ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1d9      	bne.n	80020a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d013      	beq.n	8002122 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	4a7d      	ldr	r2, [pc, #500]	; (80022f4 <HAL_UART_IRQHandler+0x3dc>)
 8002100:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff3f 	bl	8000f8a <HAL_DMA_Abort_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800211c:	4610      	mov	r0, r2
 800211e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	e00e      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f99a 	bl	800245c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	e00a      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f996 	bl	800245c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e006      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f992 	bl	800245c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800213e:	e170      	b.n	8002422 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	bf00      	nop
    return;
 8002142:	e16e      	b.n	8002422 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	2b01      	cmp	r3, #1
 800214a:	f040 814a 	bne.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800214e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8143 	beq.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800215c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 813c 	beq.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	f040 80b4 	bne.w	80022f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800219c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8140 	beq.w	8002426 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ae:	429a      	cmp	r2, r3
 80021b0:	f080 8139 	bcs.w	8002426 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c6:	f000 8088 	beq.w	80022da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d8:	e853 3f00 	ldrex	r3, [r3]
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002202:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1d9      	bne.n	80021ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3314      	adds	r3, #20
 800221c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3314      	adds	r3, #20
 8002236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800223a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800223e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002242:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002246:	e841 2300 	strex	r3, r2, [r1]
 800224a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800224c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e1      	bne.n	8002216 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3314      	adds	r3, #20
 8002258:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800225c:	e853 3f00 	ldrex	r3, [r3]
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002276:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002278:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800227c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800227e:	e841 2300 	strex	r3, r2, [r1]
 8002282:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e3      	bne.n	8002252 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a2:	e853 3f00 	ldrex	r3, [r3]
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	f023 0310 	bic.w	r3, r3, #16
 80022ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80022be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c4:	e841 2300 	strex	r3, r2, [r1]
 80022c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e3      	bne.n	8002298 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fde8 	bl	8000eaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8c0 	bl	8002470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022f0:	e099      	b.n	8002426 <HAL_UART_IRQHandler+0x50e>
 80022f2:	bf00      	nop
 80022f4:	0800254f 	.word	0x0800254f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002300:	b29b      	uxth	r3, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 808b 	beq.w	800242a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8086 	beq.w	800242a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002342:	647a      	str	r2, [r7, #68]	; 0x44
 8002344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e3      	bne.n	800231e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3314      	adds	r3, #20
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	623b      	str	r3, [r7, #32]
   return(result);
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800237a:	633a      	str	r2, [r7, #48]	; 0x30
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e3      	bne.n	8002356 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	e853 3f00 	ldrex	r3, [r3]
 80023aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0310 	bic.w	r3, r3, #16
 80023b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023c0:	61fa      	str	r2, [r7, #28]
 80023c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	69b9      	ldr	r1, [r7, #24]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	617b      	str	r3, [r7, #20]
   return(result);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e3      	bne.n	800239c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f848 	bl	8002470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e0:	e023      	b.n	800242a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_UART_IRQHandler+0x4ea>
 80023ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8bb 	bl	8002576 <UART_Transmit_IT>
    return;
 8002400:	e014      	b.n	800242c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <HAL_UART_IRQHandler+0x514>
 800240e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8fb 	bl	8002616 <UART_EndTransmit_IT>
    return;
 8002420:	e004      	b.n	800242c <HAL_UART_IRQHandler+0x514>
    return;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <HAL_UART_IRQHandler+0x514>
      return;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HAL_UART_IRQHandler+0x514>
      return;
 800242a:	bf00      	nop
  }
}
 800242c:	37e8      	adds	r7, #232	; 0xe8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop

08002434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002488:	b480      	push	{r7}
 800248a:	b095      	sub	sp, #84	; 0x54
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024b0:	643a      	str	r2, [r7, #64]	; 0x40
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024b8:	e841 2300 	strex	r3, r2, [r1]
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e5      	bne.n	8002490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d119      	bne.n	8002534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f023 0310 	bic.w	r3, r3, #16
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002520:	61ba      	str	r2, [r7, #24]
 8002522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	6979      	ldr	r1, [r7, #20]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	e841 2300 	strex	r3, r2, [r1]
 800252c:	613b      	str	r3, [r7, #16]
   return(result);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e5      	bne.n	8002500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002542:	bf00      	nop
 8002544:	3754      	adds	r7, #84	; 0x54
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff ff77 	bl	800245c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b21      	cmp	r3, #33	; 0x21
 8002588:	d13e      	bne.n	8002608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	d114      	bne.n	80025be <UART_Transmit_IT+0x48>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d110      	bne.n	80025be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	621a      	str	r2, [r3, #32]
 80025bc:	e008      	b.n	80025d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6211      	str	r1, [r2, #32]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29b      	uxth	r3, r3
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4619      	mov	r1, r3
 80025de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fefc 	bl	8002434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08c      	sub	sp, #48	; 0x30
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b22      	cmp	r3, #34	; 0x22
 8002658:	f040 80ab 	bne.w	80027b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d117      	bne.n	8002696 <UART_Receive_IT+0x50>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d113      	bne.n	8002696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	b29a      	uxth	r2, r3
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	1c9a      	adds	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
 8002694:	e026      	b.n	80026e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a8:	d007      	beq.n	80026ba <UART_Receive_IT+0x74>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <UART_Receive_IT+0x82>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e008      	b.n	80026da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4619      	mov	r1, r3
 80026f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d15a      	bne.n	80027ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0220 	bic.w	r2, r2, #32
 8002706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	2b01      	cmp	r3, #1
 8002736:	d135      	bne.n	80027a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	613b      	str	r3, [r7, #16]
   return(result);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f023 0310 	bic.w	r3, r3, #16
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	623a      	str	r2, [r7, #32]
 8002760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	69f9      	ldr	r1, [r7, #28]
 8002764:	6a3a      	ldr	r2, [r7, #32]
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	61bb      	str	r3, [r7, #24]
   return(result);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e5      	bne.n	800273e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b10      	cmp	r3, #16
 800277e:	d10a      	bne.n	8002796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fe67 	bl	8002470 <HAL_UARTEx_RxEventCallback>
 80027a2:	e002      	b.n	80027aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fe4f 	bl	8002448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e002      	b.n	80027b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c0:	b09f      	sub	sp, #124	; 0x7c
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	ea40 0301 	orr.w	r3, r0, r1
 80027dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002800:	f021 010c 	bic.w	r1, r1, #12
 8002804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	430b      	orrs	r3, r1
 800280c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	6999      	ldr	r1, [r3, #24]
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	ea40 0301 	orr.w	r3, r0, r1
 8002824:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4bc5      	ldr	r3, [pc, #788]	; (8002b40 <UART_SetConfig+0x384>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d004      	beq.n	800283a <UART_SetConfig+0x7e>
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4bc3      	ldr	r3, [pc, #780]	; (8002b44 <UART_SetConfig+0x388>)
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283a:	f7ff fb0b 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800283e:	6778      	str	r0, [r7, #116]	; 0x74
 8002840:	e002      	b.n	8002848 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002842:	f7ff faf3 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002846:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002850:	f040 80b6 	bne.w	80029c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	461c      	mov	r4, r3
 8002858:	f04f 0500 	mov.w	r5, #0
 800285c:	4622      	mov	r2, r4
 800285e:	462b      	mov	r3, r5
 8002860:	1891      	adds	r1, r2, r2
 8002862:	6439      	str	r1, [r7, #64]	; 0x40
 8002864:	415b      	adcs	r3, r3
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800286c:	1912      	adds	r2, r2, r4
 800286e:	eb45 0303 	adc.w	r3, r5, r3
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	00d9      	lsls	r1, r3, #3
 800287c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002880:	00d0      	lsls	r0, r2, #3
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	1911      	adds	r1, r2, r4
 8002888:	6639      	str	r1, [r7, #96]	; 0x60
 800288a:	416b      	adcs	r3, r5
 800288c:	667b      	str	r3, [r7, #100]	; 0x64
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	1891      	adds	r1, r2, r2
 800289a:	63b9      	str	r1, [r7, #56]	; 0x38
 800289c:	415b      	adcs	r3, r3
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028a8:	f7fd fc9a 	bl	80001e0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4ba5      	ldr	r3, [pc, #660]	; (8002b48 <UART_SetConfig+0x38c>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011e      	lsls	r6, r3, #4
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	461c      	mov	r4, r3
 80028be:	f04f 0500 	mov.w	r5, #0
 80028c2:	4622      	mov	r2, r4
 80028c4:	462b      	mov	r3, r5
 80028c6:	1891      	adds	r1, r2, r2
 80028c8:	6339      	str	r1, [r7, #48]	; 0x30
 80028ca:	415b      	adcs	r3, r3
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
 80028ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028d2:	1912      	adds	r2, r2, r4
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	00d9      	lsls	r1, r3, #3
 80028e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e6:	00d0      	lsls	r0, r2, #3
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	1911      	adds	r1, r2, r4
 80028ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80028f0:	416b      	adcs	r3, r5
 80028f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	62b9      	str	r1, [r7, #40]	; 0x28
 8002902:	415b      	adcs	r3, r3
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800290e:	f7fd fc67 	bl	80001e0 <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <UART_SetConfig+0x38c>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	; 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	3332      	adds	r3, #50	; 0x32
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <UART_SetConfig+0x38c>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002938:	441e      	add	r6, r3
 800293a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293c:	4618      	mov	r0, r3
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	1894      	adds	r4, r2, r2
 8002948:	623c      	str	r4, [r7, #32]
 800294a:	415b      	adcs	r3, r3
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002952:	1812      	adds	r2, r2, r0
 8002954:	eb41 0303 	adc.w	r3, r1, r3
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	f04f 0500 	mov.w	r5, #0
 8002960:	00dd      	lsls	r5, r3, #3
 8002962:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002966:	00d4      	lsls	r4, r2, #3
 8002968:	4622      	mov	r2, r4
 800296a:	462b      	mov	r3, r5
 800296c:	1814      	adds	r4, r2, r0
 800296e:	653c      	str	r4, [r7, #80]	; 0x50
 8002970:	414b      	adcs	r3, r1
 8002972:	657b      	str	r3, [r7, #84]	; 0x54
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	461a      	mov	r2, r3
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	1891      	adds	r1, r2, r2
 8002980:	61b9      	str	r1, [r7, #24]
 8002982:	415b      	adcs	r3, r3
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800298e:	f7fd fc27 	bl	80001e0 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <UART_SetConfig+0x38c>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	2164      	movs	r1, #100	; 0x64
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	3332      	adds	r3, #50	; 0x32
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <UART_SetConfig+0x38c>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	f003 0207 	and.w	r2, r3, #7
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4432      	add	r2, r6
 80029bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029be:	e0b9      	b.n	8002b34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c2:	461c      	mov	r4, r3
 80029c4:	f04f 0500 	mov.w	r5, #0
 80029c8:	4622      	mov	r2, r4
 80029ca:	462b      	mov	r3, r5
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	6139      	str	r1, [r7, #16]
 80029d0:	415b      	adcs	r3, r3
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d8:	1912      	adds	r2, r2, r4
 80029da:	eb45 0303 	adc.w	r3, r5, r3
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ec:	00d0      	lsls	r0, r2, #3
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	eb12 0804 	adds.w	r8, r2, r4
 80029f6:	eb43 0905 	adc.w	r9, r3, r5
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a12:	0082      	lsls	r2, r0, #2
 8002a14:	4640      	mov	r0, r8
 8002a16:	4649      	mov	r1, r9
 8002a18:	f7fd fbe2 	bl	80001e0 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <UART_SetConfig+0x38c>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011e      	lsls	r6, r3, #4
 8002a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1894      	adds	r4, r2, r2
 8002a38:	60bc      	str	r4, [r7, #8]
 8002a3a:	415b      	adcs	r3, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a42:	1812      	adds	r2, r2, r0
 8002a44:	eb41 0303 	adc.w	r3, r1, r3
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	f04f 0500 	mov.w	r5, #0
 8002a50:	00dd      	lsls	r5, r3, #3
 8002a52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a56:	00d4      	lsls	r4, r2, #3
 8002a58:	4622      	mov	r2, r4
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	1814      	adds	r4, r2, r0
 8002a5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a60:	414b      	adcs	r3, r1
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	008b      	lsls	r3, r1, #2
 8002a78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a7c:	0082      	lsls	r2, r0, #2
 8002a7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a82:	f7fd fbad 	bl	80001e0 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <UART_SetConfig+0x38c>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	3332      	adds	r3, #50	; 0x32
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <UART_SetConfig+0x38c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aaa:	441e      	add	r6, r3
 8002aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	1894      	adds	r4, r2, r2
 8002aba:	603c      	str	r4, [r7, #0]
 8002abc:	415b      	adcs	r3, r3
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac4:	1812      	adds	r2, r2, r0
 8002ac6:	eb41 0303 	adc.w	r3, r1, r3
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	f04f 0500 	mov.w	r5, #0
 8002ad2:	00dd      	lsls	r5, r3, #3
 8002ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ad8:	00d4      	lsls	r4, r2, #3
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	eb12 0a00 	adds.w	sl, r2, r0
 8002ae2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	008b      	lsls	r3, r1, #2
 8002afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002afe:	0082      	lsls	r2, r0, #2
 8002b00:	4650      	mov	r0, sl
 8002b02:	4659      	mov	r1, fp
 8002b04:	f7fd fb6c 	bl	80001e0 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <UART_SetConfig+0x38c>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	3332      	adds	r3, #50	; 0x32
 8002b20:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <UART_SetConfig+0x38c>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4432      	add	r2, r6
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	377c      	adds	r7, #124	; 0x7c
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <__NVIC_SetPriority>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f06f 0004 	mvn.w	r0, #4
 8002baa:	f7ff ffcf 	bl	8002b4c <__NVIC_SetPriority>
#endif
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bba:	f3ef 8305 	mrs	r3, IPSR
 8002bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8002bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bc6:	f06f 0305 	mvn.w	r3, #5
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e00c      	b.n	8002be8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <osKernelInitialize+0x44>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <osKernelInitialize+0x44>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	e002      	b.n	8002be8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000002c 	.word	0x2000002c

08002bfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c02:	f3ef 8305 	mrs	r3, IPSR
 8002c06:	603b      	str	r3, [r7, #0]
  return(result);
 8002c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c0e:	f06f 0305 	mvn.w	r3, #5
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	e010      	b.n	8002c38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <osKernelStart+0x48>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d109      	bne.n	8002c32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c1e:	f7ff ffbf 	bl	8002ba0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <osKernelStart+0x48>)
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c28:	f001 f866 	bl	8003cf8 <vTaskStartScheduler>
      stat = osOK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e002      	b.n	8002c38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000002c 	.word	0x2000002c

08002c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08e      	sub	sp, #56	; 0x38
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c58:	f3ef 8305 	mrs	r3, IPSR
 8002c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d17e      	bne.n	8002d62 <osThreadNew+0x11a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d07b      	beq.n	8002d62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c6e:	2318      	movs	r3, #24
 8002c70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d045      	beq.n	8002d0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <osThreadNew+0x48>
        name = attr->name;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <osThreadNew+0x6e>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b38      	cmp	r3, #56	; 0x38
 8002ca8:	d805      	bhi.n	8002cb6 <osThreadNew+0x6e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <osThreadNew+0x72>
        return (NULL);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e054      	b.n	8002d64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <osThreadNew+0xa8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b5b      	cmp	r3, #91	; 0x5b
 8002cd8:	d90a      	bls.n	8002cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <osThreadNew+0xa8>
        mem = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e010      	b.n	8002d12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <osThreadNew+0xca>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d108      	bne.n	8002d12 <osThreadNew+0xca>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <osThreadNew+0xca>
          mem = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e001      	b.n	8002d12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d110      	bne.n	8002d3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fe0c 	bl	800394c <xTaskCreateStatic>
 8002d34:	4603      	mov	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	e013      	b.n	8002d62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d110      	bne.n	8002d62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fe57 	bl	8003a06 <xTaskCreate>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <osThreadNew+0x11a>
            hTask = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d62:	693b      	ldr	r3, [r7, #16]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d74:	f3ef 8305 	mrs	r3, IPSR
 8002d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <osDelay+0x1c>
    stat = osErrorISR;
 8002d80:	f06f 0305 	mvn.w	r3, #5
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e007      	b.n	8002d98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 ff7c 	bl	8003c90 <vTaskDelay>
    }
  }

  return (stat);
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8002dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	601a      	str	r2, [r3, #0]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000030 	.word	0x20000030
 8002dd4:	2000008c 	.word	0x2000008c

08002dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8002de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <vApplicationGetTimerTaskMemory+0x30>)
 8002dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df6:	601a      	str	r2, [r3, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	2000028c 	.word	0x2000028c
 8002e08:	200002e8 	.word	0x200002e8

08002e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f103 0208 	add.w	r2, r3, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0208 	add.w	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0208 	add.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e66:	b480      	push	{r7}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d103      	bne.n	8002ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e00c      	b.n	8002ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e002      	b.n	8002edc <vListInsert+0x2e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d2f6      	bcs.n	8002ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6852      	ldr	r2, [r2, #4]
 8002f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d103      	bne.n	8002f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1e5a      	subs	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f9e:	f002 f851 	bl	8005044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d114      	bne.n	800301e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01a      	beq.n	8003032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3310      	adds	r3, #16
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f903 	bl	800420c <xTaskRemoveFromEventList>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <xQueueGenericReset+0xcc>)
 800300e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	e009      	b.n	8003032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3310      	adds	r3, #16
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fef2 	bl	8002e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3324      	adds	r3, #36	; 0x24
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff feed 	bl	8002e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003032:	f002 f837 	bl	80050a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <xQueueGenericCreateStatic+0x52>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <xQueueGenericCreateStatic+0x56>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <xQueueGenericCreateStatic+0x58>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	623b      	str	r3, [r7, #32]
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <xQueueGenericCreateStatic+0x7e>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueGenericCreateStatic+0x82>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueGenericCreateStatic+0x84>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61fb      	str	r3, [r7, #28]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030e2:	2350      	movs	r3, #80	; 0x50
 80030e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d00a      	beq.n	8003102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	61bb      	str	r3, [r7, #24]
}
 80030fe:	bf00      	nop
 8003100:	e7fe      	b.n	8003100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f805 	bl	8003134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800312c:	4618      	mov	r0, r3
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e002      	b.n	8003156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003162:	2101      	movs	r1, #1
 8003164:	69b8      	ldr	r0, [r7, #24]
 8003166:	f7ff ff05 	bl	8002f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueGenericSend+0x32>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <xQueueGenericSend+0x40>
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <xQueueGenericSend+0x44>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <xQueueGenericSend+0x46>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <xQueueGenericSend+0x60>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d103      	bne.n	80031ea <xQueueGenericSend+0x6e>
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <xQueueGenericSend+0x72>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <xQueueGenericSend+0x74>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <xQueueGenericSend+0x8e>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	623b      	str	r3, [r7, #32]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800320a:	f001 f9bd 	bl	8004588 <xTaskGetSchedulerState>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <xQueueGenericSend+0x9e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xQueueGenericSend+0xa2>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xQueueGenericSend+0xa4>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xQueueGenericSend+0xbe>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	61fb      	str	r3, [r7, #28]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800323a:	f001 ff03 	bl	8005044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <xQueueGenericSend+0xd4>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d129      	bne.n	80032a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003256:	f000 fa0b 	bl	8003670 <prvCopyDataToQueue>
 800325a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	4618      	mov	r0, r3
 800326a:	f000 ffcf 	bl	800420c <xTaskRemoveFromEventList>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <xQueueGenericSend+0x1f8>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	e00a      	b.n	800329c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <xQueueGenericSend+0x1f8>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800329c:	f001 ff02 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e063      	b.n	800336c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032aa:	f001 fefb 	bl	80050a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e05c      	b.n	800336c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 f809 	bl	80042d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c6:	f001 feed 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ca:	f000 fd7b 	bl	8003dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ce:	f001 feb9 	bl	8005044 <vPortEnterCritical>
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d103      	bne.n	80032e8 <xQueueGenericSend+0x16c>
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d103      	bne.n	80032fe <xQueueGenericSend+0x182>
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fe:	f001 fed1 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003302:	1d3a      	adds	r2, r7, #4
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fff8 	bl	8004300 <xTaskCheckForTimeOut>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d124      	bne.n	8003360 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003318:	f000 faa2 	bl	8003860 <prvIsQueueFull>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	3310      	adds	r3, #16
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff1e 	bl	800416c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003332:	f000 fa2d 	bl	8003790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003336:	f000 fd53 	bl	8003de0 <xTaskResumeAll>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f47f af7c 	bne.w	800323a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <xQueueGenericSend+0x1f8>)
 8003344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	e772      	b.n	800323a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003356:	f000 fa1b 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800335a:	f000 fd41 	bl	8003de0 <xTaskResumeAll>
 800335e:	e76c      	b.n	800323a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003362:	f000 fa15 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003366:	f000 fd3b 	bl	8003de0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800336a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800336c:	4618      	mov	r0, r3
 800336e:	3738      	adds	r7, #56	; 0x38
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	e000ed04 	.word	0xe000ed04

08003378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b090      	sub	sp, #64	; 0x40
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033a2:	bf00      	nop
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <xQueueGenericSendFromISR+0x3c>
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <xQueueGenericSendFromISR+0x40>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <xQueueGenericSendFromISR+0x42>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <xQueueGenericSendFromISR+0x6a>
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <xQueueGenericSendFromISR+0x6e>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xQueueGenericSendFromISR+0x70>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	623b      	str	r3, [r7, #32]
}
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003402:	f001 ff01 	bl	8005208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003406:	f3ef 8211 	mrs	r2, BASEPRI
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	61fa      	str	r2, [r7, #28]
 800341c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800341e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <xQueueGenericSendFromISR+0xbc>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d12f      	bne.n	8003494 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800344a:	f000 f911 	bl	8003670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800344e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d112      	bne.n	800347e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fed1 	bl	800420c <xTaskRemoveFromEventList>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e007      	b.n	800348e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800347e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003482:	3301      	adds	r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	b25a      	sxtb	r2, r3
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800348e:	2301      	movs	r3, #1
 8003490:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003492:	e001      	b.n	8003498 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003494:	2300      	movs	r3, #0
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3740      	adds	r7, #64	; 0x40
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <xQueueReceive+0x30>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	623b      	str	r3, [r7, #32]
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <xQueueReceive+0x3e>
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <xQueueReceive+0x42>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueReceive+0x44>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueReceive+0x5e>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61fb      	str	r3, [r7, #28]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800350e:	f001 f83b 	bl	8004588 <xTaskGetSchedulerState>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <xQueueReceive+0x6e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueReceive+0x72>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueReceive+0x74>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xQueueReceive+0x8e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	61bb      	str	r3, [r7, #24]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800353e:	f001 fd81 	bl	8005044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01f      	beq.n	800358e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003552:	f000 f8f7 	bl	8003744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00f      	beq.n	8003586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	3310      	adds	r3, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fe4e 	bl	800420c <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <xQueueReceive+0x1bc>)
 8003578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003586:	f001 fd8d 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 800358a:	2301      	movs	r3, #1
 800358c:	e069      	b.n	8003662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003594:	f001 fd86 	bl	80050a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003598:	2300      	movs	r3, #0
 800359a:	e062      	b.n	8003662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035a2:	f107 0310 	add.w	r3, r7, #16
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe94 	bl	80042d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035b0:	f001 fd78 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035b4:	f000 fc06 	bl	8003dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035b8:	f001 fd44 	bl	8005044 <vPortEnterCritical>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d103      	bne.n	80035d2 <xQueueReceive+0x122>
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d103      	bne.n	80035e8 <xQueueReceive+0x138>
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e8:	f001 fd5c 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ec:	1d3a      	adds	r2, r7, #4
 80035ee:	f107 0310 	add.w	r3, r7, #16
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fe83 	bl	8004300 <xTaskCheckForTimeOut>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d123      	bne.n	8003648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003602:	f000 f917 	bl	8003834 <prvIsQueueEmpty>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fda9 	bl	800416c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800361a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361c:	f000 f8b8 	bl	8003790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003620:	f000 fbde 	bl	8003de0 <xTaskResumeAll>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d189      	bne.n	800353e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <xQueueReceive+0x1bc>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	e780      	b.n	800353e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800363c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363e:	f000 f8a7 	bl	8003790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003642:	f000 fbcd 	bl	8003de0 <xTaskResumeAll>
 8003646:	e77a      	b.n	800353e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364a:	f000 f8a1 	bl	8003790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800364e:	f000 fbc7 	bl	8003de0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003654:	f000 f8ee 	bl	8003834 <prvIsQueueEmpty>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f43f af6f 	beq.w	800353e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003662:	4618      	mov	r0, r3
 8003664:	3730      	adds	r7, #48	; 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d14d      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 ff92 	bl	80045c4 <xTaskPriorityDisinherit>
 80036a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e043      	b.n	8003732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d119      	bne.n	80036e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6858      	ldr	r0, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	461a      	mov	r2, r3
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	f001 fff2 	bl	80056a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d32b      	bcc.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	e026      	b.n	8003732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68d8      	ldr	r0, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	461a      	mov	r2, r3
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	f001 ffd8 	bl	80056a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	425b      	negs	r3, r3
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	425b      	negs	r3, r3
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d105      	bne.n	8003732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	3b01      	subs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800373a:	697b      	ldr	r3, [r7, #20]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d303      	bcc.n	8003778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68d9      	ldr	r1, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	461a      	mov	r2, r3
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f001 ff8e 	bl	80056a4 <memcpy>
	}
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003798:	f001 fc54 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a4:	e011      	b.n	80037ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d012      	beq.n	80037d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd2a 	bl	800420c <xTaskRemoveFromEventList>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037be:	f000 fe01 	bl	80043c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dce9      	bgt.n	80037a6 <prvUnlockQueue+0x16>
 80037d2:	e000      	b.n	80037d6 <prvUnlockQueue+0x46>
					break;
 80037d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037de:	f001 fc61 	bl	80050a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037e2:	f001 fc2f 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ee:	e011      	b.n	8003814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3310      	adds	r3, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fd05 	bl	800420c <xTaskRemoveFromEventList>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003808:	f000 fddc 	bl	80043c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800380c:	7bbb      	ldrb	r3, [r7, #14]
 800380e:	3b01      	subs	r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003818:	2b00      	cmp	r3, #0
 800381a:	dce9      	bgt.n	80037f0 <prvUnlockQueue+0x60>
 800381c:	e000      	b.n	8003820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800381e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003828:	f001 fc3c 	bl	80050a4 <vPortExitCritical>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800383c:	f001 fc02 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fc27 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003868:	f001 fbec 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	429a      	cmp	r2, r3
 8003876:	d102      	bne.n	800387e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e001      	b.n	8003882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003882:	f001 fc0f 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e014      	b.n	80038ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <vQueueAddToRegistry+0x50>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <vQueueAddToRegistry+0x50>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <vQueueAddToRegistry+0x50>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038c2:	e006      	b.n	80038d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d9e7      	bls.n	80038a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20004a64 	.word	0x20004a64

080038e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038f4:	f001 fba6 	bl	8005044 <vPortEnterCritical>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d103      	bne.n	800390e <vQueueWaitForMessageRestricted+0x2a>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d103      	bne.n	8003924 <vQueueWaitForMessageRestricted+0x40>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003924:	f001 fbbe 	bl	80050a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3324      	adds	r3, #36	; 0x24
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fc3b 	bl	80041b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800393e:	6978      	ldr	r0, [r7, #20]
 8003940:	f7ff ff26 	bl	8003790 <prvUnlockQueue>
	}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	; 0x38
 8003950:	af04      	add	r7, sp, #16
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xTaskCreateStatic+0x46>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61fb      	str	r3, [r7, #28]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003992:	235c      	movs	r3, #92	; 0x5c
 8003994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b5c      	cmp	r3, #92	; 0x5c
 800399a:	d00a      	beq.n	80039b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	61bb      	str	r3, [r7, #24]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01e      	beq.n	80039f8 <xTaskCreateStatic+0xac>
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01b      	beq.n	80039f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039d2:	2300      	movs	r3, #0
 80039d4:	9303      	str	r3, [sp, #12]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f850 	bl	8003a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f2:	f000 f8dd 	bl	8003bb0 <prvAddNewTaskToReadyList>
 80039f6:	e001      	b.n	80039fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039fc:	697b      	ldr	r3, [r7, #20]
	}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08c      	sub	sp, #48	; 0x30
 8003a0a:	af04      	add	r7, sp, #16
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fc34 	bl	8005288 <pvPortMalloc>
 8003a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a28:	205c      	movs	r0, #92	; 0x5c
 8003a2a:	f001 fc2d 	bl	8005288 <pvPortMalloc>
 8003a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3c:	e005      	b.n	8003a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f001 fcee 	bl	8005420 <vPortFree>
 8003a44:	e001      	b.n	8003a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d017      	beq.n	8003a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9303      	str	r3, [sp, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	9302      	str	r3, [sp, #8]
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f80e 	bl	8003a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a74:	69f8      	ldr	r0, [r7, #28]
 8003a76:	f000 f89b 	bl	8003bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e002      	b.n	8003a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a86:	69bb      	ldr	r3, [r7, #24]
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	21a5      	movs	r1, #165	; 0xa5
 8003aaa:	f001 fe09 	bl	80056c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	617b      	str	r3, [r7, #20]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01f      	beq.n	8003b2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e012      	b.n	8003b1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	7819      	ldrb	r1, [r3, #0]
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	3334      	adds	r3, #52	; 0x34
 8003b04:	460a      	mov	r2, r1
 8003b06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d006      	beq.n	8003b22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d9e9      	bls.n	8003af4 <prvInitialiseNewTask+0x64>
 8003b20:	e000      	b.n	8003b24 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2c:	e003      	b.n	8003b36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2b37      	cmp	r3, #55	; 0x37
 8003b3a:	d901      	bls.n	8003b40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b3c:	2337      	movs	r3, #55	; 0x37
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	2200      	movs	r2, #0
 8003b50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	3304      	adds	r3, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff f978 	bl	8002e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff f973 	bl	8002e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	69b8      	ldr	r0, [r7, #24]
 8003b90:	f001 f928 	bl	8004de4 <pxPortInitialiseStack>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bb8:	f001 fa44 	bl	8005044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bce:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d110      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bdc:	f000 fc16 	bl	800440c <prvInitialiseTaskLists>
 8003be0:	e00d      	b.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <prvAddNewTaskToReadyList+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d903      	bls.n	8003c24 <prvAddNewTaskToReadyList+0x74>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <prvAddNewTaskToReadyList+0xd4>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <prvAddNewTaskToReadyList+0xd8>)
 8003c32:	441a      	add	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7ff f913 	bl	8002e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c40:	f001 fa30 	bl	80050a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d207      	bcs.n	8003c6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvAddNewTaskToReadyList+0xdc>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000bbc 	.word	0x20000bbc
 8003c78:	200006e8 	.word	0x200006e8
 8003c7c:	20000bc8 	.word	0x20000bc8
 8003c80:	20000bd8 	.word	0x20000bd8
 8003c84:	20000bc4 	.word	0x20000bc4
 8003c88:	200006ec 	.word	0x200006ec
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <vTaskDelay+0x60>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <vTaskDelay+0x30>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cc0:	f000 f880 	bl	8003dc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fcea 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ccc:	f000 f888 	bl	8003de0 <xTaskResumeAll>
 8003cd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <vTaskDelay+0x64>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000be4 	.word	0x20000be4
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d06:	463a      	mov	r2, r7
 8003d08:	1d39      	adds	r1, r7, #4
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f848 	bl	8002da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	460a      	mov	r2, r1
 8003d26:	4921      	ldr	r1, [pc, #132]	; (8003dac <vTaskStartScheduler+0xb4>)
 8003d28:	4821      	ldr	r0, [pc, #132]	; (8003db0 <vTaskStartScheduler+0xb8>)
 8003d2a:	f7ff fe0f 	bl	800394c <xTaskCreateStatic>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <vTaskStartScheduler+0xbc>)
 8003d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d34:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <vTaskStartScheduler+0xbc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e001      	b.n	8003d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d102      	bne.n	8003d52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d4c:	f000 fcfc 	bl	8004748 <xTimerCreateTimerTask>
 8003d50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d116      	bne.n	8003d86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
}
 8003d6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <vTaskStartScheduler+0xc0>)
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <vTaskStartScheduler+0xc4>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <vTaskStartScheduler+0xc8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d80:	f001 f8be 	bl	8004f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d84:	e00e      	b.n	8003da4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d10a      	bne.n	8003da4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60fb      	str	r3, [r7, #12]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vTaskStartScheduler+0xaa>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	080056f4 	.word	0x080056f4
 8003db0:	080043dd 	.word	0x080043dd
 8003db4:	20000be0 	.word	0x20000be0
 8003db8:	20000bdc 	.word	0x20000bdc
 8003dbc:	20000bc8 	.word	0x20000bc8
 8003dc0:	20000bc0 	.word	0x20000bc0

08003dc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20000be4 	.word	0x20000be4

08003de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xTaskResumeAll+0x2c>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	603b      	str	r3, [r7, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e0c:	f001 f91a 	bl	8005044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d162      	bne.n	8003ee8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <xTaskResumeAll+0x11c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d05e      	beq.n	8003ee8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e2a:	e02f      	b.n	8003e8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <xTaskResumeAll+0x120>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3318      	adds	r3, #24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff f871 	bl	8002f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f86c 	bl	8002f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <xTaskResumeAll+0x124>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d903      	bls.n	8003e5c <xTaskResumeAll+0x7c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <xTaskResumeAll+0x124>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <xTaskResumeAll+0x128>)
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7fe fff7 	bl	8002e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <xTaskResumeAll+0x12c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <xTaskResumeAll+0x130>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <xTaskResumeAll+0x120>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1cb      	bne.n	8003e2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e9a:	f000 fb55 	bl	8004548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <xTaskResumeAll+0x134>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eaa:	f000 f847 	bl	8003f3c <xTaskIncrementTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <xTaskResumeAll+0x130>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f1      	bne.n	8003eaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <xTaskResumeAll+0x134>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <xTaskResumeAll+0x130>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <xTaskResumeAll+0x138>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee8:	f001 f8dc 	bl	80050a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000be4 	.word	0x20000be4
 8003efc:	20000bbc 	.word	0x20000bbc
 8003f00:	20000b7c 	.word	0x20000b7c
 8003f04:	20000bc4 	.word	0x20000bc4
 8003f08:	200006ec 	.word	0x200006ec
 8003f0c:	200006e8 	.word	0x200006e8
 8003f10:	20000bd0 	.word	0x20000bd0
 8003f14:	20000bcc 	.word	0x20000bcc
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <xTaskGetTickCount+0x1c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f28:	687b      	ldr	r3, [r7, #4]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000bc0 	.word	0x20000bc0

08003f3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f46:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <xTaskIncrementTick+0x148>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 808f 	bne.w	800406e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <xTaskIncrementTick+0x14c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f58:	4a4b      	ldr	r2, [pc, #300]	; (8004088 <xTaskIncrementTick+0x14c>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d120      	bne.n	8003fa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f64:	4b49      	ldr	r3, [pc, #292]	; (800408c <xTaskIncrementTick+0x150>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <xTaskIncrementTick+0x46>
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <xTaskIncrementTick+0x150>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <xTaskIncrementTick+0x154>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <xTaskIncrementTick+0x150>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <xTaskIncrementTick+0x154>)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <xTaskIncrementTick+0x158>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <xTaskIncrementTick+0x158>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	f000 fad1 	bl	8004548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fa6:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <xTaskIncrementTick+0x15c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d349      	bcc.n	8004044 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb0:	4b36      	ldr	r3, [pc, #216]	; (800408c <xTaskIncrementTick+0x150>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <xTaskIncrementTick+0x15c>)
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	601a      	str	r2, [r3, #0]
					break;
 8003fc2:	e03f      	b.n	8004044 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc4:	4b31      	ldr	r3, [pc, #196]	; (800408c <xTaskIncrementTick+0x150>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d203      	bcs.n	8003fe4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <xTaskIncrementTick+0x15c>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fe2:	e02f      	b.n	8004044 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe ff99 	bl	8002f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff90 	bl	8002f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <xTaskIncrementTick+0x160>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d903      	bls.n	8004014 <xTaskIncrementTick+0xd8>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <xTaskIncrementTick+0x160>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <xTaskIncrementTick+0x164>)
 8004022:	441a      	add	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7fe ff1b 	bl	8002e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <xTaskIncrementTick+0x168>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	429a      	cmp	r2, r3
 800403c:	d3b8      	bcc.n	8003fb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004042:	e7b5      	b.n	8003fb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <xTaskIncrementTick+0x168>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4915      	ldr	r1, [pc, #84]	; (80040a0 <xTaskIncrementTick+0x164>)
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d901      	bls.n	8004060 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <xTaskIncrementTick+0x16c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e004      	b.n	8004078 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <xTaskIncrementTick+0x170>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <xTaskIncrementTick+0x170>)
 8004076:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004078:	697b      	ldr	r3, [r7, #20]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000be4 	.word	0x20000be4
 8004088:	20000bc0 	.word	0x20000bc0
 800408c:	20000b74 	.word	0x20000b74
 8004090:	20000b78 	.word	0x20000b78
 8004094:	20000bd4 	.word	0x20000bd4
 8004098:	20000bdc 	.word	0x20000bdc
 800409c:	20000bc4 	.word	0x20000bc4
 80040a0:	200006ec 	.word	0x200006ec
 80040a4:	200006e8 	.word	0x200006e8
 80040a8:	20000bd0 	.word	0x20000bd0
 80040ac:	20000bcc 	.word	0x20000bcc

080040b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <vTaskSwitchContext+0xa8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <vTaskSwitchContext+0xac>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040c4:	e041      	b.n	800414a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <vTaskSwitchContext+0xac>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <vTaskSwitchContext+0xb0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e010      	b.n	80040f6 <vTaskSwitchContext+0x46>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	607b      	str	r3, [r7, #4]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vTaskSwitchContext+0x3e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <vTaskSwitchContext+0xb4>)
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0e4      	beq.n	80040d4 <vTaskSwitchContext+0x24>
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <vTaskSwitchContext+0xb4>)
 8004116:	4413      	add	r3, r2
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	3308      	adds	r3, #8
 800412c:	429a      	cmp	r2, r3
 800412e:	d104      	bne.n	800413a <vTaskSwitchContext+0x8a>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a09      	ldr	r2, [pc, #36]	; (8004168 <vTaskSwitchContext+0xb8>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4a06      	ldr	r2, [pc, #24]	; (8004160 <vTaskSwitchContext+0xb0>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6013      	str	r3, [r2, #0]
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000be4 	.word	0x20000be4
 800415c:	20000bd0 	.word	0x20000bd0
 8004160:	20000bc4 	.word	0x20000bc4
 8004164:	200006ec 	.word	0x200006ec
 8004168:	200006e8 	.word	0x200006e8

0800416c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <vTaskPlaceOnEventList+0x44>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3318      	adds	r3, #24
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fe87 	bl	8002eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041a0:	2101      	movs	r1, #1
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	f000 fa7c 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200006e8 	.word	0x200006e8

080041b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	617b      	str	r3, [r7, #20]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <vTaskPlaceOnEventListRestricted+0x54>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4619      	mov	r1, r3
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7fe fe3e 	bl	8002e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	68b8      	ldr	r0, [r7, #8]
 80041fa:	f000 fa51 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
	}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200006e8 	.word	0x200006e8

0800420c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3318      	adds	r3, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fe6f 	bl	8002f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <xTaskRemoveFromEventList+0xb0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fe66 	bl	8002f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <xTaskRemoveFromEventList+0xb4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d903      	bls.n	8004268 <xTaskRemoveFromEventList+0x5c>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <xTaskRemoveFromEventList+0xb4>)
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <xTaskRemoveFromEventList+0xb8>)
 8004276:	441a      	add	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f7fe fdf1 	bl	8002e66 <vListInsertEnd>
 8004284:	e005      	b.n	8004292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3318      	adds	r3, #24
 800428a:	4619      	mov	r1, r3
 800428c:	480e      	ldr	r0, [pc, #56]	; (80042c8 <xTaskRemoveFromEventList+0xbc>)
 800428e:	f7fe fdea 	bl	8002e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <xTaskRemoveFromEventList+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d905      	bls.n	80042ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <xTaskRemoveFromEventList+0xc4>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e001      	b.n	80042b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042b0:	697b      	ldr	r3, [r7, #20]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000be4 	.word	0x20000be4
 80042c0:	20000bc4 	.word	0x20000bc4
 80042c4:	200006ec 	.word	0x200006ec
 80042c8:	20000b7c 	.word	0x20000b7c
 80042cc:	200006e8 	.word	0x200006e8
 80042d0:	20000bd0 	.word	0x20000bd0

080042d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <vTaskInternalSetTimeOutState+0x24>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <vTaskInternalSetTimeOutState+0x28>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	20000bd4 	.word	0x20000bd4
 80042fc:	20000bc0 	.word	0x20000bc0

08004300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004342:	f000 fe7f 	bl	8005044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <xTaskCheckForTimeOut+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d102      	bne.n	8004366 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e023      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <xTaskCheckForTimeOut+0xc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d007      	beq.n	8004382 <xTaskCheckForTimeOut+0x82>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e015      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d20b      	bcs.n	80043a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff9b 	bl	80042d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e004      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ae:	f000 fe79 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 80043b2:	69fb      	ldr	r3, [r7, #28]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000bc0 	.word	0x20000bc0
 80043c0:	20000bd4 	.word	0x20000bd4

080043c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <vTaskMissedYield+0x14>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	20000bd0 	.word	0x20000bd0

080043dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043e4:	f000 f852 	bl	800448c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <prvIdleTask+0x28>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d9f9      	bls.n	80043e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <prvIdleTask+0x2c>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004400:	e7f0      	b.n	80043e4 <prvIdleTask+0x8>
 8004402:	bf00      	nop
 8004404:	200006ec 	.word	0x200006ec
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	e00c      	b.n	8004432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <prvInitialiseTaskLists+0x60>)
 8004424:	4413      	add	r3, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fcf0 	bl	8002e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b37      	cmp	r3, #55	; 0x37
 8004436:	d9ef      	bls.n	8004418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004438:	480d      	ldr	r0, [pc, #52]	; (8004470 <prvInitialiseTaskLists+0x64>)
 800443a:	f7fe fce7 	bl	8002e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800443e:	480d      	ldr	r0, [pc, #52]	; (8004474 <prvInitialiseTaskLists+0x68>)
 8004440:	f7fe fce4 	bl	8002e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <prvInitialiseTaskLists+0x6c>)
 8004446:	f7fe fce1 	bl	8002e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800444a:	480c      	ldr	r0, [pc, #48]	; (800447c <prvInitialiseTaskLists+0x70>)
 800444c:	f7fe fcde 	bl	8002e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004450:	480b      	ldr	r0, [pc, #44]	; (8004480 <prvInitialiseTaskLists+0x74>)
 8004452:	f7fe fcdb 	bl	8002e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <prvInitialiseTaskLists+0x78>)
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <prvInitialiseTaskLists+0x64>)
 800445a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvInitialiseTaskLists+0x7c>)
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <prvInitialiseTaskLists+0x68>)
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200006ec 	.word	0x200006ec
 8004470:	20000b4c 	.word	0x20000b4c
 8004474:	20000b60 	.word	0x20000b60
 8004478:	20000b7c 	.word	0x20000b7c
 800447c:	20000b90 	.word	0x20000b90
 8004480:	20000ba8 	.word	0x20000ba8
 8004484:	20000b74 	.word	0x20000b74
 8004488:	20000b78 	.word	0x20000b78

0800448c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004492:	e019      	b.n	80044c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004494:	f000 fdd6 	bl	8005044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <prvCheckTasksWaitingTermination+0x50>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fd3b 	bl	8002f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <prvCheckTasksWaitingTermination+0x54>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <prvCheckTasksWaitingTermination+0x54>)
 80044b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044be:	f000 fdf1 	bl	80050a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f810 	bl	80044e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e1      	bne.n	8004494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000b90 	.word	0x20000b90
 80044e0:	20000bbc 	.word	0x20000bbc
 80044e4:	20000ba4 	.word	0x20000ba4

080044e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 ff8e 	bl	8005420 <vPortFree>
				vPortFree( pxTCB );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 ff8b 	bl	8005420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800450a:	e018      	b.n	800453e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004512:	2b01      	cmp	r3, #1
 8004514:	d103      	bne.n	800451e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 ff82 	bl	8005420 <vPortFree>
	}
 800451c:	e00f      	b.n	800453e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004524:	2b02      	cmp	r3, #2
 8004526:	d00a      	beq.n	800453e <prvDeleteTCB+0x56>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <prvDeleteTCB+0x54>
	}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <prvResetNextTaskUnblockTime+0x38>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <prvResetNextTaskUnblockTime+0x3c>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004560:	e008      	b.n	8004574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <prvResetNextTaskUnblockTime+0x38>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <prvResetNextTaskUnblockTime+0x3c>)
 8004572:	6013      	str	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20000b74 	.word	0x20000b74
 8004584:	20000bdc 	.word	0x20000bdc

08004588 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <xTaskGetSchedulerState+0x34>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004596:	2301      	movs	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	e008      	b.n	80045ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <xTaskGetSchedulerState+0x38>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045a4:	2302      	movs	r3, #2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e001      	b.n	80045ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ae:	687b      	ldr	r3, [r7, #4]
	}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000bc8 	.word	0x20000bc8
 80045c0:	20000be4 	.word	0x20000be4

080045c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d056      	beq.n	8004688 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <xTaskPriorityDisinherit+0xd0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d00a      	beq.n	80045fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60bb      	str	r3, [r7, #8]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	429a      	cmp	r2, r3
 800462c:	d02c      	beq.n	8004688 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d128      	bne.n	8004688 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fc70 	bl	8002f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTaskPriorityDisinherit+0xd4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <xTaskPriorityDisinherit+0xa4>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <xTaskPriorityDisinherit+0xd4>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <xTaskPriorityDisinherit+0xd8>)
 8004676:	441a      	add	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7fe fbf1 	bl	8002e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004688:	697b      	ldr	r3, [r7, #20]
	}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200006e8 	.word	0x200006e8
 8004698:	20000bc4 	.word	0x20000bc4
 800469c:	200006ec 	.word	0x200006ec

080046a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <prvAddCurrentTaskToDelayedList+0x90>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fc32 	bl	8002f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d10a      	bne.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4819      	ldr	r0, [pc, #100]	; (8004738 <prvAddCurrentTaskToDelayedList+0x98>)
 80046d4:	f7fe fbc7 	bl	8002e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d8:	e026      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d209      	bcs.n	8004706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <prvAddCurrentTaskToDelayedList+0x9c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe fbd5 	bl	8002eae <vListInsert>
}
 8004704:	e010      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7fe fbcb 	bl	8002eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d202      	bcs.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000bc0 	.word	0x20000bc0
 8004734:	200006e8 	.word	0x200006e8
 8004738:	20000ba8 	.word	0x20000ba8
 800473c:	20000b78 	.word	0x20000b78
 8004740:	20000b74 	.word	0x20000b74
 8004744:	20000bdc 	.word	0x20000bdc

08004748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004752:	f000 fb07 	bl	8004d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <xTimerCreateTimerTask+0x80>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	f107 0108 	add.w	r1, r7, #8
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fb31 	bl	8002dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	9202      	str	r2, [sp, #8]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2302      	movs	r3, #2
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	460a      	mov	r2, r1
 8004788:	4910      	ldr	r1, [pc, #64]	; (80047cc <xTimerCreateTimerTask+0x84>)
 800478a:	4811      	ldr	r0, [pc, #68]	; (80047d0 <xTimerCreateTimerTask+0x88>)
 800478c:	f7ff f8de 	bl	800394c <xTaskCreateStatic>
 8004790:	4603      	mov	r3, r0
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <xTimerCreateTimerTask+0x8c>)
 8004794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <xTimerCreateTimerTask+0x8c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800479e:	2301      	movs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	613b      	str	r3, [r7, #16]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047be:	697b      	ldr	r3, [r7, #20]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000c18 	.word	0x20000c18
 80047cc:	080056fc 	.word	0x080056fc
 80047d0:	0800490d 	.word	0x0800490d
 80047d4:	20000c1c 	.word	0x20000c1c

080047d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTimerGenericCommand+0x2e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	623b      	str	r3, [r7, #32]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <xTimerGenericCommand+0x98>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02a      	beq.n	8004864 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b05      	cmp	r3, #5
 800481e:	dc18      	bgt.n	8004852 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004820:	f7ff feb2 	bl	8004588 <xTaskGetSchedulerState>
 8004824:	4603      	mov	r3, r0
 8004826:	2b02      	cmp	r3, #2
 8004828:	d109      	bne.n	800483e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <xTimerGenericCommand+0x98>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f107 0110 	add.w	r1, r7, #16
 8004832:	2300      	movs	r3, #0
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	f7fe fca1 	bl	800317c <xQueueGenericSend>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24
 800483c:	e012      	b.n	8004864 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <xTimerGenericCommand+0x98>)
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f107 0110 	add.w	r1, r7, #16
 8004846:	2300      	movs	r3, #0
 8004848:	2200      	movs	r2, #0
 800484a:	f7fe fc97 	bl	800317c <xQueueGenericSend>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
 8004850:	e008      	b.n	8004864 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <xTimerGenericCommand+0x98>)
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f107 0110 	add.w	r1, r7, #16
 800485a:	2300      	movs	r3, #0
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	f7fe fd8b 	bl	8003378 <xQueueGenericSendFromISR>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004866:	4618      	mov	r0, r3
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000c18 	.word	0x20000c18

08004874 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	4b22      	ldr	r3, [pc, #136]	; (8004908 <prvProcessExpiredTimer+0x94>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fb47 	bl	8002f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d022      	beq.n	80048e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	18d1      	adds	r1, r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	6978      	ldr	r0, [r7, #20]
 80048ae:	f000 f8d1 	bl	8004a54 <prvInsertTimerInActiveList>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01f      	beq.n	80048f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b8:	2300      	movs	r3, #0
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	2100      	movs	r1, #0
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff ff88 	bl	80047d8 <xTimerGenericCommand>
 80048c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d113      	bne.n	80048f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	4798      	blx	r3
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000c10 	.word	0x20000c10

0800490c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f857 	bl	80049cc <prvGetNextExpireTime>
 800491e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4619      	mov	r1, r3
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f803 	bl	8004930 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800492a:	f000 f8d5 	bl	8004ad8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800492e:	e7f1      	b.n	8004914 <prvTimerTask+0x8>

08004930 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800493a:	f7ff fa43 	bl	8003dc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f866 	bl	8004a14 <prvSampleTimeNow>
 8004948:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d130      	bne.n	80049b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <prvProcessTimerOrBlockTask+0x3c>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d806      	bhi.n	800496c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800495e:	f7ff fa3f 	bl	8003de0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff85 	bl	8004874 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800496a:	e024      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <prvProcessTimerOrBlockTask+0x90>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <prvProcessTimerOrBlockTask+0x50>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <prvProcessTimerOrBlockTask+0x52>
 8004980:	2300      	movs	r3, #0
 8004982:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <prvProcessTimerOrBlockTask+0x94>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	f7fe ffa7 	bl	80038e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004996:	f7ff fa23 	bl	8003de0 <xTaskResumeAll>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <prvProcessTimerOrBlockTask+0x98>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
}
 80049b0:	e001      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049b2:	f7ff fa15 	bl	8003de0 <xTaskResumeAll>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000c14 	.word	0x20000c14
 80049c4:	20000c18 	.word	0x20000c18
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <prvGetNextExpireTime+0x44>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <prvGetNextExpireTime+0x16>
 80049de:	2201      	movs	r2, #1
 80049e0:	e000      	b.n	80049e4 <prvGetNextExpireTime+0x18>
 80049e2:	2200      	movs	r2, #0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <prvGetNextExpireTime+0x44>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e001      	b.n	8004a00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a00:	68fb      	ldr	r3, [r7, #12]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000c10 	.word	0x20000c10

08004a14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a1c:	f7ff fa7e 	bl	8003f1c <xTaskGetTickCount>
 8004a20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d205      	bcs.n	8004a38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a2c:	f000 f936 	bl	8004c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <prvSampleTimeNow+0x3c>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000c20 	.word	0x20000c20

08004a54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d812      	bhi.n	8004aa0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e01b      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <prvInsertTimerInActiveList+0x7c>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fe fa08 	bl	8002eae <vListInsert>
 8004a9e:	e012      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d206      	bcs.n	8004ab6 <prvInsertTimerInActiveList+0x62>
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e007      	b.n	8004ac6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <prvInsertTimerInActiveList+0x80>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe f9f4 	bl	8002eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000c14 	.word	0x20000c14
 8004ad4:	20000c10 	.word	0x20000c10

08004ad8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ade:	e0ca      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da18      	bge.n	8004b18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	3304      	adds	r3, #4
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	61fb      	str	r3, [r7, #28]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0e:	6850      	ldr	r0, [r2, #4]
 8004b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b12:	6892      	ldr	r2, [r2, #8]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f2c0 80aa 	blt.w	8004c74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe f9f5 	bl	8002f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b36:	463b      	mov	r3, r7
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff6b 	bl	8004a14 <prvSampleTimeNow>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	f200 8097 	bhi.w	8004c76 <prvProcessReceivedCommands+0x19e>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <prvProcessReceivedCommands+0x78>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004bed 	.word	0x08004bed
 8004b60:	08004c01 	.word	0x08004c01
 8004b64:	08004c4b 	.word	0x08004c4b
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b79 	.word	0x08004b79
 8004b70:	08004bed 	.word	0x08004bed
 8004b74:	08004c01 	.word	0x08004c01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	18d1      	adds	r1, r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b98:	f7ff ff5c 	bl	8004a54 <prvInsertTimerInActiveList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d069      	beq.n	8004c76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05e      	beq.n	8004c76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bca:	f7ff fe05 	bl	80047d8 <xTimerGenericCommand>
 8004bce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d14f      	bne.n	8004c76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61bb      	str	r3, [r7, #24]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bfe:	e03a      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	617b      	str	r3, [r7, #20]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	18d1      	adds	r1, r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c44:	f7ff ff06 	bl	8004a54 <prvInsertTimerInActiveList>
					break;
 8004c48:	e015      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5a:	f000 fbe1 	bl	8005420 <vPortFree>
 8004c5e:	e00a      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c72:	e000      	b.n	8004c76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <prvProcessReceivedCommands+0x1c0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1d39      	adds	r1, r7, #4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fc16 	bl	80034b0 <xQueueReceive>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f47f af2a 	bne.w	8004ae0 <prvProcessReceivedCommands+0x8>
	}
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3730      	adds	r7, #48	; 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000c18 	.word	0x20000c18

08004c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ca2:	e048      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe f92f 	bl	8002f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90e      	bls.n	8004d08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fe f8d4 	bl	8002eae <vListInsert>
 8004d06:	e016      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	2100      	movs	r1, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fd60 	bl	80047d8 <xTimerGenericCommand>
 8004d18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	603b      	str	r3, [r7, #0]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1b1      	bne.n	8004ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000c10 	.word	0x20000c10
 8004d60:	20000c14 	.word	0x20000c14

08004d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d6a:	f000 f96b 	bl	8005044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d120      	bne.n	8004db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d76:	4814      	ldr	r0, [pc, #80]	; (8004dc8 <prvCheckForValidListAndQueue+0x64>)
 8004d78:	f7fe f848 	bl	8002e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d7c:	4813      	ldr	r0, [pc, #76]	; (8004dcc <prvCheckForValidListAndQueue+0x68>)
 8004d7e:	f7fe f845 	bl	8002e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <prvCheckForValidListAndQueue+0x6c>)
 8004d84:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <prvCheckForValidListAndQueue+0x64>)
 8004d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d88:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <prvCheckForValidListAndQueue+0x70>)
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <prvCheckForValidListAndQueue+0x68>)
 8004d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <prvCheckForValidListAndQueue+0x74>)
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <prvCheckForValidListAndQueue+0x78>)
 8004d96:	2110      	movs	r1, #16
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f7fe f953 	bl	8003044 <xQueueGenericCreateStatic>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	490b      	ldr	r1, [pc, #44]	; (8004de0 <prvCheckForValidListAndQueue+0x7c>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fd6c 	bl	8003890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db8:	f000 f974 	bl	80050a4 <vPortExitCritical>
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000c18 	.word	0x20000c18
 8004dc8:	20000be8 	.word	0x20000be8
 8004dcc:	20000bfc 	.word	0x20000bfc
 8004dd0:	20000c10 	.word	0x20000c10
 8004dd4:	20000c14 	.word	0x20000c14
 8004dd8:	20000cc4 	.word	0x20000cc4
 8004ddc:	20000c24 	.word	0x20000c24
 8004de0:	08005704 	.word	0x08005704

08004de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3b04      	subs	r3, #4
 8004df4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <pxPortInitialiseStack+0x64>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b14      	subs	r3, #20
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f06f 0202 	mvn.w	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b20      	subs	r3, #32
 8004e38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	08004e4d 	.word	0x08004e4d

08004e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <prvTaskExitError+0x54>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d00a      	beq.n	8004e76 <prvTaskExitError+0x2a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <prvTaskExitError+0x28>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e8a:	bf00      	nop
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0fc      	beq.n	8004e8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	2000000c 	.word	0x2000000c
	...

08004eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <pxCurrentTCBConst2>)
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	6808      	ldr	r0, [r1, #0]
 8004eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	f380 8809 	msr	PSP, r0
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 8004eca:	4770      	bx	lr
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst2>:
 8004ed0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ed8:	4808      	ldr	r0, [pc, #32]	; (8004efc <prvPortStartFirstTask+0x24>)
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	6800      	ldr	r0, [r0, #0]
 8004ede:	f380 8808 	msr	MSP, r0
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8814 	msr	CONTROL, r0
 8004eea:	b662      	cpsie	i
 8004eec:	b661      	cpsie	f
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	df00      	svc	0
 8004ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004efa:	bf00      	nop
 8004efc:	e000ed08 	.word	0xe000ed08

08004f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	; (8005024 <xPortStartScheduler+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x26>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <xPortStartScheduler+0x120>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <xPortStartScheduler+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <xPortStartScheduler+0x46>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <xPortStartScheduler+0x12c>)
 8004f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <xPortStartScheduler+0x130>)
 8004f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <xPortStartScheduler+0x134>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f74:	e009      	b.n	8004f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <xPortStartScheduler+0x134>)
 8004f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d0ef      	beq.n	8004f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1c3 0307 	rsb	r3, r3, #7
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00a      	beq.n	8004fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <xPortStartScheduler+0x134>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <xPortStartScheduler+0x134>)
 8004fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fd6:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xPortStartScheduler+0x138>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <xPortStartScheduler+0x138>)
 8004fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fee:	f000 f8dd 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <xPortStartScheduler+0x13c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ff8:	f000 f8fc 	bl	80051f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <xPortStartScheduler+0x140>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <xPortStartScheduler+0x140>)
 8005002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005008:	f7ff ff66 	bl	8004ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800500c:	f7ff f850 	bl	80040b0 <vTaskSwitchContext>
	prvTaskExitError();
 8005010:	f7ff ff1c 	bl	8004e4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	410fc271 	.word	0x410fc271
 8005028:	410fc270 	.word	0x410fc270
 800502c:	e000e400 	.word	0xe000e400
 8005030:	20000d14 	.word	0x20000d14
 8005034:	20000d18 	.word	0x20000d18
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000000c 	.word	0x2000000c
 8005040:	e000ef34 	.word	0xe000ef34

08005044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <vPortEnterCritical+0x58>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <vPortEnterCritical+0x58>)
 8005066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <vPortEnterCritical+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10f      	bne.n	8005090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortEnterCritical+0x5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <vPortEnterCritical+0x4c>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	603b      	str	r3, [r7, #0]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vPortEnterCritical+0x4a>
	}
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <vPortExitCritical+0x50>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <vPortExitCritical+0x24>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <vPortExitCritical+0x50>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <vPortExitCritical+0x50>)
 80050d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <vPortExitCritical+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <vPortExitCritical+0x42>
 80050da:	2300      	movs	r3, #0
 80050dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f383 8811 	msr	BASEPRI, r3
}
 80050e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
	...

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f01e 0f10 	tst.w	lr, #16
 8005110:	bf08      	it	eq
 8005112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005124:	f380 8811 	msr	BASEPRI, r0
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f7fe ffbe 	bl	80040b0 <vTaskSwitchContext>
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f380 8811 	msr	BASEPRI, r0
 800513c:	bc09      	pop	{r0, r3}
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	6808      	ldr	r0, [r1, #0]
 8005142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005146:	f01e 0f10 	tst.w	lr, #16
 800514a:	bf08      	it	eq
 800514c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005150:	f380 8809 	msr	PSP, r0
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst>:
 8005160:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7fe fedb 	bl	8003f3c <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <xPortSysTickHandler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005202:	bf00      	nop
 8005204:	e000ed88 	.word	0xe000ed88

08005208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d914      	bls.n	8005244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <vPortValidateInterruptPriority+0x70>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <vPortValidateInterruptPriority+0x74>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	429a      	cmp	r2, r3
 800522c:	d20a      	bcs.n	8005244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <vPortValidateInterruptPriority+0x78>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <vPortValidateInterruptPriority+0x7c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d90a      	bls.n	800526a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	603b      	str	r3, [r7, #0]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <vPortValidateInterruptPriority+0x60>
	}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e3f0 	.word	0xe000e3f0
 800527c:	20000d14 	.word	0x20000d14
 8005280:	e000ed0c 	.word	0xe000ed0c
 8005284:	20000d18 	.word	0x20000d18

08005288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005294:	f7fe fd96 	bl	8003dc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005298:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <pvPortMalloc+0x180>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052a0:	f000 f920 	bl	80054e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052a4:	4b59      	ldr	r3, [pc, #356]	; (800540c <pvPortMalloc+0x184>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8093 	bne.w	80053d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01d      	beq.n	80052f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052b8:	2208      	movs	r2, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d014      	beq.n	80052f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	3308      	adds	r3, #8
 80052d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <pvPortMalloc+0x6c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	617b      	str	r3, [r7, #20]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d06e      	beq.n	80053d8 <pvPortMalloc+0x150>
 80052fa:	4b45      	ldr	r3, [pc, #276]	; (8005410 <pvPortMalloc+0x188>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d869      	bhi.n	80053d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005304:	4b43      	ldr	r3, [pc, #268]	; (8005414 <pvPortMalloc+0x18c>)
 8005306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005308:	4b42      	ldr	r3, [pc, #264]	; (8005414 <pvPortMalloc+0x18c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530e:	e004      	b.n	800531a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d903      	bls.n	800532c <pvPortMalloc+0xa4>
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f1      	bne.n	8005310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800532c:	4b36      	ldr	r3, [pc, #216]	; (8005408 <pvPortMalloc+0x180>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005332:	429a      	cmp	r2, r3
 8005334:	d050      	beq.n	80053d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2208      	movs	r2, #8
 800533c:	4413      	add	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	2308      	movs	r3, #8
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d91f      	bls.n	8005398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <pvPortMalloc+0xf8>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	613b      	str	r3, [r7, #16]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005392:	69b8      	ldr	r0, [r7, #24]
 8005394:	f000 f908 	bl	80055a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <pvPortMalloc+0x188>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <pvPortMalloc+0x188>)
 80053a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053a6:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <pvPortMalloc+0x188>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <pvPortMalloc+0x190>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d203      	bcs.n	80053ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <pvPortMalloc+0x188>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <pvPortMalloc+0x190>)
 80053b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <pvPortMalloc+0x184>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <pvPortMalloc+0x194>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a11      	ldr	r2, [pc, #68]	; (800541c <pvPortMalloc+0x194>)
 80053d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053d8:	f7fe fd02 	bl	8003de0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <pvPortMalloc+0x174>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <pvPortMalloc+0x172>
	return pvReturn;
 80053fc:	69fb      	ldr	r3, [r7, #28]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20004924 	.word	0x20004924
 800540c:	20004938 	.word	0x20004938
 8005410:	20004928 	.word	0x20004928
 8005414:	2000491c 	.word	0x2000491c
 8005418:	2000492c 	.word	0x2000492c
 800541c:	20004930 	.word	0x20004930

08005420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04d      	beq.n	80054ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005432:	2308      	movs	r3, #8
 8005434:	425b      	negs	r3, r3
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <vPortFree+0xb8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <vPortFree+0x44>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	60fb      	str	r3, [r7, #12]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <vPortFree+0x62>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60bb      	str	r3, [r7, #8]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <vPortFree+0xb8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01e      	beq.n	80054ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11a      	bne.n	80054ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <vPortFree+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a8:	f7fe fc8c 	bl	8003dc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <vPortFree+0xbc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4413      	add	r3, r2
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <vPortFree+0xbc>)
 80054b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ba:	6938      	ldr	r0, [r7, #16]
 80054bc:	f000 f874 	bl	80055a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <vPortFree+0xc0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <vPortFree+0xc0>)
 80054c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054ca:	f7fe fc89 	bl	8003de0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20004938 	.word	0x20004938
 80054dc:	20004928 	.word	0x20004928
 80054e0:	20004934 	.word	0x20004934

080054e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <prvHeapInit+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3307      	adds	r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0307 	bic.w	r3, r3, #7
 800550a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <prvHeapInit+0xac>)
 8005514:	4413      	add	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <prvHeapInit+0xb0>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <prvHeapInit+0xb0>)
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005530:	2208      	movs	r2, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <prvHeapInit+0xb4>)
 8005544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <prvHeapInit+0xb4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvHeapInit+0xb4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvHeapInit+0xb4>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a0a      	ldr	r2, [pc, #40]	; (800559c <prvHeapInit+0xb8>)
 8005572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <prvHeapInit+0xbc>)
 800557a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <prvHeapInit+0xc0>)
 800557e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000d1c 	.word	0x20000d1c
 8005594:	2000491c 	.word	0x2000491c
 8005598:	20004924 	.word	0x20004924
 800559c:	2000492c 	.word	0x2000492c
 80055a0:	20004928 	.word	0x20004928
 80055a4:	20004938 	.word	0x20004938

080055a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055b0:	4b28      	ldr	r3, [pc, #160]	; (8005654 <prvInsertBlockIntoFreeList+0xac>)
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e002      	b.n	80055bc <prvInsertBlockIntoFreeList+0x14>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d8f7      	bhi.n	80055b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4413      	add	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d108      	bne.n	80055ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d118      	bne.n	8005630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <prvInsertBlockIntoFreeList+0xb0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d00d      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e008      	b.n	8005638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <prvInsertBlockIntoFreeList+0xb0>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e003      	b.n	8005638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d002      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000491c 	.word	0x2000491c
 8005658:	20004924 	.word	0x20004924

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4d0d      	ldr	r5, [pc, #52]	; (8005694 <__libc_init_array+0x38>)
 8005660:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <__libc_init_array+0x3c>)
 8005662:	1b64      	subs	r4, r4, r5
 8005664:	10a4      	asrs	r4, r4, #2
 8005666:	2600      	movs	r6, #0
 8005668:	42a6      	cmp	r6, r4
 800566a:	d109      	bne.n	8005680 <__libc_init_array+0x24>
 800566c:	4d0b      	ldr	r5, [pc, #44]	; (800569c <__libc_init_array+0x40>)
 800566e:	4c0c      	ldr	r4, [pc, #48]	; (80056a0 <__libc_init_array+0x44>)
 8005670:	f000 f82e 	bl	80056d0 <_init>
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	2600      	movs	r6, #0
 800567a:	42a6      	cmp	r6, r4
 800567c:	d105      	bne.n	800568a <__libc_init_array+0x2e>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	f855 3b04 	ldr.w	r3, [r5], #4
 8005684:	4798      	blx	r3
 8005686:	3601      	adds	r6, #1
 8005688:	e7ee      	b.n	8005668 <__libc_init_array+0xc>
 800568a:	f855 3b04 	ldr.w	r3, [r5], #4
 800568e:	4798      	blx	r3
 8005690:	3601      	adds	r6, #1
 8005692:	e7f2      	b.n	800567a <__libc_init_array+0x1e>
 8005694:	08005750 	.word	0x08005750
 8005698:	08005750 	.word	0x08005750
 800569c:	08005750 	.word	0x08005750
 80056a0:	08005754 	.word	0x08005754

080056a4 <memcpy>:
 80056a4:	440a      	add	r2, r1
 80056a6:	4291      	cmp	r1, r2
 80056a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056ac:	d100      	bne.n	80056b0 <memcpy+0xc>
 80056ae:	4770      	bx	lr
 80056b0:	b510      	push	{r4, lr}
 80056b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ba:	4291      	cmp	r1, r2
 80056bc:	d1f9      	bne.n	80056b2 <memcpy+0xe>
 80056be:	bd10      	pop	{r4, pc}

080056c0 <memset>:
 80056c0:	4402      	add	r2, r0
 80056c2:	4603      	mov	r3, r0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	f803 1b01 	strb.w	r1, [r3], #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <_init>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr

080056dc <_fini>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

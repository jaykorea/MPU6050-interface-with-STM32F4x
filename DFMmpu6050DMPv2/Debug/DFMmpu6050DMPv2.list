
DFMmpu6050DMPv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006d78  08006d78  00016d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  08007388  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007388  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001772d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293f  00000000  00000000  00037939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0003a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0003acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b393  00000000  00000000  0003b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe44  00000000  00000000  00056a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8c9  00000000  00000000  0006688f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  000f41ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d5c 	.word	0x08006d5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006d5c 	.word	0x08006d5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <__io_putchar+0x20>)
 8000ec2:	f002 fef0 	bl	8003ca6 <HAL_UART_Transmit>

    return ch;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000290 	.word	0x20000290

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_GPIO_Init+0xd0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f60:	f001 f902 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0xd8>)
 8000f7c:	f000 ff70 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f80:	2320      	movs	r3, #32
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f98:	f000 ff62 	bl	8001e60 <HAL_GPIO_Init>

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020800 	.word	0x40020800

08000fb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MX_I2C1_Init+0x54>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_I2C1_Init+0x58>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fee:	f001 f8d5 	bl	800219c <HAL_I2C_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff8:	f000 f98e 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000023c 	.word	0x2000023c
 8001004:	40005400 	.word	0x40005400
 8001008:	00061a80 	.word	0x00061a80

0800100c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x8c>)
 8001066:	f000 fefb 	bl	8001e60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_I2C_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <_Z19IMU_data_processingv>:
	}
/* Define pointer for output data from Kalman Filter */
float kal_a_z, kal_a_x, kal_a_y, kal_g_x, kal_g_y, kal_g_z;
/* Get data from MPU6050, filter with kalman and send them to Pi*/
void IMU_data_processing()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
		SD_MPU6050_Result result ;
		result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_4G,SD_MPU6050_Gyroscope_250s );
 80010a2:	2300      	movs	r3, #0
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	2200      	movs	r2, #0
 80010aa:	494c      	ldr	r1, [pc, #304]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 80010ac:	484c      	ldr	r0, [pc, #304]	; (80011e0 <_Z19IMU_data_processingv+0x144>)
 80010ae:	f000 f938 	bl	8001322 <SD_MPU6050_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(100);
 80010b6:	2064      	movs	r0, #100	; 0x64
 80010b8:	f000 fdc8 	bl	8001c4c <HAL_Delay>
		if(result == SD_MPU6050_Result_Ok)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <_Z19IMU_data_processingv+0x2e>
	  {
		  printf("\n mpu_ok \n");
 80010c2:	4848      	ldr	r0, [pc, #288]	; (80011e4 <_Z19IMU_data_processingv+0x148>)
 80010c4:	f003 fdda 	bl	8004c7c <puts>
 80010c8:	e002      	b.n	80010d0 <_Z19IMU_data_processingv+0x34>
	  }
	  else
	  {
		  printf("\n mpu_not_ok \n");
 80010ca:	4847      	ldr	r0, [pc, #284]	; (80011e8 <_Z19IMU_data_processingv+0x14c>)
 80010cc:	f003 fdd6 	bl	8004c7c <puts>
	  }
	  HAL_Delay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fdbb 	bl	8001c4c <HAL_Delay>
	  SD_MPU6050_ReadTemperature(&hi2c1,&mpu1);
 80010d6:	4941      	ldr	r1, [pc, #260]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 80010d8:	4841      	ldr	r0, [pc, #260]	; (80011e0 <_Z19IMU_data_processingv+0x144>)
 80010da:	f000 fb33 	bl	8001744 <SD_MPU6050_ReadTemperature>
	  temper = mpu1.Temperature;
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <_Z19IMU_data_processingv+0x150>)
 80010e4:	6013      	str	r3, [r2, #0]
	  SD_MPU6050_ReadGyroscope(&hi2c1,&mpu1);
 80010e6:	493d      	ldr	r1, [pc, #244]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 80010e8:	483d      	ldr	r0, [pc, #244]	; (80011e0 <_Z19IMU_data_processingv+0x144>)
 80010ea:	f000 fae1 	bl	80016b0 <SD_MPU6050_ReadGyroscope>
	  g_x = mpu1.Gyroscope_X;
 80010ee:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 80010f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <_Z19IMU_data_processingv+0x154>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	  g_y = mpu1.Gyroscope_Y;
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 8001104:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <_Z19IMU_data_processingv+0x158>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
	  g_z = mpu1.Gyroscope_Z;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 8001118:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <_Z19IMU_data_processingv+0x15c>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE BEGIN 3 */
	  SD_MPU6050_ReadAccelerometer(&hi2c1,&mpu1);
 800112a:	492c      	ldr	r1, [pc, #176]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <_Z19IMU_data_processingv+0x144>)
 800112e:	f000 fa75 	bl	800161c <SD_MPU6050_ReadAccelerometer>
	  a_x = mpu1.Accelerometer_X;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 8001134:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <_Z19IMU_data_processingv+0x160>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
	  a_y = mpu1.Accelerometer_Y;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 8001148:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <_Z19IMU_data_processingv+0x164>)
 8001156:	edc3 7a00 	vstr	s15, [r3]
	  a_z = mpu1.Accelerometer_Z;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <_Z19IMU_data_processingv+0x140>)
 800115c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <_Z19IMU_data_processingv+0x168>)
 800116a:	edc3 7a00 	vstr	s15, [r3]
	  printf("Accel \r\n");
 800116e:	4826      	ldr	r0, [pc, #152]	; (8001208 <_Z19IMU_data_processingv+0x16c>)
 8001170:	f003 fd84 	bl	8004c7c <puts>
	  printf("%.2f\r\n", a_x / 16384);
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <_Z19IMU_data_processingv+0x160>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800120c <_Z19IMU_data_processingv+0x170>
 800117e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001182:	ee16 0a90 	vmov	r0, s13
 8001186:	f7ff f9e7 	bl	8000558 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4820      	ldr	r0, [pc, #128]	; (8001210 <_Z19IMU_data_processingv+0x174>)
 8001190:	f003 fcee 	bl	8004b70 <iprintf>
	  printf("%.2f\r\n", a_y / 16384);
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <_Z19IMU_data_processingv+0x164>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800120c <_Z19IMU_data_processingv+0x170>
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9d7 	bl	8000558 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <_Z19IMU_data_processingv+0x174>)
 80011b0:	f003 fcde 	bl	8004b70 <iprintf>
	  printf("%.2f\r\n", a_z / 16384);
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_Z19IMU_data_processingv+0x168>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800120c <_Z19IMU_data_processingv+0x170>
 80011be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011c2:	ee16 0a90 	vmov	r0, s13
 80011c6:	f7ff f9c7 	bl	8000558 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <_Z19IMU_data_processingv+0x174>)
 80011d0:	f003 fcce 	bl	8004b70 <iprintf>
//		printf("Kalman GYRO \r\n");
//		printf("%f\r\n", kal_g_x);
//		printf("%f\r\n", kal_g_y);
//		printf("%f\r\n", kal_g_z);
		/* Send data to Raspberry Pi via UART 1*/
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001f8 	.word	0x200001f8
 80011e0:	2000023c 	.word	0x2000023c
 80011e4:	08006d78 	.word	0x08006d78
 80011e8:	08006d84 	.word	0x08006d84
 80011ec:	20000214 	.word	0x20000214
 80011f0:	20000224 	.word	0x20000224
 80011f4:	20000228 	.word	0x20000228
 80011f8:	2000022c 	.word	0x2000022c
 80011fc:	20000218 	.word	0x20000218
 8001200:	2000021c 	.word	0x2000021c
 8001204:	20000220 	.word	0x20000220
 8001208:	08006d94 	.word	0x08006d94
 800120c:	46800000 	.word	0x46800000
 8001210:	08006d9c 	.word	0x08006d9c

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001218:	f000 fca6 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121c:	f000 f80a 	bl	8001234 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001220:	f7ff fe58 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001224:	f000 fc04 	bl	8001a30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001228:	f7ff fec2 	bl	8000fb0 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		IMU_data_processing();
 800122c:	f7ff ff36 	bl	800109c <_Z19IMU_data_processingv>
 8001230:	e7fc      	b.n	800122c <main+0x18>
	...

08001234 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f822 	bl	800428c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <_Z18SystemClock_Configv+0xdc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <_Z18SystemClock_Configv+0xdc>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <_Z18SystemClock_Configv+0xdc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <_Z18SystemClock_Configv+0xe0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <_Z18SystemClock_Configv+0xe0>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <_Z18SystemClock_Configv+0xe0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	2301      	movs	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001294:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a4:	2304      	movs	r3, #4
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f833 	bl	8003324 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80012ce:	f000 f823 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2103      	movs	r1, #3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fa90 	bl	8003814 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001304:	f000 f808 	bl	8001318 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>

08001322 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b08a      	sub	sp, #40	; 0x28
 8001326:	af02      	add	r7, sp, #8
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	4611      	mov	r1, r2
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001338:	2375      	movs	r3, #117	; 0x75
 800133a:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001346:	b2da      	uxtb	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001352:	7efb      	ldrb	r3, [r7, #27]
 8001354:	b299      	uxth	r1, r3
 8001356:	2305      	movs	r3, #5
 8001358:	2202      	movs	r2, #2
 800135a:	69f8      	ldr	r0, [r7, #28]
 800135c:	f001 fb86 	bl	8002a6c <HAL_I2C_IsDeviceReady>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001366:	2301      	movs	r3, #1
 8001368:	e04c      	b.n	8001404 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 800136a:	7efb      	ldrb	r3, [r7, #27]
 800136c:	b299      	uxth	r1, r3
 800136e:	f107 021a 	add.w	r2, r7, #26
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	69f8      	ldr	r0, [r7, #28]
 800137c:	f001 f852 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001386:	2301      	movs	r3, #1
 8001388:	e03c      	b.n	8001404 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	b299      	uxth	r1, r3
 800138e:	f107 0219 	add.w	r2, r7, #25
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	69f8      	ldr	r0, [r7, #28]
 800139c:	f001 f940 	bl	8002620 <HAL_I2C_Master_Receive>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e02c      	b.n	8001404 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e02a      	b.n	8001404 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 80013ae:	bf00      	nop
 80013b0:	7e7b      	ldrb	r3, [r7, #25]
 80013b2:	2b68      	cmp	r3, #104	; 0x68
 80013b4:	d1f9      	bne.n	80013aa <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 80013b6:	236b      	movs	r3, #107	; 0x6b
 80013b8:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80013be:	7efb      	ldrb	r3, [r7, #27]
 80013c0:	b299      	uxth	r1, r3
 80013c2:	f107 0214 	add.w	r2, r7, #20
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	69f8      	ldr	r0, [r7, #28]
 80013d0:	f001 f828 	bl	8002424 <HAL_I2C_Master_Transmit>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 80013da:	2301      	movs	r3, #1
 80013dc:	e012      	b.n	8001404 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 80013de:	2207      	movs	r2, #7
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f812 	bl	800140c <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f830 	bl	8001454 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80013f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f8:	461a      	mov	r2, r3
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f899 	bl	8001534 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	4613      	mov	r3, r2
 8001418:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001424:	2319      	movs	r3, #25
 8001426:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 800142c:	bf00      	nop
 800142e:	7cfb      	ldrb	r3, [r7, #19]
 8001430:	b299      	uxth	r1, r3
 8001432:	f107 0210 	add.w	r2, r7, #16
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f000 fff0 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f1      	bne.n	800142e <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800146c:	231c      	movs	r3, #28
 800146e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001470:	bf00      	nop
 8001472:	7cfb      	ldrb	r3, [r7, #19]
 8001474:	b299      	uxth	r1, r3
 8001476:	f107 0211 	add.w	r2, r7, #17
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f000 ffce 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f1      	bne.n	8001472 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800148e:	bf00      	nop
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	b299      	uxth	r1, r3
 8001494:	f107 0212 	add.w	r2, r7, #18
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	6978      	ldr	r0, [r7, #20]
 80014a2:	f001 f8bd 	bl	8002620 <HAL_I2C_Master_Receive>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f1      	bne.n	8001490 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80014ac:	7cbb      	ldrb	r3, [r7, #18]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	f023 0318 	bic.w	r3, r3, #24
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80014c4:	bf00      	nop
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	b299      	uxth	r1, r3
 80014ca:	f107 0212 	add.w	r2, r7, #18
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2301      	movs	r3, #1
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f000 ffa4 	bl	8002424 <HAL_I2C_Master_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f1      	bne.n	80014c6 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d81f      	bhi.n	8001528 <SD_MPU6050_SetAccelerometer+0xd4>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <SD_MPU6050_SetAccelerometer+0x9c>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	0800150b 	.word	0x0800150b
 80014f8:	08001515 	.word	0x08001515
 80014fc:	0800151f 	.word	0x0800151f
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001506:	609a      	str	r2, [r3, #8]
			break;
 8001508:	e00f      	b.n	800152a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001510:	609a      	str	r2, [r3, #8]
			break;
 8001512:	e00a      	b.n	800152a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800151a:	609a      	str	r2, [r3, #8]
			break;
 800151c:	e005      	b.n	800152a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001524:	609a      	str	r2, [r3, #8]
			break;
 8001526:	e000      	b.n	800152a <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8001528:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	4613      	mov	r3, r2
 8001540:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800154c:	231b      	movs	r3, #27
 800154e:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001550:	bf00      	nop
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	b299      	uxth	r1, r3
 8001556:	f107 0211 	add.w	r2, r7, #17
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f000 ff5e 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f1      	bne.n	8001552 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800156e:	bf00      	nop
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	b299      	uxth	r1, r3
 8001574:	f107 0212 	add.w	r2, r7, #18
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f001 f84d 	bl	8002620 <HAL_I2C_Master_Receive>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f1      	bne.n	8001570 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800158c:	7cbb      	ldrb	r3, [r7, #18]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	f023 0318 	bic.w	r3, r3, #24
 8001594:	b25a      	sxtb	r2, r3
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	b25b      	sxtb	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80015a4:	bf00      	nop
 80015a6:	7cfb      	ldrb	r3, [r7, #19]
 80015a8:	b299      	uxth	r1, r3
 80015aa:	f107 0212 	add.w	r2, r7, #18
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f000 ff34 	bl	8002424 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f1      	bne.n	80015a6 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d81b      	bhi.n	8001600 <SD_MPU6050_SetGyroscope+0xcc>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <SD_MPU6050_SetGyroscope+0x9c>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015e9 	.word	0x080015e9
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	080015f9 	.word	0x080015f9
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SD_MPU6050_SetGyroscope+0xd8>)
 80015e4:	605a      	str	r2, [r3, #4]
				break;
 80015e6:	e00c      	b.n	8001602 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <SD_MPU6050_SetGyroscope+0xdc>)
 80015ec:	605a      	str	r2, [r3, #4]
				break;
 80015ee:	e008      	b.n	8001602 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <SD_MPU6050_SetGyroscope+0xe0>)
 80015f4:	605a      	str	r2, [r3, #4]
				break;
 80015f6:	e004      	b.n	8001602 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <SD_MPU6050_SetGyroscope+0xe4>)
 80015fc:	605a      	str	r2, [r3, #4]
				break;
 80015fe:	e000      	b.n	8001602 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8001600:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	3bfa232d 	.word	0x3bfa232d
 8001610:	3c7a232d 	.word	0x3c7a232d
 8001614:	3cf9c190 	.word	0x3cf9c190
 8001618:	3d79c190 	.word	0x3d79c190

0800161c <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af02      	add	r7, sp, #8
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8001626:	233b      	movs	r3, #59	; 0x3b
 8001628:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001634:	bf00      	nop
 8001636:	7cfb      	ldrb	r3, [r7, #19]
 8001638:	b299      	uxth	r1, r3
 800163a:	f107 020b 	add.w	r2, r7, #11
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f000 feec 	bl	8002424 <HAL_I2C_Master_Transmit>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f1      	bne.n	8001636 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001652:	bf00      	nop
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	b299      	uxth	r1, r3
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2306      	movs	r3, #6
 8001664:	6978      	ldr	r0, [r7, #20]
 8001666:	f000 ffdb 	bl	8002620 <HAL_I2C_Master_Receive>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f1      	bne.n	8001654 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8001670:	7b3b      	ldrb	r3, [r7, #12]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	7b7b      	ldrb	r3, [r7, #13]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7c7b      	ldrb	r3, [r7, #17]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80016ba:	2343      	movs	r3, #67	; 0x43
 80016bc:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80016c8:	bf00      	nop
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	b299      	uxth	r1, r3
 80016ce:	f107 020b 	add.w	r2, r7, #11
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f000 fea2 	bl	8002424 <HAL_I2C_Master_Transmit>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f1      	bne.n	80016ca <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80016e6:	bf00      	nop
 80016e8:	7cfb      	ldrb	r3, [r7, #19]
 80016ea:	b299      	uxth	r1, r3
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2306      	movs	r3, #6
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f000 ff91 	bl	8002620 <HAL_I2C_Master_Receive>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f1      	bne.n	80016e8 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	7b7b      	ldrb	r3, [r7, #13]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21a      	sxth	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21a      	sxth	r2, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	7c7b      	ldrb	r3, [r7, #17]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <SD_MPU6050_ReadTemperature>:
SD_MPU6050_Result SD_MPU6050_ReadTemperature(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;
	uint8_t reg = MPU6050_TEMP_OUT_H;
 800174e:	2341      	movs	r3, #65	; 0x41
 8001750:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	74fb      	strb	r3, [r7, #19]

	/* Read temperature */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 800175c:	bf00      	nop
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	b299      	uxth	r1, r3
 8001762:	f107 020b 	add.w	r2, r7, #11
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f000 fe58 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f1      	bne.n	800175e <SD_MPU6050_ReadTemperature+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 2, 1000) != HAL_OK);
 800177a:	bf00      	nop
 800177c:	7cfb      	ldrb	r3, [r7, #19]
 800177e:	b299      	uxth	r1, r3
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f000 ff47 	bl	8002620 <HAL_I2C_Master_Receive>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f1      	bne.n	800177c <SD_MPU6050_ReadTemperature+0x38>

	/* Format temperature */
	temp = (data[0] << 8 | data[1]);
 8001798:	7b3b      	ldrb	r3, [r7, #12]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	7b7b      	ldrb	r3, [r7, #13]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	823b      	strh	r3, [r7, #16]
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80017a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80017d4 <SD_MPU6050_ReadTemperature+0x90>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80017d8 <SD_MPU6050_ReadTemperature+0x94>
 80017be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	43aa0000 	.word	0x43aa0000
 80017d8:	42121eb8 	.word	0x42121eb8

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 faec 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f9c8 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_kill>:

int _kill(int pid, int sig)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800189a:	f002 fccd 	bl	8004238 <__errno>
 800189e:	4603      	mov	r3, r0
 80018a0:	2216      	movs	r2, #22
 80018a2:	601a      	str	r2, [r3, #0]
	return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_exit>:

void _exit (int status)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ffe7 	bl	8001890 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018c2:	e7fe      	b.n	80018c2 <_exit+0x12>

080018c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e00a      	b.n	80018ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d6:	f3af 8000 	nop.w
 80018da:	4601      	mov	r1, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60ba      	str	r2, [r7, #8]
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbf0      	blt.n	80018d6 <_read+0x12>
	}

return len;
 80018f4:	687b      	ldr	r3, [r7, #4]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e009      	b.n	8001924 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fac9 	bl	8000eb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf1      	blt.n	8001910 <_write+0x12>
	}
	return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_close>:

int _close(int file)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return -1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195e:	605a      	str	r2, [r3, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f002 fc32 	bl	8004238 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20020000 	.word	0x20020000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	20000230 	.word	0x20000230
 8001a08:	200002e8 	.word	0x200002e8

08001a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART2_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART2_UART_Init+0x4c>)
 8001a68:	f002 f8d0 	bl	8003c0c <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f7ff fc51 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000290 	.word	0x20000290
 8001a80:	40004400 	.word	0x40004400

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_UART_MspInit+0x84>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_UART_MspInit+0x88>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ade:	230c      	movs	r3, #12
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aee:	2307      	movs	r3, #7
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_UART_MspInit+0x8c>)
 8001afa:	f000 f9b1 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1a:	490e      	ldr	r1, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b30:	4c0b      	ldr	r4, [pc, #44]	; (8001b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b3e:	f7ff ff65 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b42:	f002 fb7f 	bl	8004244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fb65 	bl	8001214 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b58:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 8001b5c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b60:	200002e8 	.word	0x200002e8

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f931 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fe1e 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f93b 	bl	8001e46 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f911 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200002d4 	.word	0x200002d4

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200002d4 	.word	0x200002d4

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff47 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff5c 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffb0 	bl	8001db4 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e159      	b.n	8002130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8148 	bne.w	800212a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a2 	beq.w	800212a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b54      	ldr	r3, [pc, #336]	; (8002148 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_GPIO_Init+0x2ec>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a49      	ldr	r2, [pc, #292]	; (8002150 <HAL_GPIO_Init+0x2f0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x202>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2f4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x1fe>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a47      	ldr	r2, [pc, #284]	; (8002158 <HAL_GPIO_Init+0x2f8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x1fa>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_GPIO_Init+0x2fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x1f6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a45      	ldr	r2, [pc, #276]	; (8002160 <HAL_GPIO_Init+0x300>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x1f2>
 800204e:	2304      	movs	r3, #4
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002052:	2307      	movs	r3, #7
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x204>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x204>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x204>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_GPIO_Init+0x2ec>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_GPIO_Init+0x304>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f aea2 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e12b      	b.n	8002406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe ff22 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2224      	movs	r2, #36	; 0x24
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002200:	f001 fcdc 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8002204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a81      	ldr	r2, [pc, #516]	; (8002410 <HAL_I2C_Init+0x274>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d807      	bhi.n	8002220 <HAL_I2C_Init+0x84>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a80      	ldr	r2, [pc, #512]	; (8002414 <HAL_I2C_Init+0x278>)
 8002214:	4293      	cmp	r3, r2
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e006      	b.n	800222e <HAL_I2C_Init+0x92>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a7d      	ldr	r2, [pc, #500]	; (8002418 <HAL_I2C_Init+0x27c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0e7      	b.n	8002406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a78      	ldr	r2, [pc, #480]	; (800241c <HAL_I2C_Init+0x280>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9b      	lsrs	r3, r3, #18
 8002240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a6a      	ldr	r2, [pc, #424]	; (8002410 <HAL_I2C_Init+0x274>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d802      	bhi.n	8002270 <HAL_I2C_Init+0xd4>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	e009      	b.n	8002284 <HAL_I2C_Init+0xe8>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_I2C_Init+0x284>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	3301      	adds	r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	495c      	ldr	r1, [pc, #368]	; (8002410 <HAL_I2C_Init+0x274>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d819      	bhi.n	80022d8 <HAL_I2C_Init+0x13c>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e59      	subs	r1, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b2:	1c59      	adds	r1, r3, #1
 80022b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022b8:	400b      	ands	r3, r1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_I2C_Init+0x138>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e59      	subs	r1, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d2:	e051      	b.n	8002378 <HAL_I2C_Init+0x1dc>
 80022d4:	2304      	movs	r3, #4
 80022d6:	e04f      	b.n	8002378 <HAL_I2C_Init+0x1dc>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d111      	bne.n	8002304 <HAL_I2C_Init+0x168>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e58      	subs	r0, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	e012      	b.n	800232a <HAL_I2C_Init+0x18e>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e58      	subs	r0, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	0099      	lsls	r1, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x196>
 800232e:	2301      	movs	r3, #1
 8002330:	e022      	b.n	8002378 <HAL_I2C_Init+0x1dc>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10e      	bne.n	8002358 <HAL_I2C_Init+0x1bc>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e58      	subs	r0, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	440b      	add	r3, r1
 8002348:	fbb0 f3f3 	udiv	r3, r0, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002356:	e00f      	b.n	8002378 <HAL_I2C_Init+0x1dc>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	0099      	lsls	r1, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	6809      	ldr	r1, [r1, #0]
 800237c:	4313      	orrs	r3, r2
 800237e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6911      	ldr	r1, [r2, #16]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68d2      	ldr	r2, [r2, #12]
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	000186a0 	.word	0x000186a0
 8002414:	001e847f 	.word	0x001e847f
 8002418:	003d08ff 	.word	0x003d08ff
 800241c:	431bde83 	.word	0x431bde83
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	817b      	strh	r3, [r7, #10]
 8002434:	4613      	mov	r3, r2
 8002436:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fbfc 	bl	8001c34 <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	f040 80e0 	bne.w	800260c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2319      	movs	r3, #25
 8002452:	2201      	movs	r2, #1
 8002454:	4970      	ldr	r1, [pc, #448]	; (8002618 <HAL_I2C_Master_Transmit+0x1f4>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fd86 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
 8002464:	e0d3      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_I2C_Master_Transmit+0x50>
 8002470:	2302      	movs	r3, #2
 8002472:	e0cc      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d007      	beq.n	800249a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2221      	movs	r2, #33	; 0x21
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2210      	movs	r2, #16
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_I2C_Master_Transmit+0x1f8>)
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fbf0 	bl	8002cc8 <I2C_MasterRequestWrite>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e08d      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002508:	e066      	b.n	80025d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fe00 	bl	8003114 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_I2C_Master_Transmit+0x188>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fdf0 	bl	8003196 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d107      	bne.n	80025d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e01a      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d194      	bne.n	800250a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	; 0x30
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
 8002630:	4613      	mov	r3, r2
 8002632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fafe 	bl	8001c34 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 820b 	bne.w	8002a5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	497c      	ldr	r1, [pc, #496]	; (8002844 <HAL_I2C_Master_Receive+0x224>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fc88 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	e1fe      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_Master_Receive+0x50>
 800266c:	2302      	movs	r3, #2
 800266e:	e1f7      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d007      	beq.n	8002696 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2222      	movs	r2, #34	; 0x22
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2210      	movs	r2, #16
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a5c      	ldr	r2, [pc, #368]	; (8002848 <HAL_I2C_Master_Receive+0x228>)
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fb74 	bl	8002dcc <I2C_MasterRequestRead>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1b8      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d113      	bne.n	800271e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e18c      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11b      	bne.n	800275e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e16c      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	2b02      	cmp	r3, #2
 8002764:	d11b      	bne.n	800279e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	e14c      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c4:	e138      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	f200 80f1 	bhi.w	80029b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d123      	bne.n	8002820 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fd1b 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e139      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800281e:	e10b      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b02      	cmp	r3, #2
 8002826:	d14e      	bne.n	80028c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	2200      	movs	r2, #0
 8002830:	4906      	ldr	r1, [pc, #24]	; (800284c <HAL_I2C_Master_Receive+0x22c>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fb98 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e10e      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
 8002842:	bf00      	nop
 8002844:	00100002 	.word	0x00100002
 8002848:	ffff0000 	.word	0xffff0000
 800284c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c4:	e0b8      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	2200      	movs	r2, #0
 80028ce:	4966      	ldr	r1, [pc, #408]	; (8002a68 <HAL_I2C_Master_Receive+0x448>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb49 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0bf      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	2200      	movs	r2, #0
 800292a:	494f      	ldr	r1, [pc, #316]	; (8002a68 <HAL_I2C_Master_Receive+0x448>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb1b 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e091      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b0:	e042      	b.n	8002a38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fc2e 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e04c      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d118      	bne.n	8002a38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f aec2 	bne.w	80027c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010004 	.word	0x00010004

08002a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff f8da 	bl	8001c34 <HAL_GetTick>
 8002a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	f040 8111 	bne.w	8002cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2319      	movs	r3, #25
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4988      	ldr	r1, [pc, #544]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa62 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e104      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_I2C_IsDeviceReady+0x50>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0fd      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d007      	beq.n	8002ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2224      	movs	r2, #36	; 0x24
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa20 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d103      	bne.n	8002b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0b6      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f86b 	bl	8001c34 <HAL_GetTick>
 8002b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b8e:	e025      	b.n	8002bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7ff f850 	bl	8001c34 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22a0      	movs	r2, #160	; 0xa0
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2ba0      	cmp	r3, #160	; 0xa0
 8002be6:	d005      	beq.n	8002bf4 <HAL_I2C_IsDeviceReady+0x188>
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_I2C_IsDeviceReady+0x188>
 8002bee:	7dbb      	ldrb	r3, [r7, #22]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0cd      	beq.n	8002b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d129      	bne.n	8002c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2319      	movs	r3, #25
 8002c36:	2201      	movs	r2, #1
 8002c38:	4921      	ldr	r1, [pc, #132]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f994 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e036      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e02c      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	490f      	ldr	r1, [pc, #60]	; (8002cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f970 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e012      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f4ff af32 	bcc.w	8002b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d006      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e00b      	b.n	8002d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d107      	bne.n	8002d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f91d 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d42:	d103      	bne.n	8002d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e035      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e01b      	b.n	8002da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	11db      	asrs	r3, r3, #7
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f063 030f 	orn	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <I2C_MasterRequestWrite+0xfc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f943 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e010      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <I2C_MasterRequestWrite+0x100>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f933 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010008 	.word	0x00010008
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d006      	beq.n	8002e06 <I2C_MasterRequestRead+0x3a>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d003      	beq.n	8002e06 <I2C_MasterRequestRead+0x3a>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e04:	d108      	bne.n	8002e18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e00b      	b.n	8002e30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b11      	cmp	r3, #17
 8002e1e:	d107      	bne.n	8002e30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f893 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	d103      	bne.n	8002e60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e079      	b.n	8002f58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e6c:	d108      	bne.n	8002e80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e05f      	b.n	8002f40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	11db      	asrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0306 	and.w	r3, r3, #6
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f063 030f 	orn	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4930      	ldr	r1, [pc, #192]	; (8002f60 <I2C_MasterRequestRead+0x194>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8b9 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e054      	b.n	8002f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4929      	ldr	r1, [pc, #164]	; (8002f64 <I2C_MasterRequestRead+0x198>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f8a9 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e044      	b.n	8002f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f831 	bl	8002f68 <I2C_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00d      	beq.n	8002f28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d103      	bne.n	8002f24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e017      	b.n	8002f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	11db      	asrs	r3, r3, #7
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0306 	and.w	r3, r3, #6
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f063 030e 	orn	r3, r3, #14
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <I2C_MasterRequestRead+0x198>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f865 	bl	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	00010008 	.word	0x00010008
 8002f64:	00010002 	.word	0x00010002

08002f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	e025      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d021      	beq.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fe57 	bl	8001c34 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e023      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10d      	bne.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	e00c      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d0b6      	beq.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003024:	e051      	b.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d123      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800304e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e046      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d021      	beq.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe fdd5 	bl	8001c34 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e020      	b.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e00b      	b.n	8003106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d18d      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003120:	e02d      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8ce 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02d      	b.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d021      	beq.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fe fd7b 	bl	8001c34 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b80      	cmp	r3, #128	; 0x80
 800318a:	d1ca      	bne.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f88d 	bl	80032c4 <I2C_IsAcknowledgeFailed>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e02d      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d021      	beq.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fe fd3a 	bl	8001c34 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d1ca      	bne.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003224:	e042      	b.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d119      	bne.n	8003268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e029      	b.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7fe fce4 	bl	8001c34 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d1b5      	bne.n	8003226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d11b      	bne.n	8003314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e264      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	4ba3      	ldr	r3, [pc, #652]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4ba0      	ldr	r3, [pc, #640]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d112      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b9d      	ldr	r3, [pc, #628]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b99      	ldr	r3, [pc, #612]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e23f      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b91      	ldr	r3, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a90      	ldr	r2, [pc, #576]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a8a      	ldr	r2, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a83      	ldr	r2, [pc, #524]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fc2a 	bl	8001c34 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fc26 	bl	8001c34 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e204      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fc16 	bl	8001c34 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe fc12 	bl	8001c34 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1f0      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d063      	beq.n	8003502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b62      	ldr	r3, [pc, #392]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1c4      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4952      	ldr	r1, [pc, #328]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <HAL_RCC_OscConfig+0x2b0>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe fbcb 	bl	8001c34 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fe fbc7 	bl	8001c34 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1a5      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4940      	ldr	r1, [pc, #256]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_OscConfig+0x2b0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fbaa 	bl	8001c34 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fe fba6 	bl	8001c34 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e184      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d030      	beq.n	8003570 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_RCC_OscConfig+0x2b4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fb8a 	bl	8001c34 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe fb86 	bl	8001c34 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e164      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
 8003542:	e015      	b.n	8003570 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x2b4>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fe fb73 	bl	8001c34 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003552:	f7fe fb6f 	bl	8001c34 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e14d      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a0 	beq.w	80036be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x2b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d121      	bne.n	80035fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_RCC_OscConfig+0x2b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_RCC_OscConfig+0x2b8>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fb35 	bl	8001c34 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e011      	b.n	80035f2 <HAL_RCC_OscConfig+0x2ce>
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	42470000 	.word	0x42470000
 80035d8:	42470e80 	.word	0x42470e80
 80035dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e0:	f7fe fb28 	bl	8001c34 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e106      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b85      	ldr	r3, [pc, #532]	; (8003808 <HAL_RCC_OscConfig+0x4e4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x2f0>
 8003606:	4b81      	ldr	r3, [pc, #516]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a80      	ldr	r2, [pc, #512]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e01c      	b.n	800364e <HAL_RCC_OscConfig+0x32a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d10c      	bne.n	8003636 <HAL_RCC_OscConfig+0x312>
 800361c:	4b7b      	ldr	r3, [pc, #492]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a7a      	ldr	r2, [pc, #488]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	4b78      	ldr	r3, [pc, #480]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a77      	ldr	r2, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x32a>
 8003636:	4b75      	ldr	r3, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a74      	ldr	r2, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	4b72      	ldr	r3, [pc, #456]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a71      	ldr	r2, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe faed 	bl	8001c34 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fe fae9 	bl	8001c34 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0c5      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ee      	beq.n	800365e <HAL_RCC_OscConfig+0x33a>
 8003680:	e014      	b.n	80036ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003682:	f7fe fad7 	bl	8001c34 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fe fad3 	bl	8001c34 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0af      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	4b5a      	ldr	r3, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ee      	bne.n	800368a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a55      	ldr	r2, [pc, #340]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 809b 	beq.w	80037fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d05c      	beq.n	800378e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d141      	bne.n	8003760 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b4c      	ldr	r3, [pc, #304]	; (8003810 <HAL_RCC_OscConfig+0x4ec>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fe faa7 	bl	8001c34 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fe faa3 	bl	8001c34 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e081      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	019b      	lsls	r3, r3, #6
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	3b01      	subs	r3, #1
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	4937      	ldr	r1, [pc, #220]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x4ec>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe fa7c 	bl	8001c34 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe fa78 	bl	8001c34 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e056      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x41c>
 800375e:	e04e      	b.n	80037fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe fa65 	bl	8001c34 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe fa61 	bl	8001c34 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e03f      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x44a>
 800378c:	e037      	b.n	80037fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e032      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <HAL_RCC_OscConfig+0x4e8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d028      	beq.n	80037fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d121      	bne.n	80037fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d11a      	bne.n	80037fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ca:	4013      	ands	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d111      	bne.n	80037fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	3b01      	subs	r3, #1
 80037e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40007000 	.word	0x40007000
 800380c:	40023800 	.word	0x40023800
 8003810:	42470060 	.word	0x42470060

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe f996 	bl	8001c34 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fe f992 	bl	8001c34 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f8f6 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08006da4 	.word	0x08006da4
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	2300      	movs	r3, #0
 80039f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80bd 	bhi.w	8003b84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e0b7      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a16:	60bb      	str	r3, [r7, #8]
       break;
 8003a18:	e0b7      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a1c:	60bb      	str	r3, [r7, #8]
      break;
 8003a1e:	e0b4      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04d      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	ea02 0800 	and.w	r8, r2, r0
 8003a4e:	ea03 0901 	and.w	r9, r3, r1
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	014b      	lsls	r3, r1, #5
 8003a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a64:	0142      	lsls	r2, r0, #5
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a6e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a80:	0182      	lsls	r2, r0, #6
 8003a82:	1a12      	subs	r2, r2, r0
 8003a84:	eb63 0301 	sbc.w	r3, r3, r1
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	00d9      	lsls	r1, r3, #3
 8003a92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a96:	00d0      	lsls	r0, r2, #3
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	eb12 0208 	adds.w	r2, r2, r8
 8003aa0:	eb43 0309 	adc.w	r3, r3, r9
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0259      	lsls	r1, r3, #9
 8003aae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ab2:	0250      	lsls	r0, r2, #9
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f7fd f878 	bl	8000bb8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e04a      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	ea02 0400 	and.w	r4, r2, r0
 8003aea:	ea03 0501 	and.w	r5, r3, r1
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	014b      	lsls	r3, r1, #5
 8003afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b00:	0142      	lsls	r2, r0, #5
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	1b00      	subs	r0, r0, r4
 8003b08:	eb61 0105 	sbc.w	r1, r1, r5
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	018b      	lsls	r3, r1, #6
 8003b16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b1a:	0182      	lsls	r2, r0, #6
 8003b1c:	1a12      	subs	r2, r2, r0
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	00d9      	lsls	r1, r3, #3
 8003b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b30:	00d0      	lsls	r0, r2, #3
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	1912      	adds	r2, r2, r4
 8003b38:	eb45 0303 	adc.w	r3, r5, r3
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0299      	lsls	r1, r3, #10
 8003b46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b4a:	0290      	lsls	r0, r2, #10
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f7fd f82c 	bl	8000bb8 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	60bb      	str	r3, [r7, #8]
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b86:	60bb      	str	r3, [r7, #8]
      break;
 8003b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff0 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08006db4 	.word	0x08006db4

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffdc 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0b5b      	lsrs	r3, r3, #13
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08006db4 	.word	0x08006db4

08003c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e03f      	b.n	8003c9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd ff26 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	; 0x24
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f929 	bl	8003ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b08a      	sub	sp, #40	; 0x28
 8003caa:	af02      	add	r7, sp, #8
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d17c      	bne.n	8003dc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_UART_Transmit+0x2c>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e075      	b.n	8003dc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Transmit+0x3e>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e06e      	b.n	8003dc2 <HAL_UART_Transmit+0x11c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2221      	movs	r2, #33	; 0x21
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfa:	f7fd ff9b 	bl	8001c34 <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d108      	bne.n	8003d28 <HAL_UART_Transmit+0x82>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	e003      	b.n	8003d30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d38:	e02a      	b.n	8003d90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f840 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e036      	b.n	8003dc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e007      	b.n	8003d82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1cf      	bne.n	8003d3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f810 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e006      	b.n	8003dc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b090      	sub	sp, #64	; 0x40
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	e050      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d04c      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003dea:	f7fd ff23 	bl	8001c34 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d241      	bcs.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4e:	623a      	str	r2, [r7, #32]
 8003e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	69f9      	ldr	r1, [r7, #28]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e00f      	b.n	8003e9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d09f      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3740      	adds	r7, #64	; 0x40
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	b09f      	sub	sp, #124	; 0x7c
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	68d9      	ldr	r1, [r3, #12]
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	ea40 0301 	orr.w	r3, r0, r1
 8003ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eec:	f021 010c 	bic.w	r1, r1, #12
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	6999      	ldr	r1, [r3, #24]
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	ea40 0301 	orr.w	r3, r0, r1
 8003f10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4bc5      	ldr	r3, [pc, #788]	; (800422c <UART_SetConfig+0x384>)
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d004      	beq.n	8003f26 <UART_SetConfig+0x7e>
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4bc3      	ldr	r3, [pc, #780]	; (8004230 <UART_SetConfig+0x388>)
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d103      	bne.n	8003f2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f26:	f7ff fe5d 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8003f2a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f2c:	e002      	b.n	8003f34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f2e:	f7ff fe45 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8003f32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3c:	f040 80b6 	bne.w	80040ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	461c      	mov	r4, r3
 8003f44:	f04f 0500 	mov.w	r5, #0
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f50:	415b      	adcs	r3, r3
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
 8003f54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f58:	1912      	adds	r2, r2, r4
 8003f5a:	eb45 0303 	adc.w	r3, r5, r3
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	00d9      	lsls	r1, r3, #3
 8003f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f6c:	00d0      	lsls	r0, r2, #3
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	1911      	adds	r1, r2, r4
 8003f74:	6639      	str	r1, [r7, #96]	; 0x60
 8003f76:	416b      	adcs	r3, r5
 8003f78:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f94:	f7fc fe10 	bl	8000bb8 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <UART_SetConfig+0x38c>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	011e      	lsls	r6, r3, #4
 8003fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa8:	461c      	mov	r4, r3
 8003faa:	f04f 0500 	mov.w	r5, #0
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fbe:	1912      	adds	r2, r2, r4
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	00d9      	lsls	r1, r3, #3
 8003fce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fd2:	00d0      	lsls	r0, r2, #3
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	1911      	adds	r1, r2, r4
 8003fda:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fdc:	416b      	adcs	r3, r5
 8003fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ffa:	f7fc fddd 	bl	8000bb8 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b8c      	ldr	r3, [pc, #560]	; (8004234 <UART_SetConfig+0x38c>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a87      	ldr	r2, [pc, #540]	; (8004234 <UART_SetConfig+0x38c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004024:	441e      	add	r6, r3
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	4618      	mov	r0, r3
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	1894      	adds	r4, r2, r2
 8004034:	623c      	str	r4, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	1812      	adds	r2, r2, r0
 8004040:	eb41 0303 	adc.w	r3, r1, r3
 8004044:	f04f 0400 	mov.w	r4, #0
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	00dd      	lsls	r5, r3, #3
 800404e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004052:	00d4      	lsls	r4, r2, #3
 8004054:	4622      	mov	r2, r4
 8004056:	462b      	mov	r3, r5
 8004058:	1814      	adds	r4, r2, r0
 800405a:	653c      	str	r4, [r7, #80]	; 0x50
 800405c:	414b      	adcs	r3, r1
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	1891      	adds	r1, r2, r2
 800406c:	61b9      	str	r1, [r7, #24]
 800406e:	415b      	adcs	r3, r3
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004076:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800407a:	f7fc fd9d 	bl	8000bb8 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <UART_SetConfig+0x38c>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	; 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	; 0x32
 8004096:	4a67      	ldr	r2, [pc, #412]	; (8004234 <UART_SetConfig+0x38c>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4432      	add	r2, r6
 80040a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040aa:	e0b9      	b.n	8004220 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ae:	461c      	mov	r4, r3
 80040b0:	f04f 0500 	mov.w	r5, #0
 80040b4:	4622      	mov	r2, r4
 80040b6:	462b      	mov	r3, r5
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	6139      	str	r1, [r7, #16]
 80040bc:	415b      	adcs	r3, r3
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c4:	1912      	adds	r2, r2, r4
 80040c6:	eb45 0303 	adc.w	r3, r5, r3
 80040ca:	f04f 0000 	mov.w	r0, #0
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	00d9      	lsls	r1, r3, #3
 80040d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d8:	00d0      	lsls	r0, r2, #3
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	eb12 0804 	adds.w	r8, r2, r4
 80040e2:	eb43 0905 	adc.w	r9, r3, r5
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040fe:	0082      	lsls	r2, r0, #2
 8004100:	4640      	mov	r0, r8
 8004102:	4649      	mov	r1, r9
 8004104:	f7fc fd58 	bl	8000bb8 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b49      	ldr	r3, [pc, #292]	; (8004234 <UART_SetConfig+0x38c>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011e      	lsls	r6, r3, #4
 8004116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004118:	4618      	mov	r0, r3
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	1894      	adds	r4, r2, r2
 8004124:	60bc      	str	r4, [r7, #8]
 8004126:	415b      	adcs	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800412e:	1812      	adds	r2, r2, r0
 8004130:	eb41 0303 	adc.w	r3, r1, r3
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	f04f 0500 	mov.w	r5, #0
 800413c:	00dd      	lsls	r5, r3, #3
 800413e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004142:	00d4      	lsls	r4, r2, #3
 8004144:	4622      	mov	r2, r4
 8004146:	462b      	mov	r3, r5
 8004148:	1814      	adds	r4, r2, r0
 800414a:	64bc      	str	r4, [r7, #72]	; 0x48
 800414c:	414b      	adcs	r3, r1
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4618      	mov	r0, r3
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	008b      	lsls	r3, r1, #2
 8004164:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004168:	0082      	lsls	r2, r0, #2
 800416a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800416e:	f7fc fd23 	bl	8000bb8 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <UART_SetConfig+0x38c>)
 8004178:	fba3 1302 	umull	r1, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2164      	movs	r1, #100	; 0x64
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3332      	adds	r3, #50	; 0x32
 800418a:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <UART_SetConfig+0x38c>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004196:	441e      	add	r6, r3
 8004198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419a:	4618      	mov	r0, r3
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	1894      	adds	r4, r2, r2
 80041a6:	603c      	str	r4, [r7, #0]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b0:	1812      	adds	r2, r2, r0
 80041b2:	eb41 0303 	adc.w	r3, r1, r3
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	f04f 0500 	mov.w	r5, #0
 80041be:	00dd      	lsls	r5, r3, #3
 80041c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c4:	00d4      	lsls	r4, r2, #3
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb12 0a00 	adds.w	sl, r2, r0
 80041ce:	eb43 0b01 	adc.w	fp, r3, r1
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ea:	0082      	lsls	r2, r0, #2
 80041ec:	4650      	mov	r0, sl
 80041ee:	4659      	mov	r1, fp
 80041f0:	f7fc fce2 	bl	8000bb8 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <UART_SetConfig+0x38c>)
 80041fa:	fba3 1302 	umull	r1, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2164      	movs	r1, #100	; 0x64
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <UART_SetConfig+0x38c>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4432      	add	r2, r6
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	377c      	adds	r7, #124	; 0x7c
 8004224:	46bd      	mov	sp, r7
 8004226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422a:	bf00      	nop
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f

08004238 <__errno>:
 8004238:	4b01      	ldr	r3, [pc, #4]	; (8004240 <__errno+0x8>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000000c 	.word	0x2000000c

08004244 <__libc_init_array>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4d0d      	ldr	r5, [pc, #52]	; (800427c <__libc_init_array+0x38>)
 8004248:	4c0d      	ldr	r4, [pc, #52]	; (8004280 <__libc_init_array+0x3c>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	2600      	movs	r6, #0
 8004250:	42a6      	cmp	r6, r4
 8004252:	d109      	bne.n	8004268 <__libc_init_array+0x24>
 8004254:	4d0b      	ldr	r5, [pc, #44]	; (8004284 <__libc_init_array+0x40>)
 8004256:	4c0c      	ldr	r4, [pc, #48]	; (8004288 <__libc_init_array+0x44>)
 8004258:	f002 fd80 	bl	8006d5c <_init>
 800425c:	1b64      	subs	r4, r4, r5
 800425e:	10a4      	asrs	r4, r4, #2
 8004260:	2600      	movs	r6, #0
 8004262:	42a6      	cmp	r6, r4
 8004264:	d105      	bne.n	8004272 <__libc_init_array+0x2e>
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	f855 3b04 	ldr.w	r3, [r5], #4
 800426c:	4798      	blx	r3
 800426e:	3601      	adds	r6, #1
 8004270:	e7ee      	b.n	8004250 <__libc_init_array+0xc>
 8004272:	f855 3b04 	ldr.w	r3, [r5], #4
 8004276:	4798      	blx	r3
 8004278:	3601      	adds	r6, #1
 800427a:	e7f2      	b.n	8004262 <__libc_init_array+0x1e>
 800427c:	080071a4 	.word	0x080071a4
 8004280:	080071a4 	.word	0x080071a4
 8004284:	080071a4 	.word	0x080071a4
 8004288:	080071a8 	.word	0x080071a8

0800428c <memset>:
 800428c:	4402      	add	r2, r0
 800428e:	4603      	mov	r3, r0
 8004290:	4293      	cmp	r3, r2
 8004292:	d100      	bne.n	8004296 <memset+0xa>
 8004294:	4770      	bx	lr
 8004296:	f803 1b01 	strb.w	r1, [r3], #1
 800429a:	e7f9      	b.n	8004290 <memset+0x4>

0800429c <__cvt>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	ec55 4b10 	vmov	r4, r5, d0
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	460e      	mov	r6, r1
 80042a8:	4619      	mov	r1, r3
 80042aa:	462b      	mov	r3, r5
 80042ac:	bfbb      	ittet	lt
 80042ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042b2:	461d      	movlt	r5, r3
 80042b4:	2300      	movge	r3, #0
 80042b6:	232d      	movlt	r3, #45	; 0x2d
 80042b8:	700b      	strb	r3, [r1, #0]
 80042ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042c0:	4691      	mov	r9, r2
 80042c2:	f023 0820 	bic.w	r8, r3, #32
 80042c6:	bfbc      	itt	lt
 80042c8:	4622      	movlt	r2, r4
 80042ca:	4614      	movlt	r4, r2
 80042cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042d0:	d005      	beq.n	80042de <__cvt+0x42>
 80042d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042d6:	d100      	bne.n	80042da <__cvt+0x3e>
 80042d8:	3601      	adds	r6, #1
 80042da:	2102      	movs	r1, #2
 80042dc:	e000      	b.n	80042e0 <__cvt+0x44>
 80042de:	2103      	movs	r1, #3
 80042e0:	ab03      	add	r3, sp, #12
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	ab02      	add	r3, sp, #8
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	ec45 4b10 	vmov	d0, r4, r5
 80042ec:	4653      	mov	r3, sl
 80042ee:	4632      	mov	r2, r6
 80042f0:	f000 fe1a 	bl	8004f28 <_dtoa_r>
 80042f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042f8:	4607      	mov	r7, r0
 80042fa:	d102      	bne.n	8004302 <__cvt+0x66>
 80042fc:	f019 0f01 	tst.w	r9, #1
 8004300:	d022      	beq.n	8004348 <__cvt+0xac>
 8004302:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004306:	eb07 0906 	add.w	r9, r7, r6
 800430a:	d110      	bne.n	800432e <__cvt+0x92>
 800430c:	783b      	ldrb	r3, [r7, #0]
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d10a      	bne.n	8004328 <__cvt+0x8c>
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800431e:	b918      	cbnz	r0, 8004328 <__cvt+0x8c>
 8004320:	f1c6 0601 	rsb	r6, r6, #1
 8004324:	f8ca 6000 	str.w	r6, [sl]
 8004328:	f8da 3000 	ldr.w	r3, [sl]
 800432c:	4499      	add	r9, r3
 800432e:	2200      	movs	r2, #0
 8004330:	2300      	movs	r3, #0
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	f7fc fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800433a:	b108      	cbz	r0, 8004340 <__cvt+0xa4>
 800433c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004340:	2230      	movs	r2, #48	; 0x30
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	454b      	cmp	r3, r9
 8004346:	d307      	bcc.n	8004358 <__cvt+0xbc>
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434c:	1bdb      	subs	r3, r3, r7
 800434e:	4638      	mov	r0, r7
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	b004      	add	sp, #16
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	9103      	str	r1, [sp, #12]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e7f0      	b.n	8004342 <__cvt+0xa6>

08004360 <__exponent>:
 8004360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004362:	4603      	mov	r3, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	bfb8      	it	lt
 8004368:	4249      	neglt	r1, r1
 800436a:	f803 2b02 	strb.w	r2, [r3], #2
 800436e:	bfb4      	ite	lt
 8004370:	222d      	movlt	r2, #45	; 0x2d
 8004372:	222b      	movge	r2, #43	; 0x2b
 8004374:	2909      	cmp	r1, #9
 8004376:	7042      	strb	r2, [r0, #1]
 8004378:	dd2a      	ble.n	80043d0 <__exponent+0x70>
 800437a:	f10d 0407 	add.w	r4, sp, #7
 800437e:	46a4      	mov	ip, r4
 8004380:	270a      	movs	r7, #10
 8004382:	46a6      	mov	lr, r4
 8004384:	460a      	mov	r2, r1
 8004386:	fb91 f6f7 	sdiv	r6, r1, r7
 800438a:	fb07 1516 	mls	r5, r7, r6, r1
 800438e:	3530      	adds	r5, #48	; 0x30
 8004390:	2a63      	cmp	r2, #99	; 0x63
 8004392:	f104 34ff 	add.w	r4, r4, #4294967295
 8004396:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800439a:	4631      	mov	r1, r6
 800439c:	dcf1      	bgt.n	8004382 <__exponent+0x22>
 800439e:	3130      	adds	r1, #48	; 0x30
 80043a0:	f1ae 0502 	sub.w	r5, lr, #2
 80043a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043a8:	1c44      	adds	r4, r0, #1
 80043aa:	4629      	mov	r1, r5
 80043ac:	4561      	cmp	r1, ip
 80043ae:	d30a      	bcc.n	80043c6 <__exponent+0x66>
 80043b0:	f10d 0209 	add.w	r2, sp, #9
 80043b4:	eba2 020e 	sub.w	r2, r2, lr
 80043b8:	4565      	cmp	r5, ip
 80043ba:	bf88      	it	hi
 80043bc:	2200      	movhi	r2, #0
 80043be:	4413      	add	r3, r2
 80043c0:	1a18      	subs	r0, r3, r0
 80043c2:	b003      	add	sp, #12
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043ce:	e7ed      	b.n	80043ac <__exponent+0x4c>
 80043d0:	2330      	movs	r3, #48	; 0x30
 80043d2:	3130      	adds	r1, #48	; 0x30
 80043d4:	7083      	strb	r3, [r0, #2]
 80043d6:	70c1      	strb	r1, [r0, #3]
 80043d8:	1d03      	adds	r3, r0, #4
 80043da:	e7f1      	b.n	80043c0 <__exponent+0x60>

080043dc <_printf_float>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	ed2d 8b02 	vpush	{d8}
 80043e4:	b08d      	sub	sp, #52	; 0x34
 80043e6:	460c      	mov	r4, r1
 80043e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043ec:	4616      	mov	r6, r2
 80043ee:	461f      	mov	r7, r3
 80043f0:	4605      	mov	r5, r0
 80043f2:	f001 fd3d 	bl	8005e70 <_localeconv_r>
 80043f6:	f8d0 a000 	ldr.w	sl, [r0]
 80043fa:	4650      	mov	r0, sl
 80043fc:	f7fb fef0 	bl	80001e0 <strlen>
 8004400:	2300      	movs	r3, #0
 8004402:	930a      	str	r3, [sp, #40]	; 0x28
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	9305      	str	r3, [sp, #20]
 8004408:	f8d8 3000 	ldr.w	r3, [r8]
 800440c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004410:	3307      	adds	r3, #7
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	f103 0208 	add.w	r2, r3, #8
 800441a:	f8c8 2000 	str.w	r2, [r8]
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004426:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800442a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800442e:	9307      	str	r3, [sp, #28]
 8004430:	f8cd 8018 	str.w	r8, [sp, #24]
 8004434:	ee08 0a10 	vmov	s16, r0
 8004438:	4b9f      	ldr	r3, [pc, #636]	; (80046b8 <_printf_float+0x2dc>)
 800443a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800443e:	f04f 32ff 	mov.w	r2, #4294967295
 8004442:	f7fc fb7b 	bl	8000b3c <__aeabi_dcmpun>
 8004446:	bb88      	cbnz	r0, 80044ac <_printf_float+0xd0>
 8004448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800444c:	4b9a      	ldr	r3, [pc, #616]	; (80046b8 <_printf_float+0x2dc>)
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	f7fc fb55 	bl	8000b00 <__aeabi_dcmple>
 8004456:	bb48      	cbnz	r0, 80044ac <_printf_float+0xd0>
 8004458:	2200      	movs	r2, #0
 800445a:	2300      	movs	r3, #0
 800445c:	4640      	mov	r0, r8
 800445e:	4649      	mov	r1, r9
 8004460:	f7fc fb44 	bl	8000aec <__aeabi_dcmplt>
 8004464:	b110      	cbz	r0, 800446c <_printf_float+0x90>
 8004466:	232d      	movs	r3, #45	; 0x2d
 8004468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446c:	4b93      	ldr	r3, [pc, #588]	; (80046bc <_printf_float+0x2e0>)
 800446e:	4894      	ldr	r0, [pc, #592]	; (80046c0 <_printf_float+0x2e4>)
 8004470:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004474:	bf94      	ite	ls
 8004476:	4698      	movls	r8, r3
 8004478:	4680      	movhi	r8, r0
 800447a:	2303      	movs	r3, #3
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	9b05      	ldr	r3, [sp, #20]
 8004480:	f023 0204 	bic.w	r2, r3, #4
 8004484:	6022      	str	r2, [r4, #0]
 8004486:	f04f 0900 	mov.w	r9, #0
 800448a:	9700      	str	r7, [sp, #0]
 800448c:	4633      	mov	r3, r6
 800448e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 f9d8 	bl	8004848 <_printf_common>
 8004498:	3001      	adds	r0, #1
 800449a:	f040 8090 	bne.w	80045be <_printf_float+0x1e2>
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	b00d      	add	sp, #52	; 0x34
 80044a4:	ecbd 8b02 	vpop	{d8}
 80044a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	4649      	mov	r1, r9
 80044b4:	f7fc fb42 	bl	8000b3c <__aeabi_dcmpun>
 80044b8:	b140      	cbz	r0, 80044cc <_printf_float+0xf0>
 80044ba:	464b      	mov	r3, r9
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bfbc      	itt	lt
 80044c0:	232d      	movlt	r3, #45	; 0x2d
 80044c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044c6:	487f      	ldr	r0, [pc, #508]	; (80046c4 <_printf_float+0x2e8>)
 80044c8:	4b7f      	ldr	r3, [pc, #508]	; (80046c8 <_printf_float+0x2ec>)
 80044ca:	e7d1      	b.n	8004470 <_printf_float+0x94>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044d2:	9206      	str	r2, [sp, #24]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	d13f      	bne.n	8004558 <_printf_float+0x17c>
 80044d8:	2306      	movs	r3, #6
 80044da:	6063      	str	r3, [r4, #4]
 80044dc:	9b05      	ldr	r3, [sp, #20]
 80044de:	6861      	ldr	r1, [r4, #4]
 80044e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044e4:	2300      	movs	r3, #0
 80044e6:	9303      	str	r3, [sp, #12]
 80044e8:	ab0a      	add	r3, sp, #40	; 0x28
 80044ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044ee:	ab09      	add	r3, sp, #36	; 0x24
 80044f0:	ec49 8b10 	vmov	d0, r8, r9
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044fc:	4628      	mov	r0, r5
 80044fe:	f7ff fecd 	bl	800429c <__cvt>
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004506:	2b47      	cmp	r3, #71	; 0x47
 8004508:	4680      	mov	r8, r0
 800450a:	d108      	bne.n	800451e <_printf_float+0x142>
 800450c:	1cc8      	adds	r0, r1, #3
 800450e:	db02      	blt.n	8004516 <_printf_float+0x13a>
 8004510:	6863      	ldr	r3, [r4, #4]
 8004512:	4299      	cmp	r1, r3
 8004514:	dd41      	ble.n	800459a <_printf_float+0x1be>
 8004516:	f1ab 0b02 	sub.w	fp, fp, #2
 800451a:	fa5f fb8b 	uxtb.w	fp, fp
 800451e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004522:	d820      	bhi.n	8004566 <_printf_float+0x18a>
 8004524:	3901      	subs	r1, #1
 8004526:	465a      	mov	r2, fp
 8004528:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800452c:	9109      	str	r1, [sp, #36]	; 0x24
 800452e:	f7ff ff17 	bl	8004360 <__exponent>
 8004532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004534:	1813      	adds	r3, r2, r0
 8004536:	2a01      	cmp	r2, #1
 8004538:	4681      	mov	r9, r0
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	dc02      	bgt.n	8004544 <_printf_float+0x168>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	07d2      	lsls	r2, r2, #31
 8004542:	d501      	bpl.n	8004548 <_printf_float+0x16c>
 8004544:	3301      	adds	r3, #1
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800454c:	2b00      	cmp	r3, #0
 800454e:	d09c      	beq.n	800448a <_printf_float+0xae>
 8004550:	232d      	movs	r3, #45	; 0x2d
 8004552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004556:	e798      	b.n	800448a <_printf_float+0xae>
 8004558:	9a06      	ldr	r2, [sp, #24]
 800455a:	2a47      	cmp	r2, #71	; 0x47
 800455c:	d1be      	bne.n	80044dc <_printf_float+0x100>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1bc      	bne.n	80044dc <_printf_float+0x100>
 8004562:	2301      	movs	r3, #1
 8004564:	e7b9      	b.n	80044da <_printf_float+0xfe>
 8004566:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800456a:	d118      	bne.n	800459e <_printf_float+0x1c2>
 800456c:	2900      	cmp	r1, #0
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	dd0b      	ble.n	800458a <_printf_float+0x1ae>
 8004572:	6121      	str	r1, [r4, #16]
 8004574:	b913      	cbnz	r3, 800457c <_printf_float+0x1a0>
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	07d0      	lsls	r0, r2, #31
 800457a:	d502      	bpl.n	8004582 <_printf_float+0x1a6>
 800457c:	3301      	adds	r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	65a1      	str	r1, [r4, #88]	; 0x58
 8004584:	f04f 0900 	mov.w	r9, #0
 8004588:	e7de      	b.n	8004548 <_printf_float+0x16c>
 800458a:	b913      	cbnz	r3, 8004592 <_printf_float+0x1b6>
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	07d2      	lsls	r2, r2, #31
 8004590:	d501      	bpl.n	8004596 <_printf_float+0x1ba>
 8004592:	3302      	adds	r3, #2
 8004594:	e7f4      	b.n	8004580 <_printf_float+0x1a4>
 8004596:	2301      	movs	r3, #1
 8004598:	e7f2      	b.n	8004580 <_printf_float+0x1a4>
 800459a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800459e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a0:	4299      	cmp	r1, r3
 80045a2:	db05      	blt.n	80045b0 <_printf_float+0x1d4>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	6121      	str	r1, [r4, #16]
 80045a8:	07d8      	lsls	r0, r3, #31
 80045aa:	d5ea      	bpl.n	8004582 <_printf_float+0x1a6>
 80045ac:	1c4b      	adds	r3, r1, #1
 80045ae:	e7e7      	b.n	8004580 <_printf_float+0x1a4>
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bfd4      	ite	le
 80045b4:	f1c1 0202 	rsble	r2, r1, #2
 80045b8:	2201      	movgt	r2, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	e7e0      	b.n	8004580 <_printf_float+0x1a4>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	055a      	lsls	r2, r3, #21
 80045c2:	d407      	bmi.n	80045d4 <_printf_float+0x1f8>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	4642      	mov	r2, r8
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	d12c      	bne.n	800462c <_printf_float+0x250>
 80045d2:	e764      	b.n	800449e <_printf_float+0xc2>
 80045d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045d8:	f240 80e0 	bls.w	800479c <_printf_float+0x3c0>
 80045dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f7fc fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d034      	beq.n	8004656 <_printf_float+0x27a>
 80045ec:	4a37      	ldr	r2, [pc, #220]	; (80046cc <_printf_float+0x2f0>)
 80045ee:	2301      	movs	r3, #1
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af51 	beq.w	800449e <_printf_float+0xc2>
 80045fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004600:	429a      	cmp	r2, r3
 8004602:	db02      	blt.n	800460a <_printf_float+0x22e>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	07d8      	lsls	r0, r3, #31
 8004608:	d510      	bpl.n	800462c <_printf_float+0x250>
 800460a:	ee18 3a10 	vmov	r3, s16
 800460e:	4652      	mov	r2, sl
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f af41 	beq.w	800449e <_printf_float+0xc2>
 800461c:	f04f 0800 	mov.w	r8, #0
 8004620:	f104 091a 	add.w	r9, r4, #26
 8004624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	4543      	cmp	r3, r8
 800462a:	dc09      	bgt.n	8004640 <_printf_float+0x264>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	079b      	lsls	r3, r3, #30
 8004630:	f100 8105 	bmi.w	800483e <_printf_float+0x462>
 8004634:	68e0      	ldr	r0, [r4, #12]
 8004636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004638:	4298      	cmp	r0, r3
 800463a:	bfb8      	it	lt
 800463c:	4618      	movlt	r0, r3
 800463e:	e730      	b.n	80044a2 <_printf_float+0xc6>
 8004640:	2301      	movs	r3, #1
 8004642:	464a      	mov	r2, r9
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	f43f af27 	beq.w	800449e <_printf_float+0xc2>
 8004650:	f108 0801 	add.w	r8, r8, #1
 8004654:	e7e6      	b.n	8004624 <_printf_float+0x248>
 8004656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	dc39      	bgt.n	80046d0 <_printf_float+0x2f4>
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <_printf_float+0x2f0>)
 800465e:	2301      	movs	r3, #1
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f af19 	beq.w	800449e <_printf_float+0xc2>
 800466c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004670:	4313      	orrs	r3, r2
 8004672:	d102      	bne.n	800467a <_printf_float+0x29e>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	07d9      	lsls	r1, r3, #31
 8004678:	d5d8      	bpl.n	800462c <_printf_float+0x250>
 800467a:	ee18 3a10 	vmov	r3, s16
 800467e:	4652      	mov	r2, sl
 8004680:	4631      	mov	r1, r6
 8004682:	4628      	mov	r0, r5
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	f43f af09 	beq.w	800449e <_printf_float+0xc2>
 800468c:	f04f 0900 	mov.w	r9, #0
 8004690:	f104 0a1a 	add.w	sl, r4, #26
 8004694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004696:	425b      	negs	r3, r3
 8004698:	454b      	cmp	r3, r9
 800469a:	dc01      	bgt.n	80046a0 <_printf_float+0x2c4>
 800469c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469e:	e792      	b.n	80045c6 <_printf_float+0x1ea>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4652      	mov	r2, sl
 80046a4:	4631      	mov	r1, r6
 80046a6:	4628      	mov	r0, r5
 80046a8:	47b8      	blx	r7
 80046aa:	3001      	adds	r0, #1
 80046ac:	f43f aef7 	beq.w	800449e <_printf_float+0xc2>
 80046b0:	f109 0901 	add.w	r9, r9, #1
 80046b4:	e7ee      	b.n	8004694 <_printf_float+0x2b8>
 80046b6:	bf00      	nop
 80046b8:	7fefffff 	.word	0x7fefffff
 80046bc:	08006dc0 	.word	0x08006dc0
 80046c0:	08006dc4 	.word	0x08006dc4
 80046c4:	08006dcc 	.word	0x08006dcc
 80046c8:	08006dc8 	.word	0x08006dc8
 80046cc:	08006dd0 	.word	0x08006dd0
 80046d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bfa8      	it	ge
 80046d8:	461a      	movge	r2, r3
 80046da:	2a00      	cmp	r2, #0
 80046dc:	4691      	mov	r9, r2
 80046de:	dc37      	bgt.n	8004750 <_printf_float+0x374>
 80046e0:	f04f 0b00 	mov.w	fp, #0
 80046e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e8:	f104 021a 	add.w	r2, r4, #26
 80046ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	eba3 0309 	sub.w	r3, r3, r9
 80046f4:	455b      	cmp	r3, fp
 80046f6:	dc33      	bgt.n	8004760 <_printf_float+0x384>
 80046f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046fc:	429a      	cmp	r2, r3
 80046fe:	db3b      	blt.n	8004778 <_printf_float+0x39c>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	07da      	lsls	r2, r3, #31
 8004704:	d438      	bmi.n	8004778 <_printf_float+0x39c>
 8004706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004708:	9b05      	ldr	r3, [sp, #20]
 800470a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	eba2 0901 	sub.w	r9, r2, r1
 8004712:	4599      	cmp	r9, r3
 8004714:	bfa8      	it	ge
 8004716:	4699      	movge	r9, r3
 8004718:	f1b9 0f00 	cmp.w	r9, #0
 800471c:	dc35      	bgt.n	800478a <_printf_float+0x3ae>
 800471e:	f04f 0800 	mov.w	r8, #0
 8004722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004726:	f104 0a1a 	add.w	sl, r4, #26
 800472a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	eba3 0309 	sub.w	r3, r3, r9
 8004734:	4543      	cmp	r3, r8
 8004736:	f77f af79 	ble.w	800462c <_printf_float+0x250>
 800473a:	2301      	movs	r3, #1
 800473c:	4652      	mov	r2, sl
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	f43f aeaa 	beq.w	800449e <_printf_float+0xc2>
 800474a:	f108 0801 	add.w	r8, r8, #1
 800474e:	e7ec      	b.n	800472a <_printf_float+0x34e>
 8004750:	4613      	mov	r3, r2
 8004752:	4631      	mov	r1, r6
 8004754:	4642      	mov	r2, r8
 8004756:	4628      	mov	r0, r5
 8004758:	47b8      	blx	r7
 800475a:	3001      	adds	r0, #1
 800475c:	d1c0      	bne.n	80046e0 <_printf_float+0x304>
 800475e:	e69e      	b.n	800449e <_printf_float+0xc2>
 8004760:	2301      	movs	r3, #1
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	9205      	str	r2, [sp, #20]
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f ae97 	beq.w	800449e <_printf_float+0xc2>
 8004770:	9a05      	ldr	r2, [sp, #20]
 8004772:	f10b 0b01 	add.w	fp, fp, #1
 8004776:	e7b9      	b.n	80046ec <_printf_float+0x310>
 8004778:	ee18 3a10 	vmov	r3, s16
 800477c:	4652      	mov	r2, sl
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	d1be      	bne.n	8004706 <_printf_float+0x32a>
 8004788:	e689      	b.n	800449e <_printf_float+0xc2>
 800478a:	9a05      	ldr	r2, [sp, #20]
 800478c:	464b      	mov	r3, r9
 800478e:	4442      	add	r2, r8
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	d1c1      	bne.n	800471e <_printf_float+0x342>
 800479a:	e680      	b.n	800449e <_printf_float+0xc2>
 800479c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800479e:	2a01      	cmp	r2, #1
 80047a0:	dc01      	bgt.n	80047a6 <_printf_float+0x3ca>
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d538      	bpl.n	8004818 <_printf_float+0x43c>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4642      	mov	r2, r8
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	f43f ae74 	beq.w	800449e <_printf_float+0xc2>
 80047b6:	ee18 3a10 	vmov	r3, s16
 80047ba:	4652      	mov	r2, sl
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f ae6b 	beq.w	800449e <_printf_float+0xc2>
 80047c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047cc:	2200      	movs	r2, #0
 80047ce:	2300      	movs	r3, #0
 80047d0:	f7fc f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80047d4:	b9d8      	cbnz	r0, 800480e <_printf_float+0x432>
 80047d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d8:	f108 0201 	add.w	r2, r8, #1
 80047dc:	3b01      	subs	r3, #1
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	d10e      	bne.n	8004806 <_printf_float+0x42a>
 80047e8:	e659      	b.n	800449e <_printf_float+0xc2>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4631      	mov	r1, r6
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b8      	blx	r7
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f ae52 	beq.w	800449e <_printf_float+0xc2>
 80047fa:	f108 0801 	add.w	r8, r8, #1
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	4543      	cmp	r3, r8
 8004804:	dcf1      	bgt.n	80047ea <_printf_float+0x40e>
 8004806:	464b      	mov	r3, r9
 8004808:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800480c:	e6dc      	b.n	80045c8 <_printf_float+0x1ec>
 800480e:	f04f 0800 	mov.w	r8, #0
 8004812:	f104 0a1a 	add.w	sl, r4, #26
 8004816:	e7f2      	b.n	80047fe <_printf_float+0x422>
 8004818:	2301      	movs	r3, #1
 800481a:	4642      	mov	r2, r8
 800481c:	e7df      	b.n	80047de <_printf_float+0x402>
 800481e:	2301      	movs	r3, #1
 8004820:	464a      	mov	r2, r9
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae38 	beq.w	800449e <_printf_float+0xc2>
 800482e:	f108 0801 	add.w	r8, r8, #1
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004836:	1a5b      	subs	r3, r3, r1
 8004838:	4543      	cmp	r3, r8
 800483a:	dcf0      	bgt.n	800481e <_printf_float+0x442>
 800483c:	e6fa      	b.n	8004634 <_printf_float+0x258>
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	f104 0919 	add.w	r9, r4, #25
 8004846:	e7f4      	b.n	8004832 <_printf_float+0x456>

08004848 <_printf_common>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	4699      	mov	r9, r3
 8004850:	688a      	ldr	r2, [r1, #8]
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004858:	4293      	cmp	r3, r2
 800485a:	bfb8      	it	lt
 800485c:	4613      	movlt	r3, r2
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004864:	4607      	mov	r7, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b10a      	cbz	r2, 800486e <_printf_common+0x26>
 800486a:	3301      	adds	r3, #1
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	6833      	ldrmi	r3, [r6, #0]
 8004876:	3302      	addmi	r3, #2
 8004878:	6033      	strmi	r3, [r6, #0]
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	f015 0506 	ands.w	r5, r5, #6
 8004880:	d106      	bne.n	8004890 <_printf_common+0x48>
 8004882:	f104 0a19 	add.w	sl, r4, #25
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	6832      	ldr	r2, [r6, #0]
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	42ab      	cmp	r3, r5
 800488e:	dc26      	bgt.n	80048de <_printf_common+0x96>
 8004890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004894:	1e13      	subs	r3, r2, #0
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	bf18      	it	ne
 800489a:	2301      	movne	r3, #1
 800489c:	0692      	lsls	r2, r2, #26
 800489e:	d42b      	bmi.n	80048f8 <_printf_common+0xb0>
 80048a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d01e      	beq.n	80048ec <_printf_common+0xa4>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	68e5      	ldr	r5, [r4, #12]
 80048b2:	6832      	ldr	r2, [r6, #0]
 80048b4:	f003 0306 	and.w	r3, r3, #6
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	bf08      	it	eq
 80048bc:	1aad      	subeq	r5, r5, r2
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	2600      	movs	r6, #0
 80048d4:	341a      	adds	r4, #26
 80048d6:	42b5      	cmp	r5, r6
 80048d8:	d11a      	bne.n	8004910 <_printf_common+0xc8>
 80048da:	2000      	movs	r0, #0
 80048dc:	e008      	b.n	80048f0 <_printf_common+0xa8>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4649      	mov	r1, r9
 80048e4:	4638      	mov	r0, r7
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d103      	bne.n	80048f4 <_printf_common+0xac>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7c6      	b.n	8004886 <_printf_common+0x3e>
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	2030      	movs	r0, #48	; 0x30
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004902:	4422      	add	r2, r4
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490c:	3302      	adds	r3, #2
 800490e:	e7c7      	b.n	80048a0 <_printf_common+0x58>
 8004910:	2301      	movs	r3, #1
 8004912:	4622      	mov	r2, r4
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d0e6      	beq.n	80048ec <_printf_common+0xa4>
 800491e:	3601      	adds	r6, #1
 8004920:	e7d9      	b.n	80048d6 <_printf_common+0x8e>
	...

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	460c      	mov	r4, r1
 800492a:	4691      	mov	r9, r2
 800492c:	7e27      	ldrb	r7, [r4, #24]
 800492e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004930:	2f78      	cmp	r7, #120	; 0x78
 8004932:	4680      	mov	r8, r0
 8004934:	469a      	mov	sl, r3
 8004936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	; 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d8 	beq.w	8004af6 <_printf_i+0x1d2>
 8004946:	2f58      	cmp	r7, #88	; 0x58
 8004948:	f000 80a3 	beq.w	8004a92 <_printf_i+0x16e>
 800494c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a001      	add	r0, pc, #4	; (adr r0, 8004964 <_printf_i+0x40>)
 8004960:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004add 	.word	0x08004add
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004abf 	.word	0x08004abf
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004aff 	.word	0x08004aff
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004ac7 	.word	0x08004ac7
 80049bc:	680b      	ldr	r3, [r1, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	600a      	str	r2, [r1, #0]
 80049c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a3      	b.n	8004b18 <_printf_i+0x1f4>
 80049d0:	6825      	ldr	r5, [r4, #0]
 80049d2:	6808      	ldr	r0, [r1, #0]
 80049d4:	062e      	lsls	r6, r5, #24
 80049d6:	f100 0304 	add.w	r3, r0, #4
 80049da:	d50a      	bpl.n	80049f2 <_printf_i+0xce>
 80049dc:	6805      	ldr	r5, [r0, #0]
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	da03      	bge.n	80049ec <_printf_i+0xc8>
 80049e4:	232d      	movs	r3, #45	; 0x2d
 80049e6:	426d      	negs	r5, r5
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ec:	485e      	ldr	r0, [pc, #376]	; (8004b68 <_printf_i+0x244>)
 80049ee:	230a      	movs	r3, #10
 80049f0:	e019      	b.n	8004a26 <_printf_i+0x102>
 80049f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049f6:	6805      	ldr	r5, [r0, #0]
 80049f8:	600b      	str	r3, [r1, #0]
 80049fa:	bf18      	it	ne
 80049fc:	b22d      	sxthne	r5, r5
 80049fe:	e7ef      	b.n	80049e0 <_printf_i+0xbc>
 8004a00:	680b      	ldr	r3, [r1, #0]
 8004a02:	6825      	ldr	r5, [r4, #0]
 8004a04:	1d18      	adds	r0, r3, #4
 8004a06:	6008      	str	r0, [r1, #0]
 8004a08:	0628      	lsls	r0, r5, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xec>
 8004a0c:	681d      	ldr	r5, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0xf2>
 8004a10:	0669      	lsls	r1, r5, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xe8>
 8004a14:	881d      	ldrh	r5, [r3, #0]
 8004a16:	4854      	ldr	r0, [pc, #336]	; (8004b68 <_printf_i+0x244>)
 8004a18:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2308      	moveq	r3, #8
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2100      	movs	r1, #0
 8004a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a26:	6866      	ldr	r6, [r4, #4]
 8004a28:	60a6      	str	r6, [r4, #8]
 8004a2a:	2e00      	cmp	r6, #0
 8004a2c:	bfa2      	ittt	ge
 8004a2e:	6821      	ldrge	r1, [r4, #0]
 8004a30:	f021 0104 	bicge.w	r1, r1, #4
 8004a34:	6021      	strge	r1, [r4, #0]
 8004a36:	b90d      	cbnz	r5, 8004a3c <_printf_i+0x118>
 8004a38:	2e00      	cmp	r6, #0
 8004a3a:	d04d      	beq.n	8004ad8 <_printf_i+0x1b4>
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a42:	fb03 5711 	mls	r7, r3, r1, r5
 8004a46:	5dc7      	ldrb	r7, [r0, r7]
 8004a48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a4c:	462f      	mov	r7, r5
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	460d      	mov	r5, r1
 8004a52:	d9f4      	bls.n	8004a3e <_printf_i+0x11a>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d10b      	bne.n	8004a70 <_printf_i+0x14c>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07df      	lsls	r7, r3, #31
 8004a5c:	d508      	bpl.n	8004a70 <_printf_i+0x14c>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	6861      	ldr	r1, [r4, #4]
 8004a62:	4299      	cmp	r1, r3
 8004a64:	bfde      	ittt	le
 8004a66:	2330      	movle	r3, #48	; 0x30
 8004a68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a70:	1b92      	subs	r2, r2, r6
 8004a72:	6122      	str	r2, [r4, #16]
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	aa03      	add	r2, sp, #12
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff fee2 	bl	8004848 <_printf_common>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d14c      	bne.n	8004b22 <_printf_i+0x1fe>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	b004      	add	sp, #16
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	4835      	ldr	r0, [pc, #212]	; (8004b68 <_printf_i+0x244>)
 8004a94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	680e      	ldr	r6, [r1, #0]
 8004a9c:	061f      	lsls	r7, r3, #24
 8004a9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004aa2:	600e      	str	r6, [r1, #0]
 8004aa4:	d514      	bpl.n	8004ad0 <_printf_i+0x1ac>
 8004aa6:	07d9      	lsls	r1, r3, #31
 8004aa8:	bf44      	itt	mi
 8004aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004aae:	6023      	strmi	r3, [r4, #0]
 8004ab0:	b91d      	cbnz	r5, 8004aba <_printf_i+0x196>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	f023 0320 	bic.w	r3, r3, #32
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	2310      	movs	r3, #16
 8004abc:	e7b0      	b.n	8004a20 <_printf_i+0xfc>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	2378      	movs	r3, #120	; 0x78
 8004ac8:	4828      	ldr	r0, [pc, #160]	; (8004b6c <_printf_i+0x248>)
 8004aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ace:	e7e3      	b.n	8004a98 <_printf_i+0x174>
 8004ad0:	065e      	lsls	r6, r3, #25
 8004ad2:	bf48      	it	mi
 8004ad4:	b2ad      	uxthmi	r5, r5
 8004ad6:	e7e6      	b.n	8004aa6 <_printf_i+0x182>
 8004ad8:	4616      	mov	r6, r2
 8004ada:	e7bb      	b.n	8004a54 <_printf_i+0x130>
 8004adc:	680b      	ldr	r3, [r1, #0]
 8004ade:	6826      	ldr	r6, [r4, #0]
 8004ae0:	6960      	ldr	r0, [r4, #20]
 8004ae2:	1d1d      	adds	r5, r3, #4
 8004ae4:	600d      	str	r5, [r1, #0]
 8004ae6:	0635      	lsls	r5, r6, #24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0x1cc>
 8004aec:	6018      	str	r0, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0x1d2>
 8004af0:	0671      	lsls	r1, r6, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0x1c8>
 8004af4:	8018      	strh	r0, [r3, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	4616      	mov	r6, r2
 8004afc:	e7ba      	b.n	8004a74 <_printf_i+0x150>
 8004afe:	680b      	ldr	r3, [r1, #0]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	600a      	str	r2, [r1, #0]
 8004b04:	681e      	ldr	r6, [r3, #0]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7fb fb70 	bl	80001f0 <memchr>
 8004b10:	b108      	cbz	r0, 8004b16 <_printf_i+0x1f2>
 8004b12:	1b80      	subs	r0, r0, r6
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	e7a8      	b.n	8004a74 <_printf_i+0x150>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0ab      	beq.n	8004a88 <_printf_i+0x164>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d413      	bmi.n	8004b5e <_printf_i+0x23a>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	bfb8      	it	lt
 8004b3e:	4618      	movlt	r0, r3
 8004b40:	e7a4      	b.n	8004a8c <_printf_i+0x168>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d09b      	beq.n	8004a88 <_printf_i+0x164>
 8004b50:	3501      	adds	r5, #1
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dcf2      	bgt.n	8004b42 <_printf_i+0x21e>
 8004b5c:	e7eb      	b.n	8004b36 <_printf_i+0x212>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0619 	add.w	r6, r4, #25
 8004b64:	e7f5      	b.n	8004b52 <_printf_i+0x22e>
 8004b66:	bf00      	nop
 8004b68:	08006dd2 	.word	0x08006dd2
 8004b6c:	08006de3 	.word	0x08006de3

08004b70 <iprintf>:
 8004b70:	b40f      	push	{r0, r1, r2, r3}
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <iprintf+0x2c>)
 8004b74:	b513      	push	{r0, r1, r4, lr}
 8004b76:	681c      	ldr	r4, [r3, #0]
 8004b78:	b124      	cbz	r4, 8004b84 <iprintf+0x14>
 8004b7a:	69a3      	ldr	r3, [r4, #24]
 8004b7c:	b913      	cbnz	r3, 8004b84 <iprintf+0x14>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f001 f8d8 	bl	8005d34 <__sinit>
 8004b84:	ab05      	add	r3, sp, #20
 8004b86:	9a04      	ldr	r2, [sp, #16]
 8004b88:	68a1      	ldr	r1, [r4, #8]
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f001 fe53 	bl	8006838 <_vfiprintf_r>
 8004b92:	b002      	add	sp, #8
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	2000000c 	.word	0x2000000c

08004ba0 <_puts_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b118      	cbz	r0, 8004bb0 <_puts_r+0x10>
 8004ba8:	6983      	ldr	r3, [r0, #24]
 8004baa:	b90b      	cbnz	r3, 8004bb0 <_puts_r+0x10>
 8004bac:	f001 f8c2 	bl	8005d34 <__sinit>
 8004bb0:	69ab      	ldr	r3, [r5, #24]
 8004bb2:	68ac      	ldr	r4, [r5, #8]
 8004bb4:	b913      	cbnz	r3, 8004bbc <_puts_r+0x1c>
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f001 f8bc 	bl	8005d34 <__sinit>
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <_puts_r+0xd0>)
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d120      	bne.n	8004c04 <_puts_r+0x64>
 8004bc2:	686c      	ldr	r4, [r5, #4]
 8004bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bc6:	07db      	lsls	r3, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <_puts_r+0x36>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	0598      	lsls	r0, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <_puts_r+0x36>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd2:	f001 f952 	bl	8005e7a <__retarget_lock_acquire_recursive>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	0719      	lsls	r1, r3, #28
 8004bda:	d51d      	bpl.n	8004c18 <_puts_r+0x78>
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	b1db      	cbz	r3, 8004c18 <_puts_r+0x78>
 8004be0:	3e01      	subs	r6, #1
 8004be2:	68a3      	ldr	r3, [r4, #8]
 8004be4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004be8:	3b01      	subs	r3, #1
 8004bea:	60a3      	str	r3, [r4, #8]
 8004bec:	bb39      	cbnz	r1, 8004c3e <_puts_r+0x9e>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da38      	bge.n	8004c64 <_puts_r+0xc4>
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	210a      	movs	r1, #10
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 f848 	bl	8004c8c <__swbuf_r>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d011      	beq.n	8004c24 <_puts_r+0x84>
 8004c00:	250a      	movs	r5, #10
 8004c02:	e011      	b.n	8004c28 <_puts_r+0x88>
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <_puts_r+0xd4>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d101      	bne.n	8004c0e <_puts_r+0x6e>
 8004c0a:	68ac      	ldr	r4, [r5, #8]
 8004c0c:	e7da      	b.n	8004bc4 <_puts_r+0x24>
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <_puts_r+0xd8>)
 8004c10:	429c      	cmp	r4, r3
 8004c12:	bf08      	it	eq
 8004c14:	68ec      	ldreq	r4, [r5, #12]
 8004c16:	e7d5      	b.n	8004bc4 <_puts_r+0x24>
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f000 f888 	bl	8004d30 <__swsetup_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d0dd      	beq.n	8004be0 <_puts_r+0x40>
 8004c24:	f04f 35ff 	mov.w	r5, #4294967295
 8004c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c2a:	07da      	lsls	r2, r3, #31
 8004c2c:	d405      	bmi.n	8004c3a <_puts_r+0x9a>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	059b      	lsls	r3, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_puts_r+0x9a>
 8004c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c36:	f001 f921 	bl	8005e7c <__retarget_lock_release_recursive>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da04      	bge.n	8004c4c <_puts_r+0xac>
 8004c42:	69a2      	ldr	r2, [r4, #24]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	dc06      	bgt.n	8004c56 <_puts_r+0xb6>
 8004c48:	290a      	cmp	r1, #10
 8004c4a:	d004      	beq.n	8004c56 <_puts_r+0xb6>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	7019      	strb	r1, [r3, #0]
 8004c54:	e7c5      	b.n	8004be2 <_puts_r+0x42>
 8004c56:	4622      	mov	r2, r4
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f000 f817 	bl	8004c8c <__swbuf_r>
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d1bf      	bne.n	8004be2 <_puts_r+0x42>
 8004c62:	e7df      	b.n	8004c24 <_puts_r+0x84>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	250a      	movs	r5, #10
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	701d      	strb	r5, [r3, #0]
 8004c6e:	e7db      	b.n	8004c28 <_puts_r+0x88>
 8004c70:	08006ea8 	.word	0x08006ea8
 8004c74:	08006ec8 	.word	0x08006ec8
 8004c78:	08006e88 	.word	0x08006e88

08004c7c <puts>:
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <puts+0xc>)
 8004c7e:	4601      	mov	r1, r0
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	f7ff bf8d 	b.w	8004ba0 <_puts_r>
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <__swbuf_r>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	460e      	mov	r6, r1
 8004c90:	4614      	mov	r4, r2
 8004c92:	4605      	mov	r5, r0
 8004c94:	b118      	cbz	r0, 8004c9e <__swbuf_r+0x12>
 8004c96:	6983      	ldr	r3, [r0, #24]
 8004c98:	b90b      	cbnz	r3, 8004c9e <__swbuf_r+0x12>
 8004c9a:	f001 f84b 	bl	8005d34 <__sinit>
 8004c9e:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <__swbuf_r+0x98>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d12b      	bne.n	8004cfc <__swbuf_r+0x70>
 8004ca4:	686c      	ldr	r4, [r5, #4]
 8004ca6:	69a3      	ldr	r3, [r4, #24]
 8004ca8:	60a3      	str	r3, [r4, #8]
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	071a      	lsls	r2, r3, #28
 8004cae:	d52f      	bpl.n	8004d10 <__swbuf_r+0x84>
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	b36b      	cbz	r3, 8004d10 <__swbuf_r+0x84>
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	1ac0      	subs	r0, r0, r3
 8004cba:	6963      	ldr	r3, [r4, #20]
 8004cbc:	b2f6      	uxtb	r6, r6
 8004cbe:	4283      	cmp	r3, r0
 8004cc0:	4637      	mov	r7, r6
 8004cc2:	dc04      	bgt.n	8004cce <__swbuf_r+0x42>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 ffa0 	bl	8005c0c <_fflush_r>
 8004ccc:	bb30      	cbnz	r0, 8004d1c <__swbuf_r+0x90>
 8004cce:	68a3      	ldr	r3, [r4, #8]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	60a3      	str	r3, [r4, #8]
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	6022      	str	r2, [r4, #0]
 8004cda:	701e      	strb	r6, [r3, #0]
 8004cdc:	6963      	ldr	r3, [r4, #20]
 8004cde:	3001      	adds	r0, #1
 8004ce0:	4283      	cmp	r3, r0
 8004ce2:	d004      	beq.n	8004cee <__swbuf_r+0x62>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	07db      	lsls	r3, r3, #31
 8004ce8:	d506      	bpl.n	8004cf8 <__swbuf_r+0x6c>
 8004cea:	2e0a      	cmp	r6, #10
 8004cec:	d104      	bne.n	8004cf8 <__swbuf_r+0x6c>
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 ff8b 	bl	8005c0c <_fflush_r>
 8004cf6:	b988      	cbnz	r0, 8004d1c <__swbuf_r+0x90>
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <__swbuf_r+0x9c>)
 8004cfe:	429c      	cmp	r4, r3
 8004d00:	d101      	bne.n	8004d06 <__swbuf_r+0x7a>
 8004d02:	68ac      	ldr	r4, [r5, #8]
 8004d04:	e7cf      	b.n	8004ca6 <__swbuf_r+0x1a>
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <__swbuf_r+0xa0>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	bf08      	it	eq
 8004d0c:	68ec      	ldreq	r4, [r5, #12]
 8004d0e:	e7ca      	b.n	8004ca6 <__swbuf_r+0x1a>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4628      	mov	r0, r5
 8004d14:	f000 f80c 	bl	8004d30 <__swsetup_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d0cb      	beq.n	8004cb4 <__swbuf_r+0x28>
 8004d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d20:	e7ea      	b.n	8004cf8 <__swbuf_r+0x6c>
 8004d22:	bf00      	nop
 8004d24:	08006ea8 	.word	0x08006ea8
 8004d28:	08006ec8 	.word	0x08006ec8
 8004d2c:	08006e88 	.word	0x08006e88

08004d30 <__swsetup_r>:
 8004d30:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <__swsetup_r+0xcc>)
 8004d32:	b570      	push	{r4, r5, r6, lr}
 8004d34:	681d      	ldr	r5, [r3, #0]
 8004d36:	4606      	mov	r6, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	b125      	cbz	r5, 8004d46 <__swsetup_r+0x16>
 8004d3c:	69ab      	ldr	r3, [r5, #24]
 8004d3e:	b913      	cbnz	r3, 8004d46 <__swsetup_r+0x16>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 fff7 	bl	8005d34 <__sinit>
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <__swsetup_r+0xd0>)
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d10f      	bne.n	8004d6c <__swsetup_r+0x3c>
 8004d4c:	686c      	ldr	r4, [r5, #4]
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d54:	0719      	lsls	r1, r3, #28
 8004d56:	d42c      	bmi.n	8004db2 <__swsetup_r+0x82>
 8004d58:	06dd      	lsls	r5, r3, #27
 8004d5a:	d411      	bmi.n	8004d80 <__swsetup_r+0x50>
 8004d5c:	2309      	movs	r3, #9
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6a:	e03e      	b.n	8004dea <__swsetup_r+0xba>
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <__swsetup_r+0xd4>)
 8004d6e:	429c      	cmp	r4, r3
 8004d70:	d101      	bne.n	8004d76 <__swsetup_r+0x46>
 8004d72:	68ac      	ldr	r4, [r5, #8]
 8004d74:	e7eb      	b.n	8004d4e <__swsetup_r+0x1e>
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <__swsetup_r+0xd8>)
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	bf08      	it	eq
 8004d7c:	68ec      	ldreq	r4, [r5, #12]
 8004d7e:	e7e6      	b.n	8004d4e <__swsetup_r+0x1e>
 8004d80:	0758      	lsls	r0, r3, #29
 8004d82:	d512      	bpl.n	8004daa <__swsetup_r+0x7a>
 8004d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d86:	b141      	cbz	r1, 8004d9a <__swsetup_r+0x6a>
 8004d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	d002      	beq.n	8004d96 <__swsetup_r+0x66>
 8004d90:	4630      	mov	r0, r6
 8004d92:	f001 fc7d 	bl	8006690 <_free_r>
 8004d96:	2300      	movs	r3, #0
 8004d98:	6363      	str	r3, [r4, #52]	; 0x34
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	2300      	movs	r3, #0
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f043 0308 	orr.w	r3, r3, #8
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	b94b      	cbnz	r3, 8004dca <__swsetup_r+0x9a>
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d003      	beq.n	8004dca <__swsetup_r+0x9a>
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f001 f87f 	bl	8005ec8 <__smakebuf_r>
 8004dca:	89a0      	ldrh	r0, [r4, #12]
 8004dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dd0:	f010 0301 	ands.w	r3, r0, #1
 8004dd4:	d00a      	beq.n	8004dec <__swsetup_r+0xbc>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60a3      	str	r3, [r4, #8]
 8004dda:	6963      	ldr	r3, [r4, #20]
 8004ddc:	425b      	negs	r3, r3
 8004dde:	61a3      	str	r3, [r4, #24]
 8004de0:	6923      	ldr	r3, [r4, #16]
 8004de2:	b943      	cbnz	r3, 8004df6 <__swsetup_r+0xc6>
 8004de4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004de8:	d1ba      	bne.n	8004d60 <__swsetup_r+0x30>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	0781      	lsls	r1, r0, #30
 8004dee:	bf58      	it	pl
 8004df0:	6963      	ldrpl	r3, [r4, #20]
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	e7f4      	b.n	8004de0 <__swsetup_r+0xb0>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e7f7      	b.n	8004dea <__swsetup_r+0xba>
 8004dfa:	bf00      	nop
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	08006ea8 	.word	0x08006ea8
 8004e04:	08006ec8 	.word	0x08006ec8
 8004e08:	08006e88 	.word	0x08006e88

08004e0c <quorem>:
 8004e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	6903      	ldr	r3, [r0, #16]
 8004e12:	690c      	ldr	r4, [r1, #16]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	4607      	mov	r7, r0
 8004e18:	f2c0 8081 	blt.w	8004f1e <quorem+0x112>
 8004e1c:	3c01      	subs	r4, #1
 8004e1e:	f101 0814 	add.w	r8, r1, #20
 8004e22:	f100 0514 	add.w	r5, r0, #20
 8004e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e34:	3301      	adds	r3, #1
 8004e36:	429a      	cmp	r2, r3
 8004e38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e40:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e44:	d331      	bcc.n	8004eaa <quorem+0x9e>
 8004e46:	f04f 0e00 	mov.w	lr, #0
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	46ac      	mov	ip, r5
 8004e4e:	46f2      	mov	sl, lr
 8004e50:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e54:	b293      	uxth	r3, r2
 8004e56:	fb06 e303 	mla	r3, r6, r3, lr
 8004e5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	ebaa 0303 	sub.w	r3, sl, r3
 8004e64:	0c12      	lsrs	r2, r2, #16
 8004e66:	f8dc a000 	ldr.w	sl, [ip]
 8004e6a:	fb06 e202 	mla	r2, r6, r2, lr
 8004e6e:	fa13 f38a 	uxtah	r3, r3, sl
 8004e72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e76:	fa1f fa82 	uxth.w	sl, r2
 8004e7a:	f8dc 2000 	ldr.w	r2, [ip]
 8004e7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004e82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e8c:	4581      	cmp	r9, r0
 8004e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8004e92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e96:	d2db      	bcs.n	8004e50 <quorem+0x44>
 8004e98:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e9c:	b92b      	cbnz	r3, 8004eaa <quorem+0x9e>
 8004e9e:	9b01      	ldr	r3, [sp, #4]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	429d      	cmp	r5, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	d32e      	bcc.n	8004f06 <quorem+0xfa>
 8004ea8:	613c      	str	r4, [r7, #16]
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f001 fae0 	bl	8006470 <__mcmp>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	db24      	blt.n	8004efe <quorem+0xf2>
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f04f 0c00 	mov.w	ip, #0
 8004ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ec0:	f8d0 e000 	ldr.w	lr, [r0]
 8004ec4:	b293      	uxth	r3, r2
 8004ec6:	ebac 0303 	sub.w	r3, ip, r3
 8004eca:	0c12      	lsrs	r2, r2, #16
 8004ecc:	fa13 f38e 	uxtah	r3, r3, lr
 8004ed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ede:	45c1      	cmp	r9, r8
 8004ee0:	f840 3b04 	str.w	r3, [r0], #4
 8004ee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ee8:	d2e8      	bcs.n	8004ebc <quorem+0xb0>
 8004eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ef2:	b922      	cbnz	r2, 8004efe <quorem+0xf2>
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	429d      	cmp	r5, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	d30a      	bcc.n	8004f12 <quorem+0x106>
 8004efc:	613c      	str	r4, [r7, #16]
 8004efe:	4630      	mov	r0, r6
 8004f00:	b003      	add	sp, #12
 8004f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d1cc      	bne.n	8004ea8 <quorem+0x9c>
 8004f0e:	3c01      	subs	r4, #1
 8004f10:	e7c7      	b.n	8004ea2 <quorem+0x96>
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	3b04      	subs	r3, #4
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	d1f0      	bne.n	8004efc <quorem+0xf0>
 8004f1a:	3c01      	subs	r4, #1
 8004f1c:	e7eb      	b.n	8004ef6 <quorem+0xea>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e7ee      	b.n	8004f00 <quorem+0xf4>
 8004f22:	0000      	movs	r0, r0
 8004f24:	0000      	movs	r0, r0
	...

08004f28 <_dtoa_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	ed2d 8b02 	vpush	{d8}
 8004f30:	ec57 6b10 	vmov	r6, r7, d0
 8004f34:	b095      	sub	sp, #84	; 0x54
 8004f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f3c:	9105      	str	r1, [sp, #20]
 8004f3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004f42:	4604      	mov	r4, r0
 8004f44:	9209      	str	r2, [sp, #36]	; 0x24
 8004f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f48:	b975      	cbnz	r5, 8004f68 <_dtoa_r+0x40>
 8004f4a:	2010      	movs	r0, #16
 8004f4c:	f000 fffc 	bl	8005f48 <malloc>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6260      	str	r0, [r4, #36]	; 0x24
 8004f54:	b920      	cbnz	r0, 8004f60 <_dtoa_r+0x38>
 8004f56:	4bb2      	ldr	r3, [pc, #712]	; (8005220 <_dtoa_r+0x2f8>)
 8004f58:	21ea      	movs	r1, #234	; 0xea
 8004f5a:	48b2      	ldr	r0, [pc, #712]	; (8005224 <_dtoa_r+0x2fc>)
 8004f5c:	f001 fe02 	bl	8006b64 <__assert_func>
 8004f60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f64:	6005      	str	r5, [r0, #0]
 8004f66:	60c5      	str	r5, [r0, #12]
 8004f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	b151      	cbz	r1, 8004f84 <_dtoa_r+0x5c>
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	604a      	str	r2, [r1, #4]
 8004f72:	2301      	movs	r3, #1
 8004f74:	4093      	lsls	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f001 f83b 	bl	8005ff4 <_Bfree>
 8004f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	1e3b      	subs	r3, r7, #0
 8004f86:	bfb9      	ittee	lt
 8004f88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	9303      	strlt	r3, [sp, #12]
 8004f8e:	2300      	movge	r3, #0
 8004f90:	f8c8 3000 	strge.w	r3, [r8]
 8004f94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f98:	4ba3      	ldr	r3, [pc, #652]	; (8005228 <_dtoa_r+0x300>)
 8004f9a:	bfbc      	itt	lt
 8004f9c:	2201      	movlt	r2, #1
 8004f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8004fa2:	ea33 0309 	bics.w	r3, r3, r9
 8004fa6:	d11b      	bne.n	8004fe0 <_dtoa_r+0xb8>
 8004fa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004faa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fb4:	4333      	orrs	r3, r6
 8004fb6:	f000 857a 	beq.w	8005aae <_dtoa_r+0xb86>
 8004fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fbc:	b963      	cbnz	r3, 8004fd8 <_dtoa_r+0xb0>
 8004fbe:	4b9b      	ldr	r3, [pc, #620]	; (800522c <_dtoa_r+0x304>)
 8004fc0:	e024      	b.n	800500c <_dtoa_r+0xe4>
 8004fc2:	4b9b      	ldr	r3, [pc, #620]	; (8005230 <_dtoa_r+0x308>)
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	9800      	ldr	r0, [sp, #0]
 8004fce:	b015      	add	sp, #84	; 0x54
 8004fd0:	ecbd 8b02 	vpop	{d8}
 8004fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	4b94      	ldr	r3, [pc, #592]	; (800522c <_dtoa_r+0x304>)
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	3303      	adds	r3, #3
 8004fde:	e7f3      	b.n	8004fc8 <_dtoa_r+0xa0>
 8004fe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	ec51 0b17 	vmov	r0, r1, d7
 8004fea:	2300      	movs	r3, #0
 8004fec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ff0:	f7fb fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	b158      	cbz	r0, 8005010 <_dtoa_r+0xe8>
 8004ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8551 	beq.w	8005aa8 <_dtoa_r+0xb80>
 8005006:	488b      	ldr	r0, [pc, #556]	; (8005234 <_dtoa_r+0x30c>)
 8005008:	6018      	str	r0, [r3, #0]
 800500a:	1e43      	subs	r3, r0, #1
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	e7dd      	b.n	8004fcc <_dtoa_r+0xa4>
 8005010:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005014:	aa12      	add	r2, sp, #72	; 0x48
 8005016:	a913      	add	r1, sp, #76	; 0x4c
 8005018:	4620      	mov	r0, r4
 800501a:	f001 facd 	bl	80065b8 <__d2b>
 800501e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005022:	4683      	mov	fp, r0
 8005024:	2d00      	cmp	r5, #0
 8005026:	d07c      	beq.n	8005122 <_dtoa_r+0x1fa>
 8005028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800502a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800502e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005032:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005036:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800503a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800503e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005042:	4b7d      	ldr	r3, [pc, #500]	; (8005238 <_dtoa_r+0x310>)
 8005044:	2200      	movs	r2, #0
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	f7fb f925 	bl	8000298 <__aeabi_dsub>
 800504e:	a36e      	add	r3, pc, #440	; (adr r3, 8005208 <_dtoa_r+0x2e0>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb fad8 	bl	8000608 <__aeabi_dmul>
 8005058:	a36d      	add	r3, pc, #436	; (adr r3, 8005210 <_dtoa_r+0x2e8>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb f91d 	bl	800029c <__adddf3>
 8005062:	4606      	mov	r6, r0
 8005064:	4628      	mov	r0, r5
 8005066:	460f      	mov	r7, r1
 8005068:	f7fb fa64 	bl	8000534 <__aeabi_i2d>
 800506c:	a36a      	add	r3, pc, #424	; (adr r3, 8005218 <_dtoa_r+0x2f0>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f7fb fac9 	bl	8000608 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f7fb f90d 	bl	800029c <__adddf3>
 8005082:	4606      	mov	r6, r0
 8005084:	460f      	mov	r7, r1
 8005086:	f7fb fd6f 	bl	8000b68 <__aeabi_d2iz>
 800508a:	2200      	movs	r2, #0
 800508c:	4682      	mov	sl, r0
 800508e:	2300      	movs	r3, #0
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fd2a 	bl	8000aec <__aeabi_dcmplt>
 8005098:	b148      	cbz	r0, 80050ae <_dtoa_r+0x186>
 800509a:	4650      	mov	r0, sl
 800509c:	f7fb fa4a 	bl	8000534 <__aeabi_i2d>
 80050a0:	4632      	mov	r2, r6
 80050a2:	463b      	mov	r3, r7
 80050a4:	f7fb fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80050a8:	b908      	cbnz	r0, 80050ae <_dtoa_r+0x186>
 80050aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ae:	f1ba 0f16 	cmp.w	sl, #22
 80050b2:	d854      	bhi.n	800515e <_dtoa_r+0x236>
 80050b4:	4b61      	ldr	r3, [pc, #388]	; (800523c <_dtoa_r+0x314>)
 80050b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050c2:	f7fb fd13 	bl	8000aec <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d04b      	beq.n	8005162 <_dtoa_r+0x23a>
 80050ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ce:	2300      	movs	r3, #0
 80050d0:	930e      	str	r3, [sp, #56]	; 0x38
 80050d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050d4:	1b5d      	subs	r5, r3, r5
 80050d6:	1e6b      	subs	r3, r5, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	bf43      	ittte	mi
 80050dc:	2300      	movmi	r3, #0
 80050de:	f1c5 0801 	rsbmi	r8, r5, #1
 80050e2:	9304      	strmi	r3, [sp, #16]
 80050e4:	f04f 0800 	movpl.w	r8, #0
 80050e8:	f1ba 0f00 	cmp.w	sl, #0
 80050ec:	db3b      	blt.n	8005166 <_dtoa_r+0x23e>
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80050f4:	4453      	add	r3, sl
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	2300      	movs	r3, #0
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d869      	bhi.n	80051d6 <_dtoa_r+0x2ae>
 8005102:	2b05      	cmp	r3, #5
 8005104:	bfc4      	itt	gt
 8005106:	3b04      	subgt	r3, #4
 8005108:	9305      	strgt	r3, [sp, #20]
 800510a:	9b05      	ldr	r3, [sp, #20]
 800510c:	f1a3 0302 	sub.w	r3, r3, #2
 8005110:	bfcc      	ite	gt
 8005112:	2500      	movgt	r5, #0
 8005114:	2501      	movle	r5, #1
 8005116:	2b03      	cmp	r3, #3
 8005118:	d869      	bhi.n	80051ee <_dtoa_r+0x2c6>
 800511a:	e8df f003 	tbb	[pc, r3]
 800511e:	4e2c      	.short	0x4e2c
 8005120:	5a4c      	.short	0x5a4c
 8005122:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005126:	441d      	add	r5, r3
 8005128:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800512c:	2b20      	cmp	r3, #32
 800512e:	bfc1      	itttt	gt
 8005130:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005134:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005138:	fa09 f303 	lslgt.w	r3, r9, r3
 800513c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005140:	bfda      	itte	le
 8005142:	f1c3 0320 	rsble	r3, r3, #32
 8005146:	fa06 f003 	lslle.w	r0, r6, r3
 800514a:	4318      	orrgt	r0, r3
 800514c:	f7fb f9e2 	bl	8000514 <__aeabi_ui2d>
 8005150:	2301      	movs	r3, #1
 8005152:	4606      	mov	r6, r0
 8005154:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005158:	3d01      	subs	r5, #1
 800515a:	9310      	str	r3, [sp, #64]	; 0x40
 800515c:	e771      	b.n	8005042 <_dtoa_r+0x11a>
 800515e:	2301      	movs	r3, #1
 8005160:	e7b6      	b.n	80050d0 <_dtoa_r+0x1a8>
 8005162:	900e      	str	r0, [sp, #56]	; 0x38
 8005164:	e7b5      	b.n	80050d2 <_dtoa_r+0x1aa>
 8005166:	f1ca 0300 	rsb	r3, sl, #0
 800516a:	9306      	str	r3, [sp, #24]
 800516c:	2300      	movs	r3, #0
 800516e:	eba8 080a 	sub.w	r8, r8, sl
 8005172:	930d      	str	r3, [sp, #52]	; 0x34
 8005174:	e7c2      	b.n	80050fc <_dtoa_r+0x1d4>
 8005176:	2300      	movs	r3, #0
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	dc39      	bgt.n	80051f4 <_dtoa_r+0x2cc>
 8005180:	f04f 0901 	mov.w	r9, #1
 8005184:	f8cd 9004 	str.w	r9, [sp, #4]
 8005188:	464b      	mov	r3, r9
 800518a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800518e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005190:	2200      	movs	r2, #0
 8005192:	6042      	str	r2, [r0, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	f102 0614 	add.w	r6, r2, #20
 800519a:	429e      	cmp	r6, r3
 800519c:	6841      	ldr	r1, [r0, #4]
 800519e:	d92f      	bls.n	8005200 <_dtoa_r+0x2d8>
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fee7 	bl	8005f74 <_Balloc>
 80051a6:	9000      	str	r0, [sp, #0]
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d14b      	bne.n	8005244 <_dtoa_r+0x31c>
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <_dtoa_r+0x318>)
 80051ae:	4602      	mov	r2, r0
 80051b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051b4:	e6d1      	b.n	8004f5a <_dtoa_r+0x32>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7de      	b.n	8005178 <_dtoa_r+0x250>
 80051ba:	2300      	movs	r3, #0
 80051bc:	9308      	str	r3, [sp, #32]
 80051be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c0:	eb0a 0903 	add.w	r9, sl, r3
 80051c4:	f109 0301 	add.w	r3, r9, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	bfb8      	it	lt
 80051ce:	2301      	movlt	r3, #1
 80051d0:	e7dd      	b.n	800518e <_dtoa_r+0x266>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7f2      	b.n	80051bc <_dtoa_r+0x294>
 80051d6:	2501      	movs	r5, #1
 80051d8:	2300      	movs	r3, #0
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	9508      	str	r5, [sp, #32]
 80051de:	f04f 39ff 	mov.w	r9, #4294967295
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80051e8:	2312      	movs	r3, #18
 80051ea:	9209      	str	r2, [sp, #36]	; 0x24
 80051ec:	e7cf      	b.n	800518e <_dtoa_r+0x266>
 80051ee:	2301      	movs	r3, #1
 80051f0:	9308      	str	r3, [sp, #32]
 80051f2:	e7f4      	b.n	80051de <_dtoa_r+0x2b6>
 80051f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051fc:	464b      	mov	r3, r9
 80051fe:	e7c6      	b.n	800518e <_dtoa_r+0x266>
 8005200:	3101      	adds	r1, #1
 8005202:	6041      	str	r1, [r0, #4]
 8005204:	0052      	lsls	r2, r2, #1
 8005206:	e7c6      	b.n	8005196 <_dtoa_r+0x26e>
 8005208:	636f4361 	.word	0x636f4361
 800520c:	3fd287a7 	.word	0x3fd287a7
 8005210:	8b60c8b3 	.word	0x8b60c8b3
 8005214:	3fc68a28 	.word	0x3fc68a28
 8005218:	509f79fb 	.word	0x509f79fb
 800521c:	3fd34413 	.word	0x3fd34413
 8005220:	08006e01 	.word	0x08006e01
 8005224:	08006e18 	.word	0x08006e18
 8005228:	7ff00000 	.word	0x7ff00000
 800522c:	08006dfd 	.word	0x08006dfd
 8005230:	08006df4 	.word	0x08006df4
 8005234:	08006dd1 	.word	0x08006dd1
 8005238:	3ff80000 	.word	0x3ff80000
 800523c:	08006f70 	.word	0x08006f70
 8005240:	08006e77 	.word	0x08006e77
 8005244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005246:	9a00      	ldr	r2, [sp, #0]
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	2b0e      	cmp	r3, #14
 800524e:	f200 80ad 	bhi.w	80053ac <_dtoa_r+0x484>
 8005252:	2d00      	cmp	r5, #0
 8005254:	f000 80aa 	beq.w	80053ac <_dtoa_r+0x484>
 8005258:	f1ba 0f00 	cmp.w	sl, #0
 800525c:	dd36      	ble.n	80052cc <_dtoa_r+0x3a4>
 800525e:	4ac3      	ldr	r2, [pc, #780]	; (800556c <_dtoa_r+0x644>)
 8005260:	f00a 030f 	and.w	r3, sl, #15
 8005264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005268:	ed93 7b00 	vldr	d7, [r3]
 800526c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005270:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005274:	eeb0 8a47 	vmov.f32	s16, s14
 8005278:	eef0 8a67 	vmov.f32	s17, s15
 800527c:	d016      	beq.n	80052ac <_dtoa_r+0x384>
 800527e:	4bbc      	ldr	r3, [pc, #752]	; (8005570 <_dtoa_r+0x648>)
 8005280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005288:	f7fb fae8 	bl	800085c <__aeabi_ddiv>
 800528c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005290:	f007 070f 	and.w	r7, r7, #15
 8005294:	2503      	movs	r5, #3
 8005296:	4eb6      	ldr	r6, [pc, #728]	; (8005570 <_dtoa_r+0x648>)
 8005298:	b957      	cbnz	r7, 80052b0 <_dtoa_r+0x388>
 800529a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800529e:	ec53 2b18 	vmov	r2, r3, d8
 80052a2:	f7fb fadb 	bl	800085c <__aeabi_ddiv>
 80052a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052aa:	e029      	b.n	8005300 <_dtoa_r+0x3d8>
 80052ac:	2502      	movs	r5, #2
 80052ae:	e7f2      	b.n	8005296 <_dtoa_r+0x36e>
 80052b0:	07f9      	lsls	r1, r7, #31
 80052b2:	d508      	bpl.n	80052c6 <_dtoa_r+0x39e>
 80052b4:	ec51 0b18 	vmov	r0, r1, d8
 80052b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052bc:	f7fb f9a4 	bl	8000608 <__aeabi_dmul>
 80052c0:	ec41 0b18 	vmov	d8, r0, r1
 80052c4:	3501      	adds	r5, #1
 80052c6:	107f      	asrs	r7, r7, #1
 80052c8:	3608      	adds	r6, #8
 80052ca:	e7e5      	b.n	8005298 <_dtoa_r+0x370>
 80052cc:	f000 80a6 	beq.w	800541c <_dtoa_r+0x4f4>
 80052d0:	f1ca 0600 	rsb	r6, sl, #0
 80052d4:	4ba5      	ldr	r3, [pc, #660]	; (800556c <_dtoa_r+0x644>)
 80052d6:	4fa6      	ldr	r7, [pc, #664]	; (8005570 <_dtoa_r+0x648>)
 80052d8:	f006 020f 	and.w	r2, r6, #15
 80052dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052e8:	f7fb f98e 	bl	8000608 <__aeabi_dmul>
 80052ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f0:	1136      	asrs	r6, r6, #4
 80052f2:	2300      	movs	r3, #0
 80052f4:	2502      	movs	r5, #2
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	f040 8085 	bne.w	8005406 <_dtoa_r+0x4de>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1d2      	bne.n	80052a6 <_dtoa_r+0x37e>
 8005300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 808c 	beq.w	8005420 <_dtoa_r+0x4f8>
 8005308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800530c:	4b99      	ldr	r3, [pc, #612]	; (8005574 <_dtoa_r+0x64c>)
 800530e:	2200      	movs	r2, #0
 8005310:	4630      	mov	r0, r6
 8005312:	4639      	mov	r1, r7
 8005314:	f7fb fbea 	bl	8000aec <__aeabi_dcmplt>
 8005318:	2800      	cmp	r0, #0
 800531a:	f000 8081 	beq.w	8005420 <_dtoa_r+0x4f8>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d07d      	beq.n	8005420 <_dtoa_r+0x4f8>
 8005324:	f1b9 0f00 	cmp.w	r9, #0
 8005328:	dd3c      	ble.n	80053a4 <_dtoa_r+0x47c>
 800532a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800532e:	9307      	str	r3, [sp, #28]
 8005330:	2200      	movs	r2, #0
 8005332:	4b91      	ldr	r3, [pc, #580]	; (8005578 <_dtoa_r+0x650>)
 8005334:	4630      	mov	r0, r6
 8005336:	4639      	mov	r1, r7
 8005338:	f7fb f966 	bl	8000608 <__aeabi_dmul>
 800533c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005340:	3501      	adds	r5, #1
 8005342:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005346:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800534a:	4628      	mov	r0, r5
 800534c:	f7fb f8f2 	bl	8000534 <__aeabi_i2d>
 8005350:	4632      	mov	r2, r6
 8005352:	463b      	mov	r3, r7
 8005354:	f7fb f958 	bl	8000608 <__aeabi_dmul>
 8005358:	4b88      	ldr	r3, [pc, #544]	; (800557c <_dtoa_r+0x654>)
 800535a:	2200      	movs	r2, #0
 800535c:	f7fa ff9e 	bl	800029c <__adddf3>
 8005360:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800536c:	2b00      	cmp	r3, #0
 800536e:	d15c      	bne.n	800542a <_dtoa_r+0x502>
 8005370:	4b83      	ldr	r3, [pc, #524]	; (8005580 <_dtoa_r+0x658>)
 8005372:	2200      	movs	r2, #0
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fa ff8e 	bl	8000298 <__aeabi_dsub>
 800537c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	f7fb fbd0 	bl	8000b28 <__aeabi_dcmpgt>
 8005388:	2800      	cmp	r0, #0
 800538a:	f040 8296 	bne.w	80058ba <_dtoa_r+0x992>
 800538e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005392:	4630      	mov	r0, r6
 8005394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005398:	4639      	mov	r1, r7
 800539a:	f7fb fba7 	bl	8000aec <__aeabi_dcmplt>
 800539e:	2800      	cmp	r0, #0
 80053a0:	f040 8288 	bne.w	80058b4 <_dtoa_r+0x98c>
 80053a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f2c0 8158 	blt.w	8005664 <_dtoa_r+0x73c>
 80053b4:	f1ba 0f0e 	cmp.w	sl, #14
 80053b8:	f300 8154 	bgt.w	8005664 <_dtoa_r+0x73c>
 80053bc:	4b6b      	ldr	r3, [pc, #428]	; (800556c <_dtoa_r+0x644>)
 80053be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f280 80e3 	bge.w	8005594 <_dtoa_r+0x66c>
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f300 80df 	bgt.w	8005594 <_dtoa_r+0x66c>
 80053d6:	f040 826d 	bne.w	80058b4 <_dtoa_r+0x98c>
 80053da:	4b69      	ldr	r3, [pc, #420]	; (8005580 <_dtoa_r+0x658>)
 80053dc:	2200      	movs	r2, #0
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fb f911 	bl	8000608 <__aeabi_dmul>
 80053e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ea:	f7fb fb93 	bl	8000b14 <__aeabi_dcmpge>
 80053ee:	9e01      	ldr	r6, [sp, #4]
 80053f0:	4637      	mov	r7, r6
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f040 8243 	bne.w	800587e <_dtoa_r+0x956>
 80053f8:	9d00      	ldr	r5, [sp, #0]
 80053fa:	2331      	movs	r3, #49	; 0x31
 80053fc:	f805 3b01 	strb.w	r3, [r5], #1
 8005400:	f10a 0a01 	add.w	sl, sl, #1
 8005404:	e23f      	b.n	8005886 <_dtoa_r+0x95e>
 8005406:	07f2      	lsls	r2, r6, #31
 8005408:	d505      	bpl.n	8005416 <_dtoa_r+0x4ee>
 800540a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800540e:	f7fb f8fb 	bl	8000608 <__aeabi_dmul>
 8005412:	3501      	adds	r5, #1
 8005414:	2301      	movs	r3, #1
 8005416:	1076      	asrs	r6, r6, #1
 8005418:	3708      	adds	r7, #8
 800541a:	e76c      	b.n	80052f6 <_dtoa_r+0x3ce>
 800541c:	2502      	movs	r5, #2
 800541e:	e76f      	b.n	8005300 <_dtoa_r+0x3d8>
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	f8cd a01c 	str.w	sl, [sp, #28]
 8005426:	930c      	str	r3, [sp, #48]	; 0x30
 8005428:	e78d      	b.n	8005346 <_dtoa_r+0x41e>
 800542a:	9900      	ldr	r1, [sp, #0]
 800542c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800542e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005430:	4b4e      	ldr	r3, [pc, #312]	; (800556c <_dtoa_r+0x644>)
 8005432:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005436:	4401      	add	r1, r0
 8005438:	9102      	str	r1, [sp, #8]
 800543a:	9908      	ldr	r1, [sp, #32]
 800543c:	eeb0 8a47 	vmov.f32	s16, s14
 8005440:	eef0 8a67 	vmov.f32	s17, s15
 8005444:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800544c:	2900      	cmp	r1, #0
 800544e:	d045      	beq.n	80054dc <_dtoa_r+0x5b4>
 8005450:	494c      	ldr	r1, [pc, #304]	; (8005584 <_dtoa_r+0x65c>)
 8005452:	2000      	movs	r0, #0
 8005454:	f7fb fa02 	bl	800085c <__aeabi_ddiv>
 8005458:	ec53 2b18 	vmov	r2, r3, d8
 800545c:	f7fa ff1c 	bl	8000298 <__aeabi_dsub>
 8005460:	9d00      	ldr	r5, [sp, #0]
 8005462:	ec41 0b18 	vmov	d8, r0, r1
 8005466:	4639      	mov	r1, r7
 8005468:	4630      	mov	r0, r6
 800546a:	f7fb fb7d 	bl	8000b68 <__aeabi_d2iz>
 800546e:	900c      	str	r0, [sp, #48]	; 0x30
 8005470:	f7fb f860 	bl	8000534 <__aeabi_i2d>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ff0c 	bl	8000298 <__aeabi_dsub>
 8005480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005482:	3330      	adds	r3, #48	; 0x30
 8005484:	f805 3b01 	strb.w	r3, [r5], #1
 8005488:	ec53 2b18 	vmov	r2, r3, d8
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	f7fb fb2c 	bl	8000aec <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	d165      	bne.n	8005564 <_dtoa_r+0x63c>
 8005498:	4632      	mov	r2, r6
 800549a:	463b      	mov	r3, r7
 800549c:	4935      	ldr	r1, [pc, #212]	; (8005574 <_dtoa_r+0x64c>)
 800549e:	2000      	movs	r0, #0
 80054a0:	f7fa fefa 	bl	8000298 <__aeabi_dsub>
 80054a4:	ec53 2b18 	vmov	r2, r3, d8
 80054a8:	f7fb fb20 	bl	8000aec <__aeabi_dcmplt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f040 80b9 	bne.w	8005624 <_dtoa_r+0x6fc>
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	429d      	cmp	r5, r3
 80054b6:	f43f af75 	beq.w	80053a4 <_dtoa_r+0x47c>
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <_dtoa_r+0x650>)
 80054bc:	ec51 0b18 	vmov	r0, r1, d8
 80054c0:	2200      	movs	r2, #0
 80054c2:	f7fb f8a1 	bl	8000608 <__aeabi_dmul>
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <_dtoa_r+0x650>)
 80054c8:	ec41 0b18 	vmov	d8, r0, r1
 80054cc:	2200      	movs	r2, #0
 80054ce:	4630      	mov	r0, r6
 80054d0:	4639      	mov	r1, r7
 80054d2:	f7fb f899 	bl	8000608 <__aeabi_dmul>
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	e7c4      	b.n	8005466 <_dtoa_r+0x53e>
 80054dc:	ec51 0b17 	vmov	r0, r1, d7
 80054e0:	f7fb f892 	bl	8000608 <__aeabi_dmul>
 80054e4:	9b02      	ldr	r3, [sp, #8]
 80054e6:	9d00      	ldr	r5, [sp, #0]
 80054e8:	930c      	str	r3, [sp, #48]	; 0x30
 80054ea:	ec41 0b18 	vmov	d8, r0, r1
 80054ee:	4639      	mov	r1, r7
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7fb fb39 	bl	8000b68 <__aeabi_d2iz>
 80054f6:	9011      	str	r0, [sp, #68]	; 0x44
 80054f8:	f7fb f81c 	bl	8000534 <__aeabi_i2d>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fa fec8 	bl	8000298 <__aeabi_dsub>
 8005508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800550a:	3330      	adds	r3, #48	; 0x30
 800550c:	f805 3b01 	strb.w	r3, [r5], #1
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	429d      	cmp	r5, r3
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	d134      	bne.n	8005588 <_dtoa_r+0x660>
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <_dtoa_r+0x65c>)
 8005520:	ec51 0b18 	vmov	r0, r1, d8
 8005524:	f7fa feba 	bl	800029c <__adddf3>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fb fafa 	bl	8000b28 <__aeabi_dcmpgt>
 8005534:	2800      	cmp	r0, #0
 8005536:	d175      	bne.n	8005624 <_dtoa_r+0x6fc>
 8005538:	ec53 2b18 	vmov	r2, r3, d8
 800553c:	4911      	ldr	r1, [pc, #68]	; (8005584 <_dtoa_r+0x65c>)
 800553e:	2000      	movs	r0, #0
 8005540:	f7fa feaa 	bl	8000298 <__aeabi_dsub>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb face 	bl	8000aec <__aeabi_dcmplt>
 8005550:	2800      	cmp	r0, #0
 8005552:	f43f af27 	beq.w	80053a4 <_dtoa_r+0x47c>
 8005556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005558:	1e6b      	subs	r3, r5, #1
 800555a:	930c      	str	r3, [sp, #48]	; 0x30
 800555c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d0f8      	beq.n	8005556 <_dtoa_r+0x62e>
 8005564:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005568:	e04a      	b.n	8005600 <_dtoa_r+0x6d8>
 800556a:	bf00      	nop
 800556c:	08006f70 	.word	0x08006f70
 8005570:	08006f48 	.word	0x08006f48
 8005574:	3ff00000 	.word	0x3ff00000
 8005578:	40240000 	.word	0x40240000
 800557c:	401c0000 	.word	0x401c0000
 8005580:	40140000 	.word	0x40140000
 8005584:	3fe00000 	.word	0x3fe00000
 8005588:	4baf      	ldr	r3, [pc, #700]	; (8005848 <_dtoa_r+0x920>)
 800558a:	f7fb f83d 	bl	8000608 <__aeabi_dmul>
 800558e:	4606      	mov	r6, r0
 8005590:	460f      	mov	r7, r1
 8005592:	e7ac      	b.n	80054ee <_dtoa_r+0x5c6>
 8005594:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005598:	9d00      	ldr	r5, [sp, #0]
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb f95b 	bl	800085c <__aeabi_ddiv>
 80055a6:	f7fb fadf 	bl	8000b68 <__aeabi_d2iz>
 80055aa:	9002      	str	r0, [sp, #8]
 80055ac:	f7fa ffc2 	bl	8000534 <__aeabi_i2d>
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	f7fb f828 	bl	8000608 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fa fe6a 	bl	8000298 <__aeabi_dsub>
 80055c4:	9e02      	ldr	r6, [sp, #8]
 80055c6:	9f01      	ldr	r7, [sp, #4]
 80055c8:	3630      	adds	r6, #48	; 0x30
 80055ca:	f805 6b01 	strb.w	r6, [r5], #1
 80055ce:	9e00      	ldr	r6, [sp, #0]
 80055d0:	1bae      	subs	r6, r5, r6
 80055d2:	42b7      	cmp	r7, r6
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	d137      	bne.n	800564a <_dtoa_r+0x722>
 80055da:	f7fa fe5f 	bl	800029c <__adddf3>
 80055de:	4642      	mov	r2, r8
 80055e0:	464b      	mov	r3, r9
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	f7fb fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 80055ea:	b9c8      	cbnz	r0, 8005620 <_dtoa_r+0x6f8>
 80055ec:	4642      	mov	r2, r8
 80055ee:	464b      	mov	r3, r9
 80055f0:	4630      	mov	r0, r6
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7fb fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f8:	b110      	cbz	r0, 8005600 <_dtoa_r+0x6d8>
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	07d9      	lsls	r1, r3, #31
 80055fe:	d40f      	bmi.n	8005620 <_dtoa_r+0x6f8>
 8005600:	4620      	mov	r0, r4
 8005602:	4659      	mov	r1, fp
 8005604:	f000 fcf6 	bl	8005ff4 <_Bfree>
 8005608:	2300      	movs	r3, #0
 800560a:	702b      	strb	r3, [r5, #0]
 800560c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800560e:	f10a 0001 	add.w	r0, sl, #1
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005616:	2b00      	cmp	r3, #0
 8005618:	f43f acd8 	beq.w	8004fcc <_dtoa_r+0xa4>
 800561c:	601d      	str	r5, [r3, #0]
 800561e:	e4d5      	b.n	8004fcc <_dtoa_r+0xa4>
 8005620:	f8cd a01c 	str.w	sl, [sp, #28]
 8005624:	462b      	mov	r3, r5
 8005626:	461d      	mov	r5, r3
 8005628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800562c:	2a39      	cmp	r2, #57	; 0x39
 800562e:	d108      	bne.n	8005642 <_dtoa_r+0x71a>
 8005630:	9a00      	ldr	r2, [sp, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d1f7      	bne.n	8005626 <_dtoa_r+0x6fe>
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	9900      	ldr	r1, [sp, #0]
 800563a:	3201      	adds	r2, #1
 800563c:	9207      	str	r2, [sp, #28]
 800563e:	2230      	movs	r2, #48	; 0x30
 8005640:	700a      	strb	r2, [r1, #0]
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	3201      	adds	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e78c      	b.n	8005564 <_dtoa_r+0x63c>
 800564a:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <_dtoa_r+0x920>)
 800564c:	2200      	movs	r2, #0
 800564e:	f7fa ffdb 	bl	8000608 <__aeabi_dmul>
 8005652:	2200      	movs	r2, #0
 8005654:	2300      	movs	r3, #0
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	f7fb fa3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800565e:	2800      	cmp	r0, #0
 8005660:	d09b      	beq.n	800559a <_dtoa_r+0x672>
 8005662:	e7cd      	b.n	8005600 <_dtoa_r+0x6d8>
 8005664:	9a08      	ldr	r2, [sp, #32]
 8005666:	2a00      	cmp	r2, #0
 8005668:	f000 80c4 	beq.w	80057f4 <_dtoa_r+0x8cc>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	2a01      	cmp	r2, #1
 8005670:	f300 80a8 	bgt.w	80057c4 <_dtoa_r+0x89c>
 8005674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005676:	2a00      	cmp	r2, #0
 8005678:	f000 80a0 	beq.w	80057bc <_dtoa_r+0x894>
 800567c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005680:	9e06      	ldr	r6, [sp, #24]
 8005682:	4645      	mov	r5, r8
 8005684:	9a04      	ldr	r2, [sp, #16]
 8005686:	2101      	movs	r1, #1
 8005688:	441a      	add	r2, r3
 800568a:	4620      	mov	r0, r4
 800568c:	4498      	add	r8, r3
 800568e:	9204      	str	r2, [sp, #16]
 8005690:	f000 fd6c 	bl	800616c <__i2b>
 8005694:	4607      	mov	r7, r0
 8005696:	2d00      	cmp	r5, #0
 8005698:	dd0b      	ble.n	80056b2 <_dtoa_r+0x78a>
 800569a:	9b04      	ldr	r3, [sp, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	dd08      	ble.n	80056b2 <_dtoa_r+0x78a>
 80056a0:	42ab      	cmp	r3, r5
 80056a2:	9a04      	ldr	r2, [sp, #16]
 80056a4:	bfa8      	it	ge
 80056a6:	462b      	movge	r3, r5
 80056a8:	eba8 0803 	sub.w	r8, r8, r3
 80056ac:	1aed      	subs	r5, r5, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	9b06      	ldr	r3, [sp, #24]
 80056b4:	b1fb      	cbz	r3, 80056f6 <_dtoa_r+0x7ce>
 80056b6:	9b08      	ldr	r3, [sp, #32]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 809f 	beq.w	80057fc <_dtoa_r+0x8d4>
 80056be:	2e00      	cmp	r6, #0
 80056c0:	dd11      	ble.n	80056e6 <_dtoa_r+0x7be>
 80056c2:	4639      	mov	r1, r7
 80056c4:	4632      	mov	r2, r6
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fe0c 	bl	80062e4 <__pow5mult>
 80056cc:	465a      	mov	r2, fp
 80056ce:	4601      	mov	r1, r0
 80056d0:	4607      	mov	r7, r0
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fd60 	bl	8006198 <__multiply>
 80056d8:	4659      	mov	r1, fp
 80056da:	9007      	str	r0, [sp, #28]
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 fc89 	bl	8005ff4 <_Bfree>
 80056e2:	9b07      	ldr	r3, [sp, #28]
 80056e4:	469b      	mov	fp, r3
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	1b9a      	subs	r2, r3, r6
 80056ea:	d004      	beq.n	80056f6 <_dtoa_r+0x7ce>
 80056ec:	4659      	mov	r1, fp
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 fdf8 	bl	80062e4 <__pow5mult>
 80056f4:	4683      	mov	fp, r0
 80056f6:	2101      	movs	r1, #1
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fd37 	bl	800616c <__i2b>
 80056fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	4606      	mov	r6, r0
 8005704:	dd7c      	ble.n	8005800 <_dtoa_r+0x8d8>
 8005706:	461a      	mov	r2, r3
 8005708:	4601      	mov	r1, r0
 800570a:	4620      	mov	r0, r4
 800570c:	f000 fdea 	bl	80062e4 <__pow5mult>
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	2b01      	cmp	r3, #1
 8005714:	4606      	mov	r6, r0
 8005716:	dd76      	ble.n	8005806 <_dtoa_r+0x8de>
 8005718:	2300      	movs	r3, #0
 800571a:	9306      	str	r3, [sp, #24]
 800571c:	6933      	ldr	r3, [r6, #16]
 800571e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005722:	6918      	ldr	r0, [r3, #16]
 8005724:	f000 fcd2 	bl	80060cc <__hi0bits>
 8005728:	f1c0 0020 	rsb	r0, r0, #32
 800572c:	9b04      	ldr	r3, [sp, #16]
 800572e:	4418      	add	r0, r3
 8005730:	f010 001f 	ands.w	r0, r0, #31
 8005734:	f000 8086 	beq.w	8005844 <_dtoa_r+0x91c>
 8005738:	f1c0 0320 	rsb	r3, r0, #32
 800573c:	2b04      	cmp	r3, #4
 800573e:	dd7f      	ble.n	8005840 <_dtoa_r+0x918>
 8005740:	f1c0 001c 	rsb	r0, r0, #28
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	4403      	add	r3, r0
 8005748:	4480      	add	r8, r0
 800574a:	4405      	add	r5, r0
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	f1b8 0f00 	cmp.w	r8, #0
 8005752:	dd05      	ble.n	8005760 <_dtoa_r+0x838>
 8005754:	4659      	mov	r1, fp
 8005756:	4642      	mov	r2, r8
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fe1d 	bl	8006398 <__lshift>
 800575e:	4683      	mov	fp, r0
 8005760:	9b04      	ldr	r3, [sp, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	dd05      	ble.n	8005772 <_dtoa_r+0x84a>
 8005766:	4631      	mov	r1, r6
 8005768:	461a      	mov	r2, r3
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fe14 	bl	8006398 <__lshift>
 8005770:	4606      	mov	r6, r0
 8005772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d069      	beq.n	800584c <_dtoa_r+0x924>
 8005778:	4631      	mov	r1, r6
 800577a:	4658      	mov	r0, fp
 800577c:	f000 fe78 	bl	8006470 <__mcmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	da63      	bge.n	800584c <_dtoa_r+0x924>
 8005784:	2300      	movs	r3, #0
 8005786:	4659      	mov	r1, fp
 8005788:	220a      	movs	r2, #10
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fc54 	bl	8006038 <__multadd>
 8005790:	9b08      	ldr	r3, [sp, #32]
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005796:	4683      	mov	fp, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 818f 	beq.w	8005abc <_dtoa_r+0xb94>
 800579e:	4639      	mov	r1, r7
 80057a0:	2300      	movs	r3, #0
 80057a2:	220a      	movs	r2, #10
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 fc47 	bl	8006038 <__multadd>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	4607      	mov	r7, r0
 80057b0:	f300 808e 	bgt.w	80058d0 <_dtoa_r+0x9a8>
 80057b4:	9b05      	ldr	r3, [sp, #20]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	dc50      	bgt.n	800585c <_dtoa_r+0x934>
 80057ba:	e089      	b.n	80058d0 <_dtoa_r+0x9a8>
 80057bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057c2:	e75d      	b.n	8005680 <_dtoa_r+0x758>
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	1e5e      	subs	r6, r3, #1
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	42b3      	cmp	r3, r6
 80057cc:	bfbf      	itttt	lt
 80057ce:	9b06      	ldrlt	r3, [sp, #24]
 80057d0:	9606      	strlt	r6, [sp, #24]
 80057d2:	1af2      	sublt	r2, r6, r3
 80057d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80057d6:	bfb6      	itet	lt
 80057d8:	189b      	addlt	r3, r3, r2
 80057da:	1b9e      	subge	r6, r3, r6
 80057dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	bfb8      	it	lt
 80057e2:	2600      	movlt	r6, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfb5      	itete	lt
 80057e8:	eba8 0503 	sublt.w	r5, r8, r3
 80057ec:	9b01      	ldrge	r3, [sp, #4]
 80057ee:	2300      	movlt	r3, #0
 80057f0:	4645      	movge	r5, r8
 80057f2:	e747      	b.n	8005684 <_dtoa_r+0x75c>
 80057f4:	9e06      	ldr	r6, [sp, #24]
 80057f6:	9f08      	ldr	r7, [sp, #32]
 80057f8:	4645      	mov	r5, r8
 80057fa:	e74c      	b.n	8005696 <_dtoa_r+0x76e>
 80057fc:	9a06      	ldr	r2, [sp, #24]
 80057fe:	e775      	b.n	80056ec <_dtoa_r+0x7c4>
 8005800:	9b05      	ldr	r3, [sp, #20]
 8005802:	2b01      	cmp	r3, #1
 8005804:	dc18      	bgt.n	8005838 <_dtoa_r+0x910>
 8005806:	9b02      	ldr	r3, [sp, #8]
 8005808:	b9b3      	cbnz	r3, 8005838 <_dtoa_r+0x910>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005810:	b9a3      	cbnz	r3, 800583c <_dtoa_r+0x914>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005818:	0d1b      	lsrs	r3, r3, #20
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	b12b      	cbz	r3, 800582a <_dtoa_r+0x902>
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	3301      	adds	r3, #1
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	f108 0801 	add.w	r8, r8, #1
 8005828:	2301      	movs	r3, #1
 800582a:	9306      	str	r3, [sp, #24]
 800582c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f af74 	bne.w	800571c <_dtoa_r+0x7f4>
 8005834:	2001      	movs	r0, #1
 8005836:	e779      	b.n	800572c <_dtoa_r+0x804>
 8005838:	2300      	movs	r3, #0
 800583a:	e7f6      	b.n	800582a <_dtoa_r+0x902>
 800583c:	9b02      	ldr	r3, [sp, #8]
 800583e:	e7f4      	b.n	800582a <_dtoa_r+0x902>
 8005840:	d085      	beq.n	800574e <_dtoa_r+0x826>
 8005842:	4618      	mov	r0, r3
 8005844:	301c      	adds	r0, #28
 8005846:	e77d      	b.n	8005744 <_dtoa_r+0x81c>
 8005848:	40240000 	.word	0x40240000
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	dc38      	bgt.n	80058c4 <_dtoa_r+0x99c>
 8005852:	9b05      	ldr	r3, [sp, #20]
 8005854:	2b02      	cmp	r3, #2
 8005856:	dd35      	ble.n	80058c4 <_dtoa_r+0x99c>
 8005858:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	d10d      	bne.n	800587e <_dtoa_r+0x956>
 8005862:	4631      	mov	r1, r6
 8005864:	464b      	mov	r3, r9
 8005866:	2205      	movs	r2, #5
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fbe5 	bl	8006038 <__multadd>
 800586e:	4601      	mov	r1, r0
 8005870:	4606      	mov	r6, r0
 8005872:	4658      	mov	r0, fp
 8005874:	f000 fdfc 	bl	8006470 <__mcmp>
 8005878:	2800      	cmp	r0, #0
 800587a:	f73f adbd 	bgt.w	80053f8 <_dtoa_r+0x4d0>
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	9d00      	ldr	r5, [sp, #0]
 8005882:	ea6f 0a03 	mvn.w	sl, r3
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	4631      	mov	r1, r6
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fbb1 	bl	8005ff4 <_Bfree>
 8005892:	2f00      	cmp	r7, #0
 8005894:	f43f aeb4 	beq.w	8005600 <_dtoa_r+0x6d8>
 8005898:	f1b8 0f00 	cmp.w	r8, #0
 800589c:	d005      	beq.n	80058aa <_dtoa_r+0x982>
 800589e:	45b8      	cmp	r8, r7
 80058a0:	d003      	beq.n	80058aa <_dtoa_r+0x982>
 80058a2:	4641      	mov	r1, r8
 80058a4:	4620      	mov	r0, r4
 80058a6:	f000 fba5 	bl	8005ff4 <_Bfree>
 80058aa:	4639      	mov	r1, r7
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fba1 	bl	8005ff4 <_Bfree>
 80058b2:	e6a5      	b.n	8005600 <_dtoa_r+0x6d8>
 80058b4:	2600      	movs	r6, #0
 80058b6:	4637      	mov	r7, r6
 80058b8:	e7e1      	b.n	800587e <_dtoa_r+0x956>
 80058ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80058bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80058c0:	4637      	mov	r7, r6
 80058c2:	e599      	b.n	80053f8 <_dtoa_r+0x4d0>
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80fd 	beq.w	8005aca <_dtoa_r+0xba2>
 80058d0:	2d00      	cmp	r5, #0
 80058d2:	dd05      	ble.n	80058e0 <_dtoa_r+0x9b8>
 80058d4:	4639      	mov	r1, r7
 80058d6:	462a      	mov	r2, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fd5d 	bl	8006398 <__lshift>
 80058de:	4607      	mov	r7, r0
 80058e0:	9b06      	ldr	r3, [sp, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d05c      	beq.n	80059a0 <_dtoa_r+0xa78>
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fb43 	bl	8005f74 <_Balloc>
 80058ee:	4605      	mov	r5, r0
 80058f0:	b928      	cbnz	r0, 80058fe <_dtoa_r+0x9d6>
 80058f2:	4b80      	ldr	r3, [pc, #512]	; (8005af4 <_dtoa_r+0xbcc>)
 80058f4:	4602      	mov	r2, r0
 80058f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058fa:	f7ff bb2e 	b.w	8004f5a <_dtoa_r+0x32>
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	3202      	adds	r2, #2
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	f107 010c 	add.w	r1, r7, #12
 8005908:	300c      	adds	r0, #12
 800590a:	f000 fb25 	bl	8005f58 <memcpy>
 800590e:	2201      	movs	r2, #1
 8005910:	4629      	mov	r1, r5
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fd40 	bl	8006398 <__lshift>
 8005918:	9b00      	ldr	r3, [sp, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	9b00      	ldr	r3, [sp, #0]
 8005920:	444b      	add	r3, r9
 8005922:	9307      	str	r3, [sp, #28]
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	46b8      	mov	r8, r7
 800592c:	9306      	str	r3, [sp, #24]
 800592e:	4607      	mov	r7, r0
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	4631      	mov	r1, r6
 8005934:	3b01      	subs	r3, #1
 8005936:	4658      	mov	r0, fp
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	f7ff fa67 	bl	8004e0c <quorem>
 800593e:	4603      	mov	r3, r0
 8005940:	3330      	adds	r3, #48	; 0x30
 8005942:	9004      	str	r0, [sp, #16]
 8005944:	4641      	mov	r1, r8
 8005946:	4658      	mov	r0, fp
 8005948:	9308      	str	r3, [sp, #32]
 800594a:	f000 fd91 	bl	8006470 <__mcmp>
 800594e:	463a      	mov	r2, r7
 8005950:	4681      	mov	r9, r0
 8005952:	4631      	mov	r1, r6
 8005954:	4620      	mov	r0, r4
 8005956:	f000 fda7 	bl	80064a8 <__mdiff>
 800595a:	68c2      	ldr	r2, [r0, #12]
 800595c:	9b08      	ldr	r3, [sp, #32]
 800595e:	4605      	mov	r5, r0
 8005960:	bb02      	cbnz	r2, 80059a4 <_dtoa_r+0xa7c>
 8005962:	4601      	mov	r1, r0
 8005964:	4658      	mov	r0, fp
 8005966:	f000 fd83 	bl	8006470 <__mcmp>
 800596a:	9b08      	ldr	r3, [sp, #32]
 800596c:	4602      	mov	r2, r0
 800596e:	4629      	mov	r1, r5
 8005970:	4620      	mov	r0, r4
 8005972:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005976:	f000 fb3d 	bl	8005ff4 <_Bfree>
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597e:	9d01      	ldr	r5, [sp, #4]
 8005980:	ea43 0102 	orr.w	r1, r3, r2
 8005984:	9b06      	ldr	r3, [sp, #24]
 8005986:	430b      	orrs	r3, r1
 8005988:	9b08      	ldr	r3, [sp, #32]
 800598a:	d10d      	bne.n	80059a8 <_dtoa_r+0xa80>
 800598c:	2b39      	cmp	r3, #57	; 0x39
 800598e:	d029      	beq.n	80059e4 <_dtoa_r+0xabc>
 8005990:	f1b9 0f00 	cmp.w	r9, #0
 8005994:	dd01      	ble.n	800599a <_dtoa_r+0xa72>
 8005996:	9b04      	ldr	r3, [sp, #16]
 8005998:	3331      	adds	r3, #49	; 0x31
 800599a:	9a02      	ldr	r2, [sp, #8]
 800599c:	7013      	strb	r3, [r2, #0]
 800599e:	e774      	b.n	800588a <_dtoa_r+0x962>
 80059a0:	4638      	mov	r0, r7
 80059a2:	e7b9      	b.n	8005918 <_dtoa_r+0x9f0>
 80059a4:	2201      	movs	r2, #1
 80059a6:	e7e2      	b.n	800596e <_dtoa_r+0xa46>
 80059a8:	f1b9 0f00 	cmp.w	r9, #0
 80059ac:	db06      	blt.n	80059bc <_dtoa_r+0xa94>
 80059ae:	9905      	ldr	r1, [sp, #20]
 80059b0:	ea41 0909 	orr.w	r9, r1, r9
 80059b4:	9906      	ldr	r1, [sp, #24]
 80059b6:	ea59 0101 	orrs.w	r1, r9, r1
 80059ba:	d120      	bne.n	80059fe <_dtoa_r+0xad6>
 80059bc:	2a00      	cmp	r2, #0
 80059be:	ddec      	ble.n	800599a <_dtoa_r+0xa72>
 80059c0:	4659      	mov	r1, fp
 80059c2:	2201      	movs	r2, #1
 80059c4:	4620      	mov	r0, r4
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	f000 fce6 	bl	8006398 <__lshift>
 80059cc:	4631      	mov	r1, r6
 80059ce:	4683      	mov	fp, r0
 80059d0:	f000 fd4e 	bl	8006470 <__mcmp>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	9b01      	ldr	r3, [sp, #4]
 80059d8:	dc02      	bgt.n	80059e0 <_dtoa_r+0xab8>
 80059da:	d1de      	bne.n	800599a <_dtoa_r+0xa72>
 80059dc:	07da      	lsls	r2, r3, #31
 80059de:	d5dc      	bpl.n	800599a <_dtoa_r+0xa72>
 80059e0:	2b39      	cmp	r3, #57	; 0x39
 80059e2:	d1d8      	bne.n	8005996 <_dtoa_r+0xa6e>
 80059e4:	9a02      	ldr	r2, [sp, #8]
 80059e6:	2339      	movs	r3, #57	; 0x39
 80059e8:	7013      	strb	r3, [r2, #0]
 80059ea:	462b      	mov	r3, r5
 80059ec:	461d      	mov	r5, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059f4:	2a39      	cmp	r2, #57	; 0x39
 80059f6:	d050      	beq.n	8005a9a <_dtoa_r+0xb72>
 80059f8:	3201      	adds	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e745      	b.n	800588a <_dtoa_r+0x962>
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	dd03      	ble.n	8005a0a <_dtoa_r+0xae2>
 8005a02:	2b39      	cmp	r3, #57	; 0x39
 8005a04:	d0ee      	beq.n	80059e4 <_dtoa_r+0xabc>
 8005a06:	3301      	adds	r3, #1
 8005a08:	e7c7      	b.n	800599a <_dtoa_r+0xa72>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	9907      	ldr	r1, [sp, #28]
 8005a0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a12:	428a      	cmp	r2, r1
 8005a14:	d02a      	beq.n	8005a6c <_dtoa_r+0xb44>
 8005a16:	4659      	mov	r1, fp
 8005a18:	2300      	movs	r3, #0
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fb0b 	bl	8006038 <__multadd>
 8005a22:	45b8      	cmp	r8, r7
 8005a24:	4683      	mov	fp, r0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f04f 020a 	mov.w	r2, #10
 8005a2e:	4641      	mov	r1, r8
 8005a30:	4620      	mov	r0, r4
 8005a32:	d107      	bne.n	8005a44 <_dtoa_r+0xb1c>
 8005a34:	f000 fb00 	bl	8006038 <__multadd>
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	e775      	b.n	8005930 <_dtoa_r+0xa08>
 8005a44:	f000 faf8 	bl	8006038 <__multadd>
 8005a48:	4639      	mov	r1, r7
 8005a4a:	4680      	mov	r8, r0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	220a      	movs	r2, #10
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 faf1 	bl	8006038 <__multadd>
 8005a56:	4607      	mov	r7, r0
 8005a58:	e7f0      	b.n	8005a3c <_dtoa_r+0xb14>
 8005a5a:	f1b9 0f00 	cmp.w	r9, #0
 8005a5e:	9a00      	ldr	r2, [sp, #0]
 8005a60:	bfcc      	ite	gt
 8005a62:	464d      	movgt	r5, r9
 8005a64:	2501      	movle	r5, #1
 8005a66:	4415      	add	r5, r2
 8005a68:	f04f 0800 	mov.w	r8, #0
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4620      	mov	r0, r4
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	f000 fc90 	bl	8006398 <__lshift>
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4683      	mov	fp, r0
 8005a7c:	f000 fcf8 	bl	8006470 <__mcmp>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	dcb2      	bgt.n	80059ea <_dtoa_r+0xac2>
 8005a84:	d102      	bne.n	8005a8c <_dtoa_r+0xb64>
 8005a86:	9b01      	ldr	r3, [sp, #4]
 8005a88:	07db      	lsls	r3, r3, #31
 8005a8a:	d4ae      	bmi.n	80059ea <_dtoa_r+0xac2>
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	461d      	mov	r5, r3
 8005a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a94:	2a30      	cmp	r2, #48	; 0x30
 8005a96:	d0fa      	beq.n	8005a8e <_dtoa_r+0xb66>
 8005a98:	e6f7      	b.n	800588a <_dtoa_r+0x962>
 8005a9a:	9a00      	ldr	r2, [sp, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1a5      	bne.n	80059ec <_dtoa_r+0xac4>
 8005aa0:	f10a 0a01 	add.w	sl, sl, #1
 8005aa4:	2331      	movs	r3, #49	; 0x31
 8005aa6:	e779      	b.n	800599c <_dtoa_r+0xa74>
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <_dtoa_r+0xbd0>)
 8005aaa:	f7ff baaf 	b.w	800500c <_dtoa_r+0xe4>
 8005aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f47f aa86 	bne.w	8004fc2 <_dtoa_r+0x9a>
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <_dtoa_r+0xbd4>)
 8005ab8:	f7ff baa8 	b.w	800500c <_dtoa_r+0xe4>
 8005abc:	f1b9 0f00 	cmp.w	r9, #0
 8005ac0:	dc03      	bgt.n	8005aca <_dtoa_r+0xba2>
 8005ac2:	9b05      	ldr	r3, [sp, #20]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	f73f aec9 	bgt.w	800585c <_dtoa_r+0x934>
 8005aca:	9d00      	ldr	r5, [sp, #0]
 8005acc:	4631      	mov	r1, r6
 8005ace:	4658      	mov	r0, fp
 8005ad0:	f7ff f99c 	bl	8004e0c <quorem>
 8005ad4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8005adc:	9a00      	ldr	r2, [sp, #0]
 8005ade:	1aaa      	subs	r2, r5, r2
 8005ae0:	4591      	cmp	r9, r2
 8005ae2:	ddba      	ble.n	8005a5a <_dtoa_r+0xb32>
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	220a      	movs	r2, #10
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 faa4 	bl	8006038 <__multadd>
 8005af0:	4683      	mov	fp, r0
 8005af2:	e7eb      	b.n	8005acc <_dtoa_r+0xba4>
 8005af4:	08006e77 	.word	0x08006e77
 8005af8:	08006dd0 	.word	0x08006dd0
 8005afc:	08006df4 	.word	0x08006df4

08005b00 <__sflush_r>:
 8005b00:	898a      	ldrh	r2, [r1, #12]
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	0710      	lsls	r0, r2, #28
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	d458      	bmi.n	8005bc0 <__sflush_r+0xc0>
 8005b0e:	684b      	ldr	r3, [r1, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dc05      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc02      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d0f9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b2c:	682f      	ldr	r7, [r5, #0]
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	d032      	beq.n	8005b98 <__sflush_r+0x98>
 8005b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	075a      	lsls	r2, r3, #29
 8005b38:	d505      	bpl.n	8005b46 <__sflush_r+0x46>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b40:	b10b      	cbz	r3, 8005b46 <__sflush_r+0x46>
 8005b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b44:	1ac0      	subs	r0, r0, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4c:	6a21      	ldr	r1, [r4, #32]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b0      	blx	r6
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	d106      	bne.n	8005b66 <__sflush_r+0x66>
 8005b58:	6829      	ldr	r1, [r5, #0]
 8005b5a:	291d      	cmp	r1, #29
 8005b5c:	d82c      	bhi.n	8005bb8 <__sflush_r+0xb8>
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <__sflush_r+0x108>)
 8005b60:	40ca      	lsrs	r2, r1
 8005b62:	07d6      	lsls	r6, r2, #31
 8005b64:	d528      	bpl.n	8005bb8 <__sflush_r+0xb8>
 8005b66:	2200      	movs	r2, #0
 8005b68:	6062      	str	r2, [r4, #4]
 8005b6a:	04d9      	lsls	r1, r3, #19
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	d504      	bpl.n	8005b7c <__sflush_r+0x7c>
 8005b72:	1c42      	adds	r2, r0, #1
 8005b74:	d101      	bne.n	8005b7a <__sflush_r+0x7a>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	b903      	cbnz	r3, 8005b7c <__sflush_r+0x7c>
 8005b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7e:	602f      	str	r7, [r5, #0]
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d0ca      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d002      	beq.n	8005b92 <__sflush_r+0x92>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 fd7f 	bl	8006690 <_free_r>
 8005b92:	2000      	movs	r0, #0
 8005b94:	6360      	str	r0, [r4, #52]	; 0x34
 8005b96:	e7c1      	b.n	8005b1c <__sflush_r+0x1c>
 8005b98:	6a21      	ldr	r1, [r4, #32]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b0      	blx	r6
 8005ba0:	1c41      	adds	r1, r0, #1
 8005ba2:	d1c7      	bne.n	8005b34 <__sflush_r+0x34>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0c4      	beq.n	8005b34 <__sflush_r+0x34>
 8005baa:	2b1d      	cmp	r3, #29
 8005bac:	d001      	beq.n	8005bb2 <__sflush_r+0xb2>
 8005bae:	2b16      	cmp	r3, #22
 8005bb0:	d101      	bne.n	8005bb6 <__sflush_r+0xb6>
 8005bb2:	602f      	str	r7, [r5, #0]
 8005bb4:	e7b1      	b.n	8005b1a <__sflush_r+0x1a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	e7ad      	b.n	8005b1c <__sflush_r+0x1c>
 8005bc0:	690f      	ldr	r7, [r1, #16]
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d0a9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005bc6:	0793      	lsls	r3, r2, #30
 8005bc8:	680e      	ldr	r6, [r1, #0]
 8005bca:	bf08      	it	eq
 8005bcc:	694b      	ldreq	r3, [r1, #20]
 8005bce:	600f      	str	r7, [r1, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	eba6 0807 	sub.w	r8, r6, r7
 8005bd8:	608b      	str	r3, [r1, #8]
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	dd9c      	ble.n	8005b1a <__sflush_r+0x1a>
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be4:	4643      	mov	r3, r8
 8005be6:	463a      	mov	r2, r7
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	2800      	cmp	r0, #0
 8005bee:	dc06      	bgt.n	8005bfe <__sflush_r+0xfe>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e78e      	b.n	8005b1c <__sflush_r+0x1c>
 8005bfe:	4407      	add	r7, r0
 8005c00:	eba8 0800 	sub.w	r8, r8, r0
 8005c04:	e7e9      	b.n	8005bda <__sflush_r+0xda>
 8005c06:	bf00      	nop
 8005c08:	20400001 	.word	0x20400001

08005c0c <_fflush_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	4605      	mov	r5, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b913      	cbnz	r3, 8005c1c <_fflush_r+0x10>
 8005c16:	2500      	movs	r5, #0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	b118      	cbz	r0, 8005c26 <_fflush_r+0x1a>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <_fflush_r+0x1a>
 8005c22:	f000 f887 	bl	8005d34 <__sinit>
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <_fflush_r+0x6c>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d11b      	bne.n	8005c64 <_fflush_r+0x58>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <_fflush_r+0xa>
 8005c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c38:	07d0      	lsls	r0, r2, #31
 8005c3a:	d404      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c3c:	0599      	lsls	r1, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f000 f91a 	bl	8005e7a <__retarget_lock_acquire_recursive>
 8005c46:	4628      	mov	r0, r5
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7ff ff59 	bl	8005b00 <__sflush_r>
 8005c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c50:	07da      	lsls	r2, r3, #31
 8005c52:	4605      	mov	r5, r0
 8005c54:	d4e0      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	d4dd      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f000 f90d 	bl	8005e7c <__retarget_lock_release_recursive>
 8005c62:	e7d9      	b.n	8005c18 <_fflush_r+0xc>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x70>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <_fflush_r+0x62>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7df      	b.n	8005c2e <_fflush_r+0x22>
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <_fflush_r+0x74>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7da      	b.n	8005c2e <_fflush_r+0x22>
 8005c78:	08006ea8 	.word	0x08006ea8
 8005c7c:	08006ec8 	.word	0x08006ec8
 8005c80:	08006e88 	.word	0x08006e88

08005c84 <std>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c92:	6083      	str	r3, [r0, #8]
 8005c94:	8181      	strh	r1, [r0, #12]
 8005c96:	6643      	str	r3, [r0, #100]	; 0x64
 8005c98:	81c2      	strh	r2, [r0, #14]
 8005c9a:	6183      	str	r3, [r0, #24]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	305c      	adds	r0, #92	; 0x5c
 8005ca2:	f7fe faf3 	bl	800428c <memset>
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x38>)
 8005ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x3c>)
 8005cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x40>)
 8005cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <std+0x44>)
 8005cb4:	6224      	str	r4, [r4, #32]
 8005cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08006ab9 	.word	0x08006ab9
 8005cc0:	08006adb 	.word	0x08006adb
 8005cc4:	08006b13 	.word	0x08006b13
 8005cc8:	08006b37 	.word	0x08006b37

08005ccc <_cleanup_r>:
 8005ccc:	4901      	ldr	r1, [pc, #4]	; (8005cd4 <_cleanup_r+0x8>)
 8005cce:	f000 b8af 	b.w	8005e30 <_fwalk_reent>
 8005cd2:	bf00      	nop
 8005cd4:	08005c0d 	.word	0x08005c0d

08005cd8 <__sfmoreglue>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	1e4a      	subs	r2, r1, #1
 8005cdc:	2568      	movs	r5, #104	; 0x68
 8005cde:	4355      	muls	r5, r2
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce6:	f000 fd23 	bl	8006730 <_malloc_r>
 8005cea:	4604      	mov	r4, r0
 8005cec:	b140      	cbz	r0, 8005d00 <__sfmoreglue+0x28>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	60a0      	str	r0, [r4, #8]
 8005cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cfc:	f7fe fac6 	bl	800428c <memset>
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}

08005d04 <__sfp_lock_acquire>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__sfp_lock_acquire+0x8>)
 8005d06:	f000 b8b8 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	200002e0 	.word	0x200002e0

08005d10 <__sfp_lock_release>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__sfp_lock_release+0x8>)
 8005d12:	f000 b8b3 	b.w	8005e7c <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	200002e0 	.word	0x200002e0

08005d1c <__sinit_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sinit_lock_acquire+0x8>)
 8005d1e:	f000 b8ac 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	200002db 	.word	0x200002db

08005d28 <__sinit_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sinit_lock_release+0x8>)
 8005d2a:	f000 b8a7 	b.w	8005e7c <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200002db 	.word	0x200002db

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sinit_lock_acquire>
 8005d3c:	69a3      	ldr	r3, [r4, #24]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sinit_lock_release>
 8005d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <__sinit+0x68>)
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <__sinit+0x6c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	bf04      	itt	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	61a3      	streq	r3, [r4, #24]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f820 	bl	8005da4 <__sfp>
 8005d64:	6060      	str	r0, [r4, #4]
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 f81c 	bl	8005da4 <__sfp>
 8005d6c:	60a0      	str	r0, [r4, #8]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f818 	bl	8005da4 <__sfp>
 8005d74:	2200      	movs	r2, #0
 8005d76:	60e0      	str	r0, [r4, #12]
 8005d78:	2104      	movs	r1, #4
 8005d7a:	6860      	ldr	r0, [r4, #4]
 8005d7c:	f7ff ff82 	bl	8005c84 <std>
 8005d80:	68a0      	ldr	r0, [r4, #8]
 8005d82:	2201      	movs	r2, #1
 8005d84:	2109      	movs	r1, #9
 8005d86:	f7ff ff7d 	bl	8005c84 <std>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff ff78 	bl	8005c84 <std>
 8005d94:	2301      	movs	r3, #1
 8005d96:	61a3      	str	r3, [r4, #24]
 8005d98:	e7d2      	b.n	8005d40 <__sinit+0xc>
 8005d9a:	bf00      	nop
 8005d9c:	08006dbc 	.word	0x08006dbc
 8005da0:	08005ccd 	.word	0x08005ccd

08005da4 <__sfp>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4607      	mov	r7, r0
 8005da8:	f7ff ffac 	bl	8005d04 <__sfp_lock_acquire>
 8005dac:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <__sfp+0x84>)
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	69b3      	ldr	r3, [r6, #24]
 8005db2:	b913      	cbnz	r3, 8005dba <__sfp+0x16>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ffbd 	bl	8005d34 <__sinit>
 8005dba:	3648      	adds	r6, #72	; 0x48
 8005dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	d503      	bpl.n	8005dcc <__sfp+0x28>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	b30b      	cbz	r3, 8005e0c <__sfp+0x68>
 8005dc8:	6836      	ldr	r6, [r6, #0]
 8005dca:	e7f7      	b.n	8005dbc <__sfp+0x18>
 8005dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dd0:	b9d5      	cbnz	r5, 8005e08 <__sfp+0x64>
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <__sfp+0x88>)
 8005dd4:	60e3      	str	r3, [r4, #12]
 8005dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dda:	6665      	str	r5, [r4, #100]	; 0x64
 8005ddc:	f000 f84c 	bl	8005e78 <__retarget_lock_init_recursive>
 8005de0:	f7ff ff96 	bl	8005d10 <__sfp_lock_release>
 8005de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	61a5      	str	r5, [r4, #24]
 8005df0:	2208      	movs	r2, #8
 8005df2:	4629      	mov	r1, r5
 8005df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df8:	f7fe fa48 	bl	800428c <memset>
 8005dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e04:	4620      	mov	r0, r4
 8005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e08:	3468      	adds	r4, #104	; 0x68
 8005e0a:	e7d9      	b.n	8005dc0 <__sfp+0x1c>
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff62 	bl	8005cd8 <__sfmoreglue>
 8005e14:	4604      	mov	r4, r0
 8005e16:	6030      	str	r0, [r6, #0]
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1d5      	bne.n	8005dc8 <__sfp+0x24>
 8005e1c:	f7ff ff78 	bl	8005d10 <__sfp_lock_release>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	e7ee      	b.n	8005e04 <__sfp+0x60>
 8005e26:	bf00      	nop
 8005e28:	08006dbc 	.word	0x08006dbc
 8005e2c:	ffff0001 	.word	0xffff0001

08005e30 <_fwalk_reent>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e42:	f1b9 0901 	subs.w	r9, r9, #1
 8005e46:	d505      	bpl.n	8005e54 <_fwalk_reent+0x24>
 8005e48:	6824      	ldr	r4, [r4, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f7      	bne.n	8005e3e <_fwalk_reent+0xe>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d907      	bls.n	8005e6a <_fwalk_reent+0x3a>
 8005e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d003      	beq.n	8005e6a <_fwalk_reent+0x3a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	4307      	orrs	r7, r0
 8005e6a:	3568      	adds	r5, #104	; 0x68
 8005e6c:	e7e9      	b.n	8005e42 <_fwalk_reent+0x12>
	...

08005e70 <_localeconv_r>:
 8005e70:	4800      	ldr	r0, [pc, #0]	; (8005e74 <_localeconv_r+0x4>)
 8005e72:	4770      	bx	lr
 8005e74:	20000160 	.word	0x20000160

08005e78 <__retarget_lock_init_recursive>:
 8005e78:	4770      	bx	lr

08005e7a <__retarget_lock_acquire_recursive>:
 8005e7a:	4770      	bx	lr

08005e7c <__retarget_lock_release_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__swhatbuf_r>:
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	460e      	mov	r6, r1
 8005e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e86:	2900      	cmp	r1, #0
 8005e88:	b096      	sub	sp, #88	; 0x58
 8005e8a:	4614      	mov	r4, r2
 8005e8c:	461d      	mov	r5, r3
 8005e8e:	da07      	bge.n	8005ea0 <__swhatbuf_r+0x22>
 8005e90:	2300      	movs	r3, #0
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	89b3      	ldrh	r3, [r6, #12]
 8005e96:	061a      	lsls	r2, r3, #24
 8005e98:	d410      	bmi.n	8005ebc <__swhatbuf_r+0x3e>
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	e00e      	b.n	8005ebe <__swhatbuf_r+0x40>
 8005ea0:	466a      	mov	r2, sp
 8005ea2:	f000 fe9f 	bl	8006be4 <_fstat_r>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	dbf2      	blt.n	8005e90 <__swhatbuf_r+0x12>
 8005eaa:	9a01      	ldr	r2, [sp, #4]
 8005eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eb4:	425a      	negs	r2, r3
 8005eb6:	415a      	adcs	r2, r3
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	e7ee      	b.n	8005e9a <__swhatbuf_r+0x1c>
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	b016      	add	sp, #88	; 0x58
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ec8 <__smakebuf_r>:
 8005ec8:	898b      	ldrh	r3, [r1, #12]
 8005eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ecc:	079d      	lsls	r5, r3, #30
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	d507      	bpl.n	8005ee4 <__smakebuf_r+0x1c>
 8005ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	2301      	movs	r3, #1
 8005ede:	6163      	str	r3, [r4, #20]
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	ab01      	add	r3, sp, #4
 8005ee6:	466a      	mov	r2, sp
 8005ee8:	f7ff ffc9 	bl	8005e7e <__swhatbuf_r>
 8005eec:	9900      	ldr	r1, [sp, #0]
 8005eee:	4605      	mov	r5, r0
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 fc1d 	bl	8006730 <_malloc_r>
 8005ef6:	b948      	cbnz	r0, 8005f0c <__smakebuf_r+0x44>
 8005ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efc:	059a      	lsls	r2, r3, #22
 8005efe:	d4ef      	bmi.n	8005ee0 <__smakebuf_r+0x18>
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	f043 0302 	orr.w	r3, r3, #2
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	e7e3      	b.n	8005ed4 <__smakebuf_r+0xc>
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <__smakebuf_r+0x7c>)
 8005f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	6163      	str	r3, [r4, #20]
 8005f1e:	9b01      	ldr	r3, [sp, #4]
 8005f20:	6120      	str	r0, [r4, #16]
 8005f22:	b15b      	cbz	r3, 8005f3c <__smakebuf_r+0x74>
 8005f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f000 fe6d 	bl	8006c08 <_isatty_r>
 8005f2e:	b128      	cbz	r0, 8005f3c <__smakebuf_r+0x74>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	89a0      	ldrh	r0, [r4, #12]
 8005f3e:	4305      	orrs	r5, r0
 8005f40:	81a5      	strh	r5, [r4, #12]
 8005f42:	e7cd      	b.n	8005ee0 <__smakebuf_r+0x18>
 8005f44:	08005ccd 	.word	0x08005ccd

08005f48 <malloc>:
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <malloc+0xc>)
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f000 bbef 	b.w	8006730 <_malloc_r>
 8005f52:	bf00      	nop
 8005f54:	2000000c 	.word	0x2000000c

08005f58 <memcpy>:
 8005f58:	440a      	add	r2, r1
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f60:	d100      	bne.n	8005f64 <memcpy+0xc>
 8005f62:	4770      	bx	lr
 8005f64:	b510      	push	{r4, lr}
 8005f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	d1f9      	bne.n	8005f66 <memcpy+0xe>
 8005f72:	bd10      	pop	{r4, pc}

08005f74 <_Balloc>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	b976      	cbnz	r6, 8005f9c <_Balloc+0x28>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ffe2 	bl	8005f48 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6260      	str	r0, [r4, #36]	; 0x24
 8005f88:	b920      	cbnz	r0, 8005f94 <_Balloc+0x20>
 8005f8a:	4b18      	ldr	r3, [pc, #96]	; (8005fec <_Balloc+0x78>)
 8005f8c:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <_Balloc+0x7c>)
 8005f8e:	2166      	movs	r1, #102	; 0x66
 8005f90:	f000 fde8 	bl	8006b64 <__assert_func>
 8005f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f98:	6006      	str	r6, [r0, #0]
 8005f9a:	60c6      	str	r6, [r0, #12]
 8005f9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f9e:	68f3      	ldr	r3, [r6, #12]
 8005fa0:	b183      	cbz	r3, 8005fc4 <_Balloc+0x50>
 8005fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005faa:	b9b8      	cbnz	r0, 8005fdc <_Balloc+0x68>
 8005fac:	2101      	movs	r1, #1
 8005fae:	fa01 f605 	lsl.w	r6, r1, r5
 8005fb2:	1d72      	adds	r2, r6, #5
 8005fb4:	0092      	lsls	r2, r2, #2
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 fb5a 	bl	8006670 <_calloc_r>
 8005fbc:	b160      	cbz	r0, 8005fd8 <_Balloc+0x64>
 8005fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fc2:	e00e      	b.n	8005fe2 <_Balloc+0x6e>
 8005fc4:	2221      	movs	r2, #33	; 0x21
 8005fc6:	2104      	movs	r1, #4
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fb51 	bl	8006670 <_calloc_r>
 8005fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fd0:	60f0      	str	r0, [r6, #12]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <_Balloc+0x2e>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	6802      	ldr	r2, [r0, #0]
 8005fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fe8:	e7f7      	b.n	8005fda <_Balloc+0x66>
 8005fea:	bf00      	nop
 8005fec:	08006e01 	.word	0x08006e01
 8005ff0:	08006ee8 	.word	0x08006ee8

08005ff4 <_Bfree>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b976      	cbnz	r6, 800601c <_Bfree+0x28>
 8005ffe:	2010      	movs	r0, #16
 8006000:	f7ff ffa2 	bl	8005f48 <malloc>
 8006004:	4602      	mov	r2, r0
 8006006:	6268      	str	r0, [r5, #36]	; 0x24
 8006008:	b920      	cbnz	r0, 8006014 <_Bfree+0x20>
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <_Bfree+0x3c>)
 800600c:	4809      	ldr	r0, [pc, #36]	; (8006034 <_Bfree+0x40>)
 800600e:	218a      	movs	r1, #138	; 0x8a
 8006010:	f000 fda8 	bl	8006b64 <__assert_func>
 8006014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006018:	6006      	str	r6, [r0, #0]
 800601a:	60c6      	str	r6, [r0, #12]
 800601c:	b13c      	cbz	r4, 800602e <_Bfree+0x3a>
 800601e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006020:	6862      	ldr	r2, [r4, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006028:	6021      	str	r1, [r4, #0]
 800602a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	08006e01 	.word	0x08006e01
 8006034:	08006ee8 	.word	0x08006ee8

08006038 <__multadd>:
 8006038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	690e      	ldr	r6, [r1, #16]
 800603e:	4607      	mov	r7, r0
 8006040:	4698      	mov	r8, r3
 8006042:	460c      	mov	r4, r1
 8006044:	f101 0014 	add.w	r0, r1, #20
 8006048:	2300      	movs	r3, #0
 800604a:	6805      	ldr	r5, [r0, #0]
 800604c:	b2a9      	uxth	r1, r5
 800604e:	fb02 8101 	mla	r1, r2, r1, r8
 8006052:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006056:	0c2d      	lsrs	r5, r5, #16
 8006058:	fb02 c505 	mla	r5, r2, r5, ip
 800605c:	b289      	uxth	r1, r1
 800605e:	3301      	adds	r3, #1
 8006060:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006064:	429e      	cmp	r6, r3
 8006066:	f840 1b04 	str.w	r1, [r0], #4
 800606a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800606e:	dcec      	bgt.n	800604a <__multadd+0x12>
 8006070:	f1b8 0f00 	cmp.w	r8, #0
 8006074:	d022      	beq.n	80060bc <__multadd+0x84>
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	42b3      	cmp	r3, r6
 800607a:	dc19      	bgt.n	80060b0 <__multadd+0x78>
 800607c:	6861      	ldr	r1, [r4, #4]
 800607e:	4638      	mov	r0, r7
 8006080:	3101      	adds	r1, #1
 8006082:	f7ff ff77 	bl	8005f74 <_Balloc>
 8006086:	4605      	mov	r5, r0
 8006088:	b928      	cbnz	r0, 8006096 <__multadd+0x5e>
 800608a:	4602      	mov	r2, r0
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <__multadd+0x8c>)
 800608e:	480e      	ldr	r0, [pc, #56]	; (80060c8 <__multadd+0x90>)
 8006090:	21b5      	movs	r1, #181	; 0xb5
 8006092:	f000 fd67 	bl	8006b64 <__assert_func>
 8006096:	6922      	ldr	r2, [r4, #16]
 8006098:	3202      	adds	r2, #2
 800609a:	f104 010c 	add.w	r1, r4, #12
 800609e:	0092      	lsls	r2, r2, #2
 80060a0:	300c      	adds	r0, #12
 80060a2:	f7ff ff59 	bl	8005f58 <memcpy>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7ff ffa3 	bl	8005ff4 <_Bfree>
 80060ae:	462c      	mov	r4, r5
 80060b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80060b4:	3601      	adds	r6, #1
 80060b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80060ba:	6126      	str	r6, [r4, #16]
 80060bc:	4620      	mov	r0, r4
 80060be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c2:	bf00      	nop
 80060c4:	08006e77 	.word	0x08006e77
 80060c8:	08006ee8 	.word	0x08006ee8

080060cc <__hi0bits>:
 80060cc:	0c03      	lsrs	r3, r0, #16
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	b9d3      	cbnz	r3, 8006108 <__hi0bits+0x3c>
 80060d2:	0400      	lsls	r0, r0, #16
 80060d4:	2310      	movs	r3, #16
 80060d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060da:	bf04      	itt	eq
 80060dc:	0200      	lsleq	r0, r0, #8
 80060de:	3308      	addeq	r3, #8
 80060e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80060e4:	bf04      	itt	eq
 80060e6:	0100      	lsleq	r0, r0, #4
 80060e8:	3304      	addeq	r3, #4
 80060ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060ee:	bf04      	itt	eq
 80060f0:	0080      	lsleq	r0, r0, #2
 80060f2:	3302      	addeq	r3, #2
 80060f4:	2800      	cmp	r0, #0
 80060f6:	db05      	blt.n	8006104 <__hi0bits+0x38>
 80060f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060fc:	f103 0301 	add.w	r3, r3, #1
 8006100:	bf08      	it	eq
 8006102:	2320      	moveq	r3, #32
 8006104:	4618      	mov	r0, r3
 8006106:	4770      	bx	lr
 8006108:	2300      	movs	r3, #0
 800610a:	e7e4      	b.n	80060d6 <__hi0bits+0xa>

0800610c <__lo0bits>:
 800610c:	6803      	ldr	r3, [r0, #0]
 800610e:	f013 0207 	ands.w	r2, r3, #7
 8006112:	4601      	mov	r1, r0
 8006114:	d00b      	beq.n	800612e <__lo0bits+0x22>
 8006116:	07da      	lsls	r2, r3, #31
 8006118:	d424      	bmi.n	8006164 <__lo0bits+0x58>
 800611a:	0798      	lsls	r0, r3, #30
 800611c:	bf49      	itett	mi
 800611e:	085b      	lsrmi	r3, r3, #1
 8006120:	089b      	lsrpl	r3, r3, #2
 8006122:	2001      	movmi	r0, #1
 8006124:	600b      	strmi	r3, [r1, #0]
 8006126:	bf5c      	itt	pl
 8006128:	600b      	strpl	r3, [r1, #0]
 800612a:	2002      	movpl	r0, #2
 800612c:	4770      	bx	lr
 800612e:	b298      	uxth	r0, r3
 8006130:	b9b0      	cbnz	r0, 8006160 <__lo0bits+0x54>
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	2010      	movs	r0, #16
 8006136:	f013 0fff 	tst.w	r3, #255	; 0xff
 800613a:	bf04      	itt	eq
 800613c:	0a1b      	lsreq	r3, r3, #8
 800613e:	3008      	addeq	r0, #8
 8006140:	071a      	lsls	r2, r3, #28
 8006142:	bf04      	itt	eq
 8006144:	091b      	lsreq	r3, r3, #4
 8006146:	3004      	addeq	r0, #4
 8006148:	079a      	lsls	r2, r3, #30
 800614a:	bf04      	itt	eq
 800614c:	089b      	lsreq	r3, r3, #2
 800614e:	3002      	addeq	r0, #2
 8006150:	07da      	lsls	r2, r3, #31
 8006152:	d403      	bmi.n	800615c <__lo0bits+0x50>
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	f100 0001 	add.w	r0, r0, #1
 800615a:	d005      	beq.n	8006168 <__lo0bits+0x5c>
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	4770      	bx	lr
 8006160:	4610      	mov	r0, r2
 8006162:	e7e8      	b.n	8006136 <__lo0bits+0x2a>
 8006164:	2000      	movs	r0, #0
 8006166:	4770      	bx	lr
 8006168:	2020      	movs	r0, #32
 800616a:	4770      	bx	lr

0800616c <__i2b>:
 800616c:	b510      	push	{r4, lr}
 800616e:	460c      	mov	r4, r1
 8006170:	2101      	movs	r1, #1
 8006172:	f7ff feff 	bl	8005f74 <_Balloc>
 8006176:	4602      	mov	r2, r0
 8006178:	b928      	cbnz	r0, 8006186 <__i2b+0x1a>
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <__i2b+0x24>)
 800617c:	4805      	ldr	r0, [pc, #20]	; (8006194 <__i2b+0x28>)
 800617e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006182:	f000 fcef 	bl	8006b64 <__assert_func>
 8006186:	2301      	movs	r3, #1
 8006188:	6144      	str	r4, [r0, #20]
 800618a:	6103      	str	r3, [r0, #16]
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	08006e77 	.word	0x08006e77
 8006194:	08006ee8 	.word	0x08006ee8

08006198 <__multiply>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	4614      	mov	r4, r2
 800619e:	690a      	ldr	r2, [r1, #16]
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	bfb8      	it	lt
 80061a6:	460b      	movlt	r3, r1
 80061a8:	460d      	mov	r5, r1
 80061aa:	bfbc      	itt	lt
 80061ac:	4625      	movlt	r5, r4
 80061ae:	461c      	movlt	r4, r3
 80061b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80061b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061b8:	68ab      	ldr	r3, [r5, #8]
 80061ba:	6869      	ldr	r1, [r5, #4]
 80061bc:	eb0a 0709 	add.w	r7, sl, r9
 80061c0:	42bb      	cmp	r3, r7
 80061c2:	b085      	sub	sp, #20
 80061c4:	bfb8      	it	lt
 80061c6:	3101      	addlt	r1, #1
 80061c8:	f7ff fed4 	bl	8005f74 <_Balloc>
 80061cc:	b930      	cbnz	r0, 80061dc <__multiply+0x44>
 80061ce:	4602      	mov	r2, r0
 80061d0:	4b42      	ldr	r3, [pc, #264]	; (80062dc <__multiply+0x144>)
 80061d2:	4843      	ldr	r0, [pc, #268]	; (80062e0 <__multiply+0x148>)
 80061d4:	f240 115d 	movw	r1, #349	; 0x15d
 80061d8:	f000 fcc4 	bl	8006b64 <__assert_func>
 80061dc:	f100 0614 	add.w	r6, r0, #20
 80061e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80061e4:	4633      	mov	r3, r6
 80061e6:	2200      	movs	r2, #0
 80061e8:	4543      	cmp	r3, r8
 80061ea:	d31e      	bcc.n	800622a <__multiply+0x92>
 80061ec:	f105 0c14 	add.w	ip, r5, #20
 80061f0:	f104 0314 	add.w	r3, r4, #20
 80061f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80061f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80061fc:	9202      	str	r2, [sp, #8]
 80061fe:	ebac 0205 	sub.w	r2, ip, r5
 8006202:	3a15      	subs	r2, #21
 8006204:	f022 0203 	bic.w	r2, r2, #3
 8006208:	3204      	adds	r2, #4
 800620a:	f105 0115 	add.w	r1, r5, #21
 800620e:	458c      	cmp	ip, r1
 8006210:	bf38      	it	cc
 8006212:	2204      	movcc	r2, #4
 8006214:	9201      	str	r2, [sp, #4]
 8006216:	9a02      	ldr	r2, [sp, #8]
 8006218:	9303      	str	r3, [sp, #12]
 800621a:	429a      	cmp	r2, r3
 800621c:	d808      	bhi.n	8006230 <__multiply+0x98>
 800621e:	2f00      	cmp	r7, #0
 8006220:	dc55      	bgt.n	80062ce <__multiply+0x136>
 8006222:	6107      	str	r7, [r0, #16]
 8006224:	b005      	add	sp, #20
 8006226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622a:	f843 2b04 	str.w	r2, [r3], #4
 800622e:	e7db      	b.n	80061e8 <__multiply+0x50>
 8006230:	f8b3 a000 	ldrh.w	sl, [r3]
 8006234:	f1ba 0f00 	cmp.w	sl, #0
 8006238:	d020      	beq.n	800627c <__multiply+0xe4>
 800623a:	f105 0e14 	add.w	lr, r5, #20
 800623e:	46b1      	mov	r9, r6
 8006240:	2200      	movs	r2, #0
 8006242:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006246:	f8d9 b000 	ldr.w	fp, [r9]
 800624a:	b2a1      	uxth	r1, r4
 800624c:	fa1f fb8b 	uxth.w	fp, fp
 8006250:	fb0a b101 	mla	r1, sl, r1, fp
 8006254:	4411      	add	r1, r2
 8006256:	f8d9 2000 	ldr.w	r2, [r9]
 800625a:	0c24      	lsrs	r4, r4, #16
 800625c:	0c12      	lsrs	r2, r2, #16
 800625e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006262:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006266:	b289      	uxth	r1, r1
 8006268:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800626c:	45f4      	cmp	ip, lr
 800626e:	f849 1b04 	str.w	r1, [r9], #4
 8006272:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006276:	d8e4      	bhi.n	8006242 <__multiply+0xaa>
 8006278:	9901      	ldr	r1, [sp, #4]
 800627a:	5072      	str	r2, [r6, r1]
 800627c:	9a03      	ldr	r2, [sp, #12]
 800627e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006282:	3304      	adds	r3, #4
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	d01f      	beq.n	80062ca <__multiply+0x132>
 800628a:	6834      	ldr	r4, [r6, #0]
 800628c:	f105 0114 	add.w	r1, r5, #20
 8006290:	46b6      	mov	lr, r6
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	880a      	ldrh	r2, [r1, #0]
 8006298:	f8be b002 	ldrh.w	fp, [lr, #2]
 800629c:	fb09 b202 	mla	r2, r9, r2, fp
 80062a0:	4492      	add	sl, r2
 80062a2:	b2a4      	uxth	r4, r4
 80062a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80062a8:	f84e 4b04 	str.w	r4, [lr], #4
 80062ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80062b0:	f8be 2000 	ldrh.w	r2, [lr]
 80062b4:	0c24      	lsrs	r4, r4, #16
 80062b6:	fb09 2404 	mla	r4, r9, r4, r2
 80062ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80062be:	458c      	cmp	ip, r1
 80062c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80062c4:	d8e7      	bhi.n	8006296 <__multiply+0xfe>
 80062c6:	9a01      	ldr	r2, [sp, #4]
 80062c8:	50b4      	str	r4, [r6, r2]
 80062ca:	3604      	adds	r6, #4
 80062cc:	e7a3      	b.n	8006216 <__multiply+0x7e>
 80062ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1a5      	bne.n	8006222 <__multiply+0x8a>
 80062d6:	3f01      	subs	r7, #1
 80062d8:	e7a1      	b.n	800621e <__multiply+0x86>
 80062da:	bf00      	nop
 80062dc:	08006e77 	.word	0x08006e77
 80062e0:	08006ee8 	.word	0x08006ee8

080062e4 <__pow5mult>:
 80062e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e8:	4615      	mov	r5, r2
 80062ea:	f012 0203 	ands.w	r2, r2, #3
 80062ee:	4606      	mov	r6, r0
 80062f0:	460f      	mov	r7, r1
 80062f2:	d007      	beq.n	8006304 <__pow5mult+0x20>
 80062f4:	4c25      	ldr	r4, [pc, #148]	; (800638c <__pow5mult+0xa8>)
 80062f6:	3a01      	subs	r2, #1
 80062f8:	2300      	movs	r3, #0
 80062fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062fe:	f7ff fe9b 	bl	8006038 <__multadd>
 8006302:	4607      	mov	r7, r0
 8006304:	10ad      	asrs	r5, r5, #2
 8006306:	d03d      	beq.n	8006384 <__pow5mult+0xa0>
 8006308:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800630a:	b97c      	cbnz	r4, 800632c <__pow5mult+0x48>
 800630c:	2010      	movs	r0, #16
 800630e:	f7ff fe1b 	bl	8005f48 <malloc>
 8006312:	4602      	mov	r2, r0
 8006314:	6270      	str	r0, [r6, #36]	; 0x24
 8006316:	b928      	cbnz	r0, 8006324 <__pow5mult+0x40>
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <__pow5mult+0xac>)
 800631a:	481e      	ldr	r0, [pc, #120]	; (8006394 <__pow5mult+0xb0>)
 800631c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006320:	f000 fc20 	bl	8006b64 <__assert_func>
 8006324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006328:	6004      	str	r4, [r0, #0]
 800632a:	60c4      	str	r4, [r0, #12]
 800632c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006334:	b94c      	cbnz	r4, 800634a <__pow5mult+0x66>
 8006336:	f240 2171 	movw	r1, #625	; 0x271
 800633a:	4630      	mov	r0, r6
 800633c:	f7ff ff16 	bl	800616c <__i2b>
 8006340:	2300      	movs	r3, #0
 8006342:	f8c8 0008 	str.w	r0, [r8, #8]
 8006346:	4604      	mov	r4, r0
 8006348:	6003      	str	r3, [r0, #0]
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	07eb      	lsls	r3, r5, #31
 8006350:	d50a      	bpl.n	8006368 <__pow5mult+0x84>
 8006352:	4639      	mov	r1, r7
 8006354:	4622      	mov	r2, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff1e 	bl	8006198 <__multiply>
 800635c:	4639      	mov	r1, r7
 800635e:	4680      	mov	r8, r0
 8006360:	4630      	mov	r0, r6
 8006362:	f7ff fe47 	bl	8005ff4 <_Bfree>
 8006366:	4647      	mov	r7, r8
 8006368:	106d      	asrs	r5, r5, #1
 800636a:	d00b      	beq.n	8006384 <__pow5mult+0xa0>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	b938      	cbnz	r0, 8006380 <__pow5mult+0x9c>
 8006370:	4622      	mov	r2, r4
 8006372:	4621      	mov	r1, r4
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff ff0f 	bl	8006198 <__multiply>
 800637a:	6020      	str	r0, [r4, #0]
 800637c:	f8c0 9000 	str.w	r9, [r0]
 8006380:	4604      	mov	r4, r0
 8006382:	e7e4      	b.n	800634e <__pow5mult+0x6a>
 8006384:	4638      	mov	r0, r7
 8006386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638a:	bf00      	nop
 800638c:	08007038 	.word	0x08007038
 8006390:	08006e01 	.word	0x08006e01
 8006394:	08006ee8 	.word	0x08006ee8

08006398 <__lshift>:
 8006398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	460c      	mov	r4, r1
 800639e:	6849      	ldr	r1, [r1, #4]
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063a6:	68a3      	ldr	r3, [r4, #8]
 80063a8:	4607      	mov	r7, r0
 80063aa:	4691      	mov	r9, r2
 80063ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063b0:	f108 0601 	add.w	r6, r8, #1
 80063b4:	42b3      	cmp	r3, r6
 80063b6:	db0b      	blt.n	80063d0 <__lshift+0x38>
 80063b8:	4638      	mov	r0, r7
 80063ba:	f7ff fddb 	bl	8005f74 <_Balloc>
 80063be:	4605      	mov	r5, r0
 80063c0:	b948      	cbnz	r0, 80063d6 <__lshift+0x3e>
 80063c2:	4602      	mov	r2, r0
 80063c4:	4b28      	ldr	r3, [pc, #160]	; (8006468 <__lshift+0xd0>)
 80063c6:	4829      	ldr	r0, [pc, #164]	; (800646c <__lshift+0xd4>)
 80063c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063cc:	f000 fbca 	bl	8006b64 <__assert_func>
 80063d0:	3101      	adds	r1, #1
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	e7ee      	b.n	80063b4 <__lshift+0x1c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	f100 0114 	add.w	r1, r0, #20
 80063dc:	f100 0210 	add.w	r2, r0, #16
 80063e0:	4618      	mov	r0, r3
 80063e2:	4553      	cmp	r3, sl
 80063e4:	db33      	blt.n	800644e <__lshift+0xb6>
 80063e6:	6920      	ldr	r0, [r4, #16]
 80063e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063ec:	f104 0314 	add.w	r3, r4, #20
 80063f0:	f019 091f 	ands.w	r9, r9, #31
 80063f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063fc:	d02b      	beq.n	8006456 <__lshift+0xbe>
 80063fe:	f1c9 0e20 	rsb	lr, r9, #32
 8006402:	468a      	mov	sl, r1
 8006404:	2200      	movs	r2, #0
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	fa00 f009 	lsl.w	r0, r0, r9
 800640c:	4302      	orrs	r2, r0
 800640e:	f84a 2b04 	str.w	r2, [sl], #4
 8006412:	f853 2b04 	ldr.w	r2, [r3], #4
 8006416:	459c      	cmp	ip, r3
 8006418:	fa22 f20e 	lsr.w	r2, r2, lr
 800641c:	d8f3      	bhi.n	8006406 <__lshift+0x6e>
 800641e:	ebac 0304 	sub.w	r3, ip, r4
 8006422:	3b15      	subs	r3, #21
 8006424:	f023 0303 	bic.w	r3, r3, #3
 8006428:	3304      	adds	r3, #4
 800642a:	f104 0015 	add.w	r0, r4, #21
 800642e:	4584      	cmp	ip, r0
 8006430:	bf38      	it	cc
 8006432:	2304      	movcc	r3, #4
 8006434:	50ca      	str	r2, [r1, r3]
 8006436:	b10a      	cbz	r2, 800643c <__lshift+0xa4>
 8006438:	f108 0602 	add.w	r6, r8, #2
 800643c:	3e01      	subs	r6, #1
 800643e:	4638      	mov	r0, r7
 8006440:	612e      	str	r6, [r5, #16]
 8006442:	4621      	mov	r1, r4
 8006444:	f7ff fdd6 	bl	8005ff4 <_Bfree>
 8006448:	4628      	mov	r0, r5
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006452:	3301      	adds	r3, #1
 8006454:	e7c5      	b.n	80063e2 <__lshift+0x4a>
 8006456:	3904      	subs	r1, #4
 8006458:	f853 2b04 	ldr.w	r2, [r3], #4
 800645c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006460:	459c      	cmp	ip, r3
 8006462:	d8f9      	bhi.n	8006458 <__lshift+0xc0>
 8006464:	e7ea      	b.n	800643c <__lshift+0xa4>
 8006466:	bf00      	nop
 8006468:	08006e77 	.word	0x08006e77
 800646c:	08006ee8 	.word	0x08006ee8

08006470 <__mcmp>:
 8006470:	b530      	push	{r4, r5, lr}
 8006472:	6902      	ldr	r2, [r0, #16]
 8006474:	690c      	ldr	r4, [r1, #16]
 8006476:	1b12      	subs	r2, r2, r4
 8006478:	d10e      	bne.n	8006498 <__mcmp+0x28>
 800647a:	f100 0314 	add.w	r3, r0, #20
 800647e:	3114      	adds	r1, #20
 8006480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800648c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006490:	42a5      	cmp	r5, r4
 8006492:	d003      	beq.n	800649c <__mcmp+0x2c>
 8006494:	d305      	bcc.n	80064a2 <__mcmp+0x32>
 8006496:	2201      	movs	r2, #1
 8006498:	4610      	mov	r0, r2
 800649a:	bd30      	pop	{r4, r5, pc}
 800649c:	4283      	cmp	r3, r0
 800649e:	d3f3      	bcc.n	8006488 <__mcmp+0x18>
 80064a0:	e7fa      	b.n	8006498 <__mcmp+0x28>
 80064a2:	f04f 32ff 	mov.w	r2, #4294967295
 80064a6:	e7f7      	b.n	8006498 <__mcmp+0x28>

080064a8 <__mdiff>:
 80064a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	4606      	mov	r6, r0
 80064b0:	4611      	mov	r1, r2
 80064b2:	4620      	mov	r0, r4
 80064b4:	4617      	mov	r7, r2
 80064b6:	f7ff ffdb 	bl	8006470 <__mcmp>
 80064ba:	1e05      	subs	r5, r0, #0
 80064bc:	d110      	bne.n	80064e0 <__mdiff+0x38>
 80064be:	4629      	mov	r1, r5
 80064c0:	4630      	mov	r0, r6
 80064c2:	f7ff fd57 	bl	8005f74 <_Balloc>
 80064c6:	b930      	cbnz	r0, 80064d6 <__mdiff+0x2e>
 80064c8:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <__mdiff+0x108>)
 80064ca:	4602      	mov	r2, r0
 80064cc:	f240 2132 	movw	r1, #562	; 0x232
 80064d0:	4838      	ldr	r0, [pc, #224]	; (80065b4 <__mdiff+0x10c>)
 80064d2:	f000 fb47 	bl	8006b64 <__assert_func>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	bfa4      	itt	ge
 80064e2:	463b      	movge	r3, r7
 80064e4:	4627      	movge	r7, r4
 80064e6:	4630      	mov	r0, r6
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	bfa6      	itte	ge
 80064ec:	461c      	movge	r4, r3
 80064ee:	2500      	movge	r5, #0
 80064f0:	2501      	movlt	r5, #1
 80064f2:	f7ff fd3f 	bl	8005f74 <_Balloc>
 80064f6:	b920      	cbnz	r0, 8006502 <__mdiff+0x5a>
 80064f8:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <__mdiff+0x108>)
 80064fa:	4602      	mov	r2, r0
 80064fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006500:	e7e6      	b.n	80064d0 <__mdiff+0x28>
 8006502:	693e      	ldr	r6, [r7, #16]
 8006504:	60c5      	str	r5, [r0, #12]
 8006506:	6925      	ldr	r5, [r4, #16]
 8006508:	f107 0114 	add.w	r1, r7, #20
 800650c:	f104 0914 	add.w	r9, r4, #20
 8006510:	f100 0e14 	add.w	lr, r0, #20
 8006514:	f107 0210 	add.w	r2, r7, #16
 8006518:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800651c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006520:	46f2      	mov	sl, lr
 8006522:	2700      	movs	r7, #0
 8006524:	f859 3b04 	ldr.w	r3, [r9], #4
 8006528:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800652c:	fa1f f883 	uxth.w	r8, r3
 8006530:	fa17 f78b 	uxtah	r7, r7, fp
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	eba7 0808 	sub.w	r8, r7, r8
 800653a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800653e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006542:	fa1f f888 	uxth.w	r8, r8
 8006546:	141f      	asrs	r7, r3, #16
 8006548:	454d      	cmp	r5, r9
 800654a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800654e:	f84a 3b04 	str.w	r3, [sl], #4
 8006552:	d8e7      	bhi.n	8006524 <__mdiff+0x7c>
 8006554:	1b2b      	subs	r3, r5, r4
 8006556:	3b15      	subs	r3, #21
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	3304      	adds	r3, #4
 800655e:	3415      	adds	r4, #21
 8006560:	42a5      	cmp	r5, r4
 8006562:	bf38      	it	cc
 8006564:	2304      	movcc	r3, #4
 8006566:	4419      	add	r1, r3
 8006568:	4473      	add	r3, lr
 800656a:	469e      	mov	lr, r3
 800656c:	460d      	mov	r5, r1
 800656e:	4565      	cmp	r5, ip
 8006570:	d30e      	bcc.n	8006590 <__mdiff+0xe8>
 8006572:	f10c 0203 	add.w	r2, ip, #3
 8006576:	1a52      	subs	r2, r2, r1
 8006578:	f022 0203 	bic.w	r2, r2, #3
 800657c:	3903      	subs	r1, #3
 800657e:	458c      	cmp	ip, r1
 8006580:	bf38      	it	cc
 8006582:	2200      	movcc	r2, #0
 8006584:	441a      	add	r2, r3
 8006586:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800658a:	b17b      	cbz	r3, 80065ac <__mdiff+0x104>
 800658c:	6106      	str	r6, [r0, #16]
 800658e:	e7a5      	b.n	80064dc <__mdiff+0x34>
 8006590:	f855 8b04 	ldr.w	r8, [r5], #4
 8006594:	fa17 f488 	uxtah	r4, r7, r8
 8006598:	1422      	asrs	r2, r4, #16
 800659a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800659e:	b2a4      	uxth	r4, r4
 80065a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80065a4:	f84e 4b04 	str.w	r4, [lr], #4
 80065a8:	1417      	asrs	r7, r2, #16
 80065aa:	e7e0      	b.n	800656e <__mdiff+0xc6>
 80065ac:	3e01      	subs	r6, #1
 80065ae:	e7ea      	b.n	8006586 <__mdiff+0xde>
 80065b0:	08006e77 	.word	0x08006e77
 80065b4:	08006ee8 	.word	0x08006ee8

080065b8 <__d2b>:
 80065b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065bc:	4689      	mov	r9, r1
 80065be:	2101      	movs	r1, #1
 80065c0:	ec57 6b10 	vmov	r6, r7, d0
 80065c4:	4690      	mov	r8, r2
 80065c6:	f7ff fcd5 	bl	8005f74 <_Balloc>
 80065ca:	4604      	mov	r4, r0
 80065cc:	b930      	cbnz	r0, 80065dc <__d2b+0x24>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <__d2b+0xb0>)
 80065d2:	4826      	ldr	r0, [pc, #152]	; (800666c <__d2b+0xb4>)
 80065d4:	f240 310a 	movw	r1, #778	; 0x30a
 80065d8:	f000 fac4 	bl	8006b64 <__assert_func>
 80065dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80065e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065e4:	bb35      	cbnz	r5, 8006634 <__d2b+0x7c>
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	d028      	beq.n	800663e <__d2b+0x86>
 80065ec:	4668      	mov	r0, sp
 80065ee:	9600      	str	r6, [sp, #0]
 80065f0:	f7ff fd8c 	bl	800610c <__lo0bits>
 80065f4:	9900      	ldr	r1, [sp, #0]
 80065f6:	b300      	cbz	r0, 800663a <__d2b+0x82>
 80065f8:	9a01      	ldr	r2, [sp, #4]
 80065fa:	f1c0 0320 	rsb	r3, r0, #32
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	430b      	orrs	r3, r1
 8006604:	40c2      	lsrs	r2, r0
 8006606:	6163      	str	r3, [r4, #20]
 8006608:	9201      	str	r2, [sp, #4]
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	61a3      	str	r3, [r4, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf14      	ite	ne
 8006612:	2202      	movne	r2, #2
 8006614:	2201      	moveq	r2, #1
 8006616:	6122      	str	r2, [r4, #16]
 8006618:	b1d5      	cbz	r5, 8006650 <__d2b+0x98>
 800661a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800661e:	4405      	add	r5, r0
 8006620:	f8c9 5000 	str.w	r5, [r9]
 8006624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006628:	f8c8 0000 	str.w	r0, [r8]
 800662c:	4620      	mov	r0, r4
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006638:	e7d5      	b.n	80065e6 <__d2b+0x2e>
 800663a:	6161      	str	r1, [r4, #20]
 800663c:	e7e5      	b.n	800660a <__d2b+0x52>
 800663e:	a801      	add	r0, sp, #4
 8006640:	f7ff fd64 	bl	800610c <__lo0bits>
 8006644:	9b01      	ldr	r3, [sp, #4]
 8006646:	6163      	str	r3, [r4, #20]
 8006648:	2201      	movs	r2, #1
 800664a:	6122      	str	r2, [r4, #16]
 800664c:	3020      	adds	r0, #32
 800664e:	e7e3      	b.n	8006618 <__d2b+0x60>
 8006650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006658:	f8c9 0000 	str.w	r0, [r9]
 800665c:	6918      	ldr	r0, [r3, #16]
 800665e:	f7ff fd35 	bl	80060cc <__hi0bits>
 8006662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006666:	e7df      	b.n	8006628 <__d2b+0x70>
 8006668:	08006e77 	.word	0x08006e77
 800666c:	08006ee8 	.word	0x08006ee8

08006670 <_calloc_r>:
 8006670:	b513      	push	{r0, r1, r4, lr}
 8006672:	434a      	muls	r2, r1
 8006674:	4611      	mov	r1, r2
 8006676:	9201      	str	r2, [sp, #4]
 8006678:	f000 f85a 	bl	8006730 <_malloc_r>
 800667c:	4604      	mov	r4, r0
 800667e:	b118      	cbz	r0, 8006688 <_calloc_r+0x18>
 8006680:	9a01      	ldr	r2, [sp, #4]
 8006682:	2100      	movs	r1, #0
 8006684:	f7fd fe02 	bl	800428c <memset>
 8006688:	4620      	mov	r0, r4
 800668a:	b002      	add	sp, #8
 800668c:	bd10      	pop	{r4, pc}
	...

08006690 <_free_r>:
 8006690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006692:	2900      	cmp	r1, #0
 8006694:	d048      	beq.n	8006728 <_free_r+0x98>
 8006696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669a:	9001      	str	r0, [sp, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f1a1 0404 	sub.w	r4, r1, #4
 80066a2:	bfb8      	it	lt
 80066a4:	18e4      	addlt	r4, r4, r3
 80066a6:	f000 fae3 	bl	8006c70 <__malloc_lock>
 80066aa:	4a20      	ldr	r2, [pc, #128]	; (800672c <_free_r+0x9c>)
 80066ac:	9801      	ldr	r0, [sp, #4]
 80066ae:	6813      	ldr	r3, [r2, #0]
 80066b0:	4615      	mov	r5, r2
 80066b2:	b933      	cbnz	r3, 80066c2 <_free_r+0x32>
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	6014      	str	r4, [r2, #0]
 80066b8:	b003      	add	sp, #12
 80066ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066be:	f000 badd 	b.w	8006c7c <__malloc_unlock>
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	d90b      	bls.n	80066de <_free_r+0x4e>
 80066c6:	6821      	ldr	r1, [r4, #0]
 80066c8:	1862      	adds	r2, r4, r1
 80066ca:	4293      	cmp	r3, r2
 80066cc:	bf04      	itt	eq
 80066ce:	681a      	ldreq	r2, [r3, #0]
 80066d0:	685b      	ldreq	r3, [r3, #4]
 80066d2:	6063      	str	r3, [r4, #4]
 80066d4:	bf04      	itt	eq
 80066d6:	1852      	addeq	r2, r2, r1
 80066d8:	6022      	streq	r2, [r4, #0]
 80066da:	602c      	str	r4, [r5, #0]
 80066dc:	e7ec      	b.n	80066b8 <_free_r+0x28>
 80066de:	461a      	mov	r2, r3
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b10b      	cbz	r3, 80066e8 <_free_r+0x58>
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	d9fa      	bls.n	80066de <_free_r+0x4e>
 80066e8:	6811      	ldr	r1, [r2, #0]
 80066ea:	1855      	adds	r5, r2, r1
 80066ec:	42a5      	cmp	r5, r4
 80066ee:	d10b      	bne.n	8006708 <_free_r+0x78>
 80066f0:	6824      	ldr	r4, [r4, #0]
 80066f2:	4421      	add	r1, r4
 80066f4:	1854      	adds	r4, r2, r1
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	6011      	str	r1, [r2, #0]
 80066fa:	d1dd      	bne.n	80066b8 <_free_r+0x28>
 80066fc:	681c      	ldr	r4, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	6053      	str	r3, [r2, #4]
 8006702:	4421      	add	r1, r4
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	e7d7      	b.n	80066b8 <_free_r+0x28>
 8006708:	d902      	bls.n	8006710 <_free_r+0x80>
 800670a:	230c      	movs	r3, #12
 800670c:	6003      	str	r3, [r0, #0]
 800670e:	e7d3      	b.n	80066b8 <_free_r+0x28>
 8006710:	6825      	ldr	r5, [r4, #0]
 8006712:	1961      	adds	r1, r4, r5
 8006714:	428b      	cmp	r3, r1
 8006716:	bf04      	itt	eq
 8006718:	6819      	ldreq	r1, [r3, #0]
 800671a:	685b      	ldreq	r3, [r3, #4]
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	bf04      	itt	eq
 8006720:	1949      	addeq	r1, r1, r5
 8006722:	6021      	streq	r1, [r4, #0]
 8006724:	6054      	str	r4, [r2, #4]
 8006726:	e7c7      	b.n	80066b8 <_free_r+0x28>
 8006728:	b003      	add	sp, #12
 800672a:	bd30      	pop	{r4, r5, pc}
 800672c:	20000234 	.word	0x20000234

08006730 <_malloc_r>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	1ccd      	adds	r5, r1, #3
 8006734:	f025 0503 	bic.w	r5, r5, #3
 8006738:	3508      	adds	r5, #8
 800673a:	2d0c      	cmp	r5, #12
 800673c:	bf38      	it	cc
 800673e:	250c      	movcc	r5, #12
 8006740:	2d00      	cmp	r5, #0
 8006742:	4606      	mov	r6, r0
 8006744:	db01      	blt.n	800674a <_malloc_r+0x1a>
 8006746:	42a9      	cmp	r1, r5
 8006748:	d903      	bls.n	8006752 <_malloc_r+0x22>
 800674a:	230c      	movs	r3, #12
 800674c:	6033      	str	r3, [r6, #0]
 800674e:	2000      	movs	r0, #0
 8006750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006752:	f000 fa8d 	bl	8006c70 <__malloc_lock>
 8006756:	4921      	ldr	r1, [pc, #132]	; (80067dc <_malloc_r+0xac>)
 8006758:	680a      	ldr	r2, [r1, #0]
 800675a:	4614      	mov	r4, r2
 800675c:	b99c      	cbnz	r4, 8006786 <_malloc_r+0x56>
 800675e:	4f20      	ldr	r7, [pc, #128]	; (80067e0 <_malloc_r+0xb0>)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b923      	cbnz	r3, 800676e <_malloc_r+0x3e>
 8006764:	4621      	mov	r1, r4
 8006766:	4630      	mov	r0, r6
 8006768:	f000 f996 	bl	8006a98 <_sbrk_r>
 800676c:	6038      	str	r0, [r7, #0]
 800676e:	4629      	mov	r1, r5
 8006770:	4630      	mov	r0, r6
 8006772:	f000 f991 	bl	8006a98 <_sbrk_r>
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	d123      	bne.n	80067c2 <_malloc_r+0x92>
 800677a:	230c      	movs	r3, #12
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	4630      	mov	r0, r6
 8006780:	f000 fa7c 	bl	8006c7c <__malloc_unlock>
 8006784:	e7e3      	b.n	800674e <_malloc_r+0x1e>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	1b5b      	subs	r3, r3, r5
 800678a:	d417      	bmi.n	80067bc <_malloc_r+0x8c>
 800678c:	2b0b      	cmp	r3, #11
 800678e:	d903      	bls.n	8006798 <_malloc_r+0x68>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	441c      	add	r4, r3
 8006794:	6025      	str	r5, [r4, #0]
 8006796:	e004      	b.n	80067a2 <_malloc_r+0x72>
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	42a2      	cmp	r2, r4
 800679c:	bf0c      	ite	eq
 800679e:	600b      	streq	r3, [r1, #0]
 80067a0:	6053      	strne	r3, [r2, #4]
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 fa6a 	bl	8006c7c <__malloc_unlock>
 80067a8:	f104 000b 	add.w	r0, r4, #11
 80067ac:	1d23      	adds	r3, r4, #4
 80067ae:	f020 0007 	bic.w	r0, r0, #7
 80067b2:	1ac2      	subs	r2, r0, r3
 80067b4:	d0cc      	beq.n	8006750 <_malloc_r+0x20>
 80067b6:	1a1b      	subs	r3, r3, r0
 80067b8:	50a3      	str	r3, [r4, r2]
 80067ba:	e7c9      	b.n	8006750 <_malloc_r+0x20>
 80067bc:	4622      	mov	r2, r4
 80067be:	6864      	ldr	r4, [r4, #4]
 80067c0:	e7cc      	b.n	800675c <_malloc_r+0x2c>
 80067c2:	1cc4      	adds	r4, r0, #3
 80067c4:	f024 0403 	bic.w	r4, r4, #3
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d0e3      	beq.n	8006794 <_malloc_r+0x64>
 80067cc:	1a21      	subs	r1, r4, r0
 80067ce:	4630      	mov	r0, r6
 80067d0:	f000 f962 	bl	8006a98 <_sbrk_r>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d1dd      	bne.n	8006794 <_malloc_r+0x64>
 80067d8:	e7cf      	b.n	800677a <_malloc_r+0x4a>
 80067da:	bf00      	nop
 80067dc:	20000234 	.word	0x20000234
 80067e0:	20000238 	.word	0x20000238

080067e4 <__sfputc_r>:
 80067e4:	6893      	ldr	r3, [r2, #8]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	b410      	push	{r4}
 80067ec:	6093      	str	r3, [r2, #8]
 80067ee:	da08      	bge.n	8006802 <__sfputc_r+0x1e>
 80067f0:	6994      	ldr	r4, [r2, #24]
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	db01      	blt.n	80067fa <__sfputc_r+0x16>
 80067f6:	290a      	cmp	r1, #10
 80067f8:	d103      	bne.n	8006802 <__sfputc_r+0x1e>
 80067fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067fe:	f7fe ba45 	b.w	8004c8c <__swbuf_r>
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	1c58      	adds	r0, r3, #1
 8006806:	6010      	str	r0, [r2, #0]
 8006808:	7019      	strb	r1, [r3, #0]
 800680a:	4608      	mov	r0, r1
 800680c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006810:	4770      	bx	lr

08006812 <__sfputs_r>:
 8006812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	4614      	mov	r4, r2
 800681a:	18d5      	adds	r5, r2, r3
 800681c:	42ac      	cmp	r4, r5
 800681e:	d101      	bne.n	8006824 <__sfputs_r+0x12>
 8006820:	2000      	movs	r0, #0
 8006822:	e007      	b.n	8006834 <__sfputs_r+0x22>
 8006824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006828:	463a      	mov	r2, r7
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ffda 	bl	80067e4 <__sfputc_r>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d1f3      	bne.n	800681c <__sfputs_r+0xa>
 8006834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006838 <_vfiprintf_r>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	460d      	mov	r5, r1
 800683e:	b09d      	sub	sp, #116	; 0x74
 8006840:	4614      	mov	r4, r2
 8006842:	4698      	mov	r8, r3
 8006844:	4606      	mov	r6, r0
 8006846:	b118      	cbz	r0, 8006850 <_vfiprintf_r+0x18>
 8006848:	6983      	ldr	r3, [r0, #24]
 800684a:	b90b      	cbnz	r3, 8006850 <_vfiprintf_r+0x18>
 800684c:	f7ff fa72 	bl	8005d34 <__sinit>
 8006850:	4b89      	ldr	r3, [pc, #548]	; (8006a78 <_vfiprintf_r+0x240>)
 8006852:	429d      	cmp	r5, r3
 8006854:	d11b      	bne.n	800688e <_vfiprintf_r+0x56>
 8006856:	6875      	ldr	r5, [r6, #4]
 8006858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800685a:	07d9      	lsls	r1, r3, #31
 800685c:	d405      	bmi.n	800686a <_vfiprintf_r+0x32>
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	059a      	lsls	r2, r3, #22
 8006862:	d402      	bmi.n	800686a <_vfiprintf_r+0x32>
 8006864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006866:	f7ff fb08 	bl	8005e7a <__retarget_lock_acquire_recursive>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	071b      	lsls	r3, r3, #28
 800686e:	d501      	bpl.n	8006874 <_vfiprintf_r+0x3c>
 8006870:	692b      	ldr	r3, [r5, #16]
 8006872:	b9eb      	cbnz	r3, 80068b0 <_vfiprintf_r+0x78>
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7fe fa5a 	bl	8004d30 <__swsetup_r>
 800687c:	b1c0      	cbz	r0, 80068b0 <_vfiprintf_r+0x78>
 800687e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006880:	07dc      	lsls	r4, r3, #31
 8006882:	d50e      	bpl.n	80068a2 <_vfiprintf_r+0x6a>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	b01d      	add	sp, #116	; 0x74
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	4b7b      	ldr	r3, [pc, #492]	; (8006a7c <_vfiprintf_r+0x244>)
 8006890:	429d      	cmp	r5, r3
 8006892:	d101      	bne.n	8006898 <_vfiprintf_r+0x60>
 8006894:	68b5      	ldr	r5, [r6, #8]
 8006896:	e7df      	b.n	8006858 <_vfiprintf_r+0x20>
 8006898:	4b79      	ldr	r3, [pc, #484]	; (8006a80 <_vfiprintf_r+0x248>)
 800689a:	429d      	cmp	r5, r3
 800689c:	bf08      	it	eq
 800689e:	68f5      	ldreq	r5, [r6, #12]
 80068a0:	e7da      	b.n	8006858 <_vfiprintf_r+0x20>
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	0598      	lsls	r0, r3, #22
 80068a6:	d4ed      	bmi.n	8006884 <_vfiprintf_r+0x4c>
 80068a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068aa:	f7ff fae7 	bl	8005e7c <__retarget_lock_release_recursive>
 80068ae:	e7e9      	b.n	8006884 <_vfiprintf_r+0x4c>
 80068b0:	2300      	movs	r3, #0
 80068b2:	9309      	str	r3, [sp, #36]	; 0x24
 80068b4:	2320      	movs	r3, #32
 80068b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80068be:	2330      	movs	r3, #48	; 0x30
 80068c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a84 <_vfiprintf_r+0x24c>
 80068c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c8:	f04f 0901 	mov.w	r9, #1
 80068cc:	4623      	mov	r3, r4
 80068ce:	469a      	mov	sl, r3
 80068d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068d4:	b10a      	cbz	r2, 80068da <_vfiprintf_r+0xa2>
 80068d6:	2a25      	cmp	r2, #37	; 0x25
 80068d8:	d1f9      	bne.n	80068ce <_vfiprintf_r+0x96>
 80068da:	ebba 0b04 	subs.w	fp, sl, r4
 80068de:	d00b      	beq.n	80068f8 <_vfiprintf_r+0xc0>
 80068e0:	465b      	mov	r3, fp
 80068e2:	4622      	mov	r2, r4
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ff93 	bl	8006812 <__sfputs_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	f000 80aa 	beq.w	8006a46 <_vfiprintf_r+0x20e>
 80068f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f4:	445a      	add	r2, fp
 80068f6:	9209      	str	r2, [sp, #36]	; 0x24
 80068f8:	f89a 3000 	ldrb.w	r3, [sl]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80a2 	beq.w	8006a46 <_vfiprintf_r+0x20e>
 8006902:	2300      	movs	r3, #0
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800690c:	f10a 0a01 	add.w	sl, sl, #1
 8006910:	9304      	str	r3, [sp, #16]
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006918:	931a      	str	r3, [sp, #104]	; 0x68
 800691a:	4654      	mov	r4, sl
 800691c:	2205      	movs	r2, #5
 800691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006922:	4858      	ldr	r0, [pc, #352]	; (8006a84 <_vfiprintf_r+0x24c>)
 8006924:	f7f9 fc64 	bl	80001f0 <memchr>
 8006928:	9a04      	ldr	r2, [sp, #16]
 800692a:	b9d8      	cbnz	r0, 8006964 <_vfiprintf_r+0x12c>
 800692c:	06d1      	lsls	r1, r2, #27
 800692e:	bf44      	itt	mi
 8006930:	2320      	movmi	r3, #32
 8006932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006936:	0713      	lsls	r3, r2, #28
 8006938:	bf44      	itt	mi
 800693a:	232b      	movmi	r3, #43	; 0x2b
 800693c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006940:	f89a 3000 	ldrb.w	r3, [sl]
 8006944:	2b2a      	cmp	r3, #42	; 0x2a
 8006946:	d015      	beq.n	8006974 <_vfiprintf_r+0x13c>
 8006948:	9a07      	ldr	r2, [sp, #28]
 800694a:	4654      	mov	r4, sl
 800694c:	2000      	movs	r0, #0
 800694e:	f04f 0c0a 	mov.w	ip, #10
 8006952:	4621      	mov	r1, r4
 8006954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006958:	3b30      	subs	r3, #48	; 0x30
 800695a:	2b09      	cmp	r3, #9
 800695c:	d94e      	bls.n	80069fc <_vfiprintf_r+0x1c4>
 800695e:	b1b0      	cbz	r0, 800698e <_vfiprintf_r+0x156>
 8006960:	9207      	str	r2, [sp, #28]
 8006962:	e014      	b.n	800698e <_vfiprintf_r+0x156>
 8006964:	eba0 0308 	sub.w	r3, r0, r8
 8006968:	fa09 f303 	lsl.w	r3, r9, r3
 800696c:	4313      	orrs	r3, r2
 800696e:	9304      	str	r3, [sp, #16]
 8006970:	46a2      	mov	sl, r4
 8006972:	e7d2      	b.n	800691a <_vfiprintf_r+0xe2>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1d19      	adds	r1, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9103      	str	r1, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbb      	ittet	lt
 8006980:	425b      	neglt	r3, r3
 8006982:	f042 0202 	orrlt.w	r2, r2, #2
 8006986:	9307      	strge	r3, [sp, #28]
 8006988:	9307      	strlt	r3, [sp, #28]
 800698a:	bfb8      	it	lt
 800698c:	9204      	strlt	r2, [sp, #16]
 800698e:	7823      	ldrb	r3, [r4, #0]
 8006990:	2b2e      	cmp	r3, #46	; 0x2e
 8006992:	d10c      	bne.n	80069ae <_vfiprintf_r+0x176>
 8006994:	7863      	ldrb	r3, [r4, #1]
 8006996:	2b2a      	cmp	r3, #42	; 0x2a
 8006998:	d135      	bne.n	8006a06 <_vfiprintf_r+0x1ce>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	1d1a      	adds	r2, r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9203      	str	r2, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfb8      	it	lt
 80069a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80069aa:	3402      	adds	r4, #2
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a94 <_vfiprintf_r+0x25c>
 80069b2:	7821      	ldrb	r1, [r4, #0]
 80069b4:	2203      	movs	r2, #3
 80069b6:	4650      	mov	r0, sl
 80069b8:	f7f9 fc1a 	bl	80001f0 <memchr>
 80069bc:	b140      	cbz	r0, 80069d0 <_vfiprintf_r+0x198>
 80069be:	2340      	movs	r3, #64	; 0x40
 80069c0:	eba0 000a 	sub.w	r0, r0, sl
 80069c4:	fa03 f000 	lsl.w	r0, r3, r0
 80069c8:	9b04      	ldr	r3, [sp, #16]
 80069ca:	4303      	orrs	r3, r0
 80069cc:	3401      	adds	r4, #1
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	482c      	ldr	r0, [pc, #176]	; (8006a88 <_vfiprintf_r+0x250>)
 80069d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069da:	2206      	movs	r2, #6
 80069dc:	f7f9 fc08 	bl	80001f0 <memchr>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d03f      	beq.n	8006a64 <_vfiprintf_r+0x22c>
 80069e4:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <_vfiprintf_r+0x254>)
 80069e6:	bb1b      	cbnz	r3, 8006a30 <_vfiprintf_r+0x1f8>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	3307      	adds	r3, #7
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f6:	443b      	add	r3, r7
 80069f8:	9309      	str	r3, [sp, #36]	; 0x24
 80069fa:	e767      	b.n	80068cc <_vfiprintf_r+0x94>
 80069fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a00:	460c      	mov	r4, r1
 8006a02:	2001      	movs	r0, #1
 8006a04:	e7a5      	b.n	8006952 <_vfiprintf_r+0x11a>
 8006a06:	2300      	movs	r3, #0
 8006a08:	3401      	adds	r4, #1
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f04f 0c0a 	mov.w	ip, #10
 8006a12:	4620      	mov	r0, r4
 8006a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a18:	3a30      	subs	r2, #48	; 0x30
 8006a1a:	2a09      	cmp	r2, #9
 8006a1c:	d903      	bls.n	8006a26 <_vfiprintf_r+0x1ee>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c5      	beq.n	80069ae <_vfiprintf_r+0x176>
 8006a22:	9105      	str	r1, [sp, #20]
 8006a24:	e7c3      	b.n	80069ae <_vfiprintf_r+0x176>
 8006a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e7f0      	b.n	8006a12 <_vfiprintf_r+0x1da>
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <_vfiprintf_r+0x258>)
 8006a38:	a904      	add	r1, sp, #16
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7fd fcce 	bl	80043dc <_printf_float>
 8006a40:	4607      	mov	r7, r0
 8006a42:	1c78      	adds	r0, r7, #1
 8006a44:	d1d6      	bne.n	80069f4 <_vfiprintf_r+0x1bc>
 8006a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a48:	07d9      	lsls	r1, r3, #31
 8006a4a:	d405      	bmi.n	8006a58 <_vfiprintf_r+0x220>
 8006a4c:	89ab      	ldrh	r3, [r5, #12]
 8006a4e:	059a      	lsls	r2, r3, #22
 8006a50:	d402      	bmi.n	8006a58 <_vfiprintf_r+0x220>
 8006a52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a54:	f7ff fa12 	bl	8005e7c <__retarget_lock_release_recursive>
 8006a58:	89ab      	ldrh	r3, [r5, #12]
 8006a5a:	065b      	lsls	r3, r3, #25
 8006a5c:	f53f af12 	bmi.w	8006884 <_vfiprintf_r+0x4c>
 8006a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a62:	e711      	b.n	8006888 <_vfiprintf_r+0x50>
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <_vfiprintf_r+0x258>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7fd ff58 	bl	8004924 <_printf_i>
 8006a74:	e7e4      	b.n	8006a40 <_vfiprintf_r+0x208>
 8006a76:	bf00      	nop
 8006a78:	08006ea8 	.word	0x08006ea8
 8006a7c:	08006ec8 	.word	0x08006ec8
 8006a80:	08006e88 	.word	0x08006e88
 8006a84:	08007044 	.word	0x08007044
 8006a88:	0800704e 	.word	0x0800704e
 8006a8c:	080043dd 	.word	0x080043dd
 8006a90:	08006813 	.word	0x08006813
 8006a94:	0800704a 	.word	0x0800704a

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_sbrk_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fa ff7c 	bl	80019a0 <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	200002e4 	.word	0x200002e4

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 f8e2 	bl	8006c88 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	05db      	lsls	r3, r3, #23
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	2302      	movs	r3, #2
 8006af2:	2200      	movs	r2, #0
 8006af4:	f000 f898 	bl	8006c28 <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b817 	b.w	8006b40 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f885 	bl	8006c28 <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b831 	b.w	8006ba0 <_close_r>
	...

08006b40 <_write_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_write_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fa fed5 	bl	80018fe <_write>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_write_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_write_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	200002e4 	.word	0x200002e4

08006b64 <__assert_func>:
 8006b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b66:	4614      	mov	r4, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <__assert_func+0x2c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4605      	mov	r5, r0
 8006b70:	68d8      	ldr	r0, [r3, #12]
 8006b72:	b14c      	cbz	r4, 8006b88 <__assert_func+0x24>
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <__assert_func+0x30>)
 8006b76:	9100      	str	r1, [sp, #0]
 8006b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b7c:	4906      	ldr	r1, [pc, #24]	; (8006b98 <__assert_func+0x34>)
 8006b7e:	462b      	mov	r3, r5
 8006b80:	f000 f81e 	bl	8006bc0 <fiprintf>
 8006b84:	f000 f89f 	bl	8006cc6 <abort>
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <__assert_func+0x38>)
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	e7f3      	b.n	8006b76 <__assert_func+0x12>
 8006b8e:	bf00      	nop
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	08007055 	.word	0x08007055
 8006b98:	08007062 	.word	0x08007062
 8006b9c:	08007090 	.word	0x08007090

08006ba0 <_close_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d06      	ldr	r5, [pc, #24]	; (8006bbc <_close_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f7fa fec3 	bl	8001936 <_close>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_close_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_close_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	200002e4 	.word	0x200002e4

08006bc0 <fiprintf>:
 8006bc0:	b40e      	push	{r1, r2, r3}
 8006bc2:	b503      	push	{r0, r1, lr}
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	ab03      	add	r3, sp, #12
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <fiprintf+0x20>)
 8006bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bce:	6800      	ldr	r0, [r0, #0]
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	f7ff fe31 	bl	8006838 <_vfiprintf_r>
 8006bd6:	b002      	add	sp, #8
 8006bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bdc:	b003      	add	sp, #12
 8006bde:	4770      	bx	lr
 8006be0:	2000000c 	.word	0x2000000c

08006be4 <_fstat_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_fstat_r+0x20>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	f7fa feac 	bl	800194e <_fstat>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d102      	bne.n	8006c00 <_fstat_r+0x1c>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	b103      	cbz	r3, 8006c00 <_fstat_r+0x1c>
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
 8006c02:	bf00      	nop
 8006c04:	200002e4 	.word	0x200002e4

08006c08 <_isatty_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d06      	ldr	r5, [pc, #24]	; (8006c24 <_isatty_r+0x1c>)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4608      	mov	r0, r1
 8006c12:	602b      	str	r3, [r5, #0]
 8006c14:	f7fa feab 	bl	800196e <_isatty>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_isatty_r+0x1a>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_isatty_r+0x1a>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	200002e4 	.word	0x200002e4

08006c28 <_lseek_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	; (8006c48 <_lseek_r+0x20>)
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4608      	mov	r0, r1
 8006c30:	4611      	mov	r1, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fa fea4 	bl	8001984 <_lseek>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_lseek_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_lseek_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200002e4 	.word	0x200002e4

08006c4c <__ascii_mbtowc>:
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	b901      	cbnz	r1, 8006c52 <__ascii_mbtowc+0x6>
 8006c50:	a901      	add	r1, sp, #4
 8006c52:	b142      	cbz	r2, 8006c66 <__ascii_mbtowc+0x1a>
 8006c54:	b14b      	cbz	r3, 8006c6a <__ascii_mbtowc+0x1e>
 8006c56:	7813      	ldrb	r3, [r2, #0]
 8006c58:	600b      	str	r3, [r1, #0]
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	1e10      	subs	r0, r2, #0
 8006c5e:	bf18      	it	ne
 8006c60:	2001      	movne	r0, #1
 8006c62:	b002      	add	sp, #8
 8006c64:	4770      	bx	lr
 8006c66:	4610      	mov	r0, r2
 8006c68:	e7fb      	b.n	8006c62 <__ascii_mbtowc+0x16>
 8006c6a:	f06f 0001 	mvn.w	r0, #1
 8006c6e:	e7f8      	b.n	8006c62 <__ascii_mbtowc+0x16>

08006c70 <__malloc_lock>:
 8006c70:	4801      	ldr	r0, [pc, #4]	; (8006c78 <__malloc_lock+0x8>)
 8006c72:	f7ff b902 	b.w	8005e7a <__retarget_lock_acquire_recursive>
 8006c76:	bf00      	nop
 8006c78:	200002dc 	.word	0x200002dc

08006c7c <__malloc_unlock>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	; (8006c84 <__malloc_unlock+0x8>)
 8006c7e:	f7ff b8fd 	b.w	8005e7c <__retarget_lock_release_recursive>
 8006c82:	bf00      	nop
 8006c84:	200002dc 	.word	0x200002dc

08006c88 <_read_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	; (8006ca8 <_read_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa fe14 	bl	80018c4 <_read>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_read_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_read_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	200002e4 	.word	0x200002e4

08006cac <__ascii_wctomb>:
 8006cac:	b149      	cbz	r1, 8006cc2 <__ascii_wctomb+0x16>
 8006cae:	2aff      	cmp	r2, #255	; 0xff
 8006cb0:	bf85      	ittet	hi
 8006cb2:	238a      	movhi	r3, #138	; 0x8a
 8006cb4:	6003      	strhi	r3, [r0, #0]
 8006cb6:	700a      	strbls	r2, [r1, #0]
 8006cb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cbc:	bf98      	it	ls
 8006cbe:	2001      	movls	r0, #1
 8006cc0:	4770      	bx	lr
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	4770      	bx	lr

08006cc6 <abort>:
 8006cc6:	b508      	push	{r3, lr}
 8006cc8:	2006      	movs	r0, #6
 8006cca:	f000 f82b 	bl	8006d24 <raise>
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f7fa fdee 	bl	80018b0 <_exit>

08006cd4 <_raise_r>:
 8006cd4:	291f      	cmp	r1, #31
 8006cd6:	b538      	push	{r3, r4, r5, lr}
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	d904      	bls.n	8006ce8 <_raise_r+0x14>
 8006cde:	2316      	movs	r3, #22
 8006ce0:	6003      	str	r3, [r0, #0]
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cea:	b112      	cbz	r2, 8006cf2 <_raise_r+0x1e>
 8006cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cf0:	b94b      	cbnz	r3, 8006d06 <_raise_r+0x32>
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f830 	bl	8006d58 <_getpid_r>
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d02:	f000 b817 	b.w	8006d34 <_kill_r>
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d00a      	beq.n	8006d20 <_raise_r+0x4c>
 8006d0a:	1c59      	adds	r1, r3, #1
 8006d0c:	d103      	bne.n	8006d16 <_raise_r+0x42>
 8006d0e:	2316      	movs	r3, #22
 8006d10:	6003      	str	r3, [r0, #0]
 8006d12:	2001      	movs	r0, #1
 8006d14:	e7e7      	b.n	8006ce6 <_raise_r+0x12>
 8006d16:	2400      	movs	r4, #0
 8006d18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	4798      	blx	r3
 8006d20:	2000      	movs	r0, #0
 8006d22:	e7e0      	b.n	8006ce6 <_raise_r+0x12>

08006d24 <raise>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <raise+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f7ff bfd3 	b.w	8006cd4 <_raise_r>
 8006d2e:	bf00      	nop
 8006d30:	2000000c 	.word	0x2000000c

08006d34 <_kill_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d07      	ldr	r5, [pc, #28]	; (8006d54 <_kill_r+0x20>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	602b      	str	r3, [r5, #0]
 8006d42:	f7fa fda5 	bl	8001890 <_kill>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d102      	bne.n	8006d50 <_kill_r+0x1c>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	b103      	cbz	r3, 8006d50 <_kill_r+0x1c>
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
 8006d52:	bf00      	nop
 8006d54:	200002e4 	.word	0x200002e4

08006d58 <_getpid_r>:
 8006d58:	f7fa bd92 	b.w	8001880 <_getpid>

08006d5c <_init>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr

08006d68 <_fini>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

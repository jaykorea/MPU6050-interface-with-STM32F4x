
DFMmpu6050DMPv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  08010dd0  08010dd0  00020dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012254  08012254  0003021c  2**0
                  CONTENTS
  4 .ARM          00000008  08012254  08012254  00022254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801225c  0801225c  0003021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801225c  0801225c  0002225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012260  08012260  00022260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08012264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  2000021c  08012480  0003021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a50  08012480  00030a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fa7  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049da  00000000  00000000  000571f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0005bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  0005d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021299  00000000  00000000  0005eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002049d  00000000  00000000  0007fda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ec5  00000000  00000000  000a0246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014410b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d44  00000000  00000000  00144160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010db4 	.word	0x08010db4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08010db4 	.word	0x08010db4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9ef 	b.w	8001098 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a4 	b.w	8001098 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468c      	mov	ip, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8083 	bne.w	8000eea <__udivmoddi4+0x116>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d947      	bls.n	8000e7a <__udivmoddi4+0xa6>
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	b142      	cbz	r2, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	f1c2 0020 	rsb	r0, r2, #32
 8000df4:	fa24 f000 	lsr.w	r0, r4, r0
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4097      	lsls	r7, r2
 8000dfc:	ea40 0c01 	orr.w	ip, r0, r1
 8000e00:	4094      	lsls	r4, r2
 8000e02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e06:	0c23      	lsrs	r3, r4, #16
 8000e08:	fbbc f6f8 	udiv	r6, ip, r8
 8000e0c:	fa1f fe87 	uxth.w	lr, r7
 8000e10:	fb08 c116 	mls	r1, r8, r6, ip
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f10e 	mul.w	r1, r6, lr
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x60>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e26:	f080 8119 	bcs.w	800105c <__udivmoddi4+0x288>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 8116 	bls.w	800105c <__udivmoddi4+0x288>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d909      	bls.n	8000e60 <__udivmoddi4+0x8c>
 8000e4c:	193c      	adds	r4, r7, r4
 8000e4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e52:	f080 8105 	bcs.w	8001060 <__udivmoddi4+0x28c>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f240 8102 	bls.w	8001060 <__udivmoddi4+0x28c>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	443c      	add	r4, r7
 8000e60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e64:	eba4 040e 	sub.w	r4, r4, lr
 8000e68:	2600      	movs	r6, #0
 8000e6a:	b11d      	cbz	r5, 8000e74 <__udivmoddi4+0xa0>
 8000e6c:	40d4      	lsrs	r4, r2
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e9c5 4300 	strd	r4, r3, [r5]
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xaa>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d150      	bne.n	8000f28 <__udivmoddi4+0x154>
 8000e86:	1bcb      	subs	r3, r1, r7
 8000e88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8c:	fa1f f887 	uxth.w	r8, r7
 8000e90:	2601      	movs	r6, #1
 8000e92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e96:	0c21      	lsrs	r1, r4, #16
 8000e98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0xe4>
 8000ea8:	1879      	adds	r1, r7, r1
 8000eaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0xe2>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	f200 80e9 	bhi.w	8001088 <__udivmoddi4+0x2b4>
 8000eb6:	4684      	mov	ip, r0
 8000eb8:	1ac9      	subs	r1, r1, r3
 8000eba:	b2a3      	uxth	r3, r4
 8000ebc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ec8:	fb08 f800 	mul.w	r8, r8, r0
 8000ecc:	45a0      	cmp	r8, r4
 8000ece:	d907      	bls.n	8000ee0 <__udivmoddi4+0x10c>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x10a>
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	f200 80d9 	bhi.w	8001090 <__udivmoddi4+0x2bc>
 8000ede:	4618      	mov	r0, r3
 8000ee0:	eba4 0408 	sub.w	r4, r4, r8
 8000ee4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ee8:	e7bf      	b.n	8000e6a <__udivmoddi4+0x96>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d909      	bls.n	8000f02 <__udivmoddi4+0x12e>
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	f000 80b1 	beq.w	8001056 <__udivmoddi4+0x282>
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	e9c5 0100 	strd	r0, r1, [r5]
 8000efa:	4630      	mov	r0, r6
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	fab3 f683 	clz	r6, r3
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	d14a      	bne.n	8000fa0 <__udivmoddi4+0x1cc>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0x140>
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	f200 80b8 	bhi.w	8001084 <__udivmoddi4+0x2b0>
 8000f14:	1a84      	subs	r4, r0, r2
 8000f16:	eb61 0103 	sbc.w	r1, r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	468c      	mov	ip, r1
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d0a8      	beq.n	8000e74 <__udivmoddi4+0xa0>
 8000f22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f26:	e7a5      	b.n	8000e74 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f30:	4097      	lsls	r7, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f3a:	40d9      	lsrs	r1, r3
 8000f3c:	4330      	orrs	r0, r6
 8000f3e:	0c03      	lsrs	r3, r0, #16
 8000f40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f44:	fa1f f887 	uxth.w	r8, r7
 8000f48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f50:	fb06 f108 	mul.w	r1, r6, r8
 8000f54:	4299      	cmp	r1, r3
 8000f56:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5a:	d909      	bls.n	8000f70 <__udivmoddi4+0x19c>
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f62:	f080 808d 	bcs.w	8001080 <__udivmoddi4+0x2ac>
 8000f66:	4299      	cmp	r1, r3
 8000f68:	f240 808a 	bls.w	8001080 <__udivmoddi4+0x2ac>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	443b      	add	r3, r7
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b281      	uxth	r1, r0
 8000f74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f80:	fb00 f308 	mul.w	r3, r0, r8
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d907      	bls.n	8000f98 <__udivmoddi4+0x1c4>
 8000f88:	1879      	adds	r1, r7, r1
 8000f8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8e:	d273      	bcs.n	8001078 <__udivmoddi4+0x2a4>
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d971      	bls.n	8001078 <__udivmoddi4+0x2a4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4439      	add	r1, r7
 8000f98:	1acb      	subs	r3, r1, r3
 8000f9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f9e:	e778      	b.n	8000e92 <__udivmoddi4+0xbe>
 8000fa0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fa4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fa8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fac:	431c      	orrs	r4, r3
 8000fae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	0c3b      	lsrs	r3, r7, #16
 8000fc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc6:	fa1f f884 	uxth.w	r8, r4
 8000fca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fd6:	458a      	cmp	sl, r1
 8000fd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x220>
 8000fe2:	1861      	adds	r1, r4, r1
 8000fe4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fe8:	d248      	bcs.n	800107c <__udivmoddi4+0x2a8>
 8000fea:	458a      	cmp	sl, r1
 8000fec:	d946      	bls.n	800107c <__udivmoddi4+0x2a8>
 8000fee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ff2:	4421      	add	r1, r4
 8000ff4:	eba1 010a 	sub.w	r1, r1, sl
 8000ff8:	b2bf      	uxth	r7, r7
 8000ffa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ffe:	fb0e 1110 	mls	r1, lr, r0, r1
 8001002:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001006:	fb00 f808 	mul.w	r8, r0, r8
 800100a:	45b8      	cmp	r8, r7
 800100c:	d907      	bls.n	800101e <__udivmoddi4+0x24a>
 800100e:	19e7      	adds	r7, r4, r7
 8001010:	f100 31ff 	add.w	r1, r0, #4294967295
 8001014:	d22e      	bcs.n	8001074 <__udivmoddi4+0x2a0>
 8001016:	45b8      	cmp	r8, r7
 8001018:	d92c      	bls.n	8001074 <__udivmoddi4+0x2a0>
 800101a:	3802      	subs	r0, #2
 800101c:	4427      	add	r7, r4
 800101e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001022:	eba7 0708 	sub.w	r7, r7, r8
 8001026:	fba0 8902 	umull	r8, r9, r0, r2
 800102a:	454f      	cmp	r7, r9
 800102c:	46c6      	mov	lr, r8
 800102e:	4649      	mov	r1, r9
 8001030:	d31a      	bcc.n	8001068 <__udivmoddi4+0x294>
 8001032:	d017      	beq.n	8001064 <__udivmoddi4+0x290>
 8001034:	b15d      	cbz	r5, 800104e <__udivmoddi4+0x27a>
 8001036:	ebb3 020e 	subs.w	r2, r3, lr
 800103a:	eb67 0701 	sbc.w	r7, r7, r1
 800103e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001042:	40f2      	lsrs	r2, r6
 8001044:	ea4c 0202 	orr.w	r2, ip, r2
 8001048:	40f7      	lsrs	r7, r6
 800104a:	e9c5 2700 	strd	r2, r7, [r5]
 800104e:	2600      	movs	r6, #0
 8001050:	4631      	mov	r1, r6
 8001052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e70b      	b.n	8000e74 <__udivmoddi4+0xa0>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e9      	b.n	8000e34 <__udivmoddi4+0x60>
 8001060:	4618      	mov	r0, r3
 8001062:	e6fd      	b.n	8000e60 <__udivmoddi4+0x8c>
 8001064:	4543      	cmp	r3, r8
 8001066:	d2e5      	bcs.n	8001034 <__udivmoddi4+0x260>
 8001068:	ebb8 0e02 	subs.w	lr, r8, r2
 800106c:	eb69 0104 	sbc.w	r1, r9, r4
 8001070:	3801      	subs	r0, #1
 8001072:	e7df      	b.n	8001034 <__udivmoddi4+0x260>
 8001074:	4608      	mov	r0, r1
 8001076:	e7d2      	b.n	800101e <__udivmoddi4+0x24a>
 8001078:	4660      	mov	r0, ip
 800107a:	e78d      	b.n	8000f98 <__udivmoddi4+0x1c4>
 800107c:	4681      	mov	r9, r0
 800107e:	e7b9      	b.n	8000ff4 <__udivmoddi4+0x220>
 8001080:	4666      	mov	r6, ip
 8001082:	e775      	b.n	8000f70 <__udivmoddi4+0x19c>
 8001084:	4630      	mov	r0, r6
 8001086:	e74a      	b.n	8000f1e <__udivmoddi4+0x14a>
 8001088:	f1ac 0c02 	sub.w	ip, ip, #2
 800108c:	4439      	add	r1, r7
 800108e:	e713      	b.n	8000eb8 <__udivmoddi4+0xe4>
 8001090:	3802      	subs	r0, #2
 8001092:	443c      	add	r4, r7
 8001094:	e724      	b.n	8000ee0 <__udivmoddi4+0x10c>
 8001096:	bf00      	nop

08001098 <__aeabi_idiv0>:
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	2201      	movs	r2, #1
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <__io_putchar+0x20>)
 80010ae:	f008 fdc8 	bl	8009c42 <HAL_UART_Transmit>

    return ch;
 80010b2:	687b      	ldr	r3, [r7, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200004dc 	.word	0x200004dc

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_DMA_Init+0x4c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <MX_DMA_Init+0x4c>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_DMA_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	203b      	movs	r0, #59	; 0x3b
 80010e8:	f004 fc2b 	bl	8005942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010ec:	203b      	movs	r0, #59	; 0x3b
 80010ee:	f004 fc44 	bl	800597a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2045      	movs	r0, #69	; 0x45
 80010f8:	f004 fc23 	bl	8005942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010fc:	2045      	movs	r0, #69	; 0x45
 80010fe:	f004 fc3c 	bl	800597a <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_GPIO_Init+0x110>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <MX_GPIO_Init+0x110>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MX_GPIO_Init+0x110>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_GPIO_Init+0x110>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <MX_GPIO_Init+0x110>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_GPIO_Init+0x110>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0x110>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MX_GPIO_Init+0x110>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_GPIO_Init+0x110>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_GPIO_Init+0x110>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a27      	ldr	r2, [pc, #156]	; (8001220 <MX_GPIO_Init+0x110>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_GPIO_Init+0x110>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	210e      	movs	r1, #14
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <MX_GPIO_Init+0x114>)
 800119c:	f005 f99a 	bl	80064d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4820      	ldr	r0, [pc, #128]	; (8001228 <MX_GPIO_Init+0x118>)
 80011a6:	f005 f995 	bl	80064d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_GPIO_Init+0x114>)
 80011c2:	f005 f803 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <MX_GPIO_Init+0x114>)
 80011dc:	f004 fff6 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011e0:	230e      	movs	r3, #14
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_GPIO_Init+0x114>)
 80011f8:	f004 ffe8 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_GPIO_Init+0x118>)
 8001214:	f004 ffda 	bl	80061cc <HAL_GPIO_Init>

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <MX_I2C1_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_I2C1_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_I2C1_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_I2C1_Init+0x50>)
 800126a:	f005 f94d 	bl	8006508 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 f978 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000274 	.word	0x20000274
 8001280:	40005400 	.word	0x40005400
 8001284:	00061a80 	.word	0x00061a80

08001288 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_I2C_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d6:	2304      	movs	r3, #4
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_I2C_MspInit+0x8c>)
 80012e2:	f004 ff73 	bl	80061cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f004 f99f 	bl	8005660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f8af 	bl	8001484 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f7ff fef3 	bl	8001110 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fc59 	bl	8001be0 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800132e:	f000 f921 	bl	8001574 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001332:	f000 fc2b 	bl	8001b8c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001336:	f000 fc7d 	bl	8001c34 <MX_USART6_UART_Init>
  MX_DMA_Init();
 800133a:	f7ff fec1 	bl	80010c0 <MX_DMA_Init>
  MX_I2C1_Init();
 800133e:	f7ff ff75 	bl	800122c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001342:	f000 fbad 	bl	8001aa0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001346:	f00a f90b 	bl	800b560 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_initialize();
 800134a:	f003 ff8d 	bl	8005268 <MPU6050_initialize>
  HAL_Delay(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f004 f9f8 	bl	8005744 <HAL_Delay>
  DMP_Init();
 8001354:	f003 ff9e 	bl	8005294 <DMP_Init>
  HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f004 f9f3 	bl	8005744 <HAL_Delay>

  float accelx, accely, accelz =0;
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_DMP();
 8001364:	f004 f814 	bl	8005390 <Read_DMP>
	      accelx = accel[0] / (float)16384;
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <main+0x138>)
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001376:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001454 <main+0x13c>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	edc7 7a02 	vstr	s15, [r7, #8]
	      accely = accel[1] / (float)16384;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <main+0x138>)
 8001384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001390:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001454 <main+0x13c>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	edc7 7a01 	vstr	s15, [r7, #4]
	      accelz = accel[2] / (float)16384;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <main+0x138>)
 800139e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013aa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001454 <main+0x13c>
 80013ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b2:	edc7 7a03 	vstr	s15, [r7, #12]

	      //temp23 = Read_Temperature();
	      printf("Pitch : ");
 80013b6:	4828      	ldr	r0, [pc, #160]	; (8001458 <main+0x140>)
 80013b8:	f00b ff3c 	bl	800d234 <iprintf>
	      printf("%f\r\n",Pitch);
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <main+0x144>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c9 	bl	8000558 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <main+0x148>)
 80013cc:	f00b ff32 	bl	800d234 <iprintf>
	      printf("Roll : ");
 80013d0:	4824      	ldr	r0, [pc, #144]	; (8001464 <main+0x14c>)
 80013d2:	f00b ff2f 	bl	800d234 <iprintf>
	      printf("%f\r\n", Roll);
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <main+0x150>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8bc 	bl	8000558 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <main+0x148>)
 80013e6:	f00b ff25 	bl	800d234 <iprintf>
	      printf("Yaw : ");
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <main+0x154>)
 80013ec:	f00b ff22 	bl	800d234 <iprintf>
	      printf("%f\r\n", Yaw);
 80013f0:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <main+0x158>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8af 	bl	8000558 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4818      	ldr	r0, [pc, #96]	; (8001460 <main+0x148>)
 8001400:	f00b ff18 	bl	800d234 <iprintf>
	      //printf("%d degree celcius \r\n", temp23);
	      printf("Accel X : ");
 8001404:	481b      	ldr	r0, [pc, #108]	; (8001474 <main+0x15c>)
 8001406:	f00b ff15 	bl	800d234 <iprintf>
	      printf("%.2f\r\n", accelx);
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff f8a4 	bl	8000558 <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <main+0x160>)
 8001416:	f00b ff0d 	bl	800d234 <iprintf>
	      printf("Accel Y : ");
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <main+0x164>)
 800141c:	f00b ff0a 	bl	800d234 <iprintf>
	      printf("%.2f\r\n", accely);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff f899 	bl	8000558 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4813      	ldr	r0, [pc, #76]	; (8001478 <main+0x160>)
 800142c:	f00b ff02 	bl	800d234 <iprintf>
	      printf("Accel Z : ");
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <main+0x168>)
 8001432:	f00b feff 	bl	800d234 <iprintf>
	      printf("%.2f\r\n", accelz);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff f88e 	bl	8000558 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <main+0x160>)
 8001442:	f00b fef7 	bl	800d234 <iprintf>
	      HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	; 0x64
 8001448:	f004 f97c 	bl	8005744 <HAL_Delay>
	  Read_DMP();
 800144c:	e78a      	b.n	8001364 <main+0x4c>
 800144e:	bf00      	nop
 8001450:	20000524 	.word	0x20000524
 8001454:	46800000 	.word	0x46800000
 8001458:	08010dd0 	.word	0x08010dd0
 800145c:	200005d0 	.word	0x200005d0
 8001460:	08010ddc 	.word	0x08010ddc
 8001464:	08010de4 	.word	0x08010de4
 8001468:	2000052c 	.word	0x2000052c
 800146c:	08010dec 	.word	0x08010dec
 8001470:	20000520 	.word	0x20000520
 8001474:	08010df4 	.word	0x08010df4
 8001478:	08010e00 	.word	0x08010e00
 800147c:	08010e08 	.word	0x08010e08
 8001480:	08010e14 	.word	0x08010e14

08001484 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00b f84c 	bl	800c530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <_Z18SystemClock_Configv+0xdc>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <_Z18SystemClock_Configv+0xdc>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <_Z18SystemClock_Configv+0xdc>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <_Z18SystemClock_Configv+0xe0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <_Z18SystemClock_Configv+0xe0>)
 80014ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <_Z18SystemClock_Configv+0xe0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001500:	2305      	movs	r3, #5
 8001502:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4618      	mov	r0, r3
 800150a:	f005 ffbd 	bl	8007488 <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800151e:	f000 f823 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2302      	movs	r3, #2
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2103      	movs	r1, #3
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fa1a 	bl	8007978 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001554:	f000 f808 	bl	8001568 <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3750      	adds	r7, #80	; 0x50
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <MX_SDIO_SD_Init+0x3c>)
 800157c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <MX_SDIO_SD_Init+0x38>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	20000388 	.word	0x20000388
 80015b0:	40012c00 	.word	0x40012c00

080015b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a77      	ldr	r2, [pc, #476]	; (80017b0 <HAL_SD_MspInit+0x1fc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	f040 80e8 	bne.w	80017a8 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_SD_MspInit+0x200>)
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_SD_MspInit+0x200>)
 80015e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e6:	6453      	str	r3, [r2, #68]	; 0x44
 80015e8:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_SD_MspInit+0x200>)
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_SD_MspInit+0x200>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <HAL_SD_MspInit+0x200>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6313      	str	r3, [r2, #48]	; 0x30
 8001604:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <HAL_SD_MspInit+0x200>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	4b67      	ldr	r3, [pc, #412]	; (80017b4 <HAL_SD_MspInit+0x200>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a66      	ldr	r2, [pc, #408]	; (80017b4 <HAL_SD_MspInit+0x200>)
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <HAL_SD_MspInit+0x200>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <HAL_SD_MspInit+0x200>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a5f      	ldr	r2, [pc, #380]	; (80017b4 <HAL_SD_MspInit+0x200>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HAL_SD_MspInit+0x200>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001658:	230c      	movs	r3, #12
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4855      	ldr	r0, [pc, #340]	; (80017b8 <HAL_SD_MspInit+0x204>)
 8001664:	f004 fdb2 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800167a:	230c      	movs	r3, #12
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	484d      	ldr	r0, [pc, #308]	; (80017bc <HAL_SD_MspInit+0x208>)
 8001686:	f004 fda1 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800168a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800169c:	230c      	movs	r3, #12
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4846      	ldr	r0, [pc, #280]	; (80017c0 <HAL_SD_MspInit+0x20c>)
 80016a8:	f004 fd90 	bl	80061cc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80016ac:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016ae:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <HAL_SD_MspInit+0x214>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016dc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016e0:	2220      	movs	r2, #32
 80016e2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016ec:	2204      	movs	r2, #4
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_SD_MspInit+0x210>)
 80016f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016fe:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <HAL_SD_MspInit+0x210>)
 8001700:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001706:	482f      	ldr	r0, [pc, #188]	; (80017c4 <HAL_SD_MspInit+0x210>)
 8001708:	f004 f952 	bl	80059b0 <HAL_DMA_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8001712:	f7ff ff29 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <HAL_SD_MspInit+0x210>)
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_SD_MspInit+0x210>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_SD_MspInit+0x21c>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_SD_MspInit+0x218>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_SD_MspInit+0x218>)
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_SD_MspInit+0x218>)
 800174e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001752:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001756:	2220      	movs	r2, #32
 8001758:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_SD_MspInit+0x218>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001762:	2204      	movs	r2, #4
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001768:	2203      	movs	r2, #3
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_SD_MspInit+0x218>)
 800176e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001776:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <HAL_SD_MspInit+0x218>)
 800177e:	f004 f917 	bl	80059b0 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8001788:	f7ff feee 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_SD_MspInit+0x218>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2031      	movs	r0, #49	; 0x31
 800179e:	f004 f8d0 	bl	8005942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80017a2:	2031      	movs	r0, #49	; 0x31
 80017a4:	f004 f8e9 	bl	800597a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3730      	adds	r7, #48	; 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40012c00 	.word	0x40012c00
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	200002c8 	.word	0x200002c8
 80017c8:	40026458 	.word	0x40026458
 80017cc:	20000328 	.word	0x20000328
 80017d0:	400264a0 	.word	0x400264a0

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_MspInit+0x4c>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x4c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001812:	2007      	movs	r0, #7
 8001814:	f004 f88a 	bl	800592c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <NMI_Handler+0x4>

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f003 ff48 	bl	8005704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM3_IRQHandler+0x10>)
 800187e:	f007 fdf5 	bl	800946c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000040c 	.word	0x2000040c

0800188c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART1_IRQHandler+0x10>)
 8001892:	f008 fa69 	bl	8009d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000454 	.word	0x20000454

080018a0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <SDIO_IRQHandler+0x10>)
 80018a6:	f006 fcd9 	bl	800825c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000388 	.word	0x20000388

080018b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA2_Stream3_IRQHandler+0x10>)
 80018ba:	f004 fa11 	bl	8005ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002c8 	.word	0x200002c8

080018c8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream6_IRQHandler+0x10>)
 80018ce:	f004 fa07 	bl	8005ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000328 	.word	0x20000328

080018dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART6_IRQHandler+0x10>)
 80018e2:	f008 fa41 	bl	8009d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000498 	.word	0x20000498

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800190a:	f00a fdd9 	bl	800c4c0 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
	return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
	}

return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb87 	bl	800109c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
	}
	return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f00a fd3e 	bl	800c4c0 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20020000 	.word	0x20020000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000238 	.word	0x20000238
 8001a78:	20000a50 	.word	0x20000a50

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <MX_TIM3_Init+0x98>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ae4:	f007 fc73 	bl	80093ce <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001aee:	f7ff fd3b 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001b00:	f007 fdbc 	bl	800967c <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b0a:	f7ff fd2d 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001b1c:	f007 ffc2 	bl	8009aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f7ff fd1f 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000040c 	.word	0x2000040c
 8001b38:	40000400 	.word	0x40000400

08001b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_Base_MspInit+0x48>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d115      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	201d      	movs	r0, #29
 8001b70:	f003 fee7 	bl	8005942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b74:	201d      	movs	r0, #29
 8001b76:	f003 ff00 	bl	800597a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40023800 	.word	0x40023800

08001b8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_USART1_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	f007 fff0 	bl	8009ba8 <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bce:	f7ff fccb 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000454 	.word	0x20000454
 8001bdc:	40011000 	.word	0x40011000

08001be0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_USART2_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c18:	f007 ffc6 	bl	8009ba8 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f7ff fca1 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200004dc 	.word	0x200004dc
 8001c30:	40004400 	.word	0x40004400

08001c34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_USART6_UART_Init+0x50>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART6_UART_Init+0x4c>)
 8001c6c:	f007 ff9c 	bl	8009ba8 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c76:	f7ff fc77 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000498 	.word	0x20000498
 8001c84:	40011400 	.word	0x40011400

08001c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_UART_MspInit+0x16c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d135      	bne.n	8001d16 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a51      	ldr	r2, [pc, #324]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a4a      	ldr	r2, [pc, #296]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	483f      	ldr	r0, [pc, #252]	; (8001dfc <HAL_UART_MspInit+0x174>)
 8001d00:	f004 fa64 	bl	80061cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2025      	movs	r0, #37	; 0x25
 8001d0a:	f003 fe1a 	bl	8005942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0e:	2025      	movs	r0, #37	; 0x25
 8001d10:	f003 fe33 	bl	800597a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d14:	e06a      	b.n	8001dec <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a39      	ldr	r2, [pc, #228]	; (8001e00 <HAL_UART_MspInit+0x178>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d12c      	bne.n	8001d7a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	4822      	ldr	r0, [pc, #136]	; (8001dfc <HAL_UART_MspInit+0x174>)
 8001d74:	f004 fa2a 	bl	80061cc <HAL_GPIO_Init>
}
 8001d78:	e038      	b.n	8001dec <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_UART_MspInit+0x17c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d133      	bne.n	8001dec <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d8e:	f043 0320 	orr.w	r3, r3, #32
 8001d92:	6453      	str	r3, [r2, #68]	; 0x44
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6313      	str	r3, [r2, #48]	; 0x30
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_UART_MspInit+0x170>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dbc:	23c0      	movs	r3, #192	; 0xc0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_UART_MspInit+0x180>)
 8001dd8:	f004 f9f8 	bl	80061cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2047      	movs	r0, #71	; 0x47
 8001de2:	f003 fdae 	bl	8005942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001de6:	2047      	movs	r0, #71	; 0x47
 8001de8:	f003 fdc7 	bl	800597a <HAL_NVIC_EnableIRQ>
}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40011400 	.word	0x40011400
 8001e08:	40020800 	.word	0x40020800

08001e0c <i2c_write>:
#include "MPU6050/I2C.h"
#include "i2c.h"

HAL_StatusTypeDef i2c_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t const *data) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	71bb      	strb	r3, [r7, #6]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	b299      	uxth	r1, r3
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	200a      	movs	r0, #10
 8001e32:	9002      	str	r0, [sp, #8]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <i2c_write+0x40>)
 8001e3e:	f004 fca7 	bl	8006790 <HAL_I2C_Mem_Write>
 8001e42:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000274 	.word	0x20000274

08001e50 <i2c_read>:

HAL_StatusTypeDef i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	71bb      	strb	r3, [r7, #6]
 8001e60:	4613      	mov	r3, r2
 8001e62:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	200a      	movs	r0, #10
 8001e76:	9002      	str	r0, [sp, #8]
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <i2c_read+0x40>)
 8001e82:	f004 fd7f 	bl	8006984 <HAL_I2C_Mem_Read>
 8001e86:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);

}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000274 	.word	0x20000274

08001e94 <IICwriteBit>:

HAL_StatusTypeDef IICwriteBit(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t bitNum, uint8_t data) {
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	71fb      	strb	r3, [r7, #7]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71bb      	strb	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	717b      	strb	r3, [r7, #5]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;
  i2c_read(slave_addr, reg_addr, 1, &tmp);
 8001eb2:	f107 030f 	add.w	r3, r7, #15
 8001eb6:	79b9      	ldrb	r1, [r7, #6]
 8001eb8:	79f8      	ldrb	r0, [r7, #7]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f7ff ffc8 	bl	8001e50 <i2c_read>
  tmp = (data != 0) ? (tmp | (1 << bitNum)) : (tmp & ~(1 << bitNum));
 8001ec0:	793b      	ldrb	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <IICwriteBit+0x48>
 8001ec6:	797b      	ldrb	r3, [r7, #5]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e00b      	b.n	8001ef4 <IICwriteBit+0x60>
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	73fb      	strb	r3, [r7, #15]
  return i2c_write(slave_addr, reg_addr, 1, &tmp);
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	79b9      	ldrb	r1, [r7, #6]
 8001efc:	79f8      	ldrb	r0, [r7, #7]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f7ff ff84 	bl	8001e0c <i2c_write>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}

08001f0e <IICwriteBits>:
;

HAL_StatusTypeDef IICwriteBits(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t bitStart, uint8_t length, uint8_t data) {
 8001f0e:	b590      	push	{r4, r7, lr}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4604      	mov	r4, r0
 8001f16:	4608      	mov	r0, r1
 8001f18:	4611      	mov	r1, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4623      	mov	r3, r4
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4603      	mov	r3, r0
 8001f22:	71bb      	strb	r3, [r7, #6]
 8001f24:	460b      	mov	r3, r1
 8001f26:	717b      	strb	r3, [r7, #5]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	713b      	strb	r3, [r7, #4]

  uint8_t tmp, dataShift;
  HAL_StatusTypeDef status = i2c_read(slave_addr, reg_addr, 1, &tmp);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	79b9      	ldrb	r1, [r7, #6]
 8001f32:	79f8      	ldrb	r0, [r7, #7]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f7ff ff8b 	bl	8001e50 <i2c_read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK) {
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d127      	bne.n	8001f94 <IICwriteBits+0x86>
    uint8_t mask = (((1 << length) - 1) << (bitStart - length + 1));
 8001f44:	793b      	ldrb	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	7979      	ldrb	r1, [r7, #5]
 8001f50:	793b      	ldrb	r3, [r7, #4]
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	73bb      	strb	r3, [r7, #14]
    dataShift = data << (bitStart - length + 1);
 8001f5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f60:	7979      	ldrb	r1, [r7, #5]
 8001f62:	793b      	ldrb	r3, [r7, #4]
 8001f64:	1acb      	subs	r3, r1, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	737b      	strb	r3, [r7, #13]
    tmp &= mask;
 8001f6e:	7b3a      	ldrb	r2, [r7, #12]
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	4013      	ands	r3, r2
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	733b      	strb	r3, [r7, #12]
    tmp |= dataShift;
 8001f78:	7b3a      	ldrb	r2, [r7, #12]
 8001f7a:	7b7b      	ldrb	r3, [r7, #13]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	733b      	strb	r3, [r7, #12]
    return i2c_write(slave_addr, reg_addr, 1, &tmp);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	79b9      	ldrb	r1, [r7, #6]
 8001f88:	79f8      	ldrb	r0, [r7, #7]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f7ff ff3e 	bl	8001e0c <i2c_write>
 8001f90:	4603      	mov	r3, r0
 8001f92:	e000      	b.n	8001f96 <IICwriteBits+0x88>
  } else {
    return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}

08001f9e <reg_int_cb>:

#define fabs        fabsf
#define min(a,b) ((a<b)?a:b)

static inline int reg_int_cb(struct int_param_s *int_param)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(int_param);
    return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <set_int_enable+0xb0>)
 8001fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01c      	beq.n	8002002 <set_int_enable+0x4e>
        if (enable)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e001      	b.n	8001fd8 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <set_int_enable+0xb0>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	7818      	ldrb	r0, [r3, #0]
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <set_int_enable+0xb0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	7c59      	ldrb	r1, [r3, #17]
 8001fe4:	f107 030f 	add.w	r3, r7, #15
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f7ff ff0f 	bl	8001e0c <i2c_write>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <set_int_enable+0x46>
            return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	e030      	b.n	800205c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <set_int_enable+0xb0>)
 8001ffe:	745a      	strb	r2, [r3, #17]
 8002000:	e02b      	b.n	800205a <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <set_int_enable+0xb0>)
 8002004:	7a9b      	ldrb	r3, [r3, #10]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <set_int_enable+0x5c>
            return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e025      	b.n	800205c <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <set_int_enable+0x6e>
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <set_int_enable+0xb0>)
 8002018:	7c5b      	ldrb	r3, [r3, #17]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <set_int_enable+0x6e>
            return 0;
 800201e:	2300      	movs	r3, #0
 8002020:	e01c      	b.n	800205c <set_int_enable+0xa8>
        if (enable)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <set_int_enable+0xb0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	7818      	ldrb	r0, [r3, #0]
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <set_int_enable+0xb0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	7c59      	ldrb	r1, [r3, #17]
 800203e:	f107 030f 	add.w	r3, r7, #15
 8002042:	2201      	movs	r2, #1
 8002044:	f7ff fee2 	bl	8001e0c <i2c_write>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <set_int_enable+0xa0>
            return -1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e003      	b.n	800205c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <set_int_enable+0xb0>)
 8002058:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000004 	.word	0x20000004

08002068 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002074:	4b87      	ldr	r3, [pc, #540]	; (8002294 <mpu_init+0x22c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	7818      	ldrb	r0, [r3, #0]
 800207a:	4b86      	ldr	r3, [pc, #536]	; (8002294 <mpu_init+0x22c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	7d59      	ldrb	r1, [r3, #21]
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	2201      	movs	r2, #1
 8002086:	f7ff fec1 	bl	8001e0c <i2c_write>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <mpu_init+0x2e>
        return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e0f9      	b.n	800228a <mpu_init+0x222>
    delay_ms(100);
 8002096:	2064      	movs	r0, #100	; 0x64
 8002098:	f003 fb54 	bl	8005744 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 800209c:	2300      	movs	r3, #0
 800209e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80020a0:	4b7c      	ldr	r3, [pc, #496]	; (8002294 <mpu_init+0x22c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	7818      	ldrb	r0, [r3, #0]
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <mpu_init+0x22c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	7d59      	ldrb	r1, [r3, #21]
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	2201      	movs	r2, #1
 80020b2:	f7ff feab 	bl	8001e0c <i2c_write>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <mpu_init+0x5a>
        return -1;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e0e3      	b.n	800228a <mpu_init+0x222>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80020c2:	4b74      	ldr	r3, [pc, #464]	; (8002294 <mpu_init+0x22c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	7818      	ldrb	r0, [r3, #0]
 80020c8:	4b72      	ldr	r3, [pc, #456]	; (8002294 <mpu_init+0x22c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	7e59      	ldrb	r1, [r3, #25]
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	2206      	movs	r2, #6
 80020d4:	f7ff febc 	bl	8001e50 <i2c_read>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <mpu_init+0x7c>
        return -1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e0d2      	b.n	800228a <mpu_init+0x222>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	b25a      	sxtb	r2, r3
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8002100:	7a7b      	ldrb	r3, [r7, #9]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800210a:	4313      	orrs	r3, r2
 800210c:	b25b      	sxtb	r3, r3
 800210e:	73fb      	strb	r3, [r7, #15]

    if (rev) {
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <mpu_init+0xd8>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d103      	bne.n	8002124 <mpu_init+0xbc>
            st.chip_cfg.accel_half = 1;
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <mpu_init+0x22c>)
 800211e:	2201      	movs	r2, #1
 8002120:	74da      	strb	r2, [r3, #19]
 8002122:	e03a      	b.n	800219a <mpu_init+0x132>
        else if (rev == 2)
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d103      	bne.n	8002132 <mpu_init+0xca>
            st.chip_cfg.accel_half = 0;
 800212a:	4b5a      	ldr	r3, [pc, #360]	; (8002294 <mpu_init+0x22c>)
 800212c:	2200      	movs	r2, #0
 800212e:	74da      	strb	r2, [r3, #19]
 8002130:	e033      	b.n	800219a <mpu_init+0x132>
        else {
//            log_e("Unsupported software product rev %d.\n", rev); former phase
        	log_e("Unsupported software product rev.\n");
 8002132:	4959      	ldr	r1, [pc, #356]	; (8002298 <mpu_init+0x230>)
 8002134:	4859      	ldr	r0, [pc, #356]	; (800229c <mpu_init+0x234>)
 8002136:	f00b f87d 	bl	800d234 <iprintf>
            return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e0a4      	b.n	800228a <mpu_init+0x222>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 8002140:	4b54      	ldr	r3, [pc, #336]	; (8002294 <mpu_init+0x22c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	7818      	ldrb	r0, [r3, #0]
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <mpu_init+0x22c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78d9      	ldrb	r1, [r3, #3]
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	2201      	movs	r2, #1
 8002152:	f7ff fe7d 	bl	8001e50 <i2c_read>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <mpu_init+0xfa>
            return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e093      	b.n	800228a <mpu_init+0x222>
        rev = data[0] & 0x0F;
 8002162:	7a3b      	ldrb	r3, [r7, #8]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	73fb      	strb	r3, [r7, #15]
        if (!rev) {
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d106      	bne.n	800217e <mpu_init+0x116>
            log_e("Product ID read as 0 indicates device is either "
 8002170:	494b      	ldr	r1, [pc, #300]	; (80022a0 <mpu_init+0x238>)
 8002172:	484a      	ldr	r0, [pc, #296]	; (800229c <mpu_init+0x234>)
 8002174:	f00b f85e 	bl	800d234 <iprintf>
                "incompatible or an MPU3050.\n");
            return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	e085      	b.n	800228a <mpu_init+0x222>
        } else if (rev == 4) {
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d107      	bne.n	8002194 <mpu_init+0x12c>
            log_i("Half sensitivity part found.\n");
 8002184:	4947      	ldr	r1, [pc, #284]	; (80022a4 <mpu_init+0x23c>)
 8002186:	4845      	ldr	r0, [pc, #276]	; (800229c <mpu_init+0x234>)
 8002188:	f00b f854 	bl	800d234 <iprintf>
            st.chip_cfg.accel_half = 1;
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <mpu_init+0x22c>)
 800218e:	2201      	movs	r2, #1
 8002190:	74da      	strb	r2, [r3, #19]
 8002192:	e002      	b.n	800219a <mpu_init+0x132>
        } else
            st.chip_cfg.accel_half = 0;
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <mpu_init+0x22c>)
 8002196:	2200      	movs	r2, #0
 8002198:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <mpu_init+0x22c>)
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <mpu_init+0x22c>)
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <mpu_init+0x22c>)
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80021ac:	4b39      	ldr	r3, [pc, #228]	; (8002294 <mpu_init+0x22c>)
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <mpu_init+0x22c>)
 80021b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b8:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <mpu_init+0x22c>)
 80021bc:	22ff      	movs	r2, #255	; 0xff
 80021be:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <mpu_init+0x22c>)
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <mpu_init+0x22c>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <mpu_init+0x22c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <mpu_init+0x22c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <mpu_init+0x22c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <mpu_init+0x22c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80021e8:	220c      	movs	r2, #12
 80021ea:	2100      	movs	r1, #0
 80021ec:	482e      	ldr	r0, [pc, #184]	; (80022a8 <mpu_init+0x240>)
 80021ee:	f00a f99f 	bl	800c530 <memset>
    st.chip_cfg.dmp_on = 0;
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <mpu_init+0x22c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <mpu_init+0x22c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <mpu_init+0x22c>)
 8002204:	2200      	movs	r2, #0
 8002206:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8002208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800220c:	f000 fa02 	bl	8002614 <mpu_set_gyro_fsr>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <mpu_init+0x1b4>
        return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e036      	b.n	800228a <mpu_init+0x222>
    if (mpu_set_accel_fsr(2))
 800221c:	2002      	movs	r0, #2
 800221e:	f000 fa87 	bl	8002730 <mpu_set_accel_fsr>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <mpu_init+0x1c6>
        return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	e02d      	b.n	800228a <mpu_init+0x222>
    if (mpu_set_lpf(42))
 800222e:	202a      	movs	r0, #42	; 0x2a
 8002230:	f000 fb24 	bl	800287c <mpu_set_lpf>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <mpu_init+0x1d8>
        return -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e024      	b.n	800228a <mpu_init+0x222>
    if (mpu_set_sample_rate(50))
 8002240:	2032      	movs	r0, #50	; 0x32
 8002242:	f000 fb83 	bl	800294c <mpu_set_sample_rate>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <mpu_init+0x1ea>
        return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	e01b      	b.n	800228a <mpu_init+0x222>
    if (mpu_configure_fifo(0))
 8002252:	2000      	movs	r0, #0
 8002254:	f000 fc68 	bl	8002b28 <mpu_configure_fifo>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <mpu_init+0x1fc>
        return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	e012      	b.n	800228a <mpu_init+0x222>

    if (int_param)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <mpu_init+0x208>
        reg_int_cb(int_param);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fe97 	bl	8001f9e <reg_int_cb>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8002270:	2000      	movs	r0, #0
 8002272:	f000 fdaf 	bl	8002dd4 <mpu_set_bypass>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <mpu_init+0x21a>
        return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	e003      	b.n	800228a <mpu_init+0x222>
#endif

    mpu_set_sensors(0);
 8002282:	2000      	movs	r0, #0
 8002284:	f000 fca2 	bl	8002bcc <mpu_set_sensors>
    return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000004 	.word	0x20000004
 8002298:	08010e20 	.word	0x08010e20
 800229c:	08010e44 	.word	0x08010e44
 80022a0:	08010e4c 	.word	0x08010e4c
 80022a4:	08010e9c 	.word	0x08010e9c
 80022a8:	2000001a 	.word	0x2000001a

080022ac <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b28      	cmp	r3, #40	; 0x28
 80022ba:	d902      	bls.n	80022c2 <mpu_lp_accel_mode+0x16>
        return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	e06a      	b.n	8002398 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11c      	bne.n	8002302 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 fe49 	bl	8002f60 <mpu_set_int_latched>
        tmp[0] = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80022d2:	2307      	movs	r3, #7
 80022d4:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	7818      	ldrb	r0, [r3, #0]
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	7d59      	ldrb	r1, [r3, #21]
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	2202      	movs	r2, #2
 80022e8:	f7ff fd90 	bl	8001e0c <i2c_write>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <mpu_lp_accel_mode+0x4c>
            return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e04f      	b.n	8002398 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	751a      	strb	r2, [r3, #20]
        return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e04a      	b.n	8002398 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 fe2c 	bl	8002f60 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8002308:	2320      	movs	r3, #32
 800230a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8002312:	2300      	movs	r3, #0
 8002314:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002316:	2005      	movs	r0, #5
 8002318:	f000 fab0 	bl	800287c <mpu_set_lpf>
 800231c:	e016      	b.n	800234c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d805      	bhi.n	8002330 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8002324:	2301      	movs	r3, #1
 8002326:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8002328:	2005      	movs	r0, #5
 800232a:	f000 faa7 	bl	800287c <mpu_set_lpf>
 800232e:	e00d      	b.n	800234c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b14      	cmp	r3, #20
 8002334:	d805      	bhi.n	8002342 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8002336:	2302      	movs	r3, #2
 8002338:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f000 fa9e 	bl	800287c <mpu_set_lpf>
 8002340:	e004      	b.n	800234c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8002342:	2303      	movs	r3, #3
 8002344:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8002346:	2014      	movs	r0, #20
 8002348:	f000 fa98 	bl	800287c <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800234c:	7b7b      	ldrb	r3, [r7, #13]
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	b25b      	sxtb	r3, r3
 8002352:	f043 0307 	orr.w	r3, r3, #7
 8002356:	b25b      	sxtb	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	7818      	ldrb	r0, [r3, #0]
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	7d59      	ldrb	r1, [r3, #21]
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2202      	movs	r2, #2
 800236e:	f7ff fd4d 	bl	8001e0c <i2c_write>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <mpu_lp_accel_mode+0xd2>
        return -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
 800237c:	e00c      	b.n	8002398 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 8002380:	2208      	movs	r2, #8
 8002382:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 8002386:	2200      	movs	r2, #0
 8002388:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <mpu_lp_accel_mode+0xf4>)
 800238c:	2201      	movs	r2, #1
 800238e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8002390:	2000      	movs	r0, #0
 8002392:	f000 fbc9 	bl	8002b28 <mpu_configure_fifo>

    return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000004 	.word	0x20000004

080023a4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80023aa:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023ac:	7a9b      	ldrb	r3, [r3, #10]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <mpu_reset_fifo+0x14>
        return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e0f1      	b.n	800259c <mpu_reset_fifo+0x1f8>

    data = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	7818      	ldrb	r0, [r3, #0]
 80023c2:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	7c59      	ldrb	r1, [r3, #17]
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	2201      	movs	r2, #1
 80023cc:	f7ff fd1e 	bl	8001e0c <i2c_write>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <mpu_reset_fifo+0x38>
        return -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e0df      	b.n	800259c <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80023dc:	4b71      	ldr	r3, [pc, #452]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	7818      	ldrb	r0, [r3, #0]
 80023e2:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	7959      	ldrb	r1, [r3, #5]
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	2201      	movs	r2, #1
 80023ec:	f7ff fd0e 	bl	8001e0c <i2c_write>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <mpu_reset_fifo+0x58>
        return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e0cf      	b.n	800259c <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80023fc:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <mpu_reset_fifo+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	7818      	ldrb	r0, [r3, #0]
 8002402:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	7919      	ldrb	r1, [r3, #4]
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	2201      	movs	r2, #1
 800240c:	f7ff fcfe 	bl	8001e0c <i2c_write>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <mpu_reset_fifo+0x78>
        return -1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e0bf      	b.n	800259c <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <mpu_reset_fifo+0x200>)
 800241e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d05c      	beq.n	80024e0 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002426:	230c      	movs	r3, #12
 8002428:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800242a:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <mpu_reset_fifo+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	7818      	ldrb	r0, [r3, #0]
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	7919      	ldrb	r1, [r3, #4]
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	2201      	movs	r2, #1
 800243a:	f7ff fce7 	bl	8001e0c <i2c_write>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <mpu_reset_fifo+0xa6>
            return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e0a8      	b.n	800259c <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800244a:	2032      	movs	r0, #50	; 0x32
 800244c:	f003 f97a 	bl	8005744 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002450:	23c0      	movs	r3, #192	; 0xc0
 8002452:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002456:	7a9b      	ldrb	r3, [r3, #10]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	b2db      	uxtb	r3, r3
 8002468:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800246a:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <mpu_reset_fifo+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	7818      	ldrb	r0, [r3, #0]
 8002470:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	7919      	ldrb	r1, [r3, #4]
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	2201      	movs	r2, #1
 800247a:	f7ff fcc7 	bl	8001e0c <i2c_write>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <mpu_reset_fifo+0xe6>
            return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e088      	b.n	800259c <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <mpu_reset_fifo+0x200>)
 800248c:	7c5b      	ldrb	r3, [r3, #17]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8002492:	2302      	movs	r3, #2
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e001      	b.n	800249c <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <mpu_reset_fifo+0x200>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	7818      	ldrb	r0, [r3, #0]
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <mpu_reset_fifo+0x200>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	7c59      	ldrb	r1, [r3, #17]
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	2201      	movs	r2, #1
 80024ac:	f7ff fcae 	bl	8001e0c <i2c_write>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <mpu_reset_fifo+0x118>
            return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e06f      	b.n	800259c <mpu_reset_fifo+0x1f8>
        data = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <mpu_reset_fifo+0x200>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	7818      	ldrb	r0, [r3, #0]
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <mpu_reset_fifo+0x200>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	7959      	ldrb	r1, [r3, #5]
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	2201      	movs	r2, #1
 80024d0:	f7ff fc9c 	bl	8001e0c <i2c_write>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d05f      	beq.n	800259a <mpu_reset_fifo+0x1f6>
            return -1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e05d      	b.n	800259c <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 80024e0:	2304      	movs	r3, #4
 80024e2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <mpu_reset_fifo+0x200>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	7818      	ldrb	r0, [r3, #0]
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <mpu_reset_fifo+0x200>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	7919      	ldrb	r1, [r3, #4]
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	2201      	movs	r2, #1
 80024f4:	f7ff fc8a 	bl	8001e0c <i2c_write>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <mpu_reset_fifo+0x160>
            return -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e04b      	b.n	800259c <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002506:	7c9b      	ldrb	r3, [r3, #18]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <mpu_reset_fifo+0x174>
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <mpu_reset_fifo+0x200>)
 800250e:	7a9b      	ldrb	r3, [r3, #10]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	e001      	b.n	8002522 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800251e:	2360      	movs	r3, #96	; 0x60
 8002520:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	7818      	ldrb	r0, [r3, #0]
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <mpu_reset_fifo+0x200>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	7919      	ldrb	r1, [r3, #4]
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	2201      	movs	r2, #1
 8002532:	f7ff fc6b 	bl	8001e0c <i2c_write>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <mpu_reset_fifo+0x19e>
            return -1;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	e02c      	b.n	800259c <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f003 f8fe 	bl	8005744 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <mpu_reset_fifo+0x200>)
 800254a:	7c5b      	ldrb	r3, [r3, #17]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8002550:	2301      	movs	r3, #1
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	e001      	b.n	800255a <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <mpu_reset_fifo+0x200>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	7818      	ldrb	r0, [r3, #0]
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	7c59      	ldrb	r1, [r3, #17]
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	2201      	movs	r2, #1
 800256a:	f7ff fc4f 	bl	8001e0c <i2c_write>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <mpu_reset_fifo+0x1d6>
            return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	e010      	b.n	800259c <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <mpu_reset_fifo+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	7818      	ldrb	r0, [r3, #0]
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <mpu_reset_fifo+0x200>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	7959      	ldrb	r1, [r3, #5]
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <mpu_reset_fifo+0x204>)
 8002588:	2201      	movs	r2, #1
 800258a:	f7ff fc3f 	bl	8001e0c <i2c_write>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <mpu_reset_fifo+0x1f6>
            return -1;
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	e000      	b.n	800259c <mpu_reset_fifo+0x1f8>
    }
    return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000004 	.word	0x20000004
 80025a8:	20000014 	.word	0x20000014

080025ac <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <mpu_get_gyro_fsr+0x64>)
 80025b6:	7a1b      	ldrb	r3, [r3, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d81e      	bhi.n	80025fa <mpu_get_gyro_fsr+0x4e>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <mpu_get_gyro_fsr+0x18>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025dd 	.word	0x080025dd
 80025cc:	080025e7 	.word	0x080025e7
 80025d0:	080025f1 	.word	0x080025f1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	22fa      	movs	r2, #250	; 0xfa
 80025d8:	801a      	strh	r2, [r3, #0]
        break;
 80025da:	e012      	b.n	8002602 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025e2:	801a      	strh	r2, [r3, #0]
        break;
 80025e4:	e00d      	b.n	8002602 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ec:	801a      	strh	r2, [r3, #0]
        break;
 80025ee:	e008      	b.n	8002602 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025f6:	801a      	strh	r2, [r3, #0]
        break;
 80025f8:	e003      	b.n	8002602 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
        break;
 8002600:	bf00      	nop
    }
    return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000004 	.word	0x20000004

08002614 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <mpu_set_gyro_fsr+0xa4>)
 8002620:	7a9b      	ldrb	r3, [r3, #10]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <mpu_set_gyro_fsr+0x18>
        return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e041      	b.n	80026b0 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002632:	d017      	beq.n	8002664 <mpu_set_gyro_fsr+0x50>
 8002634:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002638:	dc17      	bgt.n	800266a <mpu_set_gyro_fsr+0x56>
 800263a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263e:	d00e      	beq.n	800265e <mpu_set_gyro_fsr+0x4a>
 8002640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002644:	dc11      	bgt.n	800266a <mpu_set_gyro_fsr+0x56>
 8002646:	2bfa      	cmp	r3, #250	; 0xfa
 8002648:	d003      	beq.n	8002652 <mpu_set_gyro_fsr+0x3e>
 800264a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800264e:	d003      	beq.n	8002658 <mpu_set_gyro_fsr+0x44>
 8002650:	e00b      	b.n	800266a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
        break;
 8002656:	e00b      	b.n	8002670 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002658:	2308      	movs	r3, #8
 800265a:	73fb      	strb	r3, [r7, #15]
        break;
 800265c:	e008      	b.n	8002670 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800265e:	2310      	movs	r3, #16
 8002660:	73fb      	strb	r3, [r7, #15]
        break;
 8002662:	e005      	b.n	8002670 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002664:	2318      	movs	r3, #24
 8002666:	73fb      	strb	r3, [r7, #15]
        break;
 8002668:	e002      	b.n	8002670 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e01f      	b.n	80026b0 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <mpu_set_gyro_fsr+0xa4>)
 8002672:	7a1a      	ldrb	r2, [r3, #8]
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	429a      	cmp	r2, r3
 800267c:	d101      	bne.n	8002682 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800267e:	2300      	movs	r3, #0
 8002680:	e016      	b.n	80026b0 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <mpu_set_gyro_fsr+0xa4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	7818      	ldrb	r0, [r3, #0]
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <mpu_set_gyro_fsr+0xa4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	7999      	ldrb	r1, [r3, #6]
 800268e:	f107 030f 	add.w	r3, r7, #15
 8002692:	2201      	movs	r2, #1
 8002694:	f7ff fbba 	bl	8001e0c <i2c_write>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <mpu_set_gyro_fsr+0x90>
        return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e005      	b.n	80026b0 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <mpu_set_gyro_fsr+0xa4>)
 80026ac:	721a      	strb	r2, [r3, #8]
    return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000004 	.word	0x20000004

080026bc <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <mpu_get_accel_fsr+0x70>)
 80026c6:	7a5b      	ldrb	r3, [r3, #9]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d81b      	bhi.n	8002704 <mpu_get_accel_fsr+0x48>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <mpu_get_accel_fsr+0x18>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	080026fd 	.word	0x080026fd
    case INV_FSR_2G:
        fsr[0] = 2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]
        break;
 80026ea:	e00e      	b.n	800270a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2204      	movs	r2, #4
 80026f0:	701a      	strb	r2, [r3, #0]
        break;
 80026f2:	e00a      	b.n	800270a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2208      	movs	r2, #8
 80026f8:	701a      	strb	r2, [r3, #0]
        break;
 80026fa:	e006      	b.n	800270a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2210      	movs	r2, #16
 8002700:	701a      	strb	r2, [r3, #0]
        break;
 8002702:	e002      	b.n	800270a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	e00a      	b.n	8002720 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <mpu_get_accel_fsr+0x70>)
 800270c:	7cdb      	ldrb	r3, [r3, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	701a      	strb	r2, [r3, #0]
    return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000004 	.word	0x20000004

08002730 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <mpu_set_accel_fsr+0xcc>)
 800273c:	7a9b      	ldrb	r3, [r3, #10]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <mpu_set_accel_fsr+0x18>
        return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	e054      	b.n	80027f2 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	3b02      	subs	r3, #2
 800274c:	2b0e      	cmp	r3, #14
 800274e:	d82d      	bhi.n	80027ac <mpu_set_accel_fsr+0x7c>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <mpu_set_accel_fsr+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002795 	.word	0x08002795
 800275c:	080027ad 	.word	0x080027ad
 8002760:	0800279b 	.word	0x0800279b
 8002764:	080027ad 	.word	0x080027ad
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027a1 	.word	0x080027a1
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027ad 	.word	0x080027ad
 8002780:	080027ad 	.word	0x080027ad
 8002784:	080027ad 	.word	0x080027ad
 8002788:	080027ad 	.word	0x080027ad
 800278c:	080027ad 	.word	0x080027ad
 8002790:	080027a7 	.word	0x080027a7
    case 2:
        data = INV_FSR_2G << 3;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
        break;
 8002798:	e00b      	b.n	80027b2 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800279a:	2308      	movs	r3, #8
 800279c:	73fb      	strb	r3, [r7, #15]
        break;
 800279e:	e008      	b.n	80027b2 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80027a0:	2310      	movs	r3, #16
 80027a2:	73fb      	strb	r3, [r7, #15]
        break;
 80027a4:	e005      	b.n	80027b2 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80027a6:	2318      	movs	r3, #24
 80027a8:	73fb      	strb	r3, [r7, #15]
        break;
 80027aa:	e002      	b.n	80027b2 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
 80027b0:	e01f      	b.n	80027f2 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <mpu_set_accel_fsr+0xcc>)
 80027b4:	7a5a      	ldrb	r2, [r3, #9]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	429a      	cmp	r2, r3
 80027be:	d101      	bne.n	80027c4 <mpu_set_accel_fsr+0x94>
        return 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e016      	b.n	80027f2 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <mpu_set_accel_fsr+0xcc>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	7818      	ldrb	r0, [r3, #0]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <mpu_set_accel_fsr+0xcc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	79d9      	ldrb	r1, [r3, #7]
 80027d0:	f107 030f 	add.w	r3, r7, #15
 80027d4:	2201      	movs	r2, #1
 80027d6:	f7ff fb19 	bl	8001e0c <i2c_write>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <mpu_set_accel_fsr+0xb6>
        return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	e005      	b.n	80027f2 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <mpu_set_accel_fsr+0xcc>)
 80027ee:	725a      	strb	r2, [r3, #9]
    return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000004 	.word	0x20000004

08002800 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <mpu_get_lpf+0x78>)
 800280a:	7adb      	ldrb	r3, [r3, #11]
 800280c:	3b01      	subs	r3, #1
 800280e:	2b05      	cmp	r3, #5
 8002810:	d826      	bhi.n	8002860 <mpu_get_lpf+0x60>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <mpu_get_lpf+0x18>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002831 	.word	0x08002831
 800281c:	08002839 	.word	0x08002839
 8002820:	08002841 	.word	0x08002841
 8002824:	08002849 	.word	0x08002849
 8002828:	08002851 	.word	0x08002851
 800282c:	08002859 	.word	0x08002859
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	22bc      	movs	r2, #188	; 0xbc
 8002834:	801a      	strh	r2, [r3, #0]
        break;
 8002836:	e017      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2262      	movs	r2, #98	; 0x62
 800283c:	801a      	strh	r2, [r3, #0]
        break;
 800283e:	e013      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	222a      	movs	r2, #42	; 0x2a
 8002844:	801a      	strh	r2, [r3, #0]
        break;
 8002846:	e00f      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2214      	movs	r2, #20
 800284c:	801a      	strh	r2, [r3, #0]
        break;
 800284e:	e00b      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	220a      	movs	r2, #10
 8002854:	801a      	strh	r2, [r3, #0]
        break;
 8002856:	e007      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	801a      	strh	r2, [r3, #0]
        break;
 800285e:	e003      	b.n	8002868 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
        break;
 8002866:	bf00      	nop
    }
    return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000004 	.word	0x20000004

0800287c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <mpu_set_lpf+0x98>)
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <mpu_set_lpf+0x18>
        return -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e03b      	b.n	800290c <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2bbb      	cmp	r3, #187	; 0xbb
 8002898:	d902      	bls.n	80028a0 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e019      	b.n	80028d4 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b61      	cmp	r3, #97	; 0x61
 80028a4:	d902      	bls.n	80028ac <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80028a6:	2302      	movs	r3, #2
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e013      	b.n	80028d4 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2b29      	cmp	r3, #41	; 0x29
 80028b0:	d902      	bls.n	80028b8 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e00d      	b.n	80028d4 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	2b13      	cmp	r3, #19
 80028bc:	d902      	bls.n	80028c4 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80028be:	2304      	movs	r3, #4
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e007      	b.n	80028d4 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	d902      	bls.n	80028d0 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80028ca:	2305      	movs	r3, #5
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e001      	b.n	80028d4 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80028d0:	2306      	movs	r3, #6
 80028d2:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <mpu_set_lpf+0x98>)
 80028d6:	7ada      	ldrb	r2, [r3, #11]
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d101      	bne.n	80028e2 <mpu_set_lpf+0x66>
        return 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	e014      	b.n	800290c <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <mpu_set_lpf+0x98>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	7818      	ldrb	r0, [r3, #0]
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <mpu_set_lpf+0x98>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	7899      	ldrb	r1, [r3, #2]
 80028ee:	f107 030f 	add.w	r3, r7, #15
 80028f2:	2201      	movs	r2, #1
 80028f4:	f7ff fa8a 	bl	8001e0c <i2c_write>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <mpu_set_lpf+0x88>
        return -1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e003      	b.n	800290c <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	4b03      	ldr	r3, [pc, #12]	; (8002914 <mpu_set_lpf+0x98>)
 8002908:	72da      	strb	r2, [r3, #11]
    return 0;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000004 	.word	0x20000004

08002918 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <mpu_get_sample_rate+0x30>)
 8002922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <mpu_get_sample_rate+0x18>
        return -1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e004      	b.n	800293a <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <mpu_get_sample_rate+0x30>)
 8002932:	89da      	ldrh	r2, [r3, #14]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	801a      	strh	r2, [r3, #0]
    return 0;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000004 	.word	0x20000004

0800294c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002956:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <mpu_set_sample_rate+0x18>
        return -1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e053      	b.n	8002a0c <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 8002966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <mpu_set_sample_rate+0x28>
        return -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e04b      	b.n	8002a0c <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 8002976:	7d1b      	ldrb	r3, [r3, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00f      	beq.n	800299c <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <mpu_set_sample_rate+0x4a>
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b28      	cmp	r3, #40	; 0x28
 8002986:	d806      	bhi.n	8002996 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fc8d 	bl	80022ac <mpu_lp_accel_mode>
                return 0;
 8002992:	2300      	movs	r3, #0
 8002994:	e03a      	b.n	8002a0c <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff fc88 	bl	80022ac <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d802      	bhi.n	80029a8 <mpu_set_sample_rate+0x5c>
            rate = 4;
 80029a2:	2304      	movs	r3, #4
 80029a4:	80fb      	strh	r3, [r7, #6]
 80029a6:	e006      	b.n	80029b6 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ae:	d902      	bls.n	80029b6 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 80029b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b4:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	7818      	ldrb	r0, [r3, #0]
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	7859      	ldrb	r1, [r3, #1]
 80029d4:	f107 030f 	add.w	r3, r7, #15
 80029d8:	2201      	movs	r2, #1
 80029da:	f7ff fa17 	bl	8001e0c <i2c_write>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <mpu_set_sample_rate+0x9e>
            return -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	e010      	b.n	8002a0c <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	3301      	adds	r3, #1
 80029ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 80029fa:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <mpu_set_sample_rate+0xc8>)
 80029fe:	89db      	ldrh	r3, [r3, #14]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff39 	bl	800287c <mpu_set_lpf>
        return 0;
 8002a0a:	2300      	movs	r3, #0
    }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000004 	.word	0x20000004

08002a18 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <mpu_get_gyro_sens+0x5c>)
 8002a22:	7a1b      	ldrb	r3, [r3, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d81b      	bhi.n	8002a60 <mpu_get_gyro_sens+0x48>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <mpu_get_gyro_sens+0x18>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a49 	.word	0x08002a49
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a59 	.word	0x08002a59
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <mpu_get_gyro_sens+0x60>)
 8002a44:	601a      	str	r2, [r3, #0]
        break;
 8002a46:	e00e      	b.n	8002a66 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <mpu_get_gyro_sens+0x64>)
 8002a4c:	601a      	str	r2, [r3, #0]
        break;
 8002a4e:	e00a      	b.n	8002a66 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <mpu_get_gyro_sens+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
        break;
 8002a56:	e006      	b.n	8002a66 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <mpu_get_gyro_sens+0x6c>)
 8002a5c:	601a      	str	r2, [r3, #0]
        break;
 8002a5e:	e002      	b.n	8002a66 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
 8002a64:	e000      	b.n	8002a68 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	20000004 	.word	0x20000004
 8002a78:	43030000 	.word	0x43030000
 8002a7c:	42830000 	.word	0x42830000
 8002a80:	42033333 	.word	0x42033333
 8002a84:	41833333 	.word	0x41833333

08002a88 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <mpu_get_accel_sens+0x78>)
 8002a92:	7a5b      	ldrb	r3, [r3, #9]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d81f      	bhi.n	8002ad8 <mpu_get_accel_sens+0x50>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <mpu_get_accel_sens+0x18>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002abb 	.word	0x08002abb
 8002aa8:	08002ac5 	.word	0x08002ac5
 8002aac:	08002acf 	.word	0x08002acf
    case INV_FSR_2G:
        sens[0] = 16384;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab6:	801a      	strh	r2, [r3, #0]
        break;
 8002ab8:	e011      	b.n	8002ade <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8002ac0:	801a      	strh	r2, [r3, #0]
        break;
 8002ac2:	e00c      	b.n	8002ade <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aca:	801a      	strh	r2, [r3, #0]
        break;
 8002acc:	e007      	b.n	8002ade <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad4:	801a      	strh	r2, [r3, #0]
        break;
 8002ad6:	e002      	b.n	8002ade <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	e00a      	b.n	8002af4 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <mpu_get_accel_sens+0x78>)
 8002ae0:	7cdb      	ldrb	r3, [r3, #19]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	801a      	strh	r2, [r3, #0]
    return 0;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	20000004 	.word	0x20000004

08002b04 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <mpu_get_fifo_config+0x20>)
 8002b0e:	7c1a      	ldrb	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	701a      	strb	r2, [r3, #0]
    return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000004 	.word	0x20000004

08002b28 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <mpu_configure_fifo+0x24>
        return 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e038      	b.n	8002bbe <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b4e:	7a9b      	ldrb	r3, [r3, #10]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <mpu_configure_fifo+0x32>
            return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	e031      	b.n	8002bbe <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b5c:	7c1b      	ldrb	r3, [r3, #16]
 8002b5e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b62:	7a9a      	ldrb	r2, [r3, #10]
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4013      	ands	r3, r2
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b6c:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b70:	7c1b      	ldrb	r3, [r3, #16]
 8002b72:	79fa      	ldrb	r2, [r7, #7]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d003      	beq.n	8002b80 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e001      	b.n	8002b84 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <mpu_configure_fifo+0x6a>
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002b8c:	7d1b      	ldrb	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7ff fa0e 	bl	8001fb4 <set_int_enable>
 8002b98:	e002      	b.n	8002ba0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7ff fa0a 	bl	8001fb4 <set_int_enable>
        if (sensors) {
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8002ba6:	f7ff fbfd 	bl	80023a4 <mpu_reset_fifo>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002bb0:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <mpu_configure_fifo+0xa0>)
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	7413      	strb	r3, [r2, #16]
                return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e000      	b.n	8002bbe <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000004 	.word	0x20000004

08002bcc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	e007      	b.n	8002bf6 <mpu_set_sensors+0x2a>
    else if (sensors)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <mpu_set_sensors+0x26>
        data = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e001      	b.n	8002bf6 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	7818      	ldrb	r0, [r3, #0]
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	7d59      	ldrb	r1, [r3, #21]
 8002c02:	f107 030f 	add.w	r3, r7, #15
 8002c06:	2201      	movs	r2, #1
 8002c08:	f7ff f900 	bl	8001e0c <i2c_write>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	729a      	strb	r2, [r3, #10]
        return -1;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e056      	b.n	8002ccc <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002c28:	731a      	strb	r2, [r3, #12]

    data = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	7818      	ldrb	r0, [r3, #0]
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	7d99      	ldrb	r1, [r3, #22]
 8002c8a:	f107 030f 	add.w	r3, r7, #15
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f7ff f8bc 	bl	8001e0c <i2c_write>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	729a      	strb	r2, [r3, #10]
        return -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	e012      	b.n	8002ccc <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <mpu_set_sensors+0xec>
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d002      	beq.n	8002cb8 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f954 	bl	8002f60 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <mpu_set_sensors+0x108>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8002cc4:	2032      	movs	r0, #50	; 0x32
 8002cc6:	f002 fd3d 	bl	8005744 <HAL_Delay>
    return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <mpu_read_fifo_stream+0x1e>
        return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf4:	e068      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002cf8:	7a9b      	ldrb	r3, [r3, #10]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <mpu_read_fifo_stream+0x2c>
        return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	e061      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	7818      	ldrb	r0, [r3, #0]
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	7b19      	ldrb	r1, [r3, #12]
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2202      	movs	r2, #2
 8002d16:	f7ff f89b 	bl	8001e50 <i2c_read>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <mpu_read_fifo_stream+0x4e>
        return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e050      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8002d26:	7d3b      	ldrb	r3, [r7, #20]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	b21a      	sxth	r2, r3
 8002d2c:	7d7b      	ldrb	r3, [r7, #21]
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8002d36:	8afa      	ldrh	r2, [r7, #22]
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d205      	bcs.n	8002d4a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
        return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	e03e      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	885b      	ldrh	r3, [r3, #2]
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	8afa      	ldrh	r2, [r7, #22]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d91a      	bls.n	8002d90 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	7818      	ldrb	r0, [r3, #0]
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	7cd9      	ldrb	r1, [r3, #19]
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f7ff f870 	bl	8001e50 <i2c_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <mpu_read_fifo_stream+0xa4>
            return -1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e025      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002d7c:	7d3b      	ldrb	r3, [r7, #20]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8002d86:	f7ff fb0d 	bl	80023a4 <mpu_reset_fifo>
            return -2;
 8002d8a:	f06f 0301 	mvn.w	r3, #1
 8002d8e:	e01b      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	7818      	ldrb	r0, [r3, #0]
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <mpu_read_fifo_stream+0xf8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	7b59      	ldrb	r1, [r3, #13]
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f7ff f855 	bl	8001e50 <i2c_read>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <mpu_read_fifo_stream+0xda>
        return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	e00a      	b.n	8002dc8 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8002db2:	8afa      	ldrh	r2, [r7, #22]
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	701a      	strb	r2, [r3, #0]
    return 0;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <mpu_set_bypass+0x188>)
 8002de0:	7c9b      	ldrb	r3, [r3, #18]
 8002de2:	79fa      	ldrb	r2, [r7, #7]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d101      	bne.n	8002dec <mpu_set_bypass+0x18>
        return 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e0b2      	b.n	8002f52 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d050      	beq.n	8002e94 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <mpu_set_bypass+0x188>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	7818      	ldrb	r0, [r3, #0]
 8002df8:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <mpu_set_bypass+0x188>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	7919      	ldrb	r1, [r3, #4]
 8002dfe:	f107 030f 	add.w	r3, r7, #15
 8002e02:	2201      	movs	r2, #1
 8002e04:	f7ff f824 	bl	8001e50 <i2c_read>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <mpu_set_bypass+0x40>
            return -1;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	e09e      	b.n	8002f52 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	f023 0320 	bic.w	r3, r3, #32
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002e1e:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	7818      	ldrb	r0, [r3, #0]
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	7919      	ldrb	r1, [r3, #4]
 8002e2a:	f107 030f 	add.w	r3, r7, #15
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f7fe ffec 	bl	8001e0c <i2c_write>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <mpu_set_bypass+0x6c>
            return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e088      	b.n	8002f52 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002e40:	2003      	movs	r0, #3
 8002e42:	f002 fc7f 	bl	8005744 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8002e46:	2302      	movs	r3, #2
 8002e48:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8002e4a:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e60:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002e72:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	7818      	ldrb	r0, [r3, #0]
 8002e78:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	7dd9      	ldrb	r1, [r3, #23]
 8002e7e:	f107 030f 	add.w	r3, r7, #15
 8002e82:	2201      	movs	r2, #1
 8002e84:	f7fe ffc2 	bl	8001e0c <i2c_write>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d05d      	beq.n	8002f4a <mpu_set_bypass+0x176>
            return -1;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	e05e      	b.n	8002f52 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	7818      	ldrb	r0, [r3, #0]
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <mpu_set_bypass+0x188>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	7919      	ldrb	r1, [r3, #4]
 8002ea0:	f107 030f 	add.w	r3, r7, #15
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f7fe ffd3 	bl	8001e50 <i2c_read>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <mpu_set_bypass+0xe2>
            return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb4:	e04d      	b.n	8002f52 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <mpu_set_bypass+0x188>)
 8002eb8:	7a9b      	ldrb	r3, [r3, #10]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e004      	b.n	8002ed8 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f023 0320 	bic.w	r3, r3, #32
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <mpu_set_bypass+0x188>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	7818      	ldrb	r0, [r3, #0]
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <mpu_set_bypass+0x188>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	7919      	ldrb	r1, [r3, #4]
 8002ee4:	f107 030f 	add.w	r3, r7, #15
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f7fe ff8f 	bl	8001e0c <i2c_write>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <mpu_set_bypass+0x126>
            return -1;
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	e02b      	b.n	8002f52 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002efa:	2003      	movs	r0, #3
 8002efc:	f002 fc22 	bl	8005744 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <mpu_set_bypass+0x188>)
 8002f02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e001      	b.n	8002f14 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <mpu_set_bypass+0x188>)
 8002f16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <mpu_set_bypass+0x188>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	7818      	ldrb	r0, [r3, #0]
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <mpu_set_bypass+0x188>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	7dd9      	ldrb	r1, [r3, #23]
 8002f34:	f107 030f 	add.w	r3, r7, #15
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f7fe ff67 	bl	8001e0c <i2c_write>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <mpu_set_bypass+0x176>
            return -1;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	e003      	b.n	8002f52 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <mpu_set_bypass+0x188>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	7493      	strb	r3, [r2, #18]
    return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000004 	.word	0x20000004

08002f60 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002f6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f70:	79fa      	ldrb	r2, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d101      	bne.n	8002f7a <mpu_set_int_latched+0x1a>
        return 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e030      	b.n	8002fdc <mpu_set_int_latched+0x7c>

    if (enable)
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002f80:	2330      	movs	r3, #48	; 0x30
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e001      	b.n	8002f8a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002f8c:	7c9b      	ldrb	r3, [r3, #18]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002f9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d004      	beq.n	8002fb0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	7818      	ldrb	r0, [r3, #0]
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	7dd9      	ldrb	r1, [r3, #23]
 8002fbc:	f107 030f 	add.w	r3, r7, #15
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f7fe ff23 	bl	8001e0c <i2c_write>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <mpu_set_int_latched+0x72>
        return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd0:	e004      	b.n	8002fdc <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8002fd2:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <mpu_set_int_latched+0x84>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000004 	.word	0x20000004

08002fe8 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <get_accel_prod_shift+0x114>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	7818      	ldrb	r0, [r3, #0]
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	210d      	movs	r1, #13
 8002ffe:	f7fe ff27 	bl	8001e50 <i2c_read>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <get_accel_prod_shift+0x24>
        return 0x07;
 8003008:	2307      	movs	r3, #7
 800300a:	e073      	b.n	80030f4 <get_accel_prod_shift+0x10c>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800300c:	7c3b      	ldrb	r3, [r7, #16]
 800300e:	10db      	asrs	r3, r3, #3
 8003010:	b25b      	sxtb	r3, r3
 8003012:	f003 031c 	and.w	r3, r3, #28
 8003016:	b25a      	sxtb	r2, r3
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	111b      	asrs	r3, r3, #4
 800301c:	b25b      	sxtb	r3, r3
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	b25b      	sxtb	r3, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	b25b      	sxtb	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800302c:	7c7b      	ldrb	r3, [r7, #17]
 800302e:	10db      	asrs	r3, r3, #3
 8003030:	b25b      	sxtb	r3, r3
 8003032:	f003 031c 	and.w	r3, r3, #28
 8003036:	b25a      	sxtb	r2, r3
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	109b      	asrs	r3, r3, #2
 800303c:	b25b      	sxtb	r3, r3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	b25b      	sxtb	r3, r3
 8003044:	4313      	orrs	r3, r2
 8003046:	b25b      	sxtb	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800304c:	7cbb      	ldrb	r3, [r7, #18]
 800304e:	10db      	asrs	r3, r3, #3
 8003050:	b25b      	sxtb	r3, r3
 8003052:	f003 031c 	and.w	r3, r3, #28
 8003056:	b25a      	sxtb	r2, r3
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	b25b      	sxtb	r3, r3
 8003062:	4313      	orrs	r3, r2
 8003064:	b25b      	sxtb	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
 800306e:	e03d      	b.n	80030ec <get_accel_prod_shift+0x104>
        if (!shift_code[ii]) {
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	f107 0218 	add.w	r2, r7, #24
 8003076:	4413      	add	r3, r2
 8003078:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <get_accel_prod_shift+0xa8>
            st_shift[ii] = 0.f;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
            continue;
 800308e:	e02a      	b.n	80030e6 <get_accel_prod_shift+0xfe>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <get_accel_prod_shift+0x118>)
 800309a:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800309c:	e00f      	b.n	80030be <get_accel_prod_shift+0xd6>
            st_shift[ii] *= 1.034f;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003104 <get_accel_prod_shift+0x11c>
 80030b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ba:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	f107 0218 	add.w	r2, r7, #24
 80030c4:	441a      	add	r2, r3
 80030c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80030ca:	3a01      	subs	r2, #1
 80030cc:	b2d1      	uxtb	r1, r2
 80030ce:	f107 0218 	add.w	r2, r7, #24
 80030d2:	441a      	add	r2, r3
 80030d4:	f802 1c0c 	strb.w	r1, [r2, #-12]
 80030d8:	f107 0218 	add.w	r2, r7, #24
 80030dc:	4413      	add	r3, r2
 80030de:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1db      	bne.n	800309e <get_accel_prod_shift+0xb6>
    for (ii = 0; ii < 3; ii++) {
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	3301      	adds	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d9be      	bls.n	8003070 <get_accel_prod_shift+0x88>
    }
    return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000004 	.word	0x20000004
 8003100:	3eae147b 	.word	0x3eae147b
 8003104:	3f845a1d 	.word	0x3f845a1d

08003108 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff64 	bl	8002fe8 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
 8003124:	e065      	b.n	80031f2 <accel_self_test+0xea>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	440b      	add	r3, r1
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bfb8      	it	lt
 8003140:	425b      	neglt	r3, r3
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003204 <accel_self_test+0xfc>
 800314e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800315e:	4413      	add	r3, r2
 8003160:	3b1c      	subs	r3, #28
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eef5 7a40 	vcmp.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d024      	beq.n	80031ba <accel_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003178:	4413      	add	r3, r2
 800317a:	3b1c      	subs	r3, #28
 800317c:	ed93 7a00 	vldr	s14, [r3]
 8003180:	edd7 6a07 	vldr	s13, [r7, #28]
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800318c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003190:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8003194:	edd7 7a06 	vldr	s15, [r7, #24]
 8003198:	eef0 7ae7 	vabs.f32	s15, s15
 800319c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003208 <accel_self_test+0x100>
 80031a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	dd20      	ble.n	80031ec <accel_self_test+0xe4>
                result |= 1 << jj;
 80031aa:	2201      	movs	r2, #1
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	6a3a      	ldr	r2, [r7, #32]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	e018      	b.n	80031ec <accel_self_test+0xe4>
        } else if ((st_shift_cust < test.min_g) ||
 80031ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800320c <accel_self_test+0x104>
 80031be:	edd7 7a07 	vldr	s15, [r7, #28]
 80031c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	d408      	bmi.n	80031de <accel_self_test+0xd6>
            (st_shift_cust > test.max_g))
 80031cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003210 <accel_self_test+0x108>
        } else if ((st_shift_cust < test.min_g) ||
 80031d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	dd06      	ble.n	80031ec <accel_self_test+0xe4>
            result |= 1 << jj;
 80031de:	2201      	movs	r2, #1
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	3301      	adds	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	dd96      	ble.n	8003126 <accel_self_test+0x1e>
    }

    return result;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3728      	adds	r7, #40	; 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	47800000 	.word	0x47800000
 8003208:	3e0f5c29 	.word	0x3e0f5c29
 800320c:	3e99999a 	.word	0x3e99999a
 8003210:	3f733333 	.word	0x3f733333

08003214 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8003222:	4b55      	ldr	r3, [pc, #340]	; (8003378 <gyro_self_test+0x164>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	7818      	ldrb	r0, [r3, #0]
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	2203      	movs	r2, #3
 800322e:	210d      	movs	r1, #13
 8003230:	f7fe fe0e 	bl	8001e50 <i2c_read>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <gyro_self_test+0x2a>
        return 0x07;
 800323a:	2307      	movs	r3, #7
 800323c:	e097      	b.n	800336e <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 800323e:	7a3b      	ldrb	r3, [r7, #8]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	b2db      	uxtb	r3, r3
 8003246:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8003248:	7a7b      	ldrb	r3, [r7, #9]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	b2db      	uxtb	r3, r3
 8003250:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8003252:	7abb      	ldrb	r3, [r7, #10]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	b2db      	uxtb	r3, r3
 800325a:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e080      	b.n	8003364 <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	440b      	add	r3, r1
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfb8      	it	lt
 800327c:	425b      	neglt	r3, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003286:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800337c <gyro_self_test+0x168>
 800328a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800328e:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 8003292:	f107 0208 	add.w	r2, r7, #8
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d045      	beq.n	800332c <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 80032a0:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003380 <gyro_self_test+0x16c>
 80032a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032a8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003384 <gyro_self_test+0x170>
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80032b4:	e007      	b.n	80032c6 <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 80032b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003388 <gyro_self_test+0x174>
 80032be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c2:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80032c6:	f107 0208 	add.w	r2, r7, #8
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2d9      	uxtb	r1, r3
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	460a      	mov	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	f107 0208 	add.w	r2, r7, #8
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 80032ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80032f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003302:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8003306:	edd7 7a03 	vldr	s15, [r7, #12]
 800330a:	eef0 7ae7 	vabs.f32	s15, s15
 800330e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800338c <gyro_self_test+0x178>
 8003312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	dd20      	ble.n	800335e <gyro_self_test+0x14a>
                result |= 1 << jj;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e018      	b.n	800335e <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 800332c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003330:	edd7 7a04 	vldr	s15, [r7, #16]
 8003334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	d408      	bmi.n	8003350 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 800333e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003390 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 8003342:	edd7 7a04 	vldr	s15, [r7, #16]
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	dd06      	ble.n	800335e <gyro_self_test+0x14a>
            result |= 1 << jj;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b02      	cmp	r3, #2
 8003368:	f77f af7b 	ble.w	8003262 <gyro_self_test+0x4e>
    }
    return result;
 800336c:	69bb      	ldr	r3, [r7, #24]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000004 	.word	0x20000004
 800337c:	47800000 	.word	0x47800000
 8003380:	00000083 	.word	0x00000083
 8003384:	454cb000 	.word	0x454cb000
 8003388:	3f85e354 	.word	0x3f85e354
 800338c:	3e0f5c29 	.word	0x3e0f5c29
 8003390:	42d20000 	.word	0x42d20000

08003394 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b094      	sub	sp, #80	; 0x50
 800339a:	af00      	add	r7, sp, #0
 800339c:	6278      	str	r0, [r7, #36]	; 0x24
 800339e:	6239      	str	r1, [r7, #32]
 80033a0:	4613      	mov	r3, r2
 80033a2:	77fb      	strb	r3, [r7, #31]
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    data[1] = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 80033b0:	4ba3      	ldr	r3, [pc, #652]	; (8003640 <get_st_biases+0x2ac>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	7818      	ldrb	r0, [r3, #0]
 80033b6:	4ba2      	ldr	r3, [pc, #648]	; (8003640 <get_st_biases+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	7d59      	ldrb	r1, [r3, #21]
 80033bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033c0:	2202      	movs	r2, #2
 80033c2:	f7fe fd23 	bl	8001e0c <i2c_write>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <get_st_biases+0x3e>
        return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e2e4      	b.n	800399c <get_st_biases+0x608>
    delay_ms(200);
 80033d2:	20c8      	movs	r0, #200	; 0xc8
 80033d4:	f002 f9b6 	bl	8005744 <HAL_Delay>
    data[0] = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 80033de:	4b98      	ldr	r3, [pc, #608]	; (8003640 <get_st_biases+0x2ac>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	7818      	ldrb	r0, [r3, #0]
 80033e4:	4b96      	ldr	r3, [pc, #600]	; (8003640 <get_st_biases+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	7c59      	ldrb	r1, [r3, #17]
 80033ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033ee:	2201      	movs	r2, #1
 80033f0:	f7fe fd0c 	bl	8001e0c <i2c_write>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <get_st_biases+0x6c>
        return -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	e2cd      	b.n	800399c <get_st_biases+0x608>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8003400:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <get_st_biases+0x2ac>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	7818      	ldrb	r0, [r3, #0]
 8003406:	4b8e      	ldr	r3, [pc, #568]	; (8003640 <get_st_biases+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	7959      	ldrb	r1, [r3, #5]
 800340c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003410:	2201      	movs	r2, #1
 8003412:	f7fe fcfb 	bl	8001e0c <i2c_write>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <get_st_biases+0x8e>
        return -1;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
 8003420:	e2bc      	b.n	800399c <get_st_biases+0x608>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003422:	4b87      	ldr	r3, [pc, #540]	; (8003640 <get_st_biases+0x2ac>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	7818      	ldrb	r0, [r3, #0]
 8003428:	4b85      	ldr	r3, [pc, #532]	; (8003640 <get_st_biases+0x2ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	7d59      	ldrb	r1, [r3, #21]
 800342e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003432:	2201      	movs	r2, #1
 8003434:	f7fe fcea 	bl	8001e0c <i2c_write>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <get_st_biases+0xb0>
        return -1;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	e2ab      	b.n	800399c <get_st_biases+0x608>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <get_st_biases+0x2ac>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	7818      	ldrb	r0, [r3, #0]
 800344a:	4b7d      	ldr	r3, [pc, #500]	; (8003640 <get_st_biases+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	7e99      	ldrb	r1, [r3, #26]
 8003450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003454:	2201      	movs	r2, #1
 8003456:	f7fe fcd9 	bl	8001e0c <i2c_write>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <get_st_biases+0xd2>
        return -1;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
 8003464:	e29a      	b.n	800399c <get_st_biases+0x608>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <get_st_biases+0x2ac>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	7818      	ldrb	r0, [r3, #0]
 800346c:	4b74      	ldr	r3, [pc, #464]	; (8003640 <get_st_biases+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	7919      	ldrb	r1, [r3, #4]
 8003472:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003476:	2201      	movs	r2, #1
 8003478:	f7fe fcc8 	bl	8001e0c <i2c_write>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <get_st_biases+0xf4>
        return -1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e289      	b.n	800399c <get_st_biases+0x608>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8003488:	230c      	movs	r3, #12
 800348a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <get_st_biases+0x2ac>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	7818      	ldrb	r0, [r3, #0]
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <get_st_biases+0x2ac>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	7919      	ldrb	r1, [r3, #4]
 800349a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800349e:	2201      	movs	r2, #1
 80034a0:	f7fe fcb4 	bl	8001e0c <i2c_write>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <get_st_biases+0x11c>
        return -1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e275      	b.n	800399c <get_st_biases+0x608>
    delay_ms(15);
 80034b0:	200f      	movs	r0, #15
 80034b2:	f002 f947 	bl	8005744 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 80034b6:	4b62      	ldr	r3, [pc, #392]	; (8003640 <get_st_biases+0x2ac>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	7a5b      	ldrb	r3, [r3, #9]
 80034bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 80034c0:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <get_st_biases+0x2ac>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	7818      	ldrb	r0, [r3, #0]
 80034c6:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <get_st_biases+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	7899      	ldrb	r1, [r3, #2]
 80034cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034d0:	2201      	movs	r2, #1
 80034d2:	f7fe fc9b 	bl	8001e0c <i2c_write>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <get_st_biases+0x14e>
        return -1;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e25c      	b.n	800399c <get_st_biases+0x608>
    data[0] = st.test->reg_rate_div;
 80034e2:	4b57      	ldr	r3, [pc, #348]	; (8003640 <get_st_biases+0x2ac>)
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	7a1b      	ldrb	r3, [r3, #8]
 80034e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80034ec:	4b54      	ldr	r3, [pc, #336]	; (8003640 <get_st_biases+0x2ac>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	7818      	ldrb	r0, [r3, #0]
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <get_st_biases+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	7859      	ldrb	r1, [r3, #1]
 80034f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034fc:	2201      	movs	r2, #1
 80034fe:	f7fe fc85 	bl	8001e0c <i2c_write>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <get_st_biases+0x17a>
        return -1;
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	e246      	b.n	800399c <get_st_biases+0x608>
    if (hw_test)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <get_st_biases+0x192>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <get_st_biases+0x2ac>)
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	7a9b      	ldrb	r3, [r3, #10]
 800351a:	f063 031f 	orn	r3, r3, #31
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003524:	e004      	b.n	8003530 <get_st_biases+0x19c>
    else
        data[0] = st.test->reg_gyro_fsr;
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <get_st_biases+0x2ac>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	7a9b      	ldrb	r3, [r3, #10]
 800352c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <get_st_biases+0x2ac>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	7818      	ldrb	r0, [r3, #0]
 8003536:	4b42      	ldr	r3, [pc, #264]	; (8003640 <get_st_biases+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	7999      	ldrb	r1, [r3, #6]
 800353c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003540:	2201      	movs	r2, #1
 8003542:	f7fe fc63 	bl	8001e0c <i2c_write>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <get_st_biases+0x1be>
        return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e224      	b.n	800399c <get_st_biases+0x608>

    if (hw_test)
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <get_st_biases+0x1d6>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <get_st_biases+0x2ac>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	7adb      	ldrb	r3, [r3, #11]
 800355e:	f063 031f 	orn	r3, r3, #31
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003568:	e002      	b.n	8003570 <get_st_biases+0x1dc>
    else
        data[0] = test.reg_accel_fsr;
 800356a:	2318      	movs	r3, #24
 800356c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <get_st_biases+0x2ac>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	7818      	ldrb	r0, [r3, #0]
 8003576:	4b32      	ldr	r3, [pc, #200]	; (8003640 <get_st_biases+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	79d9      	ldrb	r1, [r3, #7]
 800357c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003580:	2201      	movs	r2, #1
 8003582:	f7fe fc43 	bl	8001e0c <i2c_write>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <get_st_biases+0x1fe>
        return -1;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	e204      	b.n	800399c <get_st_biases+0x608>
    if (hw_test)
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <get_st_biases+0x20a>
        delay_ms(200);
 8003598:	20c8      	movs	r0, #200	; 0xc8
 800359a:	f002 f8d3 	bl	8005744 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800359e:	2340      	movs	r3, #64	; 0x40
 80035a0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <get_st_biases+0x2ac>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	7818      	ldrb	r0, [r3, #0]
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <get_st_biases+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	7919      	ldrb	r1, [r3, #4]
 80035b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035b4:	2201      	movs	r2, #1
 80035b6:	f7fe fc29 	bl	8001e0c <i2c_write>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <get_st_biases+0x232>
        return -1;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e1ea      	b.n	800399c <get_st_biases+0x608>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80035c6:	2378      	movs	r3, #120	; 0x78
 80035c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80035cc:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <get_st_biases+0x2ac>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	7818      	ldrb	r0, [r3, #0]
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <get_st_biases+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	7959      	ldrb	r1, [r3, #5]
 80035d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035dc:	2201      	movs	r2, #1
 80035de:	f7fe fc15 	bl	8001e0c <i2c_write>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <get_st_biases+0x25a>
        return -1;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	e1d6      	b.n	800399c <get_st_biases+0x608>
    delay_ms(test.wait_ms);
 80035ee:	2332      	movs	r3, #50	; 0x32
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 f8a7 	bl	8005744 <HAL_Delay>
    data[0] = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <get_st_biases+0x2ac>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	7818      	ldrb	r0, [r3, #0]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <get_st_biases+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	7959      	ldrb	r1, [r3, #5]
 8003608:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800360c:	2201      	movs	r2, #1
 800360e:	f7fe fbfd 	bl	8001e0c <i2c_write>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <get_st_biases+0x28a>
        return -1;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	e1be      	b.n	800399c <get_st_biases+0x608>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <get_st_biases+0x2ac>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	7818      	ldrb	r0, [r3, #0]
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <get_st_biases+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	7b19      	ldrb	r1, [r3, #12]
 800362a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800362e:	2202      	movs	r2, #2
 8003630:	f7fe fc0e 	bl	8001e50 <i2c_read>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <get_st_biases+0x2b0>
        return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	e1ad      	b.n	800399c <get_st_biases+0x608>
 8003640:	20000004 	.word	0x20000004

    fifo_count = (data[0] << 8) | data[1];
 8003644:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	b21a      	sxth	r2, r3
 800364c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003650:	b21b      	sxth	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b21b      	sxth	r3, r3
 8003656:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800365a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <get_st_biases+0x334>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	08db      	lsrs	r3, r3, #3
 8003666:	b29b      	uxth	r3, r3
 8003668:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    gyro[0] = gyro[1] = gyro[2] = 0;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f103 0108 	add.w	r1, r3, #8
 8003672:	2300      	movs	r3, #0
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	680b      	ldr	r3, [r1, #0]
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f103 0108 	add.w	r1, r3, #8
 800368a:	2300      	movs	r3, #0
 800368c:	600b      	str	r3, [r1, #0]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	1d1a      	adds	r2, r3, #4
 8003692:	680b      	ldr	r3, [r1, #0]
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800369c:	2300      	movs	r3, #0
 800369e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80036a2:	e08e      	b.n	80037c2 <get_st_biases+0x42e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <get_st_biases+0x338>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	7818      	ldrb	r0, [r3, #0]
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <get_st_biases+0x338>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	7b59      	ldrb	r1, [r3, #13]
 80036b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036b4:	220c      	movs	r2, #12
 80036b6:	f7fe fbcb 	bl	8001e50 <i2c_read>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <get_st_biases+0x33c>
            return -1;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
 80036c4:	e16a      	b.n	800399c <get_st_biases+0x608>
 80036c6:	bf00      	nop
 80036c8:	aaaaaaab 	.word	0xaaaaaaab
 80036cc:	20000004 	.word	0x20000004
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 80036d0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	b21a      	sxth	r2, r3
 80036d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80036dc:	b21b      	sxth	r3, r3
 80036de:	4313      	orrs	r3, r2
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	86bb      	strh	r3, [r7, #52]	; 0x34
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 80036e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 80036f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	b21a      	sxth	r2, r3
 8003700:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003704:	b21b      	sxth	r3, r3
 8003706:	4313      	orrs	r3, r2
 8003708:	b21b      	sxth	r3, r3
 800370a:	873b      	strh	r3, [r7, #56]	; 0x38
        accel[0] += (long)accel_cur[0];
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003714:	441a      	add	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	3304      	adds	r3, #4
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003724:	4618      	mov	r0, r3
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	180b      	adds	r3, r1, r0
 800372c:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	3308      	adds	r3, #8
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003738:	4618      	mov	r0, r3
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	f103 0208 	add.w	r2, r3, #8
 8003740:	180b      	adds	r3, r1, r0
 8003742:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8003744:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	b21a      	sxth	r2, r3
 800374c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003750:	b21b      	sxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b21b      	sxth	r3, r3
 8003756:	85bb      	strh	r3, [r7, #44]	; 0x2c
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8003758:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	b21a      	sxth	r2, r3
 8003760:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003764:	b21b      	sxth	r3, r3
 8003766:	4313      	orrs	r3, r2
 8003768:	b21b      	sxth	r3, r3
 800376a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800376c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	b21a      	sxth	r2, r3
 8003774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003778:	b21b      	sxth	r3, r3
 800377a:	4313      	orrs	r3, r2
 800377c:	b21b      	sxth	r3, r3
 800377e:	863b      	strh	r3, [r7, #48]	; 0x30
        gyro[0] += (long)gyro_cur[0];
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003788:	441a      	add	r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	3304      	adds	r3, #4
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003798:	4618      	mov	r0, r3
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	1d1a      	adds	r2, r3, #4
 800379e:	180b      	adds	r3, r1, r0
 80037a0:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	3308      	adds	r3, #8
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80037ac:	4618      	mov	r0, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f103 0208 	add.w	r2, r3, #8
 80037b4:	180b      	adds	r3, r1, r0
 80037b6:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 80037b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037bc:	3301      	adds	r3, #1
 80037be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80037c2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80037c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037ca:	429a      	cmp	r2, r3
 80037cc:	f4ff af6a 	bcc.w	80036a4 <get_st_biases+0x310>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037da:	1415      	asrs	r5, r2, #16
 80037dc:	0414      	lsls	r4, r2, #16
 80037de:	2383      	movs	r3, #131	; 0x83
 80037e0:	461a      	mov	r2, r3
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fd fa55 	bl	8000c98 <__aeabi_ldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f7fd fa4b 	bl	8000c98 <__aeabi_ldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	3304      	adds	r3, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003816:	ea4f 4922 	mov.w	r9, r2, asr #16
 800381a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800381e:	2383      	movs	r3, #131	; 0x83
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	4640      	mov	r0, r8
 8003828:	4649      	mov	r1, r9
 800382a:	f7fd fa35 	bl	8000c98 <__aeabi_ldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f7fd fa2b 	bl	8000c98 <__aeabi_ldivmod>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3304      	adds	r3, #4
 800384e:	4602      	mov	r2, r0
 8003850:	601a      	str	r2, [r3, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	3308      	adds	r3, #8
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800385e:	1411      	asrs	r1, r2, #16
 8003860:	6179      	str	r1, [r7, #20]
 8003862:	0413      	lsls	r3, r2, #16
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	2383      	movs	r3, #131	; 0x83
 8003868:	461a      	mov	r2, r3
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003872:	f7fd fa11 	bl	8000c98 <__aeabi_ldivmod>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	f7fd fa07 	bl	8000c98 <__aeabi_ldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	3308      	adds	r3, #8
 8003896:	4602      	mov	r2, r0
 8003898:	601a      	str	r2, [r3, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038a4:	1411      	asrs	r1, r2, #16
 80038a6:	60f9      	str	r1, [r7, #12]
 80038a8:	0413      	lsls	r3, r2, #16
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b0:	461a      	mov	r2, r3
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ba:	f7fd f9ed 	bl	8000c98 <__aeabi_ldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	f7fd f9e3 	bl	8000c98 <__aeabi_ldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	3304      	adds	r3, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038e6:	1411      	asrs	r1, r2, #16
 80038e8:	6079      	str	r1, [r7, #4]
 80038ea:	0413      	lsls	r3, r2, #16
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038f2:	461a      	mov	r2, r3
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038fc:	f7fd f9cc 	bl	8000c98 <__aeabi_ldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	f7fd f9c2 	bl	8000c98 <__aeabi_ldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	3304      	adds	r3, #4
 8003920:	4602      	mov	r2, r0
 8003922:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	3308      	adds	r3, #8
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003930:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003934:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8003938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800393c:	461a      	mov	r2, r3
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	4650      	mov	r0, sl
 8003944:	4659      	mov	r1, fp
 8003946:	f7fd f9a7 	bl	8000c98 <__aeabi_ldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	f7fd f99d 	bl	8000c98 <__aeabi_ldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	3308      	adds	r3, #8
 800396a:	4602      	mov	r2, r0
 800396c:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	dd08      	ble.n	800398a <get_st_biases+0x5f6>
        accel[2] -= 65536L;
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	3308      	adds	r3, #8
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	3308      	adds	r3, #8
 8003982:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e007      	b.n	800399a <get_st_biases+0x606>
    else
        accel[2] += 65536L;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	3308      	adds	r3, #8
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	3308      	adds	r3, #8
 8003994:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003998:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3750      	adds	r7, #80	; 0x50
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a6:	bf00      	nop

080039a8 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08e      	sub	sp, #56	; 0x38
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 80039b2:	2302      	movs	r3, #2
 80039b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 80039b8:	4b68      	ldr	r3, [pc, #416]	; (8003b5c <mpu_run_self_test+0x1b4>)
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f9ee 	bl	8003da4 <mpu_set_dmp_state>
        dmp_was_on = 1;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039ce:	e002      	b.n	80039d6 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fde6 	bl	80025ac <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80039e0:	f107 030f 	add.w	r3, r7, #15
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fe69 	bl	80026bc <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ff06 	bl	8002800 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 80039f4:	f107 030a 	add.w	r3, r7, #10
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe ff8d 	bl	8002918 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003a00:	7a9b      	ldrb	r3, [r3, #10]
 8003a02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8003a06:	f107 030e 	add.w	r3, r7, #14
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f87a 	bl	8002b04 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
 8003a14:	e00a      	b.n	8003a2c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8003a16:	2200      	movs	r2, #0
 8003a18:	6839      	ldr	r1, [r7, #0]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fcba 	bl	8003394 <get_st_biases>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	3301      	adds	r3, #1
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dbef      	blt.n	8003a16 <mpu_run_self_test+0x6e>
 8003a36:	e000      	b.n	8003a3a <mpu_run_self_test+0x92>
            break;
 8003a38:	bf00      	nop
    if (ii == tries) {
 8003a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d102      	bne.n	8003a4a <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003a48:	e045      	b.n	8003ad6 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	e00d      	b.n	8003a6c <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8003a50:	f107 0110 	add.w	r1, r7, #16
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fc9a 	bl	8003394 <get_st_biases>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	3301      	adds	r3, #1
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	429a      	cmp	r2, r3
 8003a74:	dbec      	blt.n	8003a50 <mpu_run_self_test+0xa8>
 8003a76:	e000      	b.n	8003a7a <mpu_run_self_test+0xd2>
            break;
 8003a78:	bf00      	nop
    if (ii == tries) {
 8003a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d102      	bne.n	8003a8a <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8003a88:	e025      	b.n	8003ad6 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8003a8a:	f107 0310 	add.w	r3, r7, #16
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6838      	ldr	r0, [r7, #0]
 8003a92:	f7ff fb39 	bl	8003108 <accel_self_test>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fbb6 	bl	8003214 <gyro_self_test>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 8003ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <mpu_run_self_test+0x11a>
        result |= 0x01;
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 8003ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad2:	e000      	b.n	8003ad6 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003ad4:	bf00      	nop
#if defined MPU6050
    /* For now, this function will return a "pass" result for all three sensors
     * for compatibility with current test applications.
     */
    get_st_biases(gyro, accel, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fc5a 	bl	8003394 <get_st_biases>
    result = 0x7;
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003ae6:	22ff      	movs	r2, #255	; 0xff
 8003ae8:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003aec:	22ff      	movs	r2, #255	; 0xff
 8003aee:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003af2:	22ff      	movs	r2, #255	; 0xff
 8003af4:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003afc:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <mpu_run_self_test+0x1b4>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003b10:	89bb      	ldrh	r3, [r7, #12]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fd7e 	bl	8002614 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fe08 	bl	8002730 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003b20:	893b      	ldrh	r3, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe feaa 	bl	800287c <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe ff0e 	bl	800294c <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003b30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff f849 	bl	8002bcc <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fff3 	bl	8002b28 <mpu_configure_fifo>

    if (dmp_was_on)
 8003b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <mpu_run_self_test+0x1a8>
        mpu_set_dmp_state(1);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 f92a 	bl	8003da4 <mpu_set_dmp_state>

    return result;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3738      	adds	r7, #56	; 0x38
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000004 	.word	0x20000004

08003b60 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	603a      	str	r2, [r7, #0]
 8003b6a:	80fb      	strh	r3, [r7, #6]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <mpu_write_mem+0x1c>
        return -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	e03d      	b.n	8003bf8 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <mpu_write_mem+0xa0>)
 8003b7e:	7a9b      	ldrb	r3, [r3, #10]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <mpu_write_mem+0x2a>
        return -1;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e036      	b.n	8003bf8 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003b9a:	7b7b      	ldrb	r3, [r7, #13]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	88bb      	ldrh	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4a17      	ldr	r2, [pc, #92]	; (8003c00 <mpu_write_mem+0xa0>)
 8003ba4:	6852      	ldr	r2, [r2, #4]
 8003ba6:	8952      	ldrh	r2, [r2, #10]
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	dd02      	ble.n	8003bb2 <mpu_write_mem+0x52>
        return -1;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	e022      	b.n	8003bf8 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <mpu_write_mem+0xa0>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	7818      	ldrb	r0, [r3, #0]
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <mpu_write_mem+0xa0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	7ed9      	ldrb	r1, [r3, #27]
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f7fe f922 	bl	8001e0c <i2c_write>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <mpu_write_mem+0x74>
        return -1;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e011      	b.n	8003bf8 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <mpu_write_mem+0xa0>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	7818      	ldrb	r0, [r3, #0]
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <mpu_write_mem+0xa0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	7e19      	ldrb	r1, [r3, #24]
 8003be0:	88bb      	ldrh	r3, [r7, #4]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f7fe f911 	bl	8001e0c <i2c_write>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <mpu_write_mem+0x96>
        return -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	e000      	b.n	8003bf8 <mpu_write_mem+0x98>
    return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000004 	.word	0x20000004

08003c04 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	603a      	str	r2, [r7, #0]
 8003c0e:	80fb      	strh	r3, [r7, #6]
 8003c10:	460b      	mov	r3, r1
 8003c12:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <mpu_read_mem+0x1c>
        return -1;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	e03d      	b.n	8003c9c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003c20:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c22:	7a9b      	ldrb	r3, [r3, #10]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <mpu_read_mem+0x2a>
        return -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	e036      	b.n	8003c9c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003c3e:	7b7b      	ldrb	r3, [r7, #13]
 8003c40:	461a      	mov	r2, r3
 8003c42:	88bb      	ldrh	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c48:	6852      	ldr	r2, [r2, #4]
 8003c4a:	8952      	ldrh	r2, [r2, #10]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	dd02      	ble.n	8003c56 <mpu_read_mem+0x52>
        return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e022      	b.n	8003c9c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	7818      	ldrb	r0, [r3, #0]
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	7ed9      	ldrb	r1, [r3, #27]
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	2202      	movs	r2, #2
 8003c68:	f7fe f8d0 	bl	8001e0c <i2c_write>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <mpu_read_mem+0x74>
        return -1;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e011      	b.n	8003c9c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	7818      	ldrb	r0, [r3, #0]
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <mpu_read_mem+0xa0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	7e19      	ldrb	r1, [r3, #24]
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f7fe f8e1 	bl	8001e50 <i2c_read>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <mpu_read_mem+0x96>
        return -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	e000      	b.n	8003c9c <mpu_read_mem+0x98>
    return 0;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	81fb      	strh	r3, [r7, #14]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	81bb      	strh	r3, [r7, #12]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <mpu_load_firmware+0xf8>)
 8003cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	e062      	b.n	8003d96 <mpu_load_firmware+0xee>

    if (!firmware)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <mpu_load_firmware+0x34>
        return -1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	e05c      	b.n	8003d96 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003cdc:	2300      	movs	r3, #0
 8003cde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ce0:	e034      	b.n	8003d4c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003ce2:	89fa      	ldrh	r2, [r7, #14]
 8003ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	bfa8      	it	ge
 8003cec:	2310      	movge	r3, #16
 8003cee:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff30 	bl	8003b60 <mpu_write_mem>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <mpu_load_firmware+0x64>
            return -1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e044      	b.n	8003d96 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8003d0c:	f107 0214 	add.w	r2, r7, #20
 8003d10:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff75 	bl	8003c04 <mpu_read_mem>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <mpu_load_firmware+0x7e>
            return -1;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	e037      	b.n	8003d96 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8003d26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d2e:	f107 0114 	add.w	r1, r7, #20
 8003d32:	4618      	mov	r0, r3
 8003d34:	f008 fbee 	bl	800c514 <memcmp>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <mpu_load_firmware+0x9c>
            return -2;
 8003d3e:	f06f 0301 	mvn.w	r3, #1
 8003d42:	e028      	b.n	8003d96 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003d44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d48:	4413      	add	r3, r2
 8003d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d4e:	89fb      	ldrh	r3, [r7, #14]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d3c6      	bcc.n	8003ce2 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8003d54:	89bb      	ldrh	r3, [r7, #12]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8003d5e:	89bb      	ldrh	r3, [r7, #12]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <mpu_load_firmware+0xf8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	7818      	ldrb	r0, [r3, #0]
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <mpu_load_firmware+0xf8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	7f59      	ldrb	r1, [r3, #29]
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	2202      	movs	r2, #2
 8003d76:	f7fe f849 	bl	8001e0c <i2c_write>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <mpu_load_firmware+0xde>
        return -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	e007      	b.n	8003d96 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <mpu_load_firmware+0xf8>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <mpu_load_firmware+0xf8>)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3728      	adds	r7, #40	; 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000004 	.word	0x20000004

08003da4 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003db4:	79fa      	ldrb	r2, [r7, #7]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d101      	bne.n	8003dbe <mpu_set_dmp_state+0x1a>
        return 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e040      	b.n	8003e40 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d027      	beq.n	8003e14 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <mpu_set_dmp_state+0x30>
            return -1;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e035      	b.n	8003e40 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7fe f8ed 	bl	8001fb4 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fe fffa 	bl	8002dd4 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fdb1 	bl	800294c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	7818      	ldrb	r0, [r3, #0]
 8003df4:	f107 030f 	add.w	r3, r7, #15
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2123      	movs	r1, #35	; 0x23
 8003dfc:	f7fe f806 	bl	8001e0c <i2c_write>
        st.chip_cfg.dmp_on = 1;
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7fe f8d3 	bl	8001fb4 <set_int_enable>
        mpu_reset_fifo();
 8003e0e:	f7fe fac9 	bl	80023a4 <mpu_reset_fifo>
 8003e12:	e014      	b.n	8003e3e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fe f8cd 	bl	8001fb4 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003e1c:	7c1b      	ldrb	r3, [r3, #16]
 8003e1e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	7818      	ldrb	r0, [r3, #0]
 8003e26:	f107 030f 	add.w	r3, r7, #15
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2123      	movs	r1, #35	; 0x23
 8003e2e:	f7fd ffed 	bl	8001e0c <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <mpu_set_dmp_state+0xa4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8003e3a:	f7fe fab3 	bl	80023a4 <mpu_reset_fifo>
    }
    return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000004 	.word	0x20000004

08003e4c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e54:	23c8      	movs	r3, #200	; 0xc8
 8003e56:	4904      	ldr	r1, [pc, #16]	; (8003e68 <dmp_load_motion_driver_firmware+0x1c>)
 8003e58:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8003e5c:	f7ff ff24 	bl	8003ca8 <mpu_load_firmware>
 8003e60:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	080110e0 	.word	0x080110e0

08003e6c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003e76:	4a71      	ldr	r2, [pc, #452]	; (800403c <dmp_set_orientation+0x1d0>)
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	8019      	strh	r1, [r3, #0]
 8003e82:	3302      	adds	r3, #2
 8003e84:	0c12      	lsrs	r2, r2, #16
 8003e86:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003e88:	4a6d      	ldr	r2, [pc, #436]	; (8004040 <dmp_set_orientation+0x1d4>)
 8003e8a:	f107 0310 	add.w	r3, r7, #16
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4611      	mov	r1, r2
 8003e92:	8019      	strh	r1, [r3, #0]
 8003e94:	3302      	adds	r3, #2
 8003e96:	0c12      	lsrs	r2, r2, #16
 8003e98:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003e9a:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <dmp_set_orientation+0x1d8>)
 8003e9c:	f107 030c 	add.w	r3, r7, #12
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	8019      	strh	r1, [r3, #0]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	0c12      	lsrs	r2, r2, #16
 8003eaa:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003eac:	4a66      	ldr	r2, [pc, #408]	; (8004048 <dmp_set_orientation+0x1dc>)
 8003eae:	f107 0308 	add.w	r3, r7, #8
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	8019      	strh	r1, [r3, #0]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	0c12      	lsrs	r2, r2, #16
 8003ebc:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	f107 0220 	add.w	r2, r7, #32
 8003ec8:	4413      	add	r3, r2
 8003eca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ece:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	08db      	lsrs	r3, r3, #3
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	f107 0220 	add.w	r2, r7, #32
 8003ede:	4413      	add	r3, r2
 8003ee0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003ee4:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	f107 0220 	add.w	r2, r7, #32
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003efa:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	f107 0220 	add.w	r2, r7, #32
 8003f06:	4413      	add	r3, r2
 8003f08:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003f0c:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	f107 0220 	add.w	r2, r7, #32
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003f22:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	f107 0220 	add.w	r2, r7, #32
 8003f32:	4413      	add	r3, r2
 8003f34:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003f38:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8003f3a:	f107 031c 	add.w	r3, r7, #28
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2103      	movs	r1, #3
 8003f42:	f240 4026 	movw	r0, #1062	; 0x426
 8003f46:	f7ff fe0b 	bl	8003b60 <mpu_write_mem>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <dmp_set_orientation+0xea>
        return -1;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
 8003f54:	e06e      	b.n	8004034 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003f56:	f107 0318 	add.w	r3, r7, #24
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2103      	movs	r1, #3
 8003f5e:	f240 402a 	movw	r0, #1066	; 0x42a
 8003f62:	f7ff fdfd 	bl	8003b60 <mpu_write_mem>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <dmp_set_orientation+0x106>
        return -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	e060      	b.n	8004034 <dmp_set_orientation+0x1c8>

    memcpy(gyro_regs, gyro_sign, 3);
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	f107 020c 	add.w	r2, r7, #12
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	8019      	strh	r1, [r3, #0]
 8003f80:	3302      	adds	r3, #2
 8003f82:	0c12      	lsrs	r2, r2, #16
 8003f84:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003f86:	f107 0318 	add.w	r3, r7, #24
 8003f8a:	f107 0208 	add.w	r2, r7, #8
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	4611      	mov	r1, r2
 8003f92:	8019      	strh	r1, [r3, #0]
 8003f94:	3302      	adds	r3, #2
 8003f96:	0c12      	lsrs	r2, r2, #16
 8003f98:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <dmp_set_orientation+0x14c>
        gyro_regs[0] |= 1;
 8003fa4:	7f3b      	ldrb	r3, [r7, #28]
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003fae:	7e3b      	ldrb	r3, [r7, #24]
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <dmp_set_orientation+0x16a>
        gyro_regs[1] |= 1;
 8003fc2:	7f7b      	ldrb	r3, [r7, #29]
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003fcc:	7e7b      	ldrb	r3, [r7, #25]
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <dmp_set_orientation+0x188>
        gyro_regs[2] |= 1;
 8003fe0:	7fbb      	ldrb	r3, [r7, #30]
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8003fea:	7ebb      	ldrb	r3, [r7, #26]
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2103      	movs	r1, #3
 8003ffc:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8004000:	f7ff fdae 	bl	8003b60 <mpu_write_mem>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <dmp_set_orientation+0x1a4>
        return -1;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	e011      	b.n	8004034 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8004010:	f107 0318 	add.w	r3, r7, #24
 8004014:	461a      	mov	r2, r3
 8004016:	2103      	movs	r1, #3
 8004018:	f240 4031 	movw	r0, #1073	; 0x431
 800401c:	f7ff fda0 	bl	8003b60 <mpu_write_mem>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <dmp_set_orientation+0x1c0>
        return -1;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e003      	b.n	8004034 <dmp_set_orientation+0x1c8>
    dmp.orient = orient;
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <dmp_set_orientation+0x1e0>)
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	8113      	strh	r3, [r2, #8]
    return 0;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	08010ebc 	.word	0x08010ebc
 8004040:	08010ec0 	.word	0x08010ec0
 8004044:	08010ec4 	.word	0x08010ec4
 8004048:	08010ec8 	.word	0x08010ec8
 800404c:	2000023c 	.word	0x2000023c

08004050 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8004058:	4b6e      	ldr	r3, [pc, #440]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 800405a:	891b      	ldrh	r3, [r3, #8]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
    if (dmp.orient & 4)
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 800406c:	891b      	ldrh	r3, [r3, #8]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <dmp_set_gyro_bias+0x2c>
        gyro_bias_body[0] *= -1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	425b      	negs	r3, r3
 800407a:	60fb      	str	r3, [r7, #12]
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800407c:	4b65      	ldr	r3, [pc, #404]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 800407e:	891b      	ldrh	r3, [r3, #8]
 8004080:	08db      	lsrs	r3, r3, #3
 8004082:	b29b      	uxth	r3, r3
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	613b      	str	r3, [r7, #16]
    if (dmp.orient & 0x20)
 8004092:	4b60      	ldr	r3, [pc, #384]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 8004094:	891b      	ldrh	r3, [r3, #8]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <dmp_set_gyro_bias+0x54>
        gyro_bias_body[1] *= -1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	425b      	negs	r3, r3
 80040a2:	613b      	str	r3, [r7, #16]
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80040a4:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 80040a6:	891b      	ldrh	r3, [r3, #8]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	617b      	str	r3, [r7, #20]
    if (dmp.orient & 0x100)
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <dmp_set_gyro_bias+0x1c4>)
 80040bc:	891b      	ldrh	r3, [r3, #8]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <dmp_set_gyro_bias+0x7c>
        gyro_bias_body[2] *= -1;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	425b      	negs	r3, r3
 80040ca:	617b      	str	r3, [r7, #20]
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80040d4:	4950      	ldr	r1, [pc, #320]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 80040d6:	fb01 f003 	mul.w	r0, r1, r3
 80040da:	2100      	movs	r1, #0
 80040dc:	fb01 f102 	mul.w	r1, r1, r2
 80040e0:	4401      	add	r1, r0
 80040e2:	484d      	ldr	r0, [pc, #308]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 80040e4:	fba2 2300 	umull	r2, r3, r2, r0
 80040e8:	4419      	add	r1, r3
 80040ea:	460b      	mov	r3, r1
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0f90      	lsrs	r0, r2, #30
 80040f6:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 80040fa:	1799      	asrs	r1, r3, #30
 80040fc:	4603      	mov	r3, r0
 80040fe:	60fb      	str	r3, [r7, #12]
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	461a      	mov	r2, r3
 8004104:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004108:	4943      	ldr	r1, [pc, #268]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 800410a:	fb01 f003 	mul.w	r0, r1, r3
 800410e:	2100      	movs	r1, #0
 8004110:	fb01 f102 	mul.w	r1, r1, r2
 8004114:	4401      	add	r1, r0
 8004116:	4840      	ldr	r0, [pc, #256]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 8004118:	fba2 2300 	umull	r2, r3, r2, r0
 800411c:	4419      	add	r1, r3
 800411e:	460b      	mov	r3, r1
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0f90      	lsrs	r0, r2, #30
 800412a:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 800412e:	1799      	asrs	r1, r3, #30
 8004130:	4603      	mov	r3, r0
 8004132:	613b      	str	r3, [r7, #16]
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	461a      	mov	r2, r3
 8004138:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800413c:	4936      	ldr	r1, [pc, #216]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 800413e:	fb01 f003 	mul.w	r0, r1, r3
 8004142:	2100      	movs	r1, #0
 8004144:	fb01 f102 	mul.w	r1, r1, r2
 8004148:	4401      	add	r1, r0
 800414a:	4833      	ldr	r0, [pc, #204]	; (8004218 <dmp_set_gyro_bias+0x1c8>)
 800414c:	fba2 2300 	umull	r2, r3, r2, r0
 8004150:	4419      	add	r1, r3
 8004152:	460b      	mov	r3, r1
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	0f90      	lsrs	r0, r2, #30
 800415e:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8004162:	1799      	asrs	r1, r3, #30
 8004164:	4603      	mov	r3, r0
 8004166:	617b      	str	r3, [r7, #20]
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	161b      	asrs	r3, r3, #24
 800416c:	b2db      	uxtb	r3, r3
 800416e:	723b      	strb	r3, [r7, #8]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	141b      	asrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	727b      	strb	r3, [r7, #9]
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	121b      	asrs	r3, r3, #8
 800417c:	b2db      	uxtb	r3, r3
 800417e:	72bb      	strb	r3, [r7, #10]
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	72fb      	strb	r3, [r7, #11]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	461a      	mov	r2, r3
 800418c:	2104      	movs	r1, #4
 800418e:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 8004192:	f7ff fce5 	bl	8003b60 <mpu_write_mem>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <dmp_set_gyro_bias+0x152>
        return -1;
 800419c:	f04f 33ff 	mov.w	r3, #4294967295
 80041a0:	e034      	b.n	800420c <dmp_set_gyro_bias+0x1bc>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	161b      	asrs	r3, r3, #24
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	723b      	strb	r3, [r7, #8]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	141b      	asrs	r3, r3, #16
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	727b      	strb	r3, [r7, #9]
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	121b      	asrs	r3, r3, #8
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	72bb      	strb	r3, [r7, #10]
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	72fb      	strb	r3, [r7, #11]
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	461a      	mov	r2, r3
 80041c6:	2104      	movs	r1, #4
 80041c8:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 80041cc:	f7ff fcc8 	bl	8003b60 <mpu_write_mem>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <dmp_set_gyro_bias+0x18c>
        return -1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	e017      	b.n	800420c <dmp_set_gyro_bias+0x1bc>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	161b      	asrs	r3, r3, #24
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	723b      	strb	r3, [r7, #8]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	141b      	asrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	727b      	strb	r3, [r7, #9]
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	121b      	asrs	r3, r3, #8
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	72bb      	strb	r3, [r7, #10]
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	461a      	mov	r2, r3
 8004200:	2104      	movs	r1, #4
 8004202:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 8004206:	f7ff fcab 	bl	8003b60 <mpu_write_mem>
 800420a:	4603      	mov	r3, r0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000023c 	.word	0x2000023c
 8004218:	02cae309 	.word	0x02cae309

0800421c <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 8004224:	f107 030e 	add.w	r3, r7, #14
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe fc2d 	bl	8002a88 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	b298      	uxth	r0, r3
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	03cb      	lsls	r3, r1, #15
 8004240:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8004244:	03c2      	lsls	r2, r0, #15
 8004246:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    __no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 800424c:	891b      	ldrh	r3, [r3, #8]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61fb      	str	r3, [r7, #28]
    if (dmp.orient & 4)
 800425c:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 800425e:	891b      	ldrh	r3, [r3, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <dmp_set_accel_bias+0x52>
        accel_bias_body[0] *= -1;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	425b      	negs	r3, r3
 800426c:	61fb      	str	r3, [r7, #28]
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 8004270:	891b      	ldrh	r3, [r3, #8]
 8004272:	08db      	lsrs	r3, r3, #3
 8004274:	b29b      	uxth	r3, r3
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	623b      	str	r3, [r7, #32]
    if (dmp.orient & 0x20)
 8004284:	4b52      	ldr	r3, [pc, #328]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 8004286:	891b      	ldrh	r3, [r3, #8]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <dmp_set_accel_bias+0x7a>
        accel_bias_body[1] *= -1;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	425b      	negs	r3, r3
 8004294:	623b      	str	r3, [r7, #32]
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8004296:	4b4e      	ldr	r3, [pc, #312]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 8004298:	891b      	ldrh	r3, [r3, #8]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	b29b      	uxth	r3, r3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 0x100)
 80042ac:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <dmp_set_accel_bias+0x1b4>)
 80042ae:	891b      	ldrh	r3, [r3, #8]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <dmp_set_accel_bias+0xa2>
        accel_bias_body[2] *= -1;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	425b      	negs	r3, r3
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	461a      	mov	r2, r3
 80042c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80042c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c8:	fb03 f001 	mul.w	r0, r3, r1
 80042cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ce:	fb02 f101 	mul.w	r1, r2, r1
 80042d2:	4401      	add	r1, r0
 80042d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d6:	fba0 2302 	umull	r2, r3, r0, r2
 80042da:	4419      	add	r1, r3
 80042dc:	460b      	mov	r3, r1
 80042de:	f04f 0000 	mov.w	r0, #0
 80042e2:	f04f 0100 	mov.w	r1, #0
 80042e6:	0f90      	lsrs	r0, r2, #30
 80042e8:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 80042ec:	1799      	asrs	r1, r3, #30
 80042ee:	4603      	mov	r3, r0
 80042f0:	61fb      	str	r3, [r7, #28]
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	461a      	mov	r2, r3
 80042f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80042fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fc:	fb03 f001 	mul.w	r0, r3, r1
 8004300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004302:	fb02 f101 	mul.w	r1, r2, r1
 8004306:	4401      	add	r1, r0
 8004308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430a:	fba0 2302 	umull	r2, r3, r0, r2
 800430e:	4419      	add	r1, r3
 8004310:	460b      	mov	r3, r1
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0f90      	lsrs	r0, r2, #30
 800431c:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8004320:	1799      	asrs	r1, r3, #30
 8004322:	4603      	mov	r3, r0
 8004324:	623b      	str	r3, [r7, #32]
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	461a      	mov	r2, r3
 800432a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800432e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004330:	fb03 f001 	mul.w	r0, r3, r1
 8004334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004336:	fb02 f101 	mul.w	r1, r2, r1
 800433a:	4401      	add	r1, r0
 800433c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433e:	fba0 2302 	umull	r2, r3, r0, r2
 8004342:	4419      	add	r1, r3
 8004344:	460b      	mov	r3, r1
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	0f90      	lsrs	r0, r2, #30
 8004350:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8004354:	1799      	asrs	r1, r3, #30
 8004356:	4603      	mov	r3, r0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	161b      	asrs	r3, r3, #24
 800435e:	b2db      	uxtb	r3, r3
 8004360:	743b      	strb	r3, [r7, #16]
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	141b      	asrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	747b      	strb	r3, [r7, #17]
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	121b      	asrs	r3, r3, #8
 800436e:	b2db      	uxtb	r3, r3
 8004370:	74bb      	strb	r3, [r7, #18]
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	74fb      	strb	r3, [r7, #19]
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	161b      	asrs	r3, r3, #24
 800437c:	b2db      	uxtb	r3, r3
 800437e:	753b      	strb	r3, [r7, #20]
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	141b      	asrs	r3, r3, #16
 8004384:	b2db      	uxtb	r3, r3
 8004386:	757b      	strb	r3, [r7, #21]
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	121b      	asrs	r3, r3, #8
 800438c:	b2db      	uxtb	r3, r3
 800438e:	75bb      	strb	r3, [r7, #22]
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	75fb      	strb	r3, [r7, #23]
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	161b      	asrs	r3, r3, #24
 800439a:	b2db      	uxtb	r3, r3
 800439c:	763b      	strb	r3, [r7, #24]
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	141b      	asrs	r3, r3, #16
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	767b      	strb	r3, [r7, #25]
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	121b      	asrs	r3, r3, #8
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	76bb      	strb	r3, [r7, #26]
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	76fb      	strb	r3, [r7, #27]
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	461a      	mov	r2, r3
 80043ba:	210c      	movs	r1, #12
 80043bc:	f44f 7025 	mov.w	r0, #660	; 0x294
 80043c0:	f7ff fbce 	bl	8003b60 <mpu_write_mem>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3730      	adds	r7, #48	; 0x30
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000023c 	.word	0x2000023c

080043d4 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <dmp_set_fifo_rate+0x88>)
 80043e0:	f107 0310 	add.w	r3, r7, #16
 80043e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80043e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2bc8      	cmp	r3, #200	; 0xc8
 80043ee:	d902      	bls.n	80043f6 <dmp_set_fifo_rate+0x22>
        return -1;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	e02e      	b.n	8004454 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	22c8      	movs	r2, #200	; 0xc8
 80043fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8004404:	8bfb      	ldrh	r3, [r7, #30]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	b29b      	uxth	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800440e:	8bfb      	ldrh	r3, [r7, #30]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	461a      	mov	r2, r3
 800441a:	2102      	movs	r1, #2
 800441c:	f240 2016 	movw	r0, #534	; 0x216
 8004420:	f7ff fb9e 	bl	8003b60 <mpu_write_mem>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <dmp_set_fifo_rate+0x5c>
        return -1;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e011      	b.n	8004454 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004430:	f107 0310 	add.w	r3, r7, #16
 8004434:	461a      	mov	r2, r3
 8004436:	210c      	movs	r1, #12
 8004438:	f640 20c1 	movw	r0, #2753	; 0xac1
 800443c:	f7ff fb90 	bl	8003b60 <mpu_write_mem>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <dmp_set_fifo_rate+0x78>
        return -1;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	e003      	b.n	8004454 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <dmp_set_fifo_rate+0x8c>)
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	8193      	strh	r3, [r2, #12]
    return 0;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	08010ecc 	.word	0x08010ecc
 8004460:	2000023c 	.word	0x2000023c

08004464 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	460a      	mov	r2, r1
 800446e:	71fb      	strb	r3, [r7, #7]
 8004470:	4613      	mov	r3, r2
 8004472:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <dmp_set_tap_thresh+0x22>
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004484:	d902      	bls.n	800448c <dmp_set_tap_thresh+0x28>
        return -1;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e10b      	b.n	80046a4 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004496:	eddf 6a85 	vldr	s13, [pc, #532]	; 80046ac <dmp_set_tap_thresh+0x248>
 800449a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800449e:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 80044a2:	f107 030b 	add.w	r3, r7, #11
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe f908 	bl	80026bc <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	3b02      	subs	r3, #2
 80044b0:	2b0e      	cmp	r3, #14
 80044b2:	d87d      	bhi.n	80045b0 <dmp_set_tap_thresh+0x14c>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <dmp_set_tap_thresh+0x58>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044f9 	.word	0x080044f9
 80044c0:	080045b1 	.word	0x080045b1
 80044c4:	08004527 	.word	0x08004527
 80044c8:	080045b1 	.word	0x080045b1
 80044cc:	080045b1 	.word	0x080045b1
 80044d0:	080045b1 	.word	0x080045b1
 80044d4:	08004555 	.word	0x08004555
 80044d8:	080045b1 	.word	0x080045b1
 80044dc:	080045b1 	.word	0x080045b1
 80044e0:	080045b1 	.word	0x080045b1
 80044e4:	080045b1 	.word	0x080045b1
 80044e8:	080045b1 	.word	0x080045b1
 80044ec:	080045b1 	.word	0x080045b1
 80044f0:	080045b1 	.word	0x080045b1
 80044f4:	08004583 	.word	0x08004583
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80044f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80044fc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80046b0 <dmp_set_tap_thresh+0x24c>
 8004500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004508:	ee17 3a90 	vmov	r3, s15
 800450c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800450e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004512:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80046b4 <dmp_set_tap_thresh+0x250>
 8004516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800451a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451e:	ee17 3a90 	vmov	r3, s15
 8004522:	82bb      	strh	r3, [r7, #20]
        break;
 8004524:	e047      	b.n	80045b6 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004526:	edd7 7a04 	vldr	s15, [r7, #16]
 800452a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80046b8 <dmp_set_tap_thresh+0x254>
 800452e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004536:	ee17 3a90 	vmov	r3, s15
 800453a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800453c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004540:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80046bc <dmp_set_tap_thresh+0x258>
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454c:	ee17 3a90 	vmov	r3, s15
 8004550:	82bb      	strh	r3, [r7, #20]
        break;
 8004552:	e030      	b.n	80045b6 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8004554:	edd7 7a04 	vldr	s15, [r7, #16]
 8004558:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80046c0 <dmp_set_tap_thresh+0x25c>
 800455c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004564:	ee17 3a90 	vmov	r3, s15
 8004568:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800456a:	edd7 7a04 	vldr	s15, [r7, #16]
 800456e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80046c4 <dmp_set_tap_thresh+0x260>
 8004572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457a:	ee17 3a90 	vmov	r3, s15
 800457e:	82bb      	strh	r3, [r7, #20]
        break;
 8004580:	e019      	b.n	80045b6 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004582:	edd7 7a04 	vldr	s15, [r7, #16]
 8004586:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80046c8 <dmp_set_tap_thresh+0x264>
 800458a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	ee17 3a90 	vmov	r3, s15
 8004596:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004598:	edd7 7a04 	vldr	s15, [r7, #16]
 800459c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80046cc <dmp_set_tap_thresh+0x268>
 80045a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a8:	ee17 3a90 	vmov	r3, s15
 80045ac:	82bb      	strh	r3, [r7, #20]
        break;
 80045ae:	e002      	b.n	80045b6 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 80045b0:	f04f 33ff 	mov.w	r3, #4294967295
 80045b4:	e076      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80045b6:	8afb      	ldrh	r3, [r7, #22]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80045c0:	8afb      	ldrh	r3, [r7, #22]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80045c6:	8abb      	ldrh	r3, [r7, #20]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80045d0:	8abb      	ldrh	r3, [r7, #20]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01c      	beq.n	800461a <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	461a      	mov	r2, r3
 80045e6:	2102      	movs	r1, #2
 80045e8:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80045ec:	f7ff fab8 	bl	8003b60 <mpu_write_mem>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <dmp_set_tap_thresh+0x198>
            return -1;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e053      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	3302      	adds	r3, #2
 8004602:	461a      	mov	r2, r3
 8004604:	2102      	movs	r1, #2
 8004606:	f44f 7092 	mov.w	r0, #292	; 0x124
 800460a:	f7ff faa9 	bl	8003b60 <mpu_write_mem>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <dmp_set_tap_thresh+0x1b6>
            return -1;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	e044      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01c      	beq.n	800465e <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004624:	f107 030c 	add.w	r3, r7, #12
 8004628:	461a      	mov	r2, r3
 800462a:	2102      	movs	r1, #2
 800462c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004630:	f7ff fa96 	bl	8003b60 <mpu_write_mem>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	e031      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	3302      	adds	r3, #2
 8004646:	461a      	mov	r2, r3
 8004648:	2102      	movs	r1, #2
 800464a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800464e:	f7ff fa87 	bl	8003b60 <mpu_write_mem>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <dmp_set_tap_thresh+0x1fa>
            return -1;
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	e022      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01c      	beq.n	80046a2 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	461a      	mov	r2, r3
 800466e:	2102      	movs	r1, #2
 8004670:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8004674:	f7ff fa74 	bl	8003b60 <mpu_write_mem>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <dmp_set_tap_thresh+0x220>
            return -1;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	e00f      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	3302      	adds	r3, #2
 800468a:	461a      	mov	r2, r3
 800468c:	2102      	movs	r1, #2
 800468e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004692:	f7ff fa65 	bl	8003b60 <mpu_write_mem>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <dmp_set_tap_thresh+0x23e>
            return -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	e000      	b.n	80046a4 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	43480000 	.word	0x43480000
 80046b0:	46800000 	.word	0x46800000
 80046b4:	46400000 	.word	0x46400000
 80046b8:	46000000 	.word	0x46000000
 80046bc:	45c00000 	.word	0x45c00000
 80046c0:	45800000 	.word	0x45800000
 80046c4:	45400000 	.word	0x45400000
 80046c8:	45000000 	.word	0x45000000
 80046cc:	44c00000 	.word	0x44c00000

080046d0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	f043 030c 	orr.w	r3, r3, #12
 8004702:	b2db      	uxtb	r3, r3
 8004704:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	f043 0303 	orr.w	r3, r3, #3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800471a:	f107 030f 	add.w	r3, r7, #15
 800471e:	461a      	mov	r2, r3
 8004720:	2101      	movs	r1, #1
 8004722:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8004726:	f7ff fa1b 	bl	8003b60 <mpu_write_mem>
 800472a:	4603      	mov	r3, r0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <dmp_set_tap_count+0x16>
        min_taps = 1;
 8004744:	2301      	movs	r3, #1
 8004746:	71fb      	strb	r3, [r7, #7]
 8004748:	e004      	b.n	8004754 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	2b04      	cmp	r3, #4
 800474e:	d901      	bls.n	8004754 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8004750:	2304      	movs	r3, #4
 8004752:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	3b01      	subs	r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800475c:	f107 030f 	add.w	r3, r7, #15
 8004760:	461a      	mov	r2, r3
 8004762:	2101      	movs	r1, #1
 8004764:	f240 104f 	movw	r0, #335	; 0x14f
 8004768:	f7ff f9fa 	bl	8003b60 <mpu_write_mem>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <dmp_set_tap_time+0x40>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800478e:	89fb      	ldrh	r3, [r7, #14]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	b29b      	uxth	r3, r3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	461a      	mov	r2, r3
 80047a4:	2102      	movs	r1, #2
 80047a6:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 80047aa:	f7ff f9d9 	bl	8003b60 <mpu_write_mem>
 80047ae:	4603      	mov	r3, r0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	cccccccd 	.word	0xcccccccd

080047bc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <dmp_set_tap_time_multi+0x40>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80047e2:	f107 030c 	add.w	r3, r7, #12
 80047e6:	461a      	mov	r2, r3
 80047e8:	2102      	movs	r1, #2
 80047ea:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80047ee:	f7ff f9b7 	bl	8003b60 <mpu_write_mem>
 80047f2:	4603      	mov	r3, r0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	cccccccd 	.word	0xcccccccd

08004800 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <dmp_set_shake_reject_thresh+0x5c>)
 8004810:	fb82 1203 	smull	r1, r2, r2, r3
 8004814:	1192      	asrs	r2, r2, #6
 8004816:	17db      	asrs	r3, r3, #31
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	161b      	asrs	r3, r3, #24
 8004826:	b2db      	uxtb	r3, r3
 8004828:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	141b      	asrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	121b      	asrs	r3, r3, #8
 8004836:	b2db      	uxtb	r3, r3
 8004838:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	461a      	mov	r2, r3
 8004846:	2104      	movs	r1, #4
 8004848:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800484c:	f7ff f988 	bl	8003b60 <mpu_write_mem>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	10624dd3 	.word	0x10624dd3

08004860 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <dmp_set_shake_reject_time+0x40>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	b29b      	uxth	r3, r3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8004886:	f107 030c 	add.w	r3, r7, #12
 800488a:	461a      	mov	r2, r3
 800488c:	2102      	movs	r1, #2
 800488e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8004892:	f7ff f965 	bl	8003b60 <mpu_write_mem>
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	cccccccd 	.word	0xcccccccd

080048a4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <dmp_set_shake_reject_timeout+0x40>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	b29b      	uxth	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80048ca:	f107 030c 	add.w	r3, r7, #12
 80048ce:	461a      	mov	r2, r3
 80048d0:	2102      	movs	r1, #2
 80048d2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80048d6:	f7ff f943 	bl	8003b60 <mpu_write_mem>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	cccccccd 	.word	0xcccccccd

080048e8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80048f2:	2302      	movs	r3, #2
 80048f4:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80048f6:	23ca      	movs	r3, #202	; 0xca
 80048f8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80048fa:	23e3      	movs	r3, #227	; 0xe3
 80048fc:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80048fe:	2309      	movs	r3, #9
 8004900:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	461a      	mov	r2, r3
 8004908:	2104      	movs	r1, #4
 800490a:	2068      	movs	r0, #104	; 0x68
 800490c:	f7ff f928 	bl	8003b60 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004910:	23a3      	movs	r3, #163	; 0xa3
 8004912:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800491e:	23c0      	movs	r3, #192	; 0xc0
 8004920:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8004922:	23c8      	movs	r3, #200	; 0xc8
 8004924:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8004926:	23c2      	movs	r3, #194	; 0xc2
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e005      	b.n	8004938 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800492c:	23a3      	movs	r3, #163	; 0xa3
 800492e:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8004930:	23a3      	movs	r3, #163	; 0xa3
 8004932:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8004934:	23a3      	movs	r3, #163	; 0xa3
 8004936:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800493e:	2b00      	cmp	r3, #0
 8004940:	d006      	beq.n	8004950 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8004942:	23c4      	movs	r3, #196	; 0xc4
 8004944:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8004946:	23cc      	movs	r3, #204	; 0xcc
 8004948:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800494a:	23c6      	movs	r3, #198	; 0xc6
 800494c:	74bb      	strb	r3, [r7, #18]
 800494e:	e005      	b.n	800495c <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8004950:	23a3      	movs	r3, #163	; 0xa3
 8004952:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8004954:	23a3      	movs	r3, #163	; 0xa3
 8004956:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8004958:	23a3      	movs	r3, #163	; 0xa3
 800495a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800495c:	23a3      	movs	r3, #163	; 0xa3
 800495e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8004960:	23a3      	movs	r3, #163	; 0xa3
 8004962:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8004964:	23a3      	movs	r3, #163	; 0xa3
 8004966:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8004968:	f107 030c 	add.w	r3, r7, #12
 800496c:	461a      	mov	r2, r3
 800496e:	210a      	movs	r1, #10
 8004970:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8004974:	f7ff f8f4 	bl	8003b60 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8004982:	2320      	movs	r3, #32
 8004984:	733b      	strb	r3, [r7, #12]
 8004986:	e001      	b.n	800498c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004988:	23d8      	movs	r3, #216	; 0xd8
 800498a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	461a      	mov	r2, r3
 8004992:	2101      	movs	r1, #1
 8004994:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004998:	f7ff f8e2 	bl	8003b60 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 80049a6:	2001      	movs	r0, #1
 80049a8:	f000 f8c6 	bl	8004b38 <dmp_enable_gyro_cal>
 80049ac:	e002      	b.n	80049b4 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 80049ae:	2000      	movs	r0, #0
 80049b0:	f000 f8c2 	bl	8004b38 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 80049c8:	23b2      	movs	r3, #178	; 0xb2
 80049ca:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 80049cc:	238b      	movs	r3, #139	; 0x8b
 80049ce:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 80049d0:	23b6      	movs	r3, #182	; 0xb6
 80049d2:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 80049d4:	239b      	movs	r3, #155	; 0x9b
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e007      	b.n	80049ea <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80049da:	23b0      	movs	r3, #176	; 0xb0
 80049dc:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80049e2:	23b4      	movs	r3, #180	; 0xb4
 80049e4:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80049e6:	2390      	movs	r3, #144	; 0x90
 80049e8:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80049ea:	f107 030c 	add.w	r3, r7, #12
 80049ee:	461a      	mov	r2, r3
 80049f0:	2104      	movs	r1, #4
 80049f2:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80049f6:	f7ff f8b3 	bl	8003b60 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d025      	beq.n	8004a50 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004a04:	23f8      	movs	r3, #248	; 0xf8
 8004a06:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2101      	movs	r1, #1
 8004a10:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004a14:	f7ff f8a4 	bl	8003b60 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004a18:	21fa      	movs	r1, #250	; 0xfa
 8004a1a:	2007      	movs	r0, #7
 8004a1c:	f7ff fd22 	bl	8004464 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004a20:	2007      	movs	r0, #7
 8004a22:	f7ff fe55 	bl	80046d0 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8004a26:	2001      	movs	r0, #1
 8004a28:	f7ff fe84 	bl	8004734 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004a2c:	2064      	movs	r0, #100	; 0x64
 8004a2e:	f7ff fea3 	bl	8004778 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8004a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a36:	f7ff fec1 	bl	80047bc <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004a3a:	21c8      	movs	r1, #200	; 0xc8
 8004a3c:	483c      	ldr	r0, [pc, #240]	; (8004b30 <dmp_enable_feature+0x248>)
 8004a3e:	f7ff fedf 	bl	8004800 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004a42:	2028      	movs	r0, #40	; 0x28
 8004a44:	f7ff ff0c 	bl	8004860 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7ff ff2b 	bl	80048a4 <dmp_set_shake_reject_timeout>
 8004a4e:	e009      	b.n	8004a64 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004a50:	23d8      	movs	r3, #216	; 0xd8
 8004a52:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004a60:	f7ff f87e 	bl	8003b60 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8004a6e:	23d9      	movs	r3, #217	; 0xd9
 8004a70:	733b      	strb	r3, [r7, #12]
 8004a72:	e001      	b.n	8004a78 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8004a74:	23d8      	movs	r3, #216	; 0xd8
 8004a76:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2101      	movs	r1, #1
 8004a80:	f240 703d 	movw	r0, #1853	; 0x73d
 8004a84:	f7ff f86c 	bl	8003b60 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f000 f880 	bl	8004b98 <dmp_enable_lp_quat>
 8004a98:	e002      	b.n	8004aa0 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f000 f87c 	bl	8004b98 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f000 f89b 	bl	8004be6 <dmp_enable_6x_lp_quat>
 8004ab0:	e002      	b.n	8004ab8 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f000 f897 	bl	8004be6 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	f043 0308 	orr.w	r3, r3, #8
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004ac2:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004ac4:	f7fd fc6e 	bl	80023a4 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004ada:	7b9b      	ldrb	r3, [r3, #14]
 8004adc:	3306      	adds	r3, #6
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004ae2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004af0:	7b9b      	ldrb	r3, [r3, #14]
 8004af2:	3306      	adds	r3, #6
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004af8:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	f003 0314 	and.w	r3, r3, #20
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004b06:	7b9b      	ldrb	r3, [r3, #14]
 8004b08:	3310      	adds	r3, #16
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004b0e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004b1c:	7b9b      	ldrb	r3, [r3, #14]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <dmp_enable_feature+0x24c>)
 8004b24:	739a      	strb	r2, [r3, #14]

    return 0;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	02cae309 	.word	0x02cae309
 8004b34:	2000023c 	.word	0x2000023c

08004b38 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00f      	beq.n	8004b68 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <dmp_enable_gyro_cal+0x58>)
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b50:	c303      	stmia	r3!, {r0, r1}
 8004b52:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2109      	movs	r1, #9
 8004b5c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004b60:	f7fe fffe 	bl	8003b60 <mpu_write_mem>
 8004b64:	4603      	mov	r3, r0
 8004b66:	e00e      	b.n	8004b86 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <dmp_enable_gyro_cal+0x5c>)
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b70:	c303      	stmia	r3!, {r0, r1}
 8004b72:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2109      	movs	r1, #9
 8004b7c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004b80:	f7fe ffee 	bl	8003b60 <mpu_write_mem>
 8004b84:	4603      	mov	r3, r0
    }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	08010ed8 	.word	0x08010ed8
 8004b94:	08010ee4 	.word	0x08010ee4

08004b98 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8004ba8:	23c0      	movs	r3, #192	; 0xc0
 8004baa:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004bac:	23c2      	movs	r3, #194	; 0xc2
 8004bae:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004bb0:	23c4      	movs	r3, #196	; 0xc4
 8004bb2:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004bb4:	23c6      	movs	r3, #198	; 0xc6
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e006      	b.n	8004bc8 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8004bba:	f107 030c 	add.w	r3, r7, #12
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	218b      	movs	r1, #139	; 0x8b
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f007 fcb4 	bl	800c530 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2104      	movs	r1, #4
 8004bd0:	f640 2098 	movw	r0, #2712	; 0xa98
 8004bd4:	f7fe ffc4 	bl	8003b60 <mpu_write_mem>

    return mpu_reset_fifo();
 8004bd8:	f7fd fbe4 	bl	80023a4 <mpu_reset_fifo>
 8004bdc:	4603      	mov	r3, r0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4603      	mov	r3, r0
 8004bee:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8004bf6:	2320      	movs	r3, #32
 8004bf8:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8004bfa:	2328      	movs	r3, #40	; 0x28
 8004bfc:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004bfe:	2330      	movs	r3, #48	; 0x30
 8004c00:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004c02:	2338      	movs	r3, #56	; 0x38
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e006      	b.n	8004c16 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	21a3      	movs	r1, #163	; 0xa3
 8004c10:	4618      	mov	r0, r3
 8004c12:	f007 fc8d 	bl	800c530 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8004c16:	f107 030c 	add.w	r3, r7, #12
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	f640 209e 	movw	r0, #2718	; 0xa9e
 8004c22:	f7fe ff9d 	bl	8003b60 <mpu_write_mem>

    return mpu_reset_fifo();
 8004c26:	f7fd fbbd 	bl	80023a4 <mpu_reset_fifo>
 8004c2a:	4603      	mov	r3, r0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3303      	adds	r3, #3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c46:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3303      	adds	r3, #3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c52:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3301      	adds	r3, #1
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8004c62:	7bbb      	ldrb	r3, [r7, #14]
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3301      	adds	r3, #1
 8004c72:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8004c74:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <decode_gesture+0x84>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <decode_gesture+0x84>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	7b39      	ldrb	r1, [r7, #12]
 8004c82:	7b7a      	ldrb	r2, [r7, #13]
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <decode_gesture+0x84>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <decode_gesture+0x84>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	0992      	lsrs	r2, r2, #6
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
    }

    return 0;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000023c 	.word	0x2000023c

08004cbc <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b092      	sub	sp, #72	; 0x48
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8004cd6:	4bb5      	ldr	r3, [pc, #724]	; (8004fac <dmp_read_fifo+0x2f0>)
 8004cd8:	7b9b      	ldrb	r3, [r3, #14]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f107 0120 	add.w	r1, r7, #32
 8004ce0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fff8 	bl	8002cd8 <mpu_read_fifo_stream>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <dmp_read_fifo+0x38>
        return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf2:	e156      	b.n	8004fa2 <dmp_read_fifo+0x2e6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004cf4:	4bad      	ldr	r3, [pc, #692]	; (8004fac <dmp_read_fifo+0x2f0>)
 8004cf6:	895b      	ldrh	r3, [r3, #10]
 8004cf8:	f003 0314 	and.w	r3, r3, #20
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 808a 	beq.w	8004e16 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004d02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d06:	061a      	lsls	r2, r3, #24
 8004d08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004d10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004d14:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004d16:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004d18:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004d1c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004d22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d26:	061a      	lsls	r2, r3, #24
 8004d28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d34:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004d36:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d3c:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004d42:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004d44:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d4a:	061a      	lsls	r2, r3, #24
 8004d4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004d54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d58:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004d5a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d60:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004d66:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004d68:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d6e:	061a      	lsls	r2, r3, #24
 8004d70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004d78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d7c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004d7e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d84:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004d8a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004d8c:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004d8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d92:	3310      	adds	r3, #16
 8004d94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	141b      	asrs	r3, r3, #16
 8004d9e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	141b      	asrs	r3, r3, #16
 8004da8:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3308      	adds	r3, #8
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	141b      	asrs	r3, r3, #16
 8004db2:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	330c      	adds	r3, #12
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	141b      	asrs	r3, r3, #16
 8004dbc:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	fb02 f203 	mul.w	r2, r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	69b9      	ldr	r1, [r7, #24]
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004dd8:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	69f9      	ldr	r1, [r7, #28]
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004de2:	4413      	add	r3, r2
 8004de4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dec:	db03      	blt.n	8004df6 <dmp_read_fifo+0x13a>
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df0:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8004df4:	dd07      	ble.n	8004e06 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8004df6:	f7fd fad5 	bl	80023a4 <mpu_reset_fifo>
            sensors[0] = 0;
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	801a      	strh	r2, [r3, #0]
            return -1;
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
 8004e04:	e0cd      	b.n	8004fa2 <dmp_read_fifo+0x2e6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004e16:	4b65      	ldr	r3, [pc, #404]	; (8004fac <dmp_read_fifo+0x2f0>)
 8004e18:	895b      	ldrh	r3, [r3, #10]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d052      	beq.n	8004ec8 <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004e3e:	440b      	add	r3, r1
 8004e40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e44:	b21b      	sxth	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b21a      	sxth	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e52:	3302      	adds	r3, #2
 8004e54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e58:	4413      	add	r3, r2
 8004e5a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	b219      	sxth	r1, r3
 8004e62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e66:	3303      	adds	r3, #3
 8004e68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e72:	b21a      	sxth	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	3302      	adds	r3, #2
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	b212      	sxth	r2, r2
 8004e7c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004e7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e82:	3304      	adds	r3, #4
 8004e84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e88:	4413      	add	r3, r2
 8004e8a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	b219      	sxth	r1, r3
 8004e92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e96:	3305      	adds	r3, #5
 8004e98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ea2:	b21a      	sxth	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	b212      	sxth	r2, r2
 8004eac:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004eb2:	3306      	adds	r3, #6
 8004eb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ebe:	f043 0308 	orr.w	r3, r3, #8
 8004ec2:	b21a      	sxth	r2, r3
 8004ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec6:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004ec8:	4b38      	ldr	r3, [pc, #224]	; (8004fac <dmp_read_fifo+0x2f0>)
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d052      	beq.n	8004f7a <dmp_read_fifo+0x2be>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004edc:	4413      	add	r3, r2
 8004ede:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	b21a      	sxth	r2, r3
 8004ee6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004eea:	3301      	adds	r3, #1
 8004eec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004ef0:	440b      	add	r3, r1
 8004ef2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b21a      	sxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004f00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f04:	3302      	adds	r3, #2
 8004f06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	b219      	sxth	r1, r3
 8004f14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f18:	3303      	adds	r3, #3
 8004f1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f1e:	4413      	add	r3, r2
 8004f20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f24:	b21a      	sxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	b212      	sxth	r2, r2
 8004f2e:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8004f30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f34:	3304      	adds	r3, #4
 8004f36:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	b219      	sxth	r1, r3
 8004f44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f48:	3305      	adds	r3, #5
 8004f4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f4e:	4413      	add	r3, r2
 8004f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f54:	b21a      	sxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	b212      	sxth	r2, r2
 8004f5e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f64:	3306      	adds	r3, #6
 8004f66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f70:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f78:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <dmp_read_fifo+0x2f0>)
 8004f7c:	895b      	ldrh	r3, [r3, #10]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 8004f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f8a:	f107 0220 	add.w	r2, r7, #32
 8004f8e:	4413      	add	r3, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe4f 	bl	8004c34 <decode_gesture>

    get_ms(timestamp);
 8004f96:	f000 fbc9 	bl	800572c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	601a      	str	r2, [r3, #0]
    return 0;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3748      	adds	r7, #72	; 0x48
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000023c 	.word	0x2000023c

08004fb0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb4:	f3bf 8f4f 	dsb	sy
}
 8004fb8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <__NVIC_SystemReset+0x24>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004fc2:	4904      	ldr	r1, [pc, #16]	; (8004fd4 <__NVIC_SystemReset+0x24>)
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <__NVIC_SystemReset+0x28>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fca:	f3bf 8f4f 	dsb	sy
}
 8004fce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <__NVIC_SystemReset+0x20>
 8004fd4:	e000ed00 	.word	0xe000ed00
 8004fd8:	05fa0004 	.word	0x05fa0004

08004fdc <inv_row_2_scale>:
short gyro[3], accel[3], sensors;
float Pitch,Roll,Yaw;
float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
static signed char gyro_orientation[9] = { -1, 0, 0, 0, -1, 0, 0, 0, 1 };

static unsigned short inv_row_2_scale(const signed char *row) {
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  unsigned short b;

  if (row[0] > 0)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd02      	ble.n	8004ff4 <inv_row_2_scale+0x18>
    b = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	81fb      	strh	r3, [r7, #14]
 8004ff2:	e02d      	b.n	8005050 <inv_row_2_scale+0x74>
  else if (row[0] < 0)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da02      	bge.n	8005004 <inv_row_2_scale+0x28>
    b = 4;
 8004ffe:	2304      	movs	r3, #4
 8005000:	81fb      	strh	r3, [r7, #14]
 8005002:	e025      	b.n	8005050 <inv_row_2_scale+0x74>
  else if (row[1] > 0)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	f993 3000 	ldrsb.w	r3, [r3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	dd02      	ble.n	8005016 <inv_row_2_scale+0x3a>
    b = 1;
 8005010:	2301      	movs	r3, #1
 8005012:	81fb      	strh	r3, [r7, #14]
 8005014:	e01c      	b.n	8005050 <inv_row_2_scale+0x74>
  else if (row[1] < 0)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3301      	adds	r3, #1
 800501a:	f993 3000 	ldrsb.w	r3, [r3]
 800501e:	2b00      	cmp	r3, #0
 8005020:	da02      	bge.n	8005028 <inv_row_2_scale+0x4c>
    b = 5;
 8005022:	2305      	movs	r3, #5
 8005024:	81fb      	strh	r3, [r7, #14]
 8005026:	e013      	b.n	8005050 <inv_row_2_scale+0x74>
  else if (row[2] > 0)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3302      	adds	r3, #2
 800502c:	f993 3000 	ldrsb.w	r3, [r3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dd02      	ble.n	800503a <inv_row_2_scale+0x5e>
    b = 2;
 8005034:	2302      	movs	r3, #2
 8005036:	81fb      	strh	r3, [r7, #14]
 8005038:	e00a      	b.n	8005050 <inv_row_2_scale+0x74>
  else if (row[2] < 0)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3302      	adds	r3, #2
 800503e:	f993 3000 	ldrsb.w	r3, [r3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da02      	bge.n	800504c <inv_row_2_scale+0x70>
    b = 6;
 8005046:	2306      	movs	r3, #6
 8005048:	81fb      	strh	r3, [r7, #14]
 800504a:	e001      	b.n	8005050 <inv_row_2_scale+0x74>
  else
    b = 7;      // error
 800504c:	2307      	movs	r3, #7
 800504e:	81fb      	strh	r3, [r7, #14]
  return b;
 8005050:	89fb      	ldrh	r3, [r7, #14]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  unsigned short scalar;
  scalar = inv_row_2_scale(mtx);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffb8 	bl	8004fdc <inv_row_2_scale>
 800506c:	4603      	mov	r3, r0
 800506e:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 3) << 3;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3303      	adds	r3, #3
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ffb1 	bl	8004fdc <inv_row_2_scale>
 800507a:	4603      	mov	r3, r0
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	b21a      	sxth	r2, r3
 8005080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005084:	4313      	orrs	r3, r2
 8005086:	b21b      	sxth	r3, r3
 8005088:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 6) << 6;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3306      	adds	r3, #6
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffa4 	bl	8004fdc <inv_row_2_scale>
 8005094:	4603      	mov	r3, r0
 8005096:	019b      	lsls	r3, r3, #6
 8005098:	b21a      	sxth	r2, r3
 800509a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800509e:	4313      	orrs	r3, r2
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	81fb      	strh	r3, [r7, #14]

  return scalar;
 80050a4:	89fb      	ldrh	r3, [r7, #14]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <run_self_test>:

static void run_self_test(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
  int result;
  long gyro[3], accel[3];

  result = mpu_run_self_test(gyro, accel);
 80050b6:	f107 020c 	add.w	r2, r7, #12
 80050ba:	f107 0318 	add.w	r3, r7, #24
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fc71 	bl	80039a8 <mpu_run_self_test>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24
  if (result == 0x7) {
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	d14f      	bne.n	800516e <run_self_test+0xbe>
    /* Test passed. We can trust the gyro data here, so let's push it down
     * to the DMP.
     */
    float sens;
    unsigned short accel_sens;
    mpu_get_gyro_sens(&sens);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fca0 	bl	8002a18 <mpu_get_gyro_sens>
    gyro[0] = (long) (gyro[0] * sens);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80050e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ee:	ee17 3a90 	vmov	r3, s15
 80050f2:	61bb      	str	r3, [r7, #24]
    gyro[1] = (long) (gyro[1] * sens);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800510a:	ee17 3a90 	vmov	r3, s15
 800510e:	61fb      	str	r3, [r7, #28]
    gyro[2] = (long) (gyro[2] * sens);
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511a:	edd7 7a02 	vldr	s15, [r7, #8]
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005126:	ee17 3a90 	vmov	r3, s15
 800512a:	623b      	str	r3, [r7, #32]
    dmp_set_gyro_bias(gyro);
 800512c:	f107 0318 	add.w	r3, r7, #24
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe ff8d 	bl	8004050 <dmp_set_gyro_bias>
    mpu_get_accel_sens(&accel_sens);
 8005136:	1dbb      	adds	r3, r7, #6
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd fca5 	bl	8002a88 <mpu_get_accel_sens>
    accel[0] *= accel_sens;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	60fb      	str	r3, [r7, #12]
    accel[1] *= accel_sens;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
    accel[2] *= accel_sens;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	617b      	str	r3, [r7, #20]
    dmp_set_accel_bias(accel);
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f85b 	bl	800421c <dmp_set_accel_bias>
    log_i("setting bias succesfully ......\r\n");
 8005166:	4904      	ldr	r1, [pc, #16]	; (8005178 <run_self_test+0xc8>)
 8005168:	4804      	ldr	r0, [pc, #16]	; (800517c <run_self_test+0xcc>)
 800516a:	f008 f863 	bl	800d234 <iprintf>
  }
}
 800516e:	bf00      	nop
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	08010f08 	.word	0x08010f08
 800517c:	08010f2c 	.word	0x08010f2c

08005180 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
 *******************************************************************************/
void MPU6050_setClockSource(uint8_t source) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af02      	add	r7, sp, #8
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT,
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2303      	movs	r3, #3
 8005190:	2202      	movs	r2, #2
 8005192:	216b      	movs	r1, #107	; 0x6b
 8005194:	2068      	movs	r0, #104	; 0x68
 8005196:	f7fc feba 	bl	8001f0e <IICwriteBits>
  MPU6050_PWR1_CLKSEL_LENGTH, source);

}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af02      	add	r7, sp, #8
 80051a8:	4603      	mov	r3, r0
 80051aa:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT,
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	2302      	movs	r3, #2
 80051b2:	2204      	movs	r2, #4
 80051b4:	211b      	movs	r1, #27
 80051b6:	2068      	movs	r0, #104	; 0x68
 80051b8:	f7fc fea9 	bl	8001f0e <IICwriteBits>
  MPU6050_GCONFIG_FS_SEL_LENGTH, range);
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <MPU6050_setFullScaleAccelRange>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setFullScaleAccelRange(uint8_t range)
 *功　　能:	    设置  MPU6050 加速度计的最大量程
 *******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT,
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2302      	movs	r3, #2
 80051d4:	2204      	movs	r2, #4
 80051d6:	211c      	movs	r1, #28
 80051d8:	2068      	movs	r0, #104	; 0x68
 80051da:	f7fc fe98 	bl	8001f0e <IICwriteBits>
  MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <MPU6050_setSleepEnabled>:
 *函数原型:		void MPU6050_setSleepEnabled(uint8_t enabled)
 *功　　能:	    设置  MPU6050 是否进入睡眠模式
 enabled =1   睡觉
 enabled =0   工作
 *******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	2206      	movs	r2, #6
 80051f4:	216b      	movs	r1, #107	; 0x6b
 80051f6:	2068      	movs	r0, #104	; 0x68
 80051f8:	f7fc fe4c 	bl	8001e94 <IICwriteBit>
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <MPU6050_getDeviceID>:

/**************************实现函数********************************************
 *函数原型:		uint8_t MPU6050_getDeviceID(void)
 *功　　能:	    读取  MPU6050 WHO_AM_I 标识	 将返回 0x68
 *******************************************************************************/
uint8_t MPU6050_getDeviceID(void) {
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  memset(buffer,0,sizeof(buffer));
 8005208:	220e      	movs	r2, #14
 800520a:	2100      	movs	r1, #0
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <MPU6050_getDeviceID+0x24>)
 800520e:	f007 f98f 	bl	800c530 <memset>
  i2c_read(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <MPU6050_getDeviceID+0x24>)
 8005214:	2201      	movs	r2, #1
 8005216:	2175      	movs	r1, #117	; 0x75
 8005218:	2068      	movs	r0, #104	; 0x68
 800521a:	f7fc fe19 	bl	8001e50 <i2c_read>
  return buffer[0];
 800521e:	4b02      	ldr	r3, [pc, #8]	; (8005228 <MPU6050_getDeviceID+0x24>)
 8005220:	781b      	ldrb	r3, [r3, #0]
}
 8005222:	4618      	mov	r0, r3
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000538 	.word	0x20000538

0800522c <MPU6050_setI2CMasterModeEnabled>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
 *功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
 *******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT,
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	2205      	movs	r2, #5
 800523a:	216a      	movs	r1, #106	; 0x6a
 800523c:	2068      	movs	r0, #104	; 0x68
 800523e:	f7fc fe29 	bl	8001e94 <IICwriteBit>
      enabled);
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <MPU6050_setI2CBypassEnabled>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
 *功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
 *******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	4603      	mov	r3, r0
 8005252:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT,
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2201      	movs	r2, #1
 8005258:	2137      	movs	r1, #55	; 0x37
 800525a:	2068      	movs	r0, #104	; 0x68
 800525c:	f7fc fe1a 	bl	8001e94 <IICwriteBit>
      enabled);
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <MPU6050_initialize>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_initialize(void)
 *功　　能:	    初始化 	MPU6050 以进入可用状态。
 *******************************************************************************/
void MPU6050_initialize(void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  MPU6050_setClockSource(MPU6050_CLOCK_PLL_YGYRO); //设置时钟
 800526c:	2002      	movs	r0, #2
 800526e:	f7ff ff87 	bl	8005180 <MPU6050_setClockSource>
  MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250); //陀螺仪最大量程 +-2000度每秒
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff ff95 	bl	80051a2 <MPU6050_setFullScaleGyroRange>
  MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_4);	//加速度度最大量程 +-16G
 8005278:	2001      	movs	r0, #1
 800527a:	f7ff ffa3 	bl	80051c4 <MPU6050_setFullScaleAccelRange>
  MPU6050_setSleepEnabled(0); //进入工作状态
 800527e:	2000      	movs	r0, #0
 8005280:	f7ff ffb1 	bl	80051e6 <MPU6050_setSleepEnabled>
  MPU6050_setI2CMasterModeEnabled(0);	 //不让MPU6050 控制AUXI2C
 8005284:	2000      	movs	r0, #0
 8005286:	f7ff ffd1 	bl	800522c <MPU6050_setI2CMasterModeEnabled>
  MPU6050_setI2CBypassEnabled(0);	//主控制器的I2C与	MPU6050的AUXI2C	直通。控制器可以直接访问HMC5883L
 800528a:	2000      	movs	r0, #0
 800528c:	f7ff ffdd 	bl	800524a <MPU6050_setI2CBypassEnabled>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}

08005294 <DMP_Init>:
 函数功能：MPU6050内置DMP的初始化
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void DMP_Init(void) {
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  if (MPU6050_getDeviceID() != 0x68)
 8005298:	f7ff ffb4 	bl	8005204 <MPU6050_getDeviceID>
 800529c:	4603      	mov	r3, r0
 800529e:	2b68      	cmp	r3, #104	; 0x68
 80052a0:	d001      	beq.n	80052a6 <DMP_Init+0x12>
    NVIC_SystemReset();
 80052a2:	f7ff fe85 	bl	8004fb0 <__NVIC_SystemReset>
  if (mpu_init(NULL) == 0) {
 80052a6:	2000      	movs	r0, #0
 80052a8:	f7fc fede 	bl	8002068 <mpu_init>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d155      	bne.n	800535e <DMP_Init+0xca>
    if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL) == 0)
 80052b2:	2078      	movs	r0, #120	; 0x78
 80052b4:	f7fd fc8a 	bl	8002bcc <mpu_set_sensors>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <DMP_Init+0x32>
      log_i("mpu_set_sensor complete ......\r\n");
 80052be:	4929      	ldr	r1, [pc, #164]	; (8005364 <DMP_Init+0xd0>)
 80052c0:	4829      	ldr	r0, [pc, #164]	; (8005368 <DMP_Init+0xd4>)
 80052c2:	f007 ffb7 	bl	800d234 <iprintf>

    if (mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL) == 0)
 80052c6:	2078      	movs	r0, #120	; 0x78
 80052c8:	f7fd fc2e 	bl	8002b28 <mpu_configure_fifo>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <DMP_Init+0x46>
      log_i("mpu_configure_fifo complete ......\r\n");
 80052d2:	4926      	ldr	r1, [pc, #152]	; (800536c <DMP_Init+0xd8>)
 80052d4:	4824      	ldr	r0, [pc, #144]	; (8005368 <DMP_Init+0xd4>)
 80052d6:	f007 ffad 	bl	800d234 <iprintf>

    if (mpu_set_sample_rate(DEFAULT_MPU_HZ) == 0)
 80052da:	20c8      	movs	r0, #200	; 0xc8
 80052dc:	f7fd fb36 	bl	800294c <mpu_set_sample_rate>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <DMP_Init+0x5a>
      log_i("mpu_set_sample_rate complete ......\r\n");
 80052e6:	4922      	ldr	r1, [pc, #136]	; (8005370 <DMP_Init+0xdc>)
 80052e8:	481f      	ldr	r0, [pc, #124]	; (8005368 <DMP_Init+0xd4>)
 80052ea:	f007 ffa3 	bl	800d234 <iprintf>

    if (dmp_load_motion_driver_firmware() == 0)
 80052ee:	f7fe fdad 	bl	8003e4c <dmp_load_motion_driver_firmware>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <DMP_Init+0x6c>
      log_i("dmp_load_motion_driver_firmware complete ......\r\n");
 80052f8:	491e      	ldr	r1, [pc, #120]	; (8005374 <DMP_Init+0xe0>)
 80052fa:	481b      	ldr	r0, [pc, #108]	; (8005368 <DMP_Init+0xd4>)
 80052fc:	f007 ff9a 	bl	800d234 <iprintf>

    if (dmp_set_orientation(
 8005300:	481d      	ldr	r0, [pc, #116]	; (8005378 <DMP_Init+0xe4>)
 8005302:	f7ff feac 	bl	800505e <inv_orientation_matrix_to_scalar>
 8005306:	4603      	mov	r3, r0
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fdaf 	bl	8003e6c <dmp_set_orientation>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <DMP_Init+0x88>
        inv_orientation_matrix_to_scalar(gyro_orientation)) == 0)
      log_i("dmp_set_orientation complete ......\r\n");
 8005314:	4919      	ldr	r1, [pc, #100]	; (800537c <DMP_Init+0xe8>)
 8005316:	4814      	ldr	r0, [pc, #80]	; (8005368 <DMP_Init+0xd4>)
 8005318:	f007 ff8c 	bl	800d234 <iprintf>

    if (dmp_enable_feature(
 800531c:	f240 1073 	movw	r0, #371	; 0x173
 8005320:	f7ff fae2 	bl	80048e8 <dmp_enable_feature>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <DMP_Init+0x9e>
        DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL
            | DMP_FEATURE_SEND_CAL_GYRO |
            DMP_FEATURE_GYRO_CAL) == 0)
      log_i("dmp_enable_feature complete ......\r\n");
 800532a:	4915      	ldr	r1, [pc, #84]	; (8005380 <DMP_Init+0xec>)
 800532c:	480e      	ldr	r0, [pc, #56]	; (8005368 <DMP_Init+0xd4>)
 800532e:	f007 ff81 	bl	800d234 <iprintf>

    if (dmp_set_fifo_rate(100) == 0) //DEFAULT_MPU_HZ
 8005332:	2064      	movs	r0, #100	; 0x64
 8005334:	f7ff f84e 	bl	80043d4 <dmp_set_fifo_rate>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <DMP_Init+0xb2>
      log_i("dmp_set_fifo_rate complete ......\r\n");
 800533e:	4911      	ldr	r1, [pc, #68]	; (8005384 <DMP_Init+0xf0>)
 8005340:	4809      	ldr	r0, [pc, #36]	; (8005368 <DMP_Init+0xd4>)
 8005342:	f007 ff77 	bl	800d234 <iprintf>

    run_self_test();
 8005346:	f7ff feb3 	bl	80050b0 <run_self_test>

    if (mpu_set_dmp_state(1) == 0)
 800534a:	2001      	movs	r0, #1
 800534c:	f7fe fd2a 	bl	8003da4 <mpu_set_dmp_state>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <DMP_Init+0xca>
      log_i("mpu_set_dmp_state complete ......\r\n");
 8005356:	490c      	ldr	r1, [pc, #48]	; (8005388 <DMP_Init+0xf4>)
 8005358:	4803      	ldr	r0, [pc, #12]	; (8005368 <DMP_Init+0xd4>)
 800535a:	f007 ff6b 	bl	800d234 <iprintf>

  }
//  if(dmp_enable_gyro_cal(1) == 0)
//  	log_i("gyro calibration complete ......\r\n");
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	08010f34 	.word	0x08010f34
 8005368:	08010f2c 	.word	0x08010f2c
 800536c:	08010f58 	.word	0x08010f58
 8005370:	08010f80 	.word	0x08010f80
 8005374:	08010fa8 	.word	0x08010fa8
 8005378:	20000034 	.word	0x20000034
 800537c:	08010fdc 	.word	0x08010fdc
 8005380:	08011004 	.word	0x08011004
 8005384:	0801102c 	.word	0x0801102c
 8005388:	08011050 	.word	0x08011050
 800538c:	00000000 	.word	0x00000000

08005390 <Read_DMP>:
 函数功能：读取MPU6050内置DMP的姿态信息
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void Read_DMP(void) {
 8005390:	b5b0      	push	{r4, r5, r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
  unsigned long sensor_timestamp;
  unsigned char more;
  long quat[4];

  dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 8005396:	f107 0114 	add.w	r1, r7, #20
 800539a:	463a      	mov	r2, r7
 800539c:	f107 0313 	add.w	r3, r7, #19
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <Read_DMP+0x250>)
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	460b      	mov	r3, r1
 80053a8:	498e      	ldr	r1, [pc, #568]	; (80055e4 <Read_DMP+0x254>)
 80053aa:	488f      	ldr	r0, [pc, #572]	; (80055e8 <Read_DMP+0x258>)
 80053ac:	f7ff fc86 	bl	8004cbc <dmp_read_fifo>
  if (sensors & INV_WXYZ_QUAT) {
 80053b0:	4b8b      	ldr	r3, [pc, #556]	; (80055e0 <Read_DMP+0x250>)
 80053b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8106 	beq.w	80055ce <Read_DMP+0x23e>
    q0 = quat[0] / q30;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053cc:	eddf 6a87 	vldr	s13, [pc, #540]	; 80055ec <Read_DMP+0x25c>
 80053d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053d4:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <Read_DMP+0x260>)
 80053d6:	edc3 7a00 	vstr	s15, [r3]
    q1 = quat[1] / q30;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e4:	eddf 6a81 	vldr	s13, [pc, #516]	; 80055ec <Read_DMP+0x25c>
 80053e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ec:	4b81      	ldr	r3, [pc, #516]	; (80055f4 <Read_DMP+0x264>)
 80053ee:	edc3 7a00 	vstr	s15, [r3]
    q2 = quat[2] / q30;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053fc:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80055ec <Read_DMP+0x25c>
 8005400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005404:	4b7c      	ldr	r3, [pc, #496]	; (80055f8 <Read_DMP+0x268>)
 8005406:	edc3 7a00 	vstr	s15, [r3]
    q3 = quat[3] / q30;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	eddf 6a75 	vldr	s13, [pc, #468]	; 80055ec <Read_DMP+0x25c>
 8005418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800541c:	4b77      	ldr	r3, [pc, #476]	; (80055fc <Read_DMP+0x26c>)
 800541e:	edc3 7a00 	vstr	s15, [r3]
    Pitch = asinf(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <Read_DMP+0x264>)
 8005424:	edd3 7a00 	vldr	s15, [r3]
 8005428:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800542c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005430:	4b72      	ldr	r3, [pc, #456]	; (80055fc <Read_DMP+0x26c>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800543a:	4b6d      	ldr	r3, [pc, #436]	; (80055f0 <Read_DMP+0x260>)
 800543c:	edd3 7a00 	vldr	s15, [r3]
 8005440:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005444:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <Read_DMP+0x268>)
 8005446:	edd3 7a00 	vldr	s15, [r3]
 800544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005452:	eeb0 0a67 	vmov.f32	s0, s15
 8005456:	f006 fb1f 	bl	800ba98 <asinf>
 800545a:	ee10 3a10 	vmov	r3, s0
 800545e:	4618      	mov	r0, r3
 8005460:	f7fb f87a 	bl	8000558 <__aeabi_f2d>
 8005464:	a35c      	add	r3, pc, #368	; (adr r3, 80055d8 <Read_DMP+0x248>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f7fb f8cd 	bl	8000608 <__aeabi_dmul>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	f7fb fbbf 	bl	8000bf8 <__aeabi_d2f>
 800547a:	4603      	mov	r3, r0
 800547c:	4a60      	ldr	r2, [pc, #384]	; (8005600 <Read_DMP+0x270>)
 800547e:	6013      	str	r3, [r2, #0]
    Roll = atan2f(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1) * 57.3;
 8005480:	4b5d      	ldr	r3, [pc, #372]	; (80055f8 <Read_DMP+0x268>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800548a:	4b5c      	ldr	r3, [pc, #368]	; (80055fc <Read_DMP+0x26c>)
 800548c:	edd3 7a00 	vldr	s15, [r3]
 8005490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005494:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <Read_DMP+0x260>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <Read_DMP+0x264>)
 80054a0:	edd3 7a00 	vldr	s15, [r3]
 80054a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80054ac:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <Read_DMP+0x264>)
 80054ae:	edd3 7a00 	vldr	s15, [r3]
 80054b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80054b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054ba:	4b4e      	ldr	r3, [pc, #312]	; (80055f4 <Read_DMP+0x264>)
 80054bc:	edd3 7a00 	vldr	s15, [r3]
 80054c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054c4:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <Read_DMP+0x268>)
 80054c6:	edd3 7a00 	vldr	s15, [r3]
 80054ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054ce:	4b4a      	ldr	r3, [pc, #296]	; (80055f8 <Read_DMP+0x268>)
 80054d0:	edd3 7a00 	vldr	s15, [r3]
 80054d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e4:	eef0 0a67 	vmov.f32	s1, s15
 80054e8:	eeb0 0a46 	vmov.f32	s0, s12
 80054ec:	f006 fb06 	bl	800bafc <atan2f>
 80054f0:	ee10 3a10 	vmov	r3, s0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fb f82f 	bl	8000558 <__aeabi_f2d>
 80054fa:	a337      	add	r3, pc, #220	; (adr r3, 80055d8 <Read_DMP+0x248>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fb f882 	bl	8000608 <__aeabi_dmul>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	f7fb fb74 	bl	8000bf8 <__aeabi_d2f>
 8005510:	4603      	mov	r3, r0
 8005512:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <Read_DMP+0x274>)
 8005514:	6013      	str	r3, [r2, #0]
    Yaw = atan2(2* (q1 * q2 + q0 * q3), q0 *q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3;
 8005516:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <Read_DMP+0x264>)
 8005518:	ed93 7a00 	vldr	s14, [r3]
 800551c:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <Read_DMP+0x268>)
 800551e:	edd3 7a00 	vldr	s15, [r3]
 8005522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005526:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <Read_DMP+0x260>)
 8005528:	edd3 6a00 	vldr	s13, [r3]
 800552c:	4b33      	ldr	r3, [pc, #204]	; (80055fc <Read_DMP+0x26c>)
 800552e:	edd3 7a00 	vldr	s15, [r3]
 8005532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800553e:	ee17 0a90 	vmov	r0, s15
 8005542:	f7fb f809 	bl	8000558 <__aeabi_f2d>
 8005546:	4604      	mov	r4, r0
 8005548:	460d      	mov	r5, r1
 800554a:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <Read_DMP+0x260>)
 800554c:	ed93 7a00 	vldr	s14, [r3]
 8005550:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <Read_DMP+0x260>)
 8005552:	edd3 7a00 	vldr	s15, [r3]
 8005556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <Read_DMP+0x264>)
 800555c:	edd3 6a00 	vldr	s13, [r3]
 8005560:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <Read_DMP+0x264>)
 8005562:	edd3 7a00 	vldr	s15, [r3]
 8005566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800556a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <Read_DMP+0x268>)
 8005570:	edd3 6a00 	vldr	s13, [r3]
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <Read_DMP+0x268>)
 8005576:	edd3 7a00 	vldr	s15, [r3]
 800557a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800557e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <Read_DMP+0x26c>)
 8005584:	edd3 6a00 	vldr	s13, [r3]
 8005588:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <Read_DMP+0x26c>)
 800558a:	edd3 7a00 	vldr	s15, [r3]
 800558e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005596:	ee17 0a90 	vmov	r0, s15
 800559a:	f7fa ffdd 	bl	8000558 <__aeabi_f2d>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	ec43 2b11 	vmov	d1, r2, r3
 80055a6:	ec45 4b10 	vmov	d0, r4, r5
 80055aa:	f006 fa72 	bl	800ba92 <atan2>
 80055ae:	ec51 0b10 	vmov	r0, r1, d0
 80055b2:	a309      	add	r3, pc, #36	; (adr r3, 80055d8 <Read_DMP+0x248>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fb f826 	bl	8000608 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fb fb18 	bl	8000bf8 <__aeabi_d2f>
 80055c8:	4603      	mov	r3, r0
 80055ca:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <Read_DMP+0x278>)
 80055cc:	6013      	str	r3, [r2, #0]
  }

}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bdb0      	pop	{r4, r5, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	66666666 	.word	0x66666666
 80055dc:	404ca666 	.word	0x404ca666
 80055e0:	200005cc 	.word	0x200005cc
 80055e4:	20000524 	.word	0x20000524
 80055e8:	20000530 	.word	0x20000530
 80055ec:	4e800000 	.word	0x4e800000
 80055f0:	20000030 	.word	0x20000030
 80055f4:	2000024c 	.word	0x2000024c
 80055f8:	20000250 	.word	0x20000250
 80055fc:	20000254 	.word	0x20000254
 8005600:	200005d0 	.word	0x200005d0
 8005604:	2000052c 	.word	0x2000052c
 8005608:	20000520 	.word	0x20000520

0800560c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800560c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005610:	480d      	ldr	r0, [pc, #52]	; (8005648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005612:	490e      	ldr	r1, [pc, #56]	; (800564c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005618:	e002      	b.n	8005620 <LoopCopyDataInit>

0800561a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800561a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800561c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800561e:	3304      	adds	r3, #4

08005620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005624:	d3f9      	bcc.n	800561a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005626:	4a0b      	ldr	r2, [pc, #44]	; (8005654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005628:	4c0b      	ldr	r4, [pc, #44]	; (8005658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800562a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800562c:	e001      	b.n	8005632 <LoopFillZerobss>

0800562e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800562e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005630:	3204      	adds	r2, #4

08005632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005634:	d3fb      	bcc.n	800562e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005636:	f7fc fa21 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800563a:	f006 ff47 	bl	800c4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800563e:	f7fb fe6b 	bl	8001318 <main>
  bx  lr    
 8005642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800564c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8005650:	08012264 	.word	0x08012264
  ldr r2, =_sbss
 8005654:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8005658:	20000a50 	.word	0x20000a50

0800565c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800565c:	e7fe      	b.n	800565c <ADC_IRQHandler>
	...

08005660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_Init+0x40>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <HAL_Init+0x40>)
 800566a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800566e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_Init+0x40>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <HAL_Init+0x40>)
 8005676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800567a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800567c:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <HAL_Init+0x40>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_Init+0x40>)
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005688:	2003      	movs	r0, #3
 800568a:	f000 f94f 	bl	800592c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800568e:	2000      	movs	r0, #0
 8005690:	f000 f808 	bl	80056a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005694:	f7fc f89e 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40023c00 	.word	0x40023c00

080056a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_InitTick+0x54>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_InitTick+0x58>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f967 	bl	8005996 <HAL_SYSTICK_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e00e      	b.n	80056f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b0f      	cmp	r3, #15
 80056d6:	d80a      	bhi.n	80056ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056d8:	2200      	movs	r2, #0
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	f000 f92f 	bl	8005942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056e4:	4a06      	ldr	r2, [pc, #24]	; (8005700 <HAL_InitTick+0x5c>)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000000 	.word	0x20000000
 80056fc:	20000044 	.word	0x20000044
 8005700:	20000040 	.word	0x20000040

08005704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_IncTick+0x20>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_IncTick+0x24>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4413      	add	r3, r2
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_IncTick+0x24>)
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000044 	.word	0x20000044
 8005728:	200005d4 	.word	0x200005d4

0800572c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return uwTick;
 8005730:	4b03      	ldr	r3, [pc, #12]	; (8005740 <HAL_GetTick+0x14>)
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	4618      	mov	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200005d4 	.word	0x200005d4

08005744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800574c:	f7ff ffee 	bl	800572c <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d005      	beq.n	800576a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <HAL_Delay+0x44>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800576a:	bf00      	nop
 800576c:	f7ff ffde 	bl	800572c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	429a      	cmp	r2, r3
 800577a:	d8f7      	bhi.n	800576c <HAL_Delay+0x28>
  {
  }
}
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000044 	.word	0x20000044

0800578c <__NVIC_SetPriorityGrouping>:
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <__NVIC_SetPriorityGrouping+0x44>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057be:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <__NVIC_SetPriorityGrouping+0x44>)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	60d3      	str	r3, [r2, #12]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_GetPriorityGrouping>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <__NVIC_GetPriorityGrouping+0x18>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	0a1b      	lsrs	r3, r3, #8
 80057de:	f003 0307 	and.w	r3, r3, #7
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <__NVIC_EnableIRQ>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	db0b      	blt.n	800581a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	f003 021f 	and.w	r2, r3, #31
 8005808:	4907      	ldr	r1, [pc, #28]	; (8005828 <__NVIC_EnableIRQ+0x38>)
 800580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2001      	movs	r0, #1
 8005812:	fa00 f202 	lsl.w	r2, r0, r2
 8005816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	e000e100 	.word	0xe000e100

0800582c <__NVIC_SetPriority>:
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	6039      	str	r1, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	2b00      	cmp	r3, #0
 800583e:	db0a      	blt.n	8005856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	490c      	ldr	r1, [pc, #48]	; (8005878 <__NVIC_SetPriority+0x4c>)
 8005846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	440b      	add	r3, r1
 8005850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005854:	e00a      	b.n	800586c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4908      	ldr	r1, [pc, #32]	; (800587c <__NVIC_SetPriority+0x50>)
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	3b04      	subs	r3, #4
 8005864:	0112      	lsls	r2, r2, #4
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	440b      	add	r3, r1
 800586a:	761a      	strb	r2, [r3, #24]
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000e100 	.word	0xe000e100
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <NVIC_EncodePriority>:
{
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	; 0x24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f1c3 0307 	rsb	r3, r3, #7
 800589a:	2b04      	cmp	r3, #4
 800589c:	bf28      	it	cs
 800589e:	2304      	movcs	r3, #4
 80058a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d902      	bls.n	80058b0 <NVIC_EncodePriority+0x30>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3b03      	subs	r3, #3
 80058ae:	e000      	b.n	80058b2 <NVIC_EncodePriority+0x32>
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43da      	mvns	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	401a      	ands	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058c8:	f04f 31ff 	mov.w	r1, #4294967295
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	43d9      	mvns	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d8:	4313      	orrs	r3, r2
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3724      	adds	r7, #36	; 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f8:	d301      	bcc.n	80058fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00f      	b.n	800591e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <SysTick_Config+0x40>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3b01      	subs	r3, #1
 8005904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005906:	210f      	movs	r1, #15
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	f7ff ff8e 	bl	800582c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <SysTick_Config+0x40>)
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <SysTick_Config+0x40>)
 8005918:	2207      	movs	r2, #7
 800591a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000e010 	.word	0xe000e010

0800592c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff29 	bl	800578c <__NVIC_SetPriorityGrouping>
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	4603      	mov	r3, r0
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005954:	f7ff ff3e 	bl	80057d4 <__NVIC_GetPriorityGrouping>
 8005958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7ff ff8e 	bl	8005880 <NVIC_EncodePriority>
 8005964:	4602      	mov	r2, r0
 8005966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff5d 	bl	800582c <__NVIC_SetPriority>
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	4603      	mov	r3, r0
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ff31 	bl	80057f0 <__NVIC_EnableIRQ>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ffa2 	bl	80058e8 <SysTick_Config>
 80059a4:	4603      	mov	r3, r0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7ff feb6 	bl	800572c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e099      	b.n	8005b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ec:	e00f      	b.n	8005a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ee:	f7ff fe9d 	bl	800572c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d908      	bls.n	8005a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2203      	movs	r2, #3
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e078      	b.n	8005b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e8      	bne.n	80059ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <HAL_DMA_Init+0x158>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d107      	bne.n	8005a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	4313      	orrs	r3, r2
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d117      	bne.n	8005ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb0d 	bl	80060d4 <DMA_CheckFifoParam>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e016      	b.n	8005b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fac4 	bl	8006068 <DMA_CalcBaseAndBitshift>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	223f      	movs	r2, #63	; 0x3f
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	f010803f 	.word	0xf010803f

08005b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_DMA_Start_IT+0x26>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e040      	b.n	8005bb4 <HAL_DMA_Start_IT+0xa8>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d12f      	bne.n	8005ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fa56 	bl	800600c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	223f      	movs	r2, #63	; 0x3f
 8005b66:	409a      	lsls	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0216 	orr.w	r2, r2, #22
 8005b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0208 	orr.w	r2, r2, #8
 8005b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e005      	b.n	8005bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bca:	f7ff fdaf 	bl	800572c <HAL_GetTick>
 8005bce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d008      	beq.n	8005bee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e052      	b.n	8005c94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0216 	bic.w	r2, r2, #22
 8005bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_DMA_Abort+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0208 	bic.w	r2, r2, #8
 8005c2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c3e:	e013      	b.n	8005c68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c40:	f7ff fd74 	bl	800572c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d90c      	bls.n	8005c68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2203      	movs	r2, #3
 8005c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e015      	b.n	8005c94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e4      	bne.n	8005c40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	223f      	movs	r2, #63	; 0x3f
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d004      	beq.n	8005cba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00c      	b.n	8005cd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cec:	4b92      	ldr	r3, [pc, #584]	; (8005f38 <HAL_DMA_IRQHandler+0x258>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a92      	ldr	r2, [pc, #584]	; (8005f3c <HAL_DMA_IRQHandler+0x25c>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	0a9b      	lsrs	r3, r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01a      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d013      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0204 	bic.w	r2, r2, #4
 8005d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	2208      	movs	r2, #8
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	2201      	movs	r2, #1
 8005d52:	409a      	lsls	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d012      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	2201      	movs	r2, #1
 8005d70:	409a      	lsls	r2, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f043 0202 	orr.w	r2, r3, #2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	2204      	movs	r2, #4
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	2204      	movs	r2, #4
 8005da6:	409a      	lsls	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f043 0204 	orr.w	r2, r3, #4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d043      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d03c      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dda:	2210      	movs	r2, #16
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d018      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d108      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d024      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
 8005e0e:	e01f      	b.n	8005e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01b      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
 8005e20:	e016      	b.n	8005e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0208 	bic.w	r2, r2, #8
 8005e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	2220      	movs	r2, #32
 8005e56:	409a      	lsls	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 808e 	beq.w	8005f7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8086 	beq.w	8005f7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e76:	2220      	movs	r2, #32
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d136      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0216 	bic.w	r2, r2, #22
 8005e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_DMA_IRQHandler+0x1da>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0208 	bic.w	r2, r2, #8
 8005ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	223f      	movs	r2, #63	; 0x3f
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d07d      	beq.n	8005fea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
        }
        return;
 8005ef6:	e078      	b.n	8005fea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01c      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d030      	beq.n	8005f7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
 8005f24:	e02b      	b.n	8005f7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d027      	beq.n	8005f7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	e022      	b.n	8005f7e <HAL_DMA_IRQHandler+0x29e>
 8005f38:	20000000 	.word	0x20000000
 8005f3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10f      	bne.n	8005f6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0210 	bic.w	r2, r2, #16
 8005f5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d032      	beq.n	8005fec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d022      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2205      	movs	r2, #5
 8005f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0201 	bic.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d307      	bcc.n	8005fc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f2      	bne.n	8005faa <HAL_DMA_IRQHandler+0x2ca>
 8005fc4:	e000      	b.n	8005fc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005fc6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e000      	b.n	8005fec <HAL_DMA_IRQHandler+0x30c>
        return;
 8005fea:	bf00      	nop
    }
  }
}
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d108      	bne.n	800604c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800604a:	e007      	b.n	800605c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]
}
 800605c:	bf00      	nop
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	3b10      	subs	r3, #16
 8006078:	4a14      	ldr	r2, [pc, #80]	; (80060cc <DMA_CalcBaseAndBitshift+0x64>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006082:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <DMA_CalcBaseAndBitshift+0x68>)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d909      	bls.n	80060aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	1d1a      	adds	r2, r3, #4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	659a      	str	r2, [r3, #88]	; 0x58
 80060a8:	e007      	b.n	80060ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	aaaaaaab 	.word	0xaaaaaaab
 80060d0:	08011cd8 	.word	0x08011cd8

080060d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11f      	bne.n	800612e <DMA_CheckFifoParam+0x5a>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d856      	bhi.n	80061a2 <DMA_CheckFifoParam+0xce>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <DMA_CheckFifoParam+0x28>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	0800611f 	.word	0x0800611f
 8006104:	0800610d 	.word	0x0800610d
 8006108:	080061a3 	.word	0x080061a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d046      	beq.n	80061a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800611c:	e043      	b.n	80061a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006126:	d140      	bne.n	80061aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800612c:	e03d      	b.n	80061aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006136:	d121      	bne.n	800617c <DMA_CheckFifoParam+0xa8>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d837      	bhi.n	80061ae <DMA_CheckFifoParam+0xda>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <DMA_CheckFifoParam+0x70>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006155 	.word	0x08006155
 8006148:	0800615b 	.word	0x0800615b
 800614c:	08006155 	.word	0x08006155
 8006150:	0800616d 	.word	0x0800616d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e030      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d025      	beq.n	80061b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800616a:	e022      	b.n	80061b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006174:	d11f      	bne.n	80061b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800617a:	e01c      	b.n	80061b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d903      	bls.n	800618a <DMA_CheckFifoParam+0xb6>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006188:	e018      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	73fb      	strb	r3, [r7, #15]
      break;
 800618e:	e015      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00e      	beq.n	80061ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      break;
 80061a0:	e00b      	b.n	80061ba <DMA_CheckFifoParam+0xe6>
      break;
 80061a2:	bf00      	nop
 80061a4:	e00a      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;
 80061a6:	bf00      	nop
 80061a8:	e008      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;
 80061aa:	bf00      	nop
 80061ac:	e006      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;
 80061ae:	bf00      	nop
 80061b0:	e004      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;
 80061b2:	bf00      	nop
 80061b4:	e002      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;   
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <DMA_CheckFifoParam+0xe8>
      break;
 80061ba:	bf00      	nop
    }
  } 
  
  return status; 
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop

080061cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	61fb      	str	r3, [r7, #28]
 80061e6:	e159      	b.n	800649c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061e8:	2201      	movs	r2, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4013      	ands	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	429a      	cmp	r2, r3
 8006202:	f040 8148 	bne.w	8006496 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d005      	beq.n	800621e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800621a:	2b02      	cmp	r3, #2
 800621c:	d130      	bne.n	8006280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	2203      	movs	r2, #3
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006254:	2201      	movs	r2, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 0201 	and.w	r2, r3, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	2b03      	cmp	r3, #3
 800628a:	d017      	beq.n	80062bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d123      	bne.n	8006310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	08da      	lsrs	r2, r3, #3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3208      	adds	r2, #8
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	220f      	movs	r2, #15
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	08da      	lsrs	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3208      	adds	r2, #8
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	2203      	movs	r2, #3
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 0203 	and.w	r2, r3, #3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a2 	beq.w	8006496 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	4b57      	ldr	r3, [pc, #348]	; (80064b4 <HAL_GPIO_Init+0x2e8>)
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	4a56      	ldr	r2, [pc, #344]	; (80064b4 <HAL_GPIO_Init+0x2e8>)
 800635c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006360:	6453      	str	r3, [r2, #68]	; 0x44
 8006362:	4b54      	ldr	r3, [pc, #336]	; (80064b4 <HAL_GPIO_Init+0x2e8>)
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800636e:	4a52      	ldr	r2, [pc, #328]	; (80064b8 <HAL_GPIO_Init+0x2ec>)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	089b      	lsrs	r3, r3, #2
 8006374:	3302      	adds	r3, #2
 8006376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	220f      	movs	r2, #15
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	43db      	mvns	r3, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4013      	ands	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a49      	ldr	r2, [pc, #292]	; (80064bc <HAL_GPIO_Init+0x2f0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d019      	beq.n	80063ce <HAL_GPIO_Init+0x202>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a48      	ldr	r2, [pc, #288]	; (80064c0 <HAL_GPIO_Init+0x2f4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_GPIO_Init+0x1fe>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a47      	ldr	r2, [pc, #284]	; (80064c4 <HAL_GPIO_Init+0x2f8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00d      	beq.n	80063c6 <HAL_GPIO_Init+0x1fa>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a46      	ldr	r2, [pc, #280]	; (80064c8 <HAL_GPIO_Init+0x2fc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d007      	beq.n	80063c2 <HAL_GPIO_Init+0x1f6>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a45      	ldr	r2, [pc, #276]	; (80064cc <HAL_GPIO_Init+0x300>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <HAL_GPIO_Init+0x1f2>
 80063ba:	2304      	movs	r3, #4
 80063bc:	e008      	b.n	80063d0 <HAL_GPIO_Init+0x204>
 80063be:	2307      	movs	r3, #7
 80063c0:	e006      	b.n	80063d0 <HAL_GPIO_Init+0x204>
 80063c2:	2303      	movs	r3, #3
 80063c4:	e004      	b.n	80063d0 <HAL_GPIO_Init+0x204>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e002      	b.n	80063d0 <HAL_GPIO_Init+0x204>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <HAL_GPIO_Init+0x204>
 80063ce:	2300      	movs	r3, #0
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	f002 0203 	and.w	r2, r2, #3
 80063d6:	0092      	lsls	r2, r2, #2
 80063d8:	4093      	lsls	r3, r2
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063e0:	4935      	ldr	r1, [pc, #212]	; (80064b8 <HAL_GPIO_Init+0x2ec>)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	3302      	adds	r3, #2
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063ee:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <HAL_GPIO_Init+0x304>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4013      	ands	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006412:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <HAL_GPIO_Init+0x304>)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006418:	4b2d      	ldr	r3, [pc, #180]	; (80064d0 <HAL_GPIO_Init+0x304>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_GPIO_Init+0x304>)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006442:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <HAL_GPIO_Init+0x304>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	43db      	mvns	r3, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006466:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <HAL_GPIO_Init+0x304>)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <HAL_GPIO_Init+0x304>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	43db      	mvns	r3, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006490:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <HAL_GPIO_Init+0x304>)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3301      	adds	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	f67f aea2 	bls.w	80061e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	40013800 	.word	0x40013800
 80064bc:	40020000 	.word	0x40020000
 80064c0:	40020400 	.word	0x40020400
 80064c4:	40020800 	.word	0x40020800
 80064c8:	40020c00 	.word	0x40020c00
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40013c00 	.word	0x40013c00

080064d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	807b      	strh	r3, [r7, #2]
 80064e0:	4613      	mov	r3, r2
 80064e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064e4:	787b      	ldrb	r3, [r7, #1]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ea:	887a      	ldrh	r2, [r7, #2]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064f0:	e003      	b.n	80064fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064f2:	887b      	ldrh	r3, [r7, #2]
 80064f4:	041a      	lsls	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	619a      	str	r2, [r3, #24]
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e12b      	b.n	8006772 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa feaa 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2224      	movs	r2, #36	; 0x24
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800656a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800656c:	f001 fbd8 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 8006570:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a81      	ldr	r2, [pc, #516]	; (800677c <HAL_I2C_Init+0x274>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d807      	bhi.n	800658c <HAL_I2C_Init+0x84>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a80      	ldr	r2, [pc, #512]	; (8006780 <HAL_I2C_Init+0x278>)
 8006580:	4293      	cmp	r3, r2
 8006582:	bf94      	ite	ls
 8006584:	2301      	movls	r3, #1
 8006586:	2300      	movhi	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e006      	b.n	800659a <HAL_I2C_Init+0x92>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a7d      	ldr	r2, [pc, #500]	; (8006784 <HAL_I2C_Init+0x27c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	bf94      	ite	ls
 8006594:	2301      	movls	r3, #1
 8006596:	2300      	movhi	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e0e7      	b.n	8006772 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a78      	ldr	r2, [pc, #480]	; (8006788 <HAL_I2C_Init+0x280>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	0c9b      	lsrs	r3, r3, #18
 80065ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a6a      	ldr	r2, [pc, #424]	; (800677c <HAL_I2C_Init+0x274>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d802      	bhi.n	80065dc <HAL_I2C_Init+0xd4>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	3301      	adds	r3, #1
 80065da:	e009      	b.n	80065f0 <HAL_I2C_Init+0xe8>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	4a69      	ldr	r2, [pc, #420]	; (800678c <HAL_I2C_Init+0x284>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	099b      	lsrs	r3, r3, #6
 80065ee:	3301      	adds	r3, #1
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006602:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	495c      	ldr	r1, [pc, #368]	; (800677c <HAL_I2C_Init+0x274>)
 800660c:	428b      	cmp	r3, r1
 800660e:	d819      	bhi.n	8006644 <HAL_I2C_Init+0x13c>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1e59      	subs	r1, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	fbb1 f3f3 	udiv	r3, r1, r3
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006624:	400b      	ands	r3, r1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_I2C_Init+0x138>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1e59      	subs	r1, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	fbb1 f3f3 	udiv	r3, r1, r3
 8006638:	3301      	adds	r3, #1
 800663a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663e:	e051      	b.n	80066e4 <HAL_I2C_Init+0x1dc>
 8006640:	2304      	movs	r3, #4
 8006642:	e04f      	b.n	80066e4 <HAL_I2C_Init+0x1dc>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d111      	bne.n	8006670 <HAL_I2C_Init+0x168>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1e58      	subs	r0, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	440b      	add	r3, r1
 800665a:	fbb0 f3f3 	udiv	r3, r0, r3
 800665e:	3301      	adds	r3, #1
 8006660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	e012      	b.n	8006696 <HAL_I2C_Init+0x18e>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1e58      	subs	r0, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	0099      	lsls	r1, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	fbb0 f3f3 	udiv	r3, r0, r3
 8006686:	3301      	adds	r3, #1
 8006688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Init+0x196>
 800669a:	2301      	movs	r3, #1
 800669c:	e022      	b.n	80066e4 <HAL_I2C_Init+0x1dc>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10e      	bne.n	80066c4 <HAL_I2C_Init+0x1bc>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1e58      	subs	r0, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	440b      	add	r3, r1
 80066b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b8:	3301      	adds	r3, #1
 80066ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	e00f      	b.n	80066e4 <HAL_I2C_Init+0x1dc>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1e58      	subs	r0, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6859      	ldr	r1, [r3, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	0099      	lsls	r1, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066da:	3301      	adds	r3, #1
 80066dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	6809      	ldr	r1, [r1, #0]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6911      	ldr	r1, [r2, #16]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68d2      	ldr	r2, [r2, #12]
 800671e:	4311      	orrs	r1, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	430b      	orrs	r3, r1
 8006726:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	000186a0 	.word	0x000186a0
 8006780:	001e847f 	.word	0x001e847f
 8006784:	003d08ff 	.word	0x003d08ff
 8006788:	431bde83 	.word	0x431bde83
 800678c:	10624dd3 	.word	0x10624dd3

08006790 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	461a      	mov	r2, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	817b      	strh	r3, [r7, #10]
 80067a2:	460b      	mov	r3, r1
 80067a4:	813b      	strh	r3, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067aa:	f7fe ffbf 	bl	800572c <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	f040 80d9 	bne.w	8006970 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2319      	movs	r3, #25
 80067c4:	2201      	movs	r2, #1
 80067c6:	496d      	ldr	r1, [pc, #436]	; (800697c <HAL_I2C_Mem_Write+0x1ec>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fc7f 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	e0cc      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_Mem_Write+0x56>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0c5      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d007      	beq.n	800680c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800681a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2221      	movs	r2, #33	; 0x21
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2240      	movs	r2, #64	; 0x40
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a4d      	ldr	r2, [pc, #308]	; (8006980 <HAL_I2C_Mem_Write+0x1f0>)
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800684e:	88f8      	ldrh	r0, [r7, #6]
 8006850:	893a      	ldrh	r2, [r7, #8]
 8006852:	8979      	ldrh	r1, [r7, #10]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	4603      	mov	r3, r0
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fab6 	bl	8006dd0 <I2C_RequestMemoryWrite>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d052      	beq.n	8006910 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e081      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fd00 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b04      	cmp	r3, #4
 8006884:	d107      	bne.n	8006896 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e06b      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d11b      	bne.n	8006910 <HAL_I2C_Mem_Write+0x180>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1aa      	bne.n	800686e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fcec 	bl	80072fa <I2C_WaitOnBTFFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00d      	beq.n	8006944 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	2b04      	cmp	r3, #4
 800692e:	d107      	bne.n	8006940 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e016      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	00100002 	.word	0x00100002
 8006980:	ffff0000 	.word	0xffff0000

08006984 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08c      	sub	sp, #48	; 0x30
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4603      	mov	r3, r0
 8006994:	817b      	strh	r3, [r7, #10]
 8006996:	460b      	mov	r3, r1
 8006998:	813b      	strh	r3, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800699e:	f7fe fec5 	bl	800572c <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	f040 8208 	bne.w	8006dc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	2319      	movs	r3, #25
 80069b8:	2201      	movs	r2, #1
 80069ba:	497b      	ldr	r1, [pc, #492]	; (8006ba8 <HAL_I2C_Mem_Read+0x224>)
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fb85 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e1fb      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_I2C_Mem_Read+0x56>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e1f4      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d007      	beq.n	8006a00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2222      	movs	r2, #34	; 0x22
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a5b      	ldr	r2, [pc, #364]	; (8006bac <HAL_I2C_Mem_Read+0x228>)
 8006a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a42:	88f8      	ldrh	r0, [r7, #6]
 8006a44:	893a      	ldrh	r2, [r7, #8]
 8006a46:	8979      	ldrh	r1, [r7, #10]
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4603      	mov	r3, r0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fa52 	bl	8006efc <I2C_RequestMemoryRead>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e1b0      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d113      	bne.n	8006a92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	623b      	str	r3, [r7, #32]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	623b      	str	r3, [r7, #32]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e184      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d11b      	bne.n	8006ad2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e164      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d11b      	bne.n	8006b12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afa:	2300      	movs	r3, #0
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	e144      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b28:	e138      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	f200 80f1 	bhi.w	8006d16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d123      	bne.n	8006b84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fc1b 	bl	800737c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e139      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b82:	e10b      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d14e      	bne.n	8006c2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	2200      	movs	r2, #0
 8006b94:	4906      	ldr	r1, [pc, #24]	; (8006bb0 <HAL_I2C_Mem_Read+0x22c>)
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fa98 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e10e      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
 8006ba6:	bf00      	nop
 8006ba8:	00100002 	.word	0x00100002
 8006bac:	ffff0000 	.word	0xffff0000
 8006bb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c28:	e0b8      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	2200      	movs	r2, #0
 8006c32:	4966      	ldr	r1, [pc, #408]	; (8006dcc <HAL_I2C_Mem_Read+0x448>)
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fa49 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0bf      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	494f      	ldr	r1, [pc, #316]	; (8006dcc <HAL_I2C_Mem_Read+0x448>)
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fa1b 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e091      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d14:	e042      	b.n	8006d9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb2e 	bl	800737c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e04c      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d118      	bne.n	8006d9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f47f aec2 	bne.w	8006b2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e000      	b.n	8006dc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006dc2:	2302      	movs	r3, #2
  }
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3728      	adds	r7, #40	; 0x28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	00010004 	.word	0x00010004

08006dd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	817b      	strh	r3, [r7, #10]
 8006de2:	460b      	mov	r3, r1
 8006de4:	813b      	strh	r3, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f960 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00d      	beq.n	8006e2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e20:	d103      	bne.n	8006e2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e05f      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	492d      	ldr	r1, [pc, #180]	; (8006ef8 <I2C_RequestMemoryWrite+0x128>)
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f998 	bl	800717a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e04c      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6c:	6a39      	ldr	r1, [r7, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fa02 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d107      	bne.n	8006e92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e02b      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	611a      	str	r2, [r3, #16]
 8006ea6:	e021      	b.n	8006eec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	6a39      	ldr	r1, [r7, #32]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f9dc 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00d      	beq.n	8006ee2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d107      	bne.n	8006ede <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e005      	b.n	8006eee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee2:	893b      	ldrh	r3, [r7, #8]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	00010002 	.word	0x00010002

08006efc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	4608      	mov	r0, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	817b      	strh	r3, [r7, #10]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	813b      	strh	r3, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f8c2 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d103      	bne.n	8006f66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e0aa      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f6a:	897b      	ldrh	r3, [r7, #10]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	4952      	ldr	r1, [pc, #328]	; (80070c8 <I2C_RequestMemoryRead+0x1cc>)
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f8fa 	bl	800717a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e097      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa8:	6a39      	ldr	r1, [r7, #32]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f964 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d107      	bne.n	8006fce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e076      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d105      	bne.n	8006fe4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	611a      	str	r2, [r3, #16]
 8006fe2:	e021      	b.n	8007028 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fe4:	893b      	ldrh	r3, [r7, #8]
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	6a39      	ldr	r1, [r7, #32]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f93e 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b04      	cmp	r3, #4
 8007008:	d107      	bne.n	800701a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e050      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800701e:	893b      	ldrh	r3, [r7, #8]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	6a39      	ldr	r1, [r7, #32]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f923 	bl	8007278 <I2C_WaitOnTXEFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	2b04      	cmp	r3, #4
 800703e:	d107      	bne.n	8007050 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e035      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007062:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2200      	movs	r2, #0
 800706c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f82b 	bl	80070cc <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d103      	bne.n	8007094 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e013      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007098:	897b      	ldrh	r3, [r7, #10]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	6a3a      	ldr	r2, [r7, #32]
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <I2C_RequestMemoryRead+0x1cc>)
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f863 	bl	800717a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	00010002 	.word	0x00010002

080070cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070dc:	e025      	b.n	800712a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d021      	beq.n	800712a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e6:	f7fe fb21 	bl	800572c <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d116      	bne.n	800712a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f043 0220 	orr.w	r2, r3, #32
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e023      	b.n	8007172 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d10d      	bne.n	8007150 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	43da      	mvns	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	e00c      	b.n	800716a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	43da      	mvns	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4013      	ands	r3, r2
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf0c      	ite	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	2300      	movne	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	429a      	cmp	r2, r3
 800716e:	d0b6      	beq.n	80070de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007188:	e051      	b.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007198:	d123      	bne.n	80071e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e046      	b.n	8007270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d021      	beq.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ea:	f7fe fa9f 	bl	800572c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d116      	bne.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e020      	b.n	8007270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	0c1b      	lsrs	r3, r3, #16
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10c      	bne.n	8007252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	43da      	mvns	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	bf14      	ite	ne
 800724a:	2301      	movne	r3, #1
 800724c:	2300      	moveq	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	e00b      	b.n	800726a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	43da      	mvns	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4013      	ands	r3, r2
 800725e:	b29b      	uxth	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	bf14      	ite	ne
 8007264:	2301      	movne	r3, #1
 8007266:	2300      	moveq	r3, #0
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d18d      	bne.n	800718a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007284:	e02d      	b.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f8ce 	bl	8007428 <I2C_IsAcknowledgeFailed>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e02d      	b.n	80072f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d021      	beq.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fe fa45 	bl	800572c <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d116      	bne.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f043 0220 	orr.w	r2, r3, #32
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e007      	b.n	80072f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ec:	2b80      	cmp	r3, #128	; 0x80
 80072ee:	d1ca      	bne.n	8007286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007306:	e02d      	b.n	8007364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f88d 	bl	8007428 <I2C_IsAcknowledgeFailed>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e02d      	b.n	8007374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d021      	beq.n	8007364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007320:	f7fe fa04 	bl	800572c <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	429a      	cmp	r2, r3
 800732e:	d302      	bcc.n	8007336 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d116      	bne.n	8007364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	f043 0220 	orr.w	r2, r3, #32
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e007      	b.n	8007374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b04      	cmp	r3, #4
 8007370:	d1ca      	bne.n	8007308 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007388:	e042      	b.n	8007410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b10      	cmp	r3, #16
 8007396:	d119      	bne.n	80073cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0210 	mvn.w	r2, #16
 80073a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e029      	b.n	8007420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073cc:	f7fe f9ae 	bl	800572c <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d302      	bcc.n	80073e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d116      	bne.n	8007410 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	f043 0220 	orr.w	r2, r3, #32
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e007      	b.n	8007420 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b40      	cmp	r3, #64	; 0x40
 800741c:	d1b5      	bne.n	800738a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d11b      	bne.n	8007478 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007448:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2220      	movs	r2, #32
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	f043 0204 	orr.w	r2, r3, #4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e264      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d075      	beq.n	8007592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074a6:	4ba3      	ldr	r3, [pc, #652]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 030c 	and.w	r3, r3, #12
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d00c      	beq.n	80074cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074b2:	4ba0      	ldr	r3, [pc, #640]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d112      	bne.n	80074e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074be:	4b9d      	ldr	r3, [pc, #628]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ca:	d10b      	bne.n	80074e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074cc:	4b99      	ldr	r3, [pc, #612]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05b      	beq.n	8007590 <HAL_RCC_OscConfig+0x108>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d157      	bne.n	8007590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e23f      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ec:	d106      	bne.n	80074fc <HAL_RCC_OscConfig+0x74>
 80074ee:	4b91      	ldr	r3, [pc, #580]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a90      	ldr	r2, [pc, #576]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	e01d      	b.n	8007538 <HAL_RCC_OscConfig+0xb0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007504:	d10c      	bne.n	8007520 <HAL_RCC_OscConfig+0x98>
 8007506:	4b8b      	ldr	r3, [pc, #556]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a8a      	ldr	r2, [pc, #552]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800750c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	4b88      	ldr	r3, [pc, #544]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a87      	ldr	r2, [pc, #540]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e00b      	b.n	8007538 <HAL_RCC_OscConfig+0xb0>
 8007520:	4b84      	ldr	r3, [pc, #528]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a83      	ldr	r2, [pc, #524]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	4b81      	ldr	r3, [pc, #516]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a80      	ldr	r2, [pc, #512]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d013      	beq.n	8007568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007540:	f7fe f8f4 	bl	800572c <HAL_GetTick>
 8007544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007548:	f7fe f8f0 	bl	800572c <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b64      	cmp	r3, #100	; 0x64
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e204      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755a:	4b76      	ldr	r3, [pc, #472]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0f0      	beq.n	8007548 <HAL_RCC_OscConfig+0xc0>
 8007566:	e014      	b.n	8007592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007568:	f7fe f8e0 	bl	800572c <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007570:	f7fe f8dc 	bl	800572c <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	; 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e1f0      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007582:	4b6c      	ldr	r3, [pc, #432]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0xe8>
 800758e:	e000      	b.n	8007592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d063      	beq.n	8007666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800759e:	4b65      	ldr	r3, [pc, #404]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00b      	beq.n	80075c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075aa:	4b62      	ldr	r3, [pc, #392]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075b2:	2b08      	cmp	r3, #8
 80075b4:	d11c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075b6:	4b5f      	ldr	r3, [pc, #380]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d116      	bne.n	80075f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075c2:	4b5c      	ldr	r3, [pc, #368]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <HAL_RCC_OscConfig+0x152>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d001      	beq.n	80075da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e1c4      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075da:	4b56      	ldr	r3, [pc, #344]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4952      	ldr	r1, [pc, #328]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ee:	e03a      	b.n	8007666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d020      	beq.n	800763a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075f8:	4b4f      	ldr	r3, [pc, #316]	; (8007738 <HAL_RCC_OscConfig+0x2b0>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fe:	f7fe f895 	bl	800572c <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007606:	f7fe f891 	bl	800572c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e1a5      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007618:	4b46      	ldr	r3, [pc, #280]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0f0      	beq.n	8007606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007624:	4b43      	ldr	r3, [pc, #268]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4940      	ldr	r1, [pc, #256]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007634:	4313      	orrs	r3, r2
 8007636:	600b      	str	r3, [r1, #0]
 8007638:	e015      	b.n	8007666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800763a:	4b3f      	ldr	r3, [pc, #252]	; (8007738 <HAL_RCC_OscConfig+0x2b0>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fe f874 	bl	800572c <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007648:	f7fe f870 	bl	800572c <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e184      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800765a:	4b36      	ldr	r3, [pc, #216]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f0      	bne.n	8007648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d030      	beq.n	80076d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d016      	beq.n	80076a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <HAL_RCC_OscConfig+0x2b4>)
 800767c:	2201      	movs	r2, #1
 800767e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007680:	f7fe f854 	bl	800572c <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007688:	f7fe f850 	bl	800572c <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e164      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 800769c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0f0      	beq.n	8007688 <HAL_RCC_OscConfig+0x200>
 80076a6:	e015      	b.n	80076d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076a8:	4b24      	ldr	r3, [pc, #144]	; (800773c <HAL_RCC_OscConfig+0x2b4>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ae:	f7fe f83d 	bl	800572c <HAL_GetTick>
 80076b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076b6:	f7fe f839 	bl	800572c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e14d      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80076ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f0      	bne.n	80076b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80a0 	beq.w	8007822 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076e6:	4b13      	ldr	r3, [pc, #76]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10f      	bne.n	8007712 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f2:	2300      	movs	r3, #0
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	4a0e      	ldr	r2, [pc, #56]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 80076fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007700:	6413      	str	r3, [r2, #64]	; 0x40
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <HAL_RCC_OscConfig+0x2ac>)
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800770e:	2301      	movs	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCC_OscConfig+0x2b8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771a:	2b00      	cmp	r3, #0
 800771c:	d121      	bne.n	8007762 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_RCC_OscConfig+0x2b8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a07      	ldr	r2, [pc, #28]	; (8007740 <HAL_RCC_OscConfig+0x2b8>)
 8007724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772a:	f7fd ffff 	bl	800572c <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	e011      	b.n	8007756 <HAL_RCC_OscConfig+0x2ce>
 8007732:	bf00      	nop
 8007734:	40023800 	.word	0x40023800
 8007738:	42470000 	.word	0x42470000
 800773c:	42470e80 	.word	0x42470e80
 8007740:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007744:	f7fd fff2 	bl	800572c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e106      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007756:	4b85      	ldr	r3, [pc, #532]	; (800796c <HAL_RCC_OscConfig+0x4e4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d106      	bne.n	8007778 <HAL_RCC_OscConfig+0x2f0>
 800776a:	4b81      	ldr	r3, [pc, #516]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	4a80      	ldr	r2, [pc, #512]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6713      	str	r3, [r2, #112]	; 0x70
 8007776:	e01c      	b.n	80077b2 <HAL_RCC_OscConfig+0x32a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b05      	cmp	r3, #5
 800777e:	d10c      	bne.n	800779a <HAL_RCC_OscConfig+0x312>
 8007780:	4b7b      	ldr	r3, [pc, #492]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a7a      	ldr	r2, [pc, #488]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007786:	f043 0304 	orr.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
 800778c:	4b78      	ldr	r3, [pc, #480]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007790:	4a77      	ldr	r2, [pc, #476]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	6713      	str	r3, [r2, #112]	; 0x70
 8007798:	e00b      	b.n	80077b2 <HAL_RCC_OscConfig+0x32a>
 800779a:	4b75      	ldr	r3, [pc, #468]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	4a74      	ldr	r2, [pc, #464]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	6713      	str	r3, [r2, #112]	; 0x70
 80077a6:	4b72      	ldr	r3, [pc, #456]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80077a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077aa:	4a71      	ldr	r2, [pc, #452]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80077ac:	f023 0304 	bic.w	r3, r3, #4
 80077b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d015      	beq.n	80077e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ba:	f7fd ffb7 	bl	800572c <HAL_GetTick>
 80077be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c0:	e00a      	b.n	80077d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c2:	f7fd ffb3 	bl	800572c <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e0c5      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077d8:	4b65      	ldr	r3, [pc, #404]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ee      	beq.n	80077c2 <HAL_RCC_OscConfig+0x33a>
 80077e4:	e014      	b.n	8007810 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077e6:	f7fd ffa1 	bl	800572c <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ec:	e00a      	b.n	8007804 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ee:	f7fd ff9d 	bl	800572c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e0af      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007804:	4b5a      	ldr	r3, [pc, #360]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ee      	bne.n	80077ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d105      	bne.n	8007822 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007816:	4b56      	ldr	r3, [pc, #344]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	4a55      	ldr	r2, [pc, #340]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 800781c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 809b 	beq.w	8007962 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800782c:	4b50      	ldr	r3, [pc, #320]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 030c 	and.w	r3, r3, #12
 8007834:	2b08      	cmp	r3, #8
 8007836:	d05c      	beq.n	80078f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d141      	bne.n	80078c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007840:	4b4c      	ldr	r3, [pc, #304]	; (8007974 <HAL_RCC_OscConfig+0x4ec>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007846:	f7fd ff71 	bl	800572c <HAL_GetTick>
 800784a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800784e:	f7fd ff6d 	bl	800572c <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e081      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007860:	4b43      	ldr	r3, [pc, #268]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f0      	bne.n	800784e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	019b      	lsls	r3, r3, #6
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	3b01      	subs	r3, #1
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	061b      	lsls	r3, r3, #24
 8007890:	4937      	ldr	r1, [pc, #220]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007892:	4313      	orrs	r3, r2
 8007894:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007896:	4b37      	ldr	r3, [pc, #220]	; (8007974 <HAL_RCC_OscConfig+0x4ec>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789c:	f7fd ff46 	bl	800572c <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a4:	f7fd ff42 	bl	800572c <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e056      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b6:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCC_OscConfig+0x41c>
 80078c2:	e04e      	b.n	8007962 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c4:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <HAL_RCC_OscConfig+0x4ec>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ca:	f7fd ff2f 	bl	800572c <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078d2:	f7fd ff2b 	bl	800572c <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e03f      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e4:	4b22      	ldr	r3, [pc, #136]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f0      	bne.n	80078d2 <HAL_RCC_OscConfig+0x44a>
 80078f0:	e037      	b.n	8007962 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e032      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078fe:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <HAL_RCC_OscConfig+0x4e8>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d028      	beq.n	800795e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007916:	429a      	cmp	r2, r3
 8007918:	d121      	bne.n	800795e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d11a      	bne.n	800795e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800792e:	4013      	ands	r3, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007934:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007936:	4293      	cmp	r3, r2
 8007938:	d111      	bne.n	800795e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	3b01      	subs	r3, #1
 8007948:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800794a:	429a      	cmp	r2, r3
 800794c:	d107      	bne.n	800795e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d001      	beq.n	8007962 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40007000 	.word	0x40007000
 8007970:	40023800 	.word	0x40023800
 8007974:	42470060 	.word	0x42470060

08007978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e0cc      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800798c:	4b68      	ldr	r3, [pc, #416]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d90c      	bls.n	80079b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799a:	4b65      	ldr	r3, [pc, #404]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a2:	4b63      	ldr	r3, [pc, #396]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0b8      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d020      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079cc:	4b59      	ldr	r3, [pc, #356]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4a58      	ldr	r2, [pc, #352]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079e4:	4b53      	ldr	r3, [pc, #332]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4a52      	ldr	r2, [pc, #328]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079f0:	4b50      	ldr	r3, [pc, #320]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	494d      	ldr	r1, [pc, #308]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d044      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d107      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a16:	4b47      	ldr	r3, [pc, #284]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d119      	bne.n	8007a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e07f      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d003      	beq.n	8007a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d107      	bne.n	8007a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a36:	4b3f      	ldr	r3, [pc, #252]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e06f      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a46:	4b3b      	ldr	r3, [pc, #236]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e067      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f023 0203 	bic.w	r2, r3, #3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	4934      	ldr	r1, [pc, #208]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a68:	f7fd fe60 	bl	800572c <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a6e:	e00a      	b.n	8007a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a70:	f7fd fe5c 	bl	800572c <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e04f      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a86:	4b2b      	ldr	r3, [pc, #172]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 020c 	and.w	r2, r3, #12
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d1eb      	bne.n	8007a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a98:	4b25      	ldr	r3, [pc, #148]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d20c      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aae:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e032      	b.n	8007b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007acc:	4b19      	ldr	r3, [pc, #100]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4916      	ldr	r1, [pc, #88]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	490e      	ldr	r1, [pc, #56]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007afe:	f000 f821 	bl	8007b44 <HAL_RCC_GetSysClockFreq>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <HAL_RCC_ClockConfig+0x1bc>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	490a      	ldr	r1, [pc, #40]	; (8007b38 <HAL_RCC_ClockConfig+0x1c0>)
 8007b10:	5ccb      	ldrb	r3, [r1, r3]
 8007b12:	fa22 f303 	lsr.w	r3, r2, r3
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <HAL_RCC_ClockConfig+0x1c4>)
 8007b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd fdc0 	bl	80056a4 <HAL_InitTick>

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40023c00 	.word	0x40023c00
 8007b34:	40023800 	.word	0x40023800
 8007b38:	08011074 	.word	0x08011074
 8007b3c:	20000000 	.word	0x20000000
 8007b40:	20000040 	.word	0x20000040

08007b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	2300      	movs	r3, #0
 8007b56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b5c:	4b67      	ldr	r3, [pc, #412]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 030c 	and.w	r3, r3, #12
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d00d      	beq.n	8007b84 <HAL_RCC_GetSysClockFreq+0x40>
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	f200 80bd 	bhi.w	8007ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_RCC_GetSysClockFreq+0x34>
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d003      	beq.n	8007b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8007b76:	e0b7      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b78:	4b61      	ldr	r3, [pc, #388]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b7a:	60bb      	str	r3, [r7, #8]
       break;
 8007b7c:	e0b7      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b7e:	4b61      	ldr	r3, [pc, #388]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007b80:	60bb      	str	r3, [r7, #8]
      break;
 8007b82:	e0b4      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b84:	4b5d      	ldr	r3, [pc, #372]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b8e:	4b5b      	ldr	r3, [pc, #364]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d04d      	beq.n	8007c36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b9a:	4b58      	ldr	r3, [pc, #352]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	099b      	lsrs	r3, r3, #6
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007baa:	f04f 0100 	mov.w	r1, #0
 8007bae:	ea02 0800 	and.w	r8, r2, r0
 8007bb2:	ea03 0901 	and.w	r9, r3, r1
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	f04f 0300 	mov.w	r3, #0
 8007bc2:	014b      	lsls	r3, r1, #5
 8007bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007bc8:	0142      	lsls	r2, r0, #5
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	ebb0 0008 	subs.w	r0, r0, r8
 8007bd2:	eb61 0109 	sbc.w	r1, r1, r9
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	018b      	lsls	r3, r1, #6
 8007be0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007be4:	0182      	lsls	r2, r0, #6
 8007be6:	1a12      	subs	r2, r2, r0
 8007be8:	eb63 0301 	sbc.w	r3, r3, r1
 8007bec:	f04f 0000 	mov.w	r0, #0
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	00d9      	lsls	r1, r3, #3
 8007bf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bfa:	00d0      	lsls	r0, r2, #3
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	eb12 0208 	adds.w	r2, r2, r8
 8007c04:	eb43 0309 	adc.w	r3, r3, r9
 8007c08:	f04f 0000 	mov.w	r0, #0
 8007c0c:	f04f 0100 	mov.w	r1, #0
 8007c10:	0259      	lsls	r1, r3, #9
 8007c12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c16:	0250      	lsls	r0, r2, #9
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	f7f9 f886 	bl	8000d38 <__aeabi_uldivmod>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4613      	mov	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e04a      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c36:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	099b      	lsrs	r3, r3, #6
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c46:	f04f 0100 	mov.w	r1, #0
 8007c4a:	ea02 0400 	and.w	r4, r2, r0
 8007c4e:	ea03 0501 	and.w	r5, r3, r1
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	014b      	lsls	r3, r1, #5
 8007c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c64:	0142      	lsls	r2, r0, #5
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	1b00      	subs	r0, r0, r4
 8007c6c:	eb61 0105 	sbc.w	r1, r1, r5
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	018b      	lsls	r3, r1, #6
 8007c7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c7e:	0182      	lsls	r2, r0, #6
 8007c80:	1a12      	subs	r2, r2, r0
 8007c82:	eb63 0301 	sbc.w	r3, r3, r1
 8007c86:	f04f 0000 	mov.w	r0, #0
 8007c8a:	f04f 0100 	mov.w	r1, #0
 8007c8e:	00d9      	lsls	r1, r3, #3
 8007c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c94:	00d0      	lsls	r0, r2, #3
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	1912      	adds	r2, r2, r4
 8007c9c:	eb45 0303 	adc.w	r3, r5, r3
 8007ca0:	f04f 0000 	mov.w	r0, #0
 8007ca4:	f04f 0100 	mov.w	r1, #0
 8007ca8:	0299      	lsls	r1, r3, #10
 8007caa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007cae:	0290      	lsls	r0, r2, #10
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	f7f9 f83a 	bl	8000d38 <__aeabi_uldivmod>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4613      	mov	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	60bb      	str	r3, [r7, #8]
      break;
 8007ce6:	e002      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cea:	60bb      	str	r3, [r7, #8]
      break;
 8007cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cee:	68bb      	ldr	r3, [r7, #8]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	00f42400 	.word	0x00f42400
 8007d04:	007a1200 	.word	0x007a1200

08007d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000000 	.word	0x20000000

08007d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d24:	f7ff fff0 	bl	8007d08 <HAL_RCC_GetHCLKFreq>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	0a9b      	lsrs	r3, r3, #10
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	4903      	ldr	r1, [pc, #12]	; (8007d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d36:	5ccb      	ldrb	r3, [r1, r3]
 8007d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	40023800 	.word	0x40023800
 8007d44:	08011084 	.word	0x08011084

08007d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d4c:	f7ff ffdc 	bl	8007d08 <HAL_RCC_GetHCLKFreq>
 8007d50:	4602      	mov	r2, r0
 8007d52:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	0b5b      	lsrs	r3, r3, #13
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	4903      	ldr	r1, [pc, #12]	; (8007d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d5e:	5ccb      	ldrb	r3, [r1, r3]
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	08011084 	.word	0x08011084

08007d70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e022      	b.n	8007dc8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7f9 fc0d 	bl	80015b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f814 	bl	8007dd0 <HAL_SD_InitCard>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e00a      	b.n	8007dc8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007dd0:	b5b0      	push	{r4, r5, r7, lr}
 8007dd2:	b08e      	sub	sp, #56	; 0x38
 8007dd4:	af04      	add	r7, sp, #16
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007dec:	2376      	movs	r3, #118	; 0x76
 8007dee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681d      	ldr	r5, [r3, #0]
 8007df4:	466c      	mov	r4, sp
 8007df6:	f107 0314 	add.w	r3, r7, #20
 8007dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f002 fe35 	bl	800aa78 <SDIO_Init>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e04c      	b.n	8007eba <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007e20:	4b28      	ldr	r3, [pc, #160]	; (8007ec4 <HAL_SD_InitCard+0xf4>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fe6d 	bl	800ab0a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007e30:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <HAL_SD_InitCard+0xf4>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f804 	bl	8008e44 <SD_PowerON>
 8007e3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e02e      	b.n	8007eba <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 ff25 	bl	8008cac <SD_InitCard>
 8007e62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e01b      	b.n	8007eba <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f002 fed0 	bl	800ac30 <SDMMC_CmdBlockLength>
 8007e90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00f      	beq.n	8007eb8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a0a      	ldr	r2, [pc, #40]	; (8007ec8 <HAL_SD_InitCard+0xf8>)
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3728      	adds	r7, #40	; 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	422580a0 	.word	0x422580a0
 8007ec8:	004005ff 	.word	0x004005ff

08007ecc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08c      	sub	sp, #48	; 0x30
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d107      	bne.n	8007ef4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0c0      	b.n	8008076 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	f040 80b9 	bne.w	8008074 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	441a      	add	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d907      	bls.n	8007f26 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e0a7      	b.n	8008076 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	4a4c      	ldr	r2, [pc, #304]	; (8008080 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	4a4b      	ldr	r2, [pc, #300]	; (8008084 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007f58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	2200      	movs	r2, #0
 8007f60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	2200      	movs	r2, #0
 8007f68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3380      	adds	r3, #128	; 0x80
 8007f90:	4619      	mov	r1, r3
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	025b      	lsls	r3, r3, #9
 8007f98:	089b      	lsrs	r3, r3, #2
 8007f9a:	f7fd fdb7 	bl	8005b0c <HAL_DMA_Start_IT>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007fb2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a33      	ldr	r2, [pc, #204]	; (8008088 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e050      	b.n	8008076 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007fd4:	4b2d      	ldr	r3, [pc, #180]	; (800808c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d002      	beq.n	8007fe8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	025b      	lsls	r3, r3, #9
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	025b      	lsls	r3, r3, #9
 8007ff2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007ff4:	2390      	movs	r3, #144	; 0x90
 8007ff6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008000:	2301      	movs	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f107 0210 	add.w	r2, r7, #16
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f002 fde2 	bl	800abd8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d90a      	bls.n	8008030 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2282      	movs	r2, #130	; 0x82
 800801e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008026:	4618      	mov	r0, r3
 8008028:	f002 fe46 	bl	800acb8 <SDMMC_CmdReadMultiBlock>
 800802c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800802e:	e009      	b.n	8008044 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2281      	movs	r2, #129	; 0x81
 8008034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800803c:	4618      	mov	r0, r3
 800803e:	f002 fe19 	bl	800ac74 <SDMMC_CmdReadSingleBlock>
 8008042:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d012      	beq.n	8008070 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e002      	b.n	8008076 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	08008abb 	.word	0x08008abb
 8008084:	08008b2d 	.word	0x08008b2d
 8008088:	004005ff 	.word	0x004005ff
 800808c:	4225858c 	.word	0x4225858c

08008090 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08c      	sub	sp, #48	; 0x30
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d107      	bne.n	80080b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e0c5      	b.n	8008244 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	f040 80be 	bne.w	8008242 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d907      	bls.n	80080ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e0ac      	b.n	8008244 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2203      	movs	r2, #3
 80080ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	4a4e      	ldr	r2, [pc, #312]	; (800824c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811a:	4a4d      	ldr	r2, [pc, #308]	; (8008250 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800811c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	2200      	movs	r2, #0
 8008124:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812a:	2b01      	cmp	r3, #1
 800812c:	d002      	beq.n	8008134 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	025b      	lsls	r3, r3, #9
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d90a      	bls.n	8008150 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	22a0      	movs	r2, #160	; 0xa0
 800813e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008146:	4618      	mov	r0, r3
 8008148:	f002 fdfa 	bl	800ad40 <SDMMC_CmdWriteMultiBlock>
 800814c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800814e:	e009      	b.n	8008164 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2290      	movs	r2, #144	; 0x90
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800815c:	4618      	mov	r0, r3
 800815e:	f002 fdcd 	bl	800acfc <SDMMC_CmdWriteSingleBlock>
 8008162:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d012      	beq.n	8008190 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a39      	ldr	r2, [pc, #228]	; (8008254 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008178:	431a      	orrs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e059      	b.n	8008244 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008190:	4b31      	ldr	r3, [pc, #196]	; (8008258 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3380      	adds	r3, #128	; 0x80
 80081c6:	461a      	mov	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	025b      	lsls	r3, r3, #9
 80081cc:	089b      	lsrs	r3, r3, #2
 80081ce:	f7fd fc9d 	bl	8005b0c <HAL_DMA_Start_IT>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01c      	beq.n	8008212 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80081e6:	f023 0302 	bic.w	r3, r3, #2
 80081ea:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a18      	ldr	r2, [pc, #96]	; (8008254 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e018      	b.n	8008244 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	025b      	lsls	r3, r3, #9
 800821c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800821e:	2390      	movs	r3, #144	; 0x90
 8008220:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008226:	2300      	movs	r3, #0
 8008228:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800822a:	2301      	movs	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f107 0210 	add.w	r2, r7, #16
 8008236:	4611      	mov	r1, r2
 8008238:	4618      	mov	r0, r3
 800823a:	f002 fccd 	bl	800abd8 <SDIO_ConfigData>

      return HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e000      	b.n	8008244 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008242:	2302      	movs	r3, #2
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3730      	adds	r7, #48	; 0x30
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	08008a91 	.word	0x08008a91
 8008250:	08008b2d 	.word	0x08008b2d
 8008254:	004005ff 	.word	0x004005ff
 8008258:	4225858c 	.word	0x4225858c

0800825c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <HAL_SD_IRQHandler+0x2e>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fffd 	bl	8009282 <SD_Read_IT>
 8008288:	e165      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 808f 	beq.w	80083b8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80082b2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80082b6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0201 	bic.w	r2, r2, #1
 80082c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d039      	beq.n	8008346 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d104      	bne.n	80082e6 <HAL_SD_IRQHandler+0x8a>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d011      	beq.n	800830a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f002 fd4a 	bl	800ad84 <SDMMC_CmdStopTransfer>
 80082f0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f92f 	bl	8008568 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_SD_IRQHandler+0xda>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f003 f9b0 	bl	800b69c <HAL_SD_RxCpltCallback>
 800833c:	e10b      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f003 f9a2 	bl	800b688 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008344:	e107      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8102 	beq.w	8008556 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f002 fd0f 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008366:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f8f4 	bl	8008568 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 80e5 	bne.w	8008556 <HAL_SD_IRQHandler+0x2fa>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	f040 80df 	bne.w	8008556 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0208 	bic.w	r2, r2, #8
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f003 f969 	bl	800b688 <HAL_SD_TxCpltCallback>
}
 80083b6:	e0ce      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <HAL_SD_IRQHandler+0x17c>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 ffa7 	bl	8009324 <SD_Write_IT>
 80083d6:	e0be      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083de:	f240 233a 	movw	r3, #570	; 0x23a
 80083e2:	4013      	ands	r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80b6 	beq.w	8008556 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	f043 0202 	orr.w	r2, r3, #2
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	f043 0208 	orr.w	r2, r3, #8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f043 0210 	orr.w	r2, r3, #16
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	f043 0208 	orr.w	r2, r3, #8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f240 723a 	movw	r2, #1850	; 0x73a
 8008474:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6812      	ldr	r2, [r2, #0]
 8008480:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008484:	f023 0302 	bic.w	r3, r3, #2
 8008488:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f002 fc78 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008494:	4602      	mov	r2, r0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f855 	bl	8008568 <HAL_SD_ErrorCallback>
}
 80084be:	e04a      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d045      	beq.n	8008556 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <HAL_SD_IRQHandler+0x282>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <HAL_SD_IRQHandler+0x304>)
 80084e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd fbd6 	bl	8005c9c <HAL_DMA_Abort_IT>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d02f      	beq.n	8008556 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fb68 	bl	8008bd0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008500:	e029      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <HAL_SD_IRQHandler+0x2ba>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d011      	beq.n	800853a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	4a12      	ldr	r2, [pc, #72]	; (8008564 <HAL_SD_IRQHandler+0x308>)
 800851c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd fbba 	bl	8005c9c <HAL_DMA_Abort_IT>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d013      	beq.n	8008556 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fb83 	bl	8008c3e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008538:	e00d      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f003 f890 	bl	800b674 <HAL_SD_AbortCallback>
}
 8008554:	e7ff      	b.n	8008556 <HAL_SD_IRQHandler+0x2fa>
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	08008bd1 	.word	0x08008bd1
 8008564:	08008c3f 	.word	0x08008c3f

08008568 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800858a:	0f9b      	lsrs	r3, r3, #30
 800858c:	b2da      	uxtb	r2, r3
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008596:	0e9b      	lsrs	r3, r3, #26
 8008598:	b2db      	uxtb	r3, r3
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	b29a      	uxth	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085fa:	0bdb      	lsrs	r3, r3, #15
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	b2da      	uxtb	r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800860c:	0b9b      	lsrs	r3, r3, #14
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800861e:	0b5b      	lsrs	r3, r3, #13
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008630:	0b1b      	lsrs	r3, r3, #12
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2200      	movs	r2, #0
 8008642:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008648:	2b00      	cmp	r3, #0
 800864a:	d163      	bne.n	8008714 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008650:	009a      	lsls	r2, r3, #2
 8008652:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008656:	4013      	ands	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800865c:	0f92      	lsrs	r2, r2, #30
 800865e:	431a      	orrs	r2, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008668:	0edb      	lsrs	r3, r3, #27
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	b2da      	uxtb	r2, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867a:	0e1b      	lsrs	r3, r3, #24
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868c:	0d5b      	lsrs	r3, r3, #21
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	b2da      	uxtb	r2, r3
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869e:	0c9b      	lsrs	r3, r3, #18
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b0:	0bdb      	lsrs	r3, r3, #15
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	7e1b      	ldrb	r3, [r3, #24]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	3302      	adds	r3, #2
 80086d4:	2201      	movs	r2, #1
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80086de:	fb02 f203 	mul.w	r2, r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	7a1b      	ldrb	r3, [r3, #8]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	2201      	movs	r2, #1
 80086f2:	409a      	lsls	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008700:	0a52      	lsrs	r2, r2, #9
 8008702:	fb02 f203 	mul.w	r2, r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008710:	661a      	str	r2, [r3, #96]	; 0x60
 8008712:	e031      	b.n	8008778 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008718:	2b01      	cmp	r3, #1
 800871a:	d11d      	bne.n	8008758 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872a:	0c1b      	lsrs	r3, r3, #16
 800872c:	431a      	orrs	r2, r3
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	3301      	adds	r3, #1
 8008738:	029a      	lsls	r2, r3, #10
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800874c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	661a      	str	r2, [r3, #96]	; 0x60
 8008756:	e00f      	b.n	8008778 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a58      	ldr	r2, [pc, #352]	; (80088c0 <HAL_SD_GetCardCSD+0x344>)
 800875e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e09d      	b.n	80088b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877c:	0b9b      	lsrs	r3, r3, #14
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	b2da      	uxtb	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800878e:	09db      	lsrs	r3, r3, #7
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	b2da      	uxtb	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b0:	0fdb      	lsrs	r3, r3, #31
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	0f5b      	lsrs	r3, r3, #29
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	0e9b      	lsrs	r3, r3, #26
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	0d9b      	lsrs	r3, r3, #22
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	0d5b      	lsrs	r3, r3, #21
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	0c1b      	lsrs	r3, r3, #16
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	0bdb      	lsrs	r3, r3, #15
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	0b9b      	lsrs	r3, r3, #14
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	b2da      	uxtb	r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884a:	0b5b      	lsrs	r3, r3, #13
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	b2da      	uxtb	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	0b1b      	lsrs	r3, r3, #12
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	0a9b      	lsrs	r3, r3, #10
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	b2da      	uxtb	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	b2db      	uxtb	r3, r3
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	b2da      	uxtb	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	004005ff 	.word	0x004005ff

080088c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800891c:	b5b0      	push	{r4, r5, r7, lr}
 800891e:	b08e      	sub	sp, #56	; 0x38
 8008920:	af04      	add	r7, sp, #16
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2203      	movs	r2, #3
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	2b03      	cmp	r3, #3
 800893a:	d02e      	beq.n	800899a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d106      	bne.n	8008952 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
 8008950:	e029      	b.n	80089a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008958:	d10a      	bne.n	8008970 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fb28 	bl	8008fb0 <SD_WideBus_Enable>
 8008960:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
 800896e:	e01a      	b.n	80089a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fb65 	bl	8009046 <SD_WideBus_Disable>
 800897c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
 800898a:	e00c      	b.n	80089a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
 8008998:	e005      	b.n	80089a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <HAL_SD_ConfigWideBusOperation+0x130>)
 80089b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089c4:	e01f      	b.n	8008a06 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681d      	ldr	r5, [r3, #0]
 80089ec:	466c      	mov	r4, sp
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089fa:	f107 0308 	add.w	r3, r7, #8
 80089fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a00:	4628      	mov	r0, r5
 8008a02:	f002 f839 	bl	800aa78 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f002 f90e 	bl	800ac30 <SDMMC_CmdBlockLength>
 8008a14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00c      	beq.n	8008a36 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3728      	adds	r7, #40	; 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bdb0      	pop	{r4, r5, r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	004005ff 	.word	0x004005ff

08008a50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a5c:	f107 030c 	add.w	r3, r7, #12
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa7c 	bl	8008f60 <SD_SendStatus>
 8008a68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	0a5b      	lsrs	r3, r3, #9
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a86:	693b      	ldr	r3, [r7, #16]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	2b82      	cmp	r3, #130	; 0x82
 8008ace:	d111      	bne.n	8008af4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f002 f955 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008ada:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fd3a 	bl	8008568 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0208 	bic.w	r2, r2, #8
 8008b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f002 fdbd 	bl	800b69c <HAL_SD_RxCpltCallback>
#endif
}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b38:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fd fa5a 	bl	8005ff4 <HAL_DMA_GetError>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d03e      	beq.n	8008bc4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b54:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d002      	beq.n	8008b62 <SD_DMAError+0x36>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d12d      	bne.n	8008bbe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <SD_DMAError+0xa0>)
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008b78:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008b86:	6978      	ldr	r0, [r7, #20]
 8008b88:	f7ff ff62 	bl	8008a50 <HAL_SD_GetCardState>
 8008b8c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b06      	cmp	r3, #6
 8008b92:	d002      	beq.n	8008b9a <SD_DMAError+0x6e>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d10a      	bne.n	8008bb0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 f8f0 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	431a      	orrs	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	f7ff fcd2 	bl	8008568 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	004005ff 	.word	0x004005ff

08008bd0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff ff31 	bl	8008a50 <HAL_SD_GetCardState>
 8008bee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b06      	cmp	r3, #6
 8008c02:	d002      	beq.n	8008c0a <SD_DMATxAbort+0x3a>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d10a      	bne.n	8008c20 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f002 f8b8 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f002 fd23 	bl	800b674 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c2e:	e002      	b.n	8008c36 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff fc99 	bl	8008568 <HAL_SD_ErrorCallback>
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff fefa 	bl	8008a50 <HAL_SD_GetCardState>
 8008c5c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	d002      	beq.n	8008c78 <SD_DMARxAbort+0x3a>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b05      	cmp	r3, #5
 8008c76:	d10a      	bne.n	8008c8e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f002 f881 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008c82:	4602      	mov	r2, r0
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f002 fcec 	bl	800b674 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c9c:	e002      	b.n	8008ca4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fc62 	bl	8008568 <HAL_SD_ErrorCallback>
}
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008cac:	b5b0      	push	{r4, r5, r7, lr}
 8008cae:	b094      	sub	sp, #80	; 0x50
 8008cb0:	af04      	add	r7, sp, #16
 8008cb2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 ff33 	bl	800ab28 <SDIO_GetPowerState>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ccc:	e0b6      	b.n	8008e3c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d02f      	beq.n	8008d36 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 f95c 	bl	800af98 <SDMMC_CmdSendCID>
 8008ce0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <SD_InitCard+0x40>
    {
      return errorstate;
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	e0a7      	b.n	8008e3c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 ff5d 	bl	800abb2 <SDIO_GetResponse>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2104      	movs	r1, #4
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 ff54 	bl	800abb2 <SDIO_GetResponse>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2108      	movs	r1, #8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 ff4b 	bl	800abb2 <SDIO_GetResponse>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	210c      	movs	r1, #12
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 ff42 	bl	800abb2 <SDIO_GetResponse>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d00d      	beq.n	8008d5a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f107 020e 	add.w	r2, r7, #14
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f002 f962 	bl	800b012 <SDMMC_CmdSetRelAdd>
 8008d4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <SD_InitCard+0xae>
    {
      return errorstate;
 8008d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d58:	e070      	b.n	8008e3c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d036      	beq.n	8008dd0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d62:	89fb      	ldrh	r3, [r7, #14]
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d72:	041b      	lsls	r3, r3, #16
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f002 f92c 	bl	800afd4 <SDMMC_CmdSendCSD>
 8008d7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	e059      	b.n	8008e3c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 ff0f 	bl	800abb2 <SDIO_GetResponse>
 8008d94:	4602      	mov	r2, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 ff06 	bl	800abb2 <SDIO_GetResponse>
 8008da6:	4602      	mov	r2, r0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2108      	movs	r1, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 fefd 	bl	800abb2 <SDIO_GetResponse>
 8008db8:	4602      	mov	r2, r0
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	210c      	movs	r1, #12
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 fef4 	bl	800abb2 <SDIO_GetResponse>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2104      	movs	r1, #4
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 feeb 	bl	800abb2 <SDIO_GetResponse>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	0d1a      	lsrs	r2, r3, #20
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008de4:	f107 0310 	add.w	r3, r7, #16
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fbc6 	bl	800857c <HAL_SD_GetCardCSD>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008df6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dfa:	e01f      	b.n	8008e3c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6819      	ldr	r1, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	461a      	mov	r2, r3
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	f001 ffdb 	bl	800adc8 <SDMMC_CmdSelDesel>
 8008e12:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <SD_InitCard+0x172>
  {
    return errorstate;
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1c:	e00e      	b.n	8008e3c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	466c      	mov	r4, sp
 8008e26:	f103 0210 	add.w	r2, r3, #16
 8008e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e30:	3304      	adds	r3, #4
 8008e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e34:	4628      	mov	r0, r5
 8008e36:	f001 fe1f 	bl	800aa78 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3740      	adds	r7, #64	; 0x40
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bdb0      	pop	{r4, r5, r7, pc}

08008e44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	2300      	movs	r3, #0
 8008e56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 ffd6 	bl	800ae0e <SDMMC_CmdGoIdleState>
 8008e62:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	e072      	b.n	8008f54 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 ffe9 	bl	800ae4a <SDMMC_CmdOperCond>
 8008e78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 ffbf 	bl	800ae0e <SDMMC_CmdGoIdleState>
 8008e90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	e05b      	b.n	8008f54 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d137      	bne.n	8008f1a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 ffe9 	bl	800ae88 <SDMMC_CmdAppCommand>
 8008eb6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d02d      	beq.n	8008f1a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ec2:	e047      	b.n	8008f54 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 ffdc 	bl	800ae88 <SDMMC_CmdAppCommand>
 8008ed0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <SD_PowerON+0x98>
    {
      return errorstate;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	e03b      	b.n	8008f54 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	491e      	ldr	r1, [pc, #120]	; (8008f5c <SD_PowerON+0x118>)
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 fff2 	bl	800aecc <SDMMC_CmdAppOperCommand>
 8008ee8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ef0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ef4:	e02e      	b.n	8008f54 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fe58 	bl	800abb2 <SDIO_GetResponse>
 8008f02:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	0fdb      	lsrs	r3, r3, #31
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <SD_PowerON+0xcc>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <SD_PowerON+0xce>
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]

    count++;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d802      	bhi.n	8008f2a <SD_PowerON+0xe6>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0cc      	beq.n	8008ec4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d902      	bls.n	8008f3a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f38:	e00c      	b.n	8008f54 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	645a      	str	r2, [r3, #68]	; 0x44
 8008f4a:	e002      	b.n	8008f52 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	c1100000 	.word	0xc1100000

08008f60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008f70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f74:	e018      	b.n	8008fa8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7e:	041b      	lsls	r3, r3, #16
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f002 f866 	bl	800b054 <SDMMC_CmdSendStatus>
 8008f88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	e009      	b.n	8008fa8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fe09 	bl	800abb2 <SDIO_GetResponse>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 fdf3 	bl	800abb2 <SDIO_GetResponse>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd6:	d102      	bne.n	8008fde <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fdc:	e02f      	b.n	800903e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008fde:	f107 030c 	add.w	r3, r7, #12
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f879 	bl	80090dc <SD_FindSCR>
 8008fea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	e023      	b.n	800903e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01c      	beq.n	800903a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f001 ff3b 	bl	800ae88 <SDMMC_CmdAppCommand>
 8009012:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	e00f      	b.n	800903e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2102      	movs	r1, #2
 8009024:	4618      	mov	r0, r3
 8009026:	f001 ff74 	bl	800af12 <SDMMC_CmdBusWidth>
 800902a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	e003      	b.n	800903e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009036:	2300      	movs	r3, #0
 8009038:	e001      	b.n	800903e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800903a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b086      	sub	sp, #24
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f001 fda8 	bl	800abb2 <SDIO_GetResponse>
 8009062:	4603      	mov	r3, r0
 8009064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800906c:	d102      	bne.n	8009074 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800906e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009072:	e02f      	b.n	80090d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009074:	f107 030c 	add.w	r3, r7, #12
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f82e 	bl	80090dc <SD_FindSCR>
 8009080:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	e023      	b.n	80090d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01c      	beq.n	80090d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909e:	041b      	lsls	r3, r3, #16
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f001 fef0 	bl	800ae88 <SDMMC_CmdAppCommand>
 80090a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	e00f      	b.n	80090d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 ff29 	bl	800af12 <SDMMC_CmdBusWidth>
 80090c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	e003      	b.n	80090d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e001      	b.n	80090d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80090dc:	b590      	push	{r4, r7, lr}
 80090de:	b08f      	sub	sp, #60	; 0x3c
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090e6:	f7fc fb21 	bl	800572c <HAL_GetTick>
 80090ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2108      	movs	r1, #8
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fd94 	bl	800ac30 <SDMMC_CmdBlockLength>
 8009108:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	e0b2      	b.n	800927a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911c:	041b      	lsls	r3, r3, #16
 800911e:	4619      	mov	r1, r3
 8009120:	4610      	mov	r0, r2
 8009122:	f001 feb1 	bl	800ae88 <SDMMC_CmdAppCommand>
 8009126:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <SD_FindSCR+0x56>
  {
    return errorstate;
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	e0a3      	b.n	800927a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009138:	2308      	movs	r3, #8
 800913a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800913c:	2330      	movs	r3, #48	; 0x30
 800913e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009140:	2302      	movs	r3, #2
 8009142:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009144:	2300      	movs	r3, #0
 8009146:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009148:	2301      	movs	r3, #1
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f107 0210 	add.w	r2, r7, #16
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fd3e 	bl	800abd8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f001 fef8 	bl	800af56 <SDMMC_CmdSendSCR>
 8009166:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d02a      	beq.n	80091c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	e083      	b.n	800927a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00f      	beq.n	80091a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	f107 0208 	add.w	r2, r7, #8
 800918c:	18d4      	adds	r4, r2, r3
 800918e:	4608      	mov	r0, r1
 8009190:	f001 fc9d 	bl	800aace <SDIO_ReadFIFO>
 8009194:	4603      	mov	r3, r0
 8009196:	6023      	str	r3, [r4, #0]
      index++;
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	3301      	adds	r3, #1
 800919c:	637b      	str	r3, [r7, #52]	; 0x34
 800919e:	e006      	b.n	80091ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d012      	beq.n	80091d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091ae:	f7fc fabd 	bl	800572c <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091bc:	d102      	bne.n	80091c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091c2:	e05a      	b.n	800927a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0cf      	beq.n	8009172 <SD_FindSCR+0x96>
 80091d2:	e000      	b.n	80091d6 <SD_FindSCR+0xfa>
      break;
 80091d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2208      	movs	r2, #8
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091ec:	2308      	movs	r3, #8
 80091ee:	e044      	b.n	800927a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2202      	movs	r2, #2
 8009204:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009206:	2302      	movs	r3, #2
 8009208:	e037      	b.n	800927a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2220      	movs	r2, #32
 800921e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009220:	2320      	movs	r3, #32
 8009222:	e02a      	b.n	800927a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f240 523a 	movw	r2, #1338	; 0x53a
 800922c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	061a      	lsls	r2, r3, #24
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800923a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009244:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	0e1b      	lsrs	r3, r3, #24
 800924a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	601a      	str	r2, [r3, #0]
    scr++;
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	3304      	adds	r3, #4
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	061a      	lsls	r2, r3, #24
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009262:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800926c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	0e1b      	lsrs	r3, r3, #24
 8009272:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	373c      	adds	r7, #60	; 0x3c
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}

08009282 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d03f      	beq.n	800931c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e033      	b.n	800930a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fc11 	bl	800aace <SDIO_ReadFIFO>
 80092ac:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3301      	adds	r3, #1
 80092ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	3b01      	subs	r3, #1
 80092c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	0a1b      	lsrs	r3, r3, #8
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3301      	adds	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3301      	adds	r3, #1
 80092fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	3b01      	subs	r3, #1
 8009302:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3301      	adds	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b07      	cmp	r3, #7
 800930e:	d9c8      	bls.n	80092a2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d043      	beq.n	80093c6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e037      	b.n	80093b4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	60bb      	str	r3, [r7, #8]
      tmp++;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3301      	adds	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	3b01      	subs	r3, #1
 8009354:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	021a      	lsls	r2, r3, #8
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4313      	orrs	r3, r2
 8009360:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3301      	adds	r3, #1
 8009366:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	3b01      	subs	r3, #1
 800936c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	041a      	lsls	r2, r3, #16
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]
      tmp++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	3b01      	subs	r3, #1
 8009384:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	061a      	lsls	r2, r3, #24
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	4313      	orrs	r3, r2
 8009390:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3b01      	subs	r3, #1
 800939c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f107 0208 	add.w	r2, r7, #8
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 fb9d 	bl	800aae8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	3301      	adds	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2b07      	cmp	r3, #7
 80093b8:	d9c4      	bls.n	8009344 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80093c6:	bf00      	nop
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e041      	b.n	8009464 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7f8 fba1 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f000 fa2f 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b02      	cmp	r3, #2
 8009480:	d122      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d11b      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0202 	mvn.w	r2, #2
 8009498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9bf 	bl	8009832 <HAL_TIM_IC_CaptureCallback>
 80094b4:	e005      	b.n	80094c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f9b1 	bl	800981e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f9c2 	bl	8009846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d122      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d11b      	bne.n	800951c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0204 	mvn.w	r2, #4
 80094ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f995 	bl	8009832 <HAL_TIM_IC_CaptureCallback>
 8009508:	e005      	b.n	8009516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f987 	bl	800981e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f998 	bl	8009846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b08      	cmp	r3, #8
 8009528:	d122      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f003 0308 	and.w	r3, r3, #8
 8009534:	2b08      	cmp	r3, #8
 8009536:	d11b      	bne.n	8009570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0208 	mvn.w	r2, #8
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2204      	movs	r2, #4
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f96b 	bl	8009832 <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f95d 	bl	800981e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f96e 	bl	8009846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d122      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b10      	cmp	r3, #16
 800958a:	d11b      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0210 	mvn.w	r2, #16
 8009594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2208      	movs	r2, #8
 800959a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f941 	bl	8009832 <HAL_TIM_IC_CaptureCallback>
 80095b0:	e005      	b.n	80095be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f933 	bl	800981e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f944 	bl	8009846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10e      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f06f 0201 	mvn.w	r2, #1
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f90d 	bl	800980a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fa:	2b80      	cmp	r3, #128	; 0x80
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fabc 	bl	8009b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d10e      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d107      	bne.n	8009648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f909 	bl	800985a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b20      	cmp	r3, #32
 8009654:	d10e      	bne.n	8009674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b20      	cmp	r3, #32
 8009662:	d107      	bne.n	8009674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0220 	mvn.w	r2, #32
 800966c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa86 	bl	8009b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_TIM_ConfigClockSource+0x1c>
 8009694:	2302      	movs	r3, #2
 8009696:	e0b4      	b.n	8009802 <HAL_TIM_ConfigClockSource+0x186>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d03e      	beq.n	8009750 <HAL_TIM_ConfigClockSource+0xd4>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d6:	f200 8087 	bhi.w	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	f000 8086 	beq.w	80097ee <HAL_TIM_ConfigClockSource+0x172>
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d87f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b70      	cmp	r3, #112	; 0x70
 80096ea:	d01a      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0xa6>
 80096ec:	2b70      	cmp	r3, #112	; 0x70
 80096ee:	d87b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096f0:	2b60      	cmp	r3, #96	; 0x60
 80096f2:	d050      	beq.n	8009796 <HAL_TIM_ConfigClockSource+0x11a>
 80096f4:	2b60      	cmp	r3, #96	; 0x60
 80096f6:	d877      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 80096f8:	2b50      	cmp	r3, #80	; 0x50
 80096fa:	d03c      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0xfa>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d873      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d058      	beq.n	80097b6 <HAL_TIM_ConfigClockSource+0x13a>
 8009704:	2b40      	cmp	r3, #64	; 0x40
 8009706:	d86f      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	d064      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d86b      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b20      	cmp	r3, #32
 8009712:	d060      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009714:	2b20      	cmp	r3, #32
 8009716:	d867      	bhi.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d05c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 800971c:	2b10      	cmp	r3, #16
 800971e:	d05a      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009720:	e062      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6899      	ldr	r1, [r3, #8]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f000 f997 	bl	8009a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	609a      	str	r2, [r3, #8]
      break;
 800974e:	e04f      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	6899      	ldr	r1, [r3, #8]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f000 f980 	bl	8009a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009772:	609a      	str	r2, [r3, #8]
      break;
 8009774:	e03c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6859      	ldr	r1, [r3, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	461a      	mov	r2, r3
 8009784:	f000 f8f4 	bl	8009970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2150      	movs	r1, #80	; 0x50
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f94d 	bl	8009a2e <TIM_ITRx_SetConfig>
      break;
 8009794:	e02c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6859      	ldr	r1, [r3, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f000 f913 	bl	80099ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2160      	movs	r1, #96	; 0x60
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f93d 	bl	8009a2e <TIM_ITRx_SetConfig>
      break;
 80097b4:	e01c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6859      	ldr	r1, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f000 f8d4 	bl	8009970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2140      	movs	r1, #64	; 0x40
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f92d 	bl	8009a2e <TIM_ITRx_SetConfig>
      break;
 80097d4:	e00c      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f000 f924 	bl	8009a2e <TIM_ITRx_SetConfig>
      break;
 80097e6:	e003      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
      break;
 80097ec:	e000      	b.n	80097f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
	...

08009870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a34      	ldr	r2, [pc, #208]	; (8009954 <TIM_Base_SetConfig+0xe4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00f      	beq.n	80098a8 <TIM_Base_SetConfig+0x38>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988e:	d00b      	beq.n	80098a8 <TIM_Base_SetConfig+0x38>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a31      	ldr	r2, [pc, #196]	; (8009958 <TIM_Base_SetConfig+0xe8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d007      	beq.n	80098a8 <TIM_Base_SetConfig+0x38>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a30      	ldr	r2, [pc, #192]	; (800995c <TIM_Base_SetConfig+0xec>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d003      	beq.n	80098a8 <TIM_Base_SetConfig+0x38>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <TIM_Base_SetConfig+0xf0>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d108      	bne.n	80098ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a25      	ldr	r2, [pc, #148]	; (8009954 <TIM_Base_SetConfig+0xe4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01b      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c8:	d017      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a22      	ldr	r2, [pc, #136]	; (8009958 <TIM_Base_SetConfig+0xe8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d013      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a21      	ldr	r2, [pc, #132]	; (800995c <TIM_Base_SetConfig+0xec>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00f      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a20      	ldr	r2, [pc, #128]	; (8009960 <TIM_Base_SetConfig+0xf0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00b      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <TIM_Base_SetConfig+0xf4>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d007      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a1e      	ldr	r2, [pc, #120]	; (8009968 <TIM_Base_SetConfig+0xf8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d003      	beq.n	80098fa <TIM_Base_SetConfig+0x8a>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a1d      	ldr	r2, [pc, #116]	; (800996c <TIM_Base_SetConfig+0xfc>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d108      	bne.n	800990c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4313      	orrs	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a08      	ldr	r2, [pc, #32]	; (8009954 <TIM_Base_SetConfig+0xe4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d103      	bne.n	8009940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	615a      	str	r2, [r3, #20]
}
 8009946:	bf00      	nop
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40010000 	.word	0x40010000
 8009958:	40000400 	.word	0x40000400
 800995c:	40000800 	.word	0x40000800
 8009960:	40000c00 	.word	0x40000c00
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400
 800996c:	40014800 	.word	0x40014800

08009970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f023 0201 	bic.w	r2, r3, #1
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800999a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 030a 	bic.w	r3, r3, #10
 80099ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	621a      	str	r2, [r3, #32]
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b087      	sub	sp, #28
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f023 0210 	bic.w	r2, r3, #16
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	031b      	lsls	r3, r3, #12
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	621a      	str	r2, [r3, #32]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	f043 0307 	orr.w	r3, r3, #7
 8009a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	609a      	str	r2, [r3, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	021a      	lsls	r2, r3, #8
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	609a      	str	r2, [r3, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d101      	bne.n	8009abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e050      	b.n	8009b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d018      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b08:	d013      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a18      	ldr	r2, [pc, #96]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d00e      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a16      	ldr	r2, [pc, #88]	; (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a13      	ldr	r2, [pc, #76]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d10c      	bne.n	8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40000400 	.word	0x40000400
 8009b74:	40000800 	.word	0x40000800
 8009b78:	40000c00 	.word	0x40000c00
 8009b7c:	40014000 	.word	0x40014000

08009b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e03f      	b.n	8009c3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f8 f85a 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2224      	movs	r2, #36	; 0x24
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68da      	ldr	r2, [r3, #12]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fd7b 	bl	800a6e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	691a      	ldr	r2, [r3, #16]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68da      	ldr	r2, [r3, #12]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b08a      	sub	sp, #40	; 0x28
 8009c46:	af02      	add	r7, sp, #8
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	603b      	str	r3, [r7, #0]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d17c      	bne.n	8009d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <HAL_UART_Transmit+0x2c>
 8009c68:	88fb      	ldrh	r3, [r7, #6]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e075      	b.n	8009d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_UART_Transmit+0x3e>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e06e      	b.n	8009d5e <HAL_UART_Transmit+0x11c>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2221      	movs	r2, #33	; 0x21
 8009c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c96:	f7fb fd49 	bl	800572c <HAL_GetTick>
 8009c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	88fa      	ldrh	r2, [r7, #6]
 8009ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb0:	d108      	bne.n	8009cc4 <HAL_UART_Transmit+0x82>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d104      	bne.n	8009cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	61bb      	str	r3, [r7, #24]
 8009cc2:	e003      	b.n	8009ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cd4:	e02a      	b.n	8009d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2180      	movs	r1, #128	; 0x80
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 faf9 	bl	800a2d8 <UART_WaitOnFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e036      	b.n	8009d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10b      	bne.n	8009d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	3302      	adds	r3, #2
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	e007      	b.n	8009d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1cf      	bne.n	8009cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2140      	movs	r1, #64	; 0x40
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fac9 	bl	800a2d8 <UART_WaitOnFlagUntilTimeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e006      	b.n	8009d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e000      	b.n	8009d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d5c:	2302      	movs	r3, #2
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b0ba      	sub	sp, #232	; 0xe8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10f      	bne.n	8009dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d009      	beq.n	8009dce <HAL_UART_IRQHandler+0x66>
 8009dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fbd3 	bl	800a572 <UART_Receive_IT>
      return;
 8009dcc:	e256      	b.n	800a27c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 80de 	beq.w	8009f94 <HAL_UART_IRQHandler+0x22c>
 8009dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d106      	bne.n	8009df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80d1 	beq.w	8009f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <HAL_UART_IRQHandler+0xae>
 8009dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f043 0201 	orr.w	r2, r3, #1
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00b      	beq.n	8009e3a <HAL_UART_IRQHandler+0xd2>
 8009e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d005      	beq.n	8009e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	f043 0202 	orr.w	r2, r3, #2
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <HAL_UART_IRQHandler+0xf6>
 8009e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f043 0204 	orr.w	r2, r3, #4
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e62:	f003 0308 	and.w	r3, r3, #8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d011      	beq.n	8009e8e <HAL_UART_IRQHandler+0x126>
 8009e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	f043 0208 	orr.w	r2, r3, #8
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 81ed 	beq.w	800a272 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d008      	beq.n	8009eb6 <HAL_UART_IRQHandler+0x14e>
 8009ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fb5e 	bl	800a572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d103      	bne.n	8009ee2 <HAL_UART_IRQHandler+0x17a>
 8009eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04f      	beq.n	8009f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa66 	bl	800a3b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d141      	bne.n	8009f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3314      	adds	r3, #20
 8009efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3314      	adds	r3, #20
 8009f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1d9      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	4a7d      	ldr	r2, [pc, #500]	; (800a144 <HAL_UART_IRQHandler+0x3dc>)
 8009f50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fb fea0 	bl	8005c9c <HAL_DMA_Abort_IT>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f70:	e00e      	b.n	8009f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f99a 	bl	800a2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	e00a      	b.n	8009f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f996 	bl	800a2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	e006      	b.n	8009f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f992 	bl	800a2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f8e:	e170      	b.n	800a272 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	bf00      	nop
    return;
 8009f92:	e16e      	b.n	800a272 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f040 814a 	bne.w	800a232 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8143 	beq.w	800a232 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 813c 	beq.w	800a232 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	f040 80b4 	bne.w	800a148 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 8140 	beq.w	800a276 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ffe:	429a      	cmp	r2, r3
 800a000:	f080 8139 	bcs.w	800a276 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a00a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a016:	f000 8088 	beq.w	800a12a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	330c      	adds	r3, #12
 800a020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a04a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1d9      	bne.n	800a01a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3314      	adds	r3, #20
 800a06c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3314      	adds	r3, #20
 800a086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a08a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a08e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e1      	bne.n	800a066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3314      	adds	r3, #20
 800a0a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3314      	adds	r3, #20
 800a0c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e3      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	330c      	adds	r3, #12
 800a0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0fa:	f023 0310 	bic.w	r3, r3, #16
 800a0fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	330c      	adds	r3, #12
 800a108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a10c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a10e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e3      	bne.n	800a0e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	4618      	mov	r0, r3
 800a126:	f7fb fd49 	bl	8005bbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a132:	b29b      	uxth	r3, r3
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	b29b      	uxth	r3, r3
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8c0 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a140:	e099      	b.n	800a276 <HAL_UART_IRQHandler+0x50e>
 800a142:	bf00      	nop
 800a144:	0800a47b 	.word	0x0800a47b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a150:	b29b      	uxth	r3, r3
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 808b 	beq.w	800a27a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8086 	beq.w	800a27a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	330c      	adds	r3, #12
 800a174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a192:	647a      	str	r2, [r7, #68]	; 0x44
 800a194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e3      	bne.n	800a16e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3314      	adds	r3, #20
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1ca:	633a      	str	r2, [r7, #48]	; 0x30
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e3      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0310 	bic.w	r3, r3, #16
 800a202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a210:	61fa      	str	r2, [r7, #28]
 800a212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	69b9      	ldr	r1, [r7, #24]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	617b      	str	r3, [r7, #20]
   return(result);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e3      	bne.n	800a1ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f848 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a230:	e023      	b.n	800a27a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <HAL_UART_IRQHandler+0x4ea>
 800a23e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f929 	bl	800a4a2 <UART_Transmit_IT>
    return;
 800a250:	e014      	b.n	800a27c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00e      	beq.n	800a27c <HAL_UART_IRQHandler+0x514>
 800a25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d008      	beq.n	800a27c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f969 	bl	800a542 <UART_EndTransmit_IT>
    return;
 800a270:	e004      	b.n	800a27c <HAL_UART_IRQHandler+0x514>
    return;
 800a272:	bf00      	nop
 800a274:	e002      	b.n	800a27c <HAL_UART_IRQHandler+0x514>
      return;
 800a276:	bf00      	nop
 800a278:	e000      	b.n	800a27c <HAL_UART_IRQHandler+0x514>
      return;
 800a27a:	bf00      	nop
  }
}
 800a27c:	37e8      	adds	r7, #232	; 0xe8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop

0800a284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b090      	sub	sp, #64	; 0x40
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e8:	e050      	b.n	800a38c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f0:	d04c      	beq.n	800a38c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d007      	beq.n	800a308 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2f8:	f7fb fa18 	bl	800572c <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a304:	429a      	cmp	r2, r3
 800a306:	d241      	bcs.n	800a38c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	330c      	adds	r3, #12
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a328:	637a      	str	r2, [r7, #52]	; 0x34
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e5      	bne.n	800a308 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3314      	adds	r3, #20
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	63bb      	str	r3, [r7, #56]	; 0x38
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3314      	adds	r3, #20
 800a35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a35c:	623a      	str	r2, [r7, #32]
 800a35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	69f9      	ldr	r1, [r7, #28]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	61bb      	str	r3, [r7, #24]
   return(result);
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e00f      	b.n	800a3ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4013      	ands	r3, r2
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	429a      	cmp	r2, r3
 800a39a:	bf0c      	ite	eq
 800a39c:	2301      	moveq	r3, #1
 800a39e:	2300      	movne	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d09f      	beq.n	800a2ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3740      	adds	r7, #64	; 0x40
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b095      	sub	sp, #84	; 0x54
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	330c      	adds	r3, #12
 800a3da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3dc:	643a      	str	r2, [r7, #64]	; 0x40
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e5      	bne.n	800a3bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f023 0301 	bic.w	r3, r3, #1
 800a406:	64bb      	str	r3, [r7, #72]	; 0x48
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3314      	adds	r3, #20
 800a40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a410:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e5      	bne.n	800a3f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d119      	bne.n	800a460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	330c      	adds	r3, #12
 800a432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f023 0310 	bic.w	r3, r3, #16
 800a442:	647b      	str	r3, [r7, #68]	; 0x44
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	330c      	adds	r3, #12
 800a44a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a44c:	61ba      	str	r2, [r7, #24]
 800a44e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6979      	ldr	r1, [r7, #20]
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	613b      	str	r3, [r7, #16]
   return(result);
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e5      	bne.n	800a42c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a46e:	bf00      	nop
 800a470:	3754      	adds	r7, #84	; 0x54
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff ff09 	bl	800a2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b21      	cmp	r3, #33	; 0x21
 800a4b4:	d13e      	bne.n	800a534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4be:	d114      	bne.n	800a4ea <UART_Transmit_IT+0x48>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d110      	bne.n	800a4ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	1c9a      	adds	r2, r3, #2
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	621a      	str	r2, [r3, #32]
 800a4e8:	e008      	b.n	800a4fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	1c59      	adds	r1, r3, #1
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6211      	str	r1, [r2, #32]
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a500:	b29b      	uxth	r3, r3
 800a502:	3b01      	subs	r3, #1
 800a504:	b29b      	uxth	r3, r3
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4619      	mov	r1, r3
 800a50a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10f      	bne.n	800a530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a51e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a52e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	e000      	b.n	800a536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a534:	2302      	movs	r3, #2
  }
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff fe8e 	bl	800a284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b08c      	sub	sp, #48	; 0x30
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b22      	cmp	r3, #34	; 0x22
 800a584:	f040 80ab 	bne.w	800a6de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a590:	d117      	bne.n	800a5c2 <UART_Receive_IT+0x50>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d113      	bne.n	800a5c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	1c9a      	adds	r2, r3, #2
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	629a      	str	r2, [r3, #40]	; 0x28
 800a5c0:	e026      	b.n	800a610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d4:	d007      	beq.n	800a5e6 <UART_Receive_IT+0x74>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <UART_Receive_IT+0x82>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	e008      	b.n	800a606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a600:	b2da      	uxtb	r2, r3
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a614:	b29b      	uxth	r3, r3
 800a616:	3b01      	subs	r3, #1
 800a618:	b29b      	uxth	r3, r3
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	4619      	mov	r1, r3
 800a61e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a620:	2b00      	cmp	r3, #0
 800a622:	d15a      	bne.n	800a6da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0220 	bic.w	r2, r2, #32
 800a632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695a      	ldr	r2, [r3, #20]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0201 	bic.w	r2, r2, #1
 800a652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2220      	movs	r2, #32
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a660:	2b01      	cmp	r3, #1
 800a662:	d135      	bne.n	800a6d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	330c      	adds	r3, #12
 800a670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	613b      	str	r3, [r7, #16]
   return(result);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f023 0310 	bic.w	r3, r3, #16
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	330c      	adds	r3, #12
 800a688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a68a:	623a      	str	r2, [r7, #32]
 800a68c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	69f9      	ldr	r1, [r7, #28]
 800a690:	6a3a      	ldr	r2, [r7, #32]
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	61bb      	str	r3, [r7, #24]
   return(result);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b10      	cmp	r3, #16
 800a6aa:	d10a      	bne.n	800a6c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fdf9 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
 800a6ce:	e002      	b.n	800a6d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fde1 	bl	800a298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e002      	b.n	800a6e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e000      	b.n	800a6e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6de:	2302      	movs	r3, #2
  }
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3730      	adds	r7, #48	; 0x30
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b09f      	sub	sp, #124	; 0x7c
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6fe:	68d9      	ldr	r1, [r3, #12]
 800a700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	ea40 0301 	orr.w	r3, r0, r1
 800a708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70c:	689a      	ldr	r2, [r3, #8]
 800a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	431a      	orrs	r2, r3
 800a714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	431a      	orrs	r2, r3
 800a71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	4313      	orrs	r3, r2
 800a720:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a72c:	f021 010c 	bic.w	r1, r1, #12
 800a730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a736:	430b      	orrs	r3, r1
 800a738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a746:	6999      	ldr	r1, [r3, #24]
 800a748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	ea40 0301 	orr.w	r3, r0, r1
 800a750:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4bc5      	ldr	r3, [pc, #788]	; (800aa6c <UART_SetConfig+0x384>)
 800a758:	429a      	cmp	r2, r3
 800a75a:	d004      	beq.n	800a766 <UART_SetConfig+0x7e>
 800a75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4bc3      	ldr	r3, [pc, #780]	; (800aa70 <UART_SetConfig+0x388>)
 800a762:	429a      	cmp	r2, r3
 800a764:	d103      	bne.n	800a76e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a766:	f7fd faef 	bl	8007d48 <HAL_RCC_GetPCLK2Freq>
 800a76a:	6778      	str	r0, [r7, #116]	; 0x74
 800a76c:	e002      	b.n	800a774 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a76e:	f7fd fad7 	bl	8007d20 <HAL_RCC_GetPCLK1Freq>
 800a772:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a77c:	f040 80b6 	bne.w	800a8ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a782:	461c      	mov	r4, r3
 800a784:	f04f 0500 	mov.w	r5, #0
 800a788:	4622      	mov	r2, r4
 800a78a:	462b      	mov	r3, r5
 800a78c:	1891      	adds	r1, r2, r2
 800a78e:	6439      	str	r1, [r7, #64]	; 0x40
 800a790:	415b      	adcs	r3, r3
 800a792:	647b      	str	r3, [r7, #68]	; 0x44
 800a794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a798:	1912      	adds	r2, r2, r4
 800a79a:	eb45 0303 	adc.w	r3, r5, r3
 800a79e:	f04f 0000 	mov.w	r0, #0
 800a7a2:	f04f 0100 	mov.w	r1, #0
 800a7a6:	00d9      	lsls	r1, r3, #3
 800a7a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7ac:	00d0      	lsls	r0, r2, #3
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	1911      	adds	r1, r2, r4
 800a7b4:	6639      	str	r1, [r7, #96]	; 0x60
 800a7b6:	416b      	adcs	r3, r5
 800a7b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f04f 0300 	mov.w	r3, #0
 800a7c4:	1891      	adds	r1, r2, r2
 800a7c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7c8:	415b      	adcs	r3, r3
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a7d4:	f7f6 fab0 	bl	8000d38 <__aeabi_uldivmod>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4ba5      	ldr	r3, [pc, #660]	; (800aa74 <UART_SetConfig+0x38c>)
 800a7de:	fba3 2302 	umull	r2, r3, r3, r2
 800a7e2:	095b      	lsrs	r3, r3, #5
 800a7e4:	011e      	lsls	r6, r3, #4
 800a7e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7e8:	461c      	mov	r4, r3
 800a7ea:	f04f 0500 	mov.w	r5, #0
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	1891      	adds	r1, r2, r2
 800a7f4:	6339      	str	r1, [r7, #48]	; 0x30
 800a7f6:	415b      	adcs	r3, r3
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a7fe:	1912      	adds	r2, r2, r4
 800a800:	eb45 0303 	adc.w	r3, r5, r3
 800a804:	f04f 0000 	mov.w	r0, #0
 800a808:	f04f 0100 	mov.w	r1, #0
 800a80c:	00d9      	lsls	r1, r3, #3
 800a80e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a812:	00d0      	lsls	r0, r2, #3
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	1911      	adds	r1, r2, r4
 800a81a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a81c:	416b      	adcs	r3, r5
 800a81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	461a      	mov	r2, r3
 800a826:	f04f 0300 	mov.w	r3, #0
 800a82a:	1891      	adds	r1, r2, r2
 800a82c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a82e:	415b      	adcs	r3, r3
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a836:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a83a:	f7f6 fa7d 	bl	8000d38 <__aeabi_uldivmod>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4b8c      	ldr	r3, [pc, #560]	; (800aa74 <UART_SetConfig+0x38c>)
 800a844:	fba3 1302 	umull	r1, r3, r3, r2
 800a848:	095b      	lsrs	r3, r3, #5
 800a84a:	2164      	movs	r1, #100	; 0x64
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	3332      	adds	r3, #50	; 0x32
 800a856:	4a87      	ldr	r2, [pc, #540]	; (800aa74 <UART_SetConfig+0x38c>)
 800a858:	fba2 2303 	umull	r2, r3, r2, r3
 800a85c:	095b      	lsrs	r3, r3, #5
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a864:	441e      	add	r6, r3
 800a866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a868:	4618      	mov	r0, r3
 800a86a:	f04f 0100 	mov.w	r1, #0
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	1894      	adds	r4, r2, r2
 800a874:	623c      	str	r4, [r7, #32]
 800a876:	415b      	adcs	r3, r3
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
 800a87a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a87e:	1812      	adds	r2, r2, r0
 800a880:	eb41 0303 	adc.w	r3, r1, r3
 800a884:	f04f 0400 	mov.w	r4, #0
 800a888:	f04f 0500 	mov.w	r5, #0
 800a88c:	00dd      	lsls	r5, r3, #3
 800a88e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a892:	00d4      	lsls	r4, r2, #3
 800a894:	4622      	mov	r2, r4
 800a896:	462b      	mov	r3, r5
 800a898:	1814      	adds	r4, r2, r0
 800a89a:	653c      	str	r4, [r7, #80]	; 0x50
 800a89c:	414b      	adcs	r3, r1
 800a89e:	657b      	str	r3, [r7, #84]	; 0x54
 800a8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	1891      	adds	r1, r2, r2
 800a8ac:	61b9      	str	r1, [r7, #24]
 800a8ae:	415b      	adcs	r3, r3
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a8ba:	f7f6 fa3d 	bl	8000d38 <__aeabi_uldivmod>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4b6c      	ldr	r3, [pc, #432]	; (800aa74 <UART_SetConfig+0x38c>)
 800a8c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	2164      	movs	r1, #100	; 0x64
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	3332      	adds	r3, #50	; 0x32
 800a8d6:	4a67      	ldr	r2, [pc, #412]	; (800aa74 <UART_SetConfig+0x38c>)
 800a8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	f003 0207 	and.w	r2, r3, #7
 800a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4432      	add	r2, r6
 800a8e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8ea:	e0b9      	b.n	800aa60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	f04f 0500 	mov.w	r5, #0
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	1891      	adds	r1, r2, r2
 800a8fa:	6139      	str	r1, [r7, #16]
 800a8fc:	415b      	adcs	r3, r3
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a904:	1912      	adds	r2, r2, r4
 800a906:	eb45 0303 	adc.w	r3, r5, r3
 800a90a:	f04f 0000 	mov.w	r0, #0
 800a90e:	f04f 0100 	mov.w	r1, #0
 800a912:	00d9      	lsls	r1, r3, #3
 800a914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a918:	00d0      	lsls	r0, r2, #3
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	eb12 0804 	adds.w	r8, r2, r4
 800a922:	eb43 0905 	adc.w	r9, r3, r5
 800a926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f04f 0100 	mov.w	r1, #0
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	008b      	lsls	r3, r1, #2
 800a93a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a93e:	0082      	lsls	r2, r0, #2
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f6 f9f8 	bl	8000d38 <__aeabi_uldivmod>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4b49      	ldr	r3, [pc, #292]	; (800aa74 <UART_SetConfig+0x38c>)
 800a94e:	fba3 2302 	umull	r2, r3, r3, r2
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	011e      	lsls	r6, r3, #4
 800a956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a958:	4618      	mov	r0, r3
 800a95a:	f04f 0100 	mov.w	r1, #0
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	1894      	adds	r4, r2, r2
 800a964:	60bc      	str	r4, [r7, #8]
 800a966:	415b      	adcs	r3, r3
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a96e:	1812      	adds	r2, r2, r0
 800a970:	eb41 0303 	adc.w	r3, r1, r3
 800a974:	f04f 0400 	mov.w	r4, #0
 800a978:	f04f 0500 	mov.w	r5, #0
 800a97c:	00dd      	lsls	r5, r3, #3
 800a97e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a982:	00d4      	lsls	r4, r2, #3
 800a984:	4622      	mov	r2, r4
 800a986:	462b      	mov	r3, r5
 800a988:	1814      	adds	r4, r2, r0
 800a98a:	64bc      	str	r4, [r7, #72]	; 0x48
 800a98c:	414b      	adcs	r3, r1
 800a98e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	f04f 0100 	mov.w	r1, #0
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	f04f 0300 	mov.w	r3, #0
 800a9a2:	008b      	lsls	r3, r1, #2
 800a9a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9a8:	0082      	lsls	r2, r0, #2
 800a9aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a9ae:	f7f6 f9c3 	bl	8000d38 <__aeabi_uldivmod>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4b2f      	ldr	r3, [pc, #188]	; (800aa74 <UART_SetConfig+0x38c>)
 800a9b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9bc:	095b      	lsrs	r3, r3, #5
 800a9be:	2164      	movs	r1, #100	; 0x64
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	011b      	lsls	r3, r3, #4
 800a9c8:	3332      	adds	r3, #50	; 0x32
 800a9ca:	4a2a      	ldr	r2, [pc, #168]	; (800aa74 <UART_SetConfig+0x38c>)
 800a9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d0:	095b      	lsrs	r3, r3, #5
 800a9d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d6:	441e      	add	r6, r3
 800a9d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f04f 0100 	mov.w	r1, #0
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	1894      	adds	r4, r2, r2
 800a9e6:	603c      	str	r4, [r7, #0]
 800a9e8:	415b      	adcs	r3, r3
 800a9ea:	607b      	str	r3, [r7, #4]
 800a9ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f0:	1812      	adds	r2, r2, r0
 800a9f2:	eb41 0303 	adc.w	r3, r1, r3
 800a9f6:	f04f 0400 	mov.w	r4, #0
 800a9fa:	f04f 0500 	mov.w	r5, #0
 800a9fe:	00dd      	lsls	r5, r3, #3
 800aa00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa04:	00d4      	lsls	r4, r2, #3
 800aa06:	4622      	mov	r2, r4
 800aa08:	462b      	mov	r3, r5
 800aa0a:	eb12 0a00 	adds.w	sl, r2, r0
 800aa0e:	eb43 0b01 	adc.w	fp, r3, r1
 800aa12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f04f 0100 	mov.w	r1, #0
 800aa1c:	f04f 0200 	mov.w	r2, #0
 800aa20:	f04f 0300 	mov.w	r3, #0
 800aa24:	008b      	lsls	r3, r1, #2
 800aa26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa2a:	0082      	lsls	r2, r0, #2
 800aa2c:	4650      	mov	r0, sl
 800aa2e:	4659      	mov	r1, fp
 800aa30:	f7f6 f982 	bl	8000d38 <__aeabi_uldivmod>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <UART_SetConfig+0x38c>)
 800aa3a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	2164      	movs	r1, #100	; 0x64
 800aa42:	fb01 f303 	mul.w	r3, r1, r3
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	011b      	lsls	r3, r3, #4
 800aa4a:	3332      	adds	r3, #50	; 0x32
 800aa4c:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <UART_SetConfig+0x38c>)
 800aa4e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa52:	095b      	lsrs	r3, r3, #5
 800aa54:	f003 020f 	and.w	r2, r3, #15
 800aa58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4432      	add	r2, r6
 800aa5e:	609a      	str	r2, [r3, #8]
}
 800aa60:	bf00      	nop
 800aa62:	377c      	adds	r7, #124	; 0x7c
 800aa64:	46bd      	mov	sp, r7
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	bf00      	nop
 800aa6c:	40011000 	.word	0x40011000
 800aa70:	40011400 	.word	0x40011400
 800aa74:	51eb851f 	.word	0x51eb851f

0800aa78 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800aa78:	b084      	sub	sp, #16
 800aa7a:	b480      	push	{r7}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	f107 001c 	add.w	r0, r7, #28
 800aa86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aaa2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	b004      	add	sp, #16
 800aacc:	4770      	bx	lr

0800aace <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2203      	movs	r2, #3
 800ab16:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ab18:	2002      	movs	r0, #2
 800ab1a:	f7fa fe13 	bl	8005744 <HAL_Delay>
  
  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0303 	and.w	r3, r3, #3
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab68:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab7e:	f023 030f 	bic.w	r3, r3, #15
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	431a      	orrs	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	b2db      	uxtb	r3, r3
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3314      	adds	r3, #20
 800abc0:	461a      	mov	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
}  
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abfe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac04:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0

}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac3e:	2310      	movs	r3, #16
 800ac40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac42:	2340      	movs	r3, #64	; 0x40
 800ac44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac50:	f107 0308 	add.w	r3, r7, #8
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff ff74 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ac5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac60:	2110      	movs	r1, #16
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fa44 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800ac68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac6a:	69fb      	ldr	r3, [r7, #28]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3720      	adds	r7, #32
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac82:	2311      	movs	r3, #17
 800ac84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac86:	2340      	movs	r3, #64	; 0x40
 800ac88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac94:	f107 0308 	add.w	r3, r7, #8
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff ff52 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca4:	2111      	movs	r1, #17
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa22 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800acac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acae:	69fb      	ldr	r3, [r7, #28]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3720      	adds	r7, #32
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acc6:	2312      	movs	r3, #18
 800acc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ff30 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ace4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace8:	2112      	movs	r1, #18
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa00 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800acf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acf2:	69fb      	ldr	r3, [r7, #28]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad0a:	2318      	movs	r3, #24
 800ad0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff ff0e 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ad28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2c:	2118      	movs	r1, #24
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f9de 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800ad34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad36:	69fb      	ldr	r3, [r7, #28]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3720      	adds	r7, #32
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad4e:	2319      	movs	r3, #25
 800ad50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad60:	f107 0308 	add.w	r3, r7, #8
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff feec 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ad6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad70:	2119      	movs	r1, #25
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9bc 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800ad78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad90:	230c      	movs	r3, #12
 800ad92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff fecb 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800adae:	4a05      	ldr	r2, [pc, #20]	; (800adc4 <SDMMC_CmdStopTransfer+0x40>)
 800adb0:	210c      	movs	r1, #12
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f99c 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800adb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adba:	69fb      	ldr	r3, [r7, #28]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	05f5e100 	.word	0x05f5e100

0800adc8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800add8:	2307      	movs	r3, #7
 800adda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800addc:	2340      	movs	r3, #64	; 0x40
 800adde:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ade4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adea:	f107 0310 	add.w	r3, r7, #16
 800adee:	4619      	mov	r1, r3
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff fea7 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800adf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfa:	2107      	movs	r1, #7
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f977 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800ae02:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3728      	adds	r7, #40	; 0x28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b088      	sub	sp, #32
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fe86 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f92d 	bl	800b098 <SDMMC_GetCmdError>
 800ae3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae40:	69fb      	ldr	r3, [r7, #28]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b088      	sub	sp, #32
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae58:	2308      	movs	r3, #8
 800ae5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae5c:	2340      	movs	r3, #64	; 0x40
 800ae5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff fe67 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fb24 	bl	800b4c4 <SDMMC_GetCmdResp7>
 800ae7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3720      	adds	r7, #32
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae96:	2337      	movs	r3, #55	; 0x37
 800ae98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae9a:	2340      	movs	r3, #64	; 0x40
 800ae9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aea8:	f107 0308 	add.w	r3, r7, #8
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fe48 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800aeb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb8:	2137      	movs	r1, #55	; 0x37
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f918 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800aec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec2:	69fb      	ldr	r3, [r7, #28]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aee2:	2329      	movs	r3, #41	; 0x29
 800aee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aee6:	2340      	movs	r3, #64	; 0x40
 800aee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff fe22 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa2b 	bl	800b35c <SDMMC_GetCmdResp3>
 800af06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af08:	69fb      	ldr	r3, [r7, #28]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b088      	sub	sp, #32
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af20:	2306      	movs	r3, #6
 800af22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af32:	f107 0308 	add.w	r3, r7, #8
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f7ff fe03 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800af3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af42:	2106      	movs	r1, #6
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f8d3 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800af4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4c:	69fb      	ldr	r3, [r7, #28]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b088      	sub	sp, #32
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af62:	2333      	movs	r3, #51	; 0x33
 800af64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af66:	2340      	movs	r3, #64	; 0x40
 800af68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af6a:	2300      	movs	r3, #0
 800af6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af74:	f107 0308 	add.w	r3, r7, #8
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff fde2 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800af80:	f241 3288 	movw	r2, #5000	; 0x1388
 800af84:	2133      	movs	r1, #51	; 0x33
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8b2 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800af8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af8e:	69fb      	ldr	r3, [r7, #28]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3720      	adds	r7, #32
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afa4:	2302      	movs	r3, #2
 800afa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800afa8:	23c0      	movs	r3, #192	; 0xc0
 800afaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afac:	2300      	movs	r3, #0
 800afae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff fdc1 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f982 	bl	800b2cc <SDMMC_GetCmdResp2>
 800afc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afca:	69fb      	ldr	r3, [r7, #28]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800afe2:	2309      	movs	r3, #9
 800afe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800afe6:	23c0      	movs	r3, #192	; 0xc0
 800afe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff fda2 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f963 	bl	800b2cc <SDMMC_GetCmdResp2>
 800b006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b008:	69fb      	ldr	r3, [r7, #28]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3720      	adds	r7, #32
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b088      	sub	sp, #32
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b020:	2303      	movs	r3, #3
 800b022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fd83 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	2103      	movs	r1, #3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9c8 	bl	800b3d8 <SDMMC_GetCmdResp6>
 800b048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b04a:	69fb      	ldr	r3, [r7, #28]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b062:	230d      	movs	r3, #13
 800b064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b074:	f107 0308 	add.w	r3, r7, #8
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fd62 	bl	800ab44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b080:	f241 3288 	movw	r2, #5000	; 0x1388
 800b084:	210d      	movs	r1, #13
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f832 	bl	800b0f0 <SDMMC_GetCmdResp1>
 800b08c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b08e:	69fb      	ldr	r3, [r7, #28]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3720      	adds	r7, #32
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0a0:	4b11      	ldr	r3, [pc, #68]	; (800b0e8 <SDMMC_GetCmdError+0x50>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a11      	ldr	r2, [pc, #68]	; (800b0ec <SDMMC_GetCmdError+0x54>)
 800b0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0aa:	0a5b      	lsrs	r3, r3, #9
 800b0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	1e5a      	subs	r2, r3, #1
 800b0ba:	60fa      	str	r2, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0c4:	e009      	b.n	800b0da <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f1      	beq.n	800b0b6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	22c5      	movs	r2, #197	; 0xc5
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000000 	.word	0x20000000
 800b0ec:	10624dd3 	.word	0x10624dd3

0800b0f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0fe:	4b70      	ldr	r3, [pc, #448]	; (800b2c0 <SDMMC_GetCmdResp1+0x1d0>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a70      	ldr	r2, [pc, #448]	; (800b2c4 <SDMMC_GetCmdResp1+0x1d4>)
 800b104:	fba2 2303 	umull	r2, r3, r2, r3
 800b108:	0a5a      	lsrs	r2, r3, #9
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	fb02 f303 	mul.w	r3, r2, r3
 800b110:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	1e5a      	subs	r2, r3, #1
 800b116:	61fa      	str	r2, [r7, #28]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b11c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b120:	e0c9      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0ef      	beq.n	800b112 <SDMMC_GetCmdResp1+0x22>
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1ea      	bne.n	800b112 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2204      	movs	r2, #4
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b14e:	2304      	movs	r3, #4
 800b150:	e0b1      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b164:	2301      	movs	r3, #1
 800b166:	e0a6      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22c5      	movs	r2, #197	; 0xc5
 800b16c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7ff fd12 	bl	800ab98 <SDIO_GetCommandResponse>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	7afb      	ldrb	r3, [r7, #11]
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d001      	beq.n	800b182 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b17e:	2301      	movs	r3, #1
 800b180:	e099      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b182:	2100      	movs	r1, #0
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff fd14 	bl	800abb2 <SDIO_GetResponse>
 800b18a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	4b4e      	ldr	r3, [pc, #312]	; (800b2c8 <SDMMC_GetCmdResp1+0x1d8>)
 800b190:	4013      	ands	r3, r2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b196:	2300      	movs	r3, #0
 800b198:	e08d      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da02      	bge.n	800b1a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1a4:	e087      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1b0:	2340      	movs	r3, #64	; 0x40
 800b1b2:	e080      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1be:	2380      	movs	r3, #128	; 0x80
 800b1c0:	e079      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d0:	e071      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e0:	e069      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1f0:	e061      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b200:	e059      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b210:	e051      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b220:	e049      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b22c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b230:	e041      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b23c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b240:	e039      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b24c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b250:	e031      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b25c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b260:	e029      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b26c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b270:	e021      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b27c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b280:	e019      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b28c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b290:	e011      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b29c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2a0:	e009      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2b0:	e001      	b.n	800b2b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000000 	.word	0x20000000
 800b2c4:	10624dd3 	.word	0x10624dd3
 800b2c8:	fdffe008 	.word	0xfdffe008

0800b2cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <SDMMC_GetCmdResp2+0x88>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a1f      	ldr	r2, [pc, #124]	; (800b358 <SDMMC_GetCmdResp2+0x8c>)
 800b2da:	fba2 2303 	umull	r2, r3, r2, r3
 800b2de:	0a5b      	lsrs	r3, r3, #9
 800b2e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e4:	fb02 f303 	mul.w	r3, r2, r3
 800b2e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	60fa      	str	r2, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d102      	bne.n	800b2fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2f8:	e026      	b.n	800b348 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0ef      	beq.n	800b2ea <SDMMC_GetCmdResp2+0x1e>
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1ea      	bne.n	800b2ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d004      	beq.n	800b32a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2204      	movs	r2, #4
 800b324:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b326:	2304      	movs	r3, #4
 800b328:	e00e      	b.n	800b348 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d004      	beq.n	800b340 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e003      	b.n	800b348 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	22c5      	movs	r2, #197	; 0xc5
 800b344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	20000000 	.word	0x20000000
 800b358:	10624dd3 	.word	0x10624dd3

0800b35c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b364:	4b1a      	ldr	r3, [pc, #104]	; (800b3d0 <SDMMC_GetCmdResp3+0x74>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a1a      	ldr	r2, [pc, #104]	; (800b3d4 <SDMMC_GetCmdResp3+0x78>)
 800b36a:	fba2 2303 	umull	r2, r3, r2, r3
 800b36e:	0a5b      	lsrs	r3, r3, #9
 800b370:	f241 3288 	movw	r2, #5000	; 0x1388
 800b374:	fb02 f303 	mul.w	r3, r2, r3
 800b378:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1e5a      	subs	r2, r3, #1
 800b37e:	60fa      	str	r2, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b388:	e01b      	b.n	800b3c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0ef      	beq.n	800b37a <SDMMC_GetCmdResp3+0x1e>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1ea      	bne.n	800b37a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d004      	beq.n	800b3ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b6:	2304      	movs	r3, #4
 800b3b8:	e003      	b.n	800b3c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	22c5      	movs	r2, #197	; 0xc5
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20000000 	.word	0x20000000
 800b3d4:	10624dd3 	.word	0x10624dd3

0800b3d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	607a      	str	r2, [r7, #4]
 800b3e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3e6:	4b35      	ldr	r3, [pc, #212]	; (800b4bc <SDMMC_GetCmdResp6+0xe4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a35      	ldr	r2, [pc, #212]	; (800b4c0 <SDMMC_GetCmdResp6+0xe8>)
 800b3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f0:	0a5b      	lsrs	r3, r3, #9
 800b3f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f6:	fb02 f303 	mul.w	r3, r2, r3
 800b3fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	1e5a      	subs	r2, r3, #1
 800b400:	61fa      	str	r2, [r7, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b406:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b40a:	e052      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b410:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0ef      	beq.n	800b3fc <SDMMC_GetCmdResp6+0x24>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1ea      	bne.n	800b3fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2204      	movs	r2, #4
 800b436:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b438:	2304      	movs	r3, #4
 800b43a:	e03a      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b44e:	2301      	movs	r3, #1
 800b450:	e02f      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff fba0 	bl	800ab98 <SDIO_GetCommandResponse>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d001      	beq.n	800b466 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b462:	2301      	movs	r3, #1
 800b464:	e025      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	22c5      	movs	r2, #197	; 0xc5
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b46c:	2100      	movs	r1, #0
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7ff fb9f 	bl	800abb2 <SDIO_GetResponse>
 800b474:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d106      	bne.n	800b48e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	0c1b      	lsrs	r3, r3, #16
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	e011      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b49c:	e009      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ac:	e001      	b.n	800b4b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000000 	.word	0x20000000
 800b4c0:	10624dd3 	.word	0x10624dd3

0800b4c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4cc:	4b22      	ldr	r3, [pc, #136]	; (800b558 <SDMMC_GetCmdResp7+0x94>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a22      	ldr	r2, [pc, #136]	; (800b55c <SDMMC_GetCmdResp7+0x98>)
 800b4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d6:	0a5b      	lsrs	r3, r3, #9
 800b4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4dc:	fb02 f303 	mul.w	r3, r2, r3
 800b4e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	1e5a      	subs	r2, r3, #1
 800b4e6:	60fa      	str	r2, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4f0:	e02c      	b.n	800b54c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0ef      	beq.n	800b4e2 <SDMMC_GetCmdResp7+0x1e>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1ea      	bne.n	800b4e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d004      	beq.n	800b522 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2204      	movs	r2, #4
 800b51c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b51e:	2304      	movs	r3, #4
 800b520:	e014      	b.n	800b54c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b534:	2301      	movs	r3, #1
 800b536:	e009      	b.n	800b54c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2240      	movs	r2, #64	; 0x40
 800b548:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b54a:	2300      	movs	r3, #0
  
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	20000000 	.word	0x20000000
 800b55c:	10624dd3 	.word	0x10624dd3

0800b560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b564:	4904      	ldr	r1, [pc, #16]	; (800b578 <MX_FATFS_Init+0x18>)
 800b566:	4805      	ldr	r0, [pc, #20]	; (800b57c <MX_FATFS_Init+0x1c>)
 800b568:	f000 fa84 	bl	800ba74 <FATFS_LinkDriver>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	4b03      	ldr	r3, [pc, #12]	; (800b580 <MX_FATFS_Init+0x20>)
 800b572:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b574:	bf00      	nop
 800b576:	bd80      	pop	{r7, pc}
 800b578:	200005dc 	.word	0x200005dc
 800b57c:	08011ce0 	.word	0x08011ce0
 800b580:	200005d8 	.word	0x200005d8

0800b584 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b58e:	f000 f896 	bl	800b6be <BSP_SD_IsDetected>
 800b592:	4603      	mov	r3, r0
 800b594:	2b01      	cmp	r3, #1
 800b596:	d001      	beq.n	800b59c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e012      	b.n	800b5c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b59c:	480b      	ldr	r0, [pc, #44]	; (800b5cc <BSP_SD_Init+0x48>)
 800b59e:	f7fc fbe7 	bl	8007d70 <HAL_SD_Init>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d109      	bne.n	800b5c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b5ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b5b0:	4806      	ldr	r0, [pc, #24]	; (800b5cc <BSP_SD_Init+0x48>)
 800b5b2:	f7fd f9b3 	bl	800891c <HAL_SD_ConfigWideBusOperation>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000388 	.word	0x20000388

0800b5d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	68f9      	ldr	r1, [r7, #12]
 800b5e6:	4806      	ldr	r0, [pc, #24]	; (800b600 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b5e8:	f7fc fc70 	bl	8007ecc <HAL_SD_ReadBlocks_DMA>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20000388 	.word	0x20000388

0800b604 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	68f9      	ldr	r1, [r7, #12]
 800b61a:	4806      	ldr	r0, [pc, #24]	; (800b634 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b61c:	f7fc fd38 	bl	8008090 <HAL_SD_WriteBlocks_DMA>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000388 	.word	0x20000388

0800b638 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b63c:	4805      	ldr	r0, [pc, #20]	; (800b654 <BSP_SD_GetCardState+0x1c>)
 800b63e:	f7fd fa07 	bl	8008a50 <HAL_SD_GetCardState>
 800b642:	4603      	mov	r3, r0
 800b644:	2b04      	cmp	r3, #4
 800b646:	bf14      	ite	ne
 800b648:	2301      	movne	r3, #1
 800b64a:	2300      	moveq	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
}
 800b64e:	4618      	mov	r0, r3
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000388 	.word	0x20000388

0800b658 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4803      	ldr	r0, [pc, #12]	; (800b670 <BSP_SD_GetCardInfo+0x18>)
 800b664:	f7fd f92e 	bl	80088c4 <HAL_SD_GetCardInfo>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000388 	.word	0x20000388

0800b674 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b67c:	f000 f818 	bl	800b6b0 <BSP_SD_AbortCallback>
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b690:	f000 f98c 	bl	800b9ac <BSP_SD_WriteCpltCallback>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b6a4:	f000 f98e 	bl	800b9c4 <BSP_SD_ReadCpltCallback>
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	af00      	add	r7, sp, #0

}
 800b6b4:	bf00      	nop
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	b2db      	uxtb	r3, r3
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b6e0:	f7fa f824 	bl	800572c <HAL_GetTick>
 800b6e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b6e6:	e006      	b.n	800b6f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6e8:	f7ff ffa6 	bl	800b638 <BSP_SD_GetCardState>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e009      	b.n	800b70a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b6f6:	f7fa f819 	bl	800572c <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d8f0      	bhi.n	800b6e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <SD_CheckStatus+0x38>)
 800b720:	2201      	movs	r2, #1
 800b722:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b724:	f7ff ff88 	bl	800b638 <BSP_SD_GetCardState>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d107      	bne.n	800b73e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <SD_CheckStatus+0x38>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f023 0301 	bic.w	r3, r3, #1
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	4b04      	ldr	r3, [pc, #16]	; (800b74c <SD_CheckStatus+0x38>)
 800b73c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b73e:	4b03      	ldr	r3, [pc, #12]	; (800b74c <SD_CheckStatus+0x38>)
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	b2db      	uxtb	r3, r3
}
 800b744:	4618      	mov	r0, r3
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20000045 	.word	0x20000045

0800b750 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b75a:	f7ff ff13 	bl	800b584 <BSP_SD_Init>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d107      	bne.n	800b774 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff ffd4 	bl	800b714 <SD_CheckStatus>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	4b04      	ldr	r3, [pc, #16]	; (800b784 <SD_initialize+0x34>)
 800b772:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b774:	4b03      	ldr	r3, [pc, #12]	; (800b784 <SD_initialize+0x34>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b2db      	uxtb	r3, r3
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20000045 	.word	0x20000045

0800b788 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff ffbd 	bl	800b714 <SD_CheckStatus>
 800b79a:	4603      	mov	r3, r0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b7b8:	f247 5030 	movw	r0, #30000	; 0x7530
 800b7bc:	f7ff ff8c 	bl	800b6d8 <SD_CheckStatusWithTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	da01      	bge.n	800b7ca <SD_read+0x26>
  {
    return res;
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	e03b      	b.n	800b842 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	68b8      	ldr	r0, [r7, #8]
 800b7d0:	f7ff fefe 	bl	800b5d0 <BSP_SD_ReadBlocks_DMA>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d132      	bne.n	800b840 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b7da:	4b1c      	ldr	r3, [pc, #112]	; (800b84c <SD_read+0xa8>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b7e0:	f7f9 ffa4 	bl	800572c <HAL_GetTick>
 800b7e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b7e6:	bf00      	nop
 800b7e8:	4b18      	ldr	r3, [pc, #96]	; (800b84c <SD_read+0xa8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d108      	bne.n	800b802 <SD_read+0x5e>
 800b7f0:	f7f9 ff9c 	bl	800572c <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d9f2      	bls.n	800b7e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b802:	4b12      	ldr	r3, [pc, #72]	; (800b84c <SD_read+0xa8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
 800b80e:	e017      	b.n	800b840 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b810:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <SD_read+0xa8>)
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b816:	f7f9 ff89 	bl	800572c <HAL_GetTick>
 800b81a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b81c:	e007      	b.n	800b82e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b81e:	f7ff ff0b 	bl	800b638 <BSP_SD_GetCardState>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d102      	bne.n	800b82e <SD_read+0x8a>
          {
            res = RES_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b82c:	e008      	b.n	800b840 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b82e:	f7f9 ff7d 	bl	800572c <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	f247 522f 	movw	r2, #29999	; 0x752f
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d9ee      	bls.n	800b81e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b840:	7dfb      	ldrb	r3, [r7, #23]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	2000025c 	.word	0x2000025c

0800b850 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b864:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <SD_write+0xa8>)
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b86a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b86e:	f7ff ff33 	bl	800b6d8 <SD_CheckStatusWithTimeout>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	da01      	bge.n	800b87c <SD_write+0x2c>
  {
    return res;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	e038      	b.n	800b8ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f7ff febf 	bl	800b604 <BSP_SD_WriteBlocks_DMA>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d12f      	bne.n	800b8ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b88c:	f7f9 ff4e 	bl	800572c <HAL_GetTick>
 800b890:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b892:	bf00      	nop
 800b894:	4b18      	ldr	r3, [pc, #96]	; (800b8f8 <SD_write+0xa8>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d108      	bne.n	800b8ae <SD_write+0x5e>
 800b89c:	f7f9 ff46 	bl	800572c <HAL_GetTick>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d9f2      	bls.n	800b894 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <SD_write+0xa8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d102      	bne.n	800b8bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	75fb      	strb	r3, [r7, #23]
 800b8ba:	e017      	b.n	800b8ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <SD_write+0xa8>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b8c2:	f7f9 ff33 	bl	800572c <HAL_GetTick>
 800b8c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b8c8:	e007      	b.n	800b8da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8ca:	f7ff feb5 	bl	800b638 <BSP_SD_GetCardState>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <SD_write+0x8a>
          {
            res = RES_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	75fb      	strb	r3, [r7, #23]
            break;
 800b8d8:	e008      	b.n	800b8ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b8da:	f7f9 ff27 	bl	800572c <HAL_GetTick>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d9ee      	bls.n	800b8ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000258 	.word	0x20000258

0800b8fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08c      	sub	sp, #48	; 0x30
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	603a      	str	r2, [r7, #0]
 800b906:	71fb      	strb	r3, [r7, #7]
 800b908:	460b      	mov	r3, r1
 800b90a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b912:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <SD_ioctl+0xac>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <SD_ioctl+0x28>
 800b920:	2303      	movs	r3, #3
 800b922:	e03c      	b.n	800b99e <SD_ioctl+0xa2>

  switch (cmd)
 800b924:	79bb      	ldrb	r3, [r7, #6]
 800b926:	2b03      	cmp	r3, #3
 800b928:	d834      	bhi.n	800b994 <SD_ioctl+0x98>
 800b92a:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <SD_ioctl+0x34>)
 800b92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b949 	.word	0x0800b949
 800b938:	0800b961 	.word	0x0800b961
 800b93c:	0800b97b 	.word	0x0800b97b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b946:	e028      	b.n	800b99a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b948:	f107 030c 	add.w	r3, r7, #12
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff fe83 	bl	800b658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b95e:	e01c      	b.n	800b99a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b960:	f107 030c 	add.w	r3, r7, #12
 800b964:	4618      	mov	r0, r3
 800b966:	f7ff fe77 	bl	800b658 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b978:	e00f      	b.n	800b99a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b97a:	f107 030c 	add.w	r3, r7, #12
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff fe6a 	bl	800b658 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	0a5a      	lsrs	r2, r3, #9
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b992:	e002      	b.n	800b99a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b994:	2304      	movs	r3, #4
 800b996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b99a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3730      	adds	r7, #48	; 0x30
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000045 	.word	0x20000045

0800b9ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b9b0:	4b03      	ldr	r3, [pc, #12]	; (800b9c0 <BSP_SD_WriteCpltCallback+0x14>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]
}
 800b9b6:	bf00      	nop
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	20000258 	.word	0x20000258

0800b9c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <BSP_SD_ReadCpltCallback+0x14>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	2000025c 	.word	0x2000025c

0800b9dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9f2:	4b1f      	ldr	r3, [pc, #124]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800b9f4:	7a5b      	ldrb	r3, [r3, #9]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d131      	bne.n	800ba60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800b9fe:	7a5b      	ldrb	r3, [r3, #9]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	461a      	mov	r2, r3
 800ba04:	4b1a      	ldr	r3, [pc, #104]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba06:	2100      	movs	r1, #0
 800ba08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba0a:	4b19      	ldr	r3, [pc, #100]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba0c:	7a5b      	ldrb	r3, [r3, #9]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	4a17      	ldr	r2, [pc, #92]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba1a:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba1c:	7a5b      	ldrb	r3, [r3, #9]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	461a      	mov	r2, r3
 800ba22:	4b13      	ldr	r3, [pc, #76]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba24:	4413      	add	r3, r2
 800ba26:	79fa      	ldrb	r2, [r7, #7]
 800ba28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba2a:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba2c:	7a5b      	ldrb	r3, [r3, #9]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	b2d1      	uxtb	r1, r2
 800ba34:	4a0e      	ldr	r2, [pc, #56]	; (800ba70 <FATFS_LinkDriverEx+0x94>)
 800ba36:	7251      	strb	r1, [r2, #9]
 800ba38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba3a:	7dbb      	ldrb	r3, [r7, #22]
 800ba3c:	3330      	adds	r3, #48	; 0x30
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	3301      	adds	r3, #1
 800ba48:	223a      	movs	r2, #58	; 0x3a
 800ba4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	3302      	adds	r3, #2
 800ba50:	222f      	movs	r2, #47	; 0x2f
 800ba52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	3303      	adds	r3, #3
 800ba58:	2200      	movs	r2, #0
 800ba5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	371c      	adds	r7, #28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	20000260 	.word	0x20000260

0800ba74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba7e:	2200      	movs	r2, #0
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff ffaa 	bl	800b9dc <FATFS_LinkDriverEx>
 800ba88:	4603      	mov	r3, r0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <atan2>:
 800ba92:	f000 b835 	b.w	800bb00 <__ieee754_atan2>
	...

0800ba98 <asinf>:
 800ba98:	b508      	push	{r3, lr}
 800ba9a:	ed2d 8b02 	vpush	{d8}
 800ba9e:	eeb0 8a40 	vmov.f32	s16, s0
 800baa2:	f000 f8f7 	bl	800bc94 <__ieee754_asinf>
 800baa6:	4b13      	ldr	r3, [pc, #76]	; (800baf4 <asinf+0x5c>)
 800baa8:	f993 3000 	ldrsb.w	r3, [r3]
 800baac:	3301      	adds	r3, #1
 800baae:	eef0 8a40 	vmov.f32	s17, s0
 800bab2:	d01a      	beq.n	800baea <asinf+0x52>
 800bab4:	eeb4 8a48 	vcmp.f32	s16, s16
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	d615      	bvs.n	800baea <asinf+0x52>
 800babe:	eeb0 0a48 	vmov.f32	s0, s16
 800bac2:	f000 fcef 	bl	800c4a4 <fabsf>
 800bac6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800baca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad2:	dd0a      	ble.n	800baea <asinf+0x52>
 800bad4:	f000 fcf4 	bl	800c4c0 <__errno>
 800bad8:	ecbd 8b02 	vpop	{d8}
 800badc:	2321      	movs	r3, #33	; 0x21
 800bade:	6003      	str	r3, [r0, #0]
 800bae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bae4:	4804      	ldr	r0, [pc, #16]	; (800baf8 <asinf+0x60>)
 800bae6:	f000 bce5 	b.w	800c4b4 <nanf>
 800baea:	eeb0 0a68 	vmov.f32	s0, s17
 800baee:	ecbd 8b02 	vpop	{d8}
 800baf2:	bd08      	pop	{r3, pc}
 800baf4:	20000046 	.word	0x20000046
 800baf8:	08012250 	.word	0x08012250

0800bafc <atan2f>:
 800bafc:	f000 b9b0 	b.w	800be60 <__ieee754_atan2f>

0800bb00 <__ieee754_atan2>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	ec57 6b11 	vmov	r6, r7, d1
 800bb08:	4273      	negs	r3, r6
 800bb0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bc90 <__ieee754_atan2+0x190>
 800bb0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bb12:	4333      	orrs	r3, r6
 800bb14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb18:	4573      	cmp	r3, lr
 800bb1a:	ec51 0b10 	vmov	r0, r1, d0
 800bb1e:	ee11 8a10 	vmov	r8, s2
 800bb22:	d80a      	bhi.n	800bb3a <__ieee754_atan2+0x3a>
 800bb24:	4244      	negs	r4, r0
 800bb26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb2a:	4304      	orrs	r4, r0
 800bb2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bb30:	4574      	cmp	r4, lr
 800bb32:	ee10 9a10 	vmov	r9, s0
 800bb36:	468c      	mov	ip, r1
 800bb38:	d907      	bls.n	800bb4a <__ieee754_atan2+0x4a>
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	f7f4 fbad 	bl	800029c <__adddf3>
 800bb42:	ec41 0b10 	vmov	d0, r0, r1
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bb4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb52:	4334      	orrs	r4, r6
 800bb54:	d103      	bne.n	800bb5e <__ieee754_atan2+0x5e>
 800bb56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb5a:	f000 ba25 	b.w	800bfa8 <atan>
 800bb5e:	17bc      	asrs	r4, r7, #30
 800bb60:	f004 0402 	and.w	r4, r4, #2
 800bb64:	ea53 0909 	orrs.w	r9, r3, r9
 800bb68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bb6c:	d107      	bne.n	800bb7e <__ieee754_atan2+0x7e>
 800bb6e:	2c02      	cmp	r4, #2
 800bb70:	d060      	beq.n	800bc34 <__ieee754_atan2+0x134>
 800bb72:	2c03      	cmp	r4, #3
 800bb74:	d1e5      	bne.n	800bb42 <__ieee754_atan2+0x42>
 800bb76:	a142      	add	r1, pc, #264	; (adr r1, 800bc80 <__ieee754_atan2+0x180>)
 800bb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7c:	e7e1      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bb7e:	ea52 0808 	orrs.w	r8, r2, r8
 800bb82:	d106      	bne.n	800bb92 <__ieee754_atan2+0x92>
 800bb84:	f1bc 0f00 	cmp.w	ip, #0
 800bb88:	da5f      	bge.n	800bc4a <__ieee754_atan2+0x14a>
 800bb8a:	a13f      	add	r1, pc, #252	; (adr r1, 800bc88 <__ieee754_atan2+0x188>)
 800bb8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb90:	e7d7      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bb92:	4572      	cmp	r2, lr
 800bb94:	d10f      	bne.n	800bbb6 <__ieee754_atan2+0xb6>
 800bb96:	4293      	cmp	r3, r2
 800bb98:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb9c:	d107      	bne.n	800bbae <__ieee754_atan2+0xae>
 800bb9e:	2c02      	cmp	r4, #2
 800bba0:	d84c      	bhi.n	800bc3c <__ieee754_atan2+0x13c>
 800bba2:	4b35      	ldr	r3, [pc, #212]	; (800bc78 <__ieee754_atan2+0x178>)
 800bba4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bba8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bbac:	e7c9      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bbae:	2c02      	cmp	r4, #2
 800bbb0:	d848      	bhi.n	800bc44 <__ieee754_atan2+0x144>
 800bbb2:	4b32      	ldr	r3, [pc, #200]	; (800bc7c <__ieee754_atan2+0x17c>)
 800bbb4:	e7f6      	b.n	800bba4 <__ieee754_atan2+0xa4>
 800bbb6:	4573      	cmp	r3, lr
 800bbb8:	d0e4      	beq.n	800bb84 <__ieee754_atan2+0x84>
 800bbba:	1a9b      	subs	r3, r3, r2
 800bbbc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bbc0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbc4:	da1e      	bge.n	800bc04 <__ieee754_atan2+0x104>
 800bbc6:	2f00      	cmp	r7, #0
 800bbc8:	da01      	bge.n	800bbce <__ieee754_atan2+0xce>
 800bbca:	323c      	adds	r2, #60	; 0x3c
 800bbcc:	db1e      	blt.n	800bc0c <__ieee754_atan2+0x10c>
 800bbce:	4632      	mov	r2, r6
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	f7f4 fe43 	bl	800085c <__aeabi_ddiv>
 800bbd6:	ec41 0b10 	vmov	d0, r0, r1
 800bbda:	f000 fb85 	bl	800c2e8 <fabs>
 800bbde:	f000 f9e3 	bl	800bfa8 <atan>
 800bbe2:	ec51 0b10 	vmov	r0, r1, d0
 800bbe6:	2c01      	cmp	r4, #1
 800bbe8:	d013      	beq.n	800bc12 <__ieee754_atan2+0x112>
 800bbea:	2c02      	cmp	r4, #2
 800bbec:	d015      	beq.n	800bc1a <__ieee754_atan2+0x11a>
 800bbee:	2c00      	cmp	r4, #0
 800bbf0:	d0a7      	beq.n	800bb42 <__ieee754_atan2+0x42>
 800bbf2:	a319      	add	r3, pc, #100	; (adr r3, 800bc58 <__ieee754_atan2+0x158>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb4e 	bl	8000298 <__aeabi_dsub>
 800bbfc:	a318      	add	r3, pc, #96	; (adr r3, 800bc60 <__ieee754_atan2+0x160>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	e014      	b.n	800bc2e <__ieee754_atan2+0x12e>
 800bc04:	a118      	add	r1, pc, #96	; (adr r1, 800bc68 <__ieee754_atan2+0x168>)
 800bc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc0a:	e7ec      	b.n	800bbe6 <__ieee754_atan2+0xe6>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	e7e9      	b.n	800bbe6 <__ieee754_atan2+0xe6>
 800bc12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc16:	4619      	mov	r1, r3
 800bc18:	e793      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc1a:	a30f      	add	r3, pc, #60	; (adr r3, 800bc58 <__ieee754_atan2+0x158>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb3a 	bl	8000298 <__aeabi_dsub>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	a10d      	add	r1, pc, #52	; (adr r1, 800bc60 <__ieee754_atan2+0x160>)
 800bc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc2e:	f7f4 fb33 	bl	8000298 <__aeabi_dsub>
 800bc32:	e786      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc34:	a10a      	add	r1, pc, #40	; (adr r1, 800bc60 <__ieee754_atan2+0x160>)
 800bc36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3a:	e782      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc3c:	a10c      	add	r1, pc, #48	; (adr r1, 800bc70 <__ieee754_atan2+0x170>)
 800bc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc42:	e77e      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc44:	2000      	movs	r0, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	e77b      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc4a:	a107      	add	r1, pc, #28	; (adr r1, 800bc68 <__ieee754_atan2+0x168>)
 800bc4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc50:	e777      	b.n	800bb42 <__ieee754_atan2+0x42>
 800bc52:	bf00      	nop
 800bc54:	f3af 8000 	nop.w
 800bc58:	33145c07 	.word	0x33145c07
 800bc5c:	3ca1a626 	.word	0x3ca1a626
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	400921fb 	.word	0x400921fb
 800bc68:	54442d18 	.word	0x54442d18
 800bc6c:	3ff921fb 	.word	0x3ff921fb
 800bc70:	54442d18 	.word	0x54442d18
 800bc74:	3fe921fb 	.word	0x3fe921fb
 800bc78:	08011cf8 	.word	0x08011cf8
 800bc7c:	08011d10 	.word	0x08011d10
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	c00921fb 	.word	0xc00921fb
 800bc88:	54442d18 	.word	0x54442d18
 800bc8c:	bff921fb 	.word	0xbff921fb
 800bc90:	7ff00000 	.word	0x7ff00000

0800bc94 <__ieee754_asinf>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	ee10 5a10 	vmov	r5, s0
 800bc9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bc9e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800bca2:	ed2d 8b04 	vpush	{d8-d9}
 800bca6:	d10c      	bne.n	800bcc2 <__ieee754_asinf+0x2e>
 800bca8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800be20 <__ieee754_asinf+0x18c>
 800bcac:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800be24 <__ieee754_asinf+0x190>
 800bcb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bcb4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bcb8:	eeb0 0a67 	vmov.f32	s0, s15
 800bcbc:	ecbd 8b04 	vpop	{d8-d9}
 800bcc0:	bd38      	pop	{r3, r4, r5, pc}
 800bcc2:	dd04      	ble.n	800bcce <__ieee754_asinf+0x3a>
 800bcc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bcc8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bccc:	e7f6      	b.n	800bcbc <__ieee754_asinf+0x28>
 800bcce:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bcd2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bcd6:	da0b      	bge.n	800bcf0 <__ieee754_asinf+0x5c>
 800bcd8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800bcdc:	da52      	bge.n	800bd84 <__ieee754_asinf+0xf0>
 800bcde:	eddf 7a52 	vldr	s15, [pc, #328]	; 800be28 <__ieee754_asinf+0x194>
 800bce2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bce6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcee:	dce5      	bgt.n	800bcbc <__ieee754_asinf+0x28>
 800bcf0:	f000 fbd8 	bl	800c4a4 <fabsf>
 800bcf4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800bcf8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800bcfc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800bd00:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800be2c <__ieee754_asinf+0x198>
 800bd04:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800be30 <__ieee754_asinf+0x19c>
 800bd08:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800be34 <__ieee754_asinf+0x1a0>
 800bd0c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800bd10:	eddf 7a49 	vldr	s15, [pc, #292]	; 800be38 <__ieee754_asinf+0x1a4>
 800bd14:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bd18:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800be3c <__ieee754_asinf+0x1a8>
 800bd1c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bd20:	eddf 7a47 	vldr	s15, [pc, #284]	; 800be40 <__ieee754_asinf+0x1ac>
 800bd24:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bd28:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800be44 <__ieee754_asinf+0x1b0>
 800bd2c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800bd30:	eddf 7a45 	vldr	s15, [pc, #276]	; 800be48 <__ieee754_asinf+0x1b4>
 800bd34:	eee8 7a07 	vfma.f32	s15, s16, s14
 800bd38:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800be4c <__ieee754_asinf+0x1b8>
 800bd3c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bd40:	eddf 7a43 	vldr	s15, [pc, #268]	; 800be50 <__ieee754_asinf+0x1bc>
 800bd44:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bd48:	eeb0 0a48 	vmov.f32	s0, s16
 800bd4c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800bd50:	f000 f926 	bl	800bfa0 <__ieee754_sqrtf>
 800bd54:	4b3f      	ldr	r3, [pc, #252]	; (800be54 <__ieee754_asinf+0x1c0>)
 800bd56:	ee29 9a08 	vmul.f32	s18, s18, s16
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800bd60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bd64:	dd3d      	ble.n	800bde2 <__ieee754_asinf+0x14e>
 800bd66:	eea0 0a06 	vfma.f32	s0, s0, s12
 800bd6a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800be58 <__ieee754_asinf+0x1c4>
 800bd6e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800bd72:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800be24 <__ieee754_asinf+0x190>
 800bd76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	bfd8      	it	le
 800bd7e:	eeb1 0a40 	vnegle.f32	s0, s0
 800bd82:	e79b      	b.n	800bcbc <__ieee754_asinf+0x28>
 800bd84:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bd88:	eddf 6a28 	vldr	s13, [pc, #160]	; 800be2c <__ieee754_asinf+0x198>
 800bd8c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800be30 <__ieee754_asinf+0x19c>
 800bd90:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800be44 <__ieee754_asinf+0x1b0>
 800bd94:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bd98:	eddf 6a27 	vldr	s13, [pc, #156]	; 800be38 <__ieee754_asinf+0x1a4>
 800bd9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bda0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800be3c <__ieee754_asinf+0x1a8>
 800bda4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bda8:	eddf 6a25 	vldr	s13, [pc, #148]	; 800be40 <__ieee754_asinf+0x1ac>
 800bdac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdb0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800be34 <__ieee754_asinf+0x1a0>
 800bdb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdb8:	eddf 6a23 	vldr	s13, [pc, #140]	; 800be48 <__ieee754_asinf+0x1b4>
 800bdbc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800bdc0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800be4c <__ieee754_asinf+0x1b8>
 800bdc4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800bdc8:	eddf 6a21 	vldr	s13, [pc, #132]	; 800be50 <__ieee754_asinf+0x1bc>
 800bdcc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bdd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdd4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800bdd8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800bddc:	eea0 0a27 	vfma.f32	s0, s0, s15
 800bde0:	e76c      	b.n	800bcbc <__ieee754_asinf+0x28>
 800bde2:	ee10 3a10 	vmov	r3, s0
 800bde6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bdea:	f023 030f 	bic.w	r3, r3, #15
 800bdee:	ee07 3a10 	vmov	s14, r3
 800bdf2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bdf6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bdfa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdfe:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800be02:	eddf 7a07 	vldr	s15, [pc, #28]	; 800be20 <__ieee754_asinf+0x18c>
 800be06:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800be0a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800be0e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800be5c <__ieee754_asinf+0x1c8>
 800be12:	eeb0 6a40 	vmov.f32	s12, s0
 800be16:	eea7 6a66 	vfms.f32	s12, s14, s13
 800be1a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800be1e:	e7aa      	b.n	800bd76 <__ieee754_asinf+0xe2>
 800be20:	b33bbd2e 	.word	0xb33bbd2e
 800be24:	3fc90fdb 	.word	0x3fc90fdb
 800be28:	7149f2ca 	.word	0x7149f2ca
 800be2c:	3811ef08 	.word	0x3811ef08
 800be30:	3a4f7f04 	.word	0x3a4f7f04
 800be34:	3e2aaaab 	.word	0x3e2aaaab
 800be38:	bd241146 	.word	0xbd241146
 800be3c:	3e4e0aa8 	.word	0x3e4e0aa8
 800be40:	bea6b090 	.word	0xbea6b090
 800be44:	3d9dc62e 	.word	0x3d9dc62e
 800be48:	bf303361 	.word	0xbf303361
 800be4c:	4001572d 	.word	0x4001572d
 800be50:	c019d139 	.word	0xc019d139
 800be54:	3f799999 	.word	0x3f799999
 800be58:	333bbd2e 	.word	0x333bbd2e
 800be5c:	3f490fdb 	.word	0x3f490fdb

0800be60 <__ieee754_atan2f>:
 800be60:	ee10 2a90 	vmov	r2, s1
 800be64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800be68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800be6c:	b510      	push	{r4, lr}
 800be6e:	eef0 7a40 	vmov.f32	s15, s0
 800be72:	dc06      	bgt.n	800be82 <__ieee754_atan2f+0x22>
 800be74:	ee10 0a10 	vmov	r0, s0
 800be78:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800be7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800be80:	dd04      	ble.n	800be8c <__ieee754_atan2f+0x2c>
 800be82:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800be86:	eeb0 0a67 	vmov.f32	s0, s15
 800be8a:	bd10      	pop	{r4, pc}
 800be8c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800be90:	d103      	bne.n	800be9a <__ieee754_atan2f+0x3a>
 800be92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be96:	f000 ba31 	b.w	800c2fc <atanf>
 800be9a:	1794      	asrs	r4, r2, #30
 800be9c:	f004 0402 	and.w	r4, r4, #2
 800bea0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bea4:	b943      	cbnz	r3, 800beb8 <__ieee754_atan2f+0x58>
 800bea6:	2c02      	cmp	r4, #2
 800bea8:	d05e      	beq.n	800bf68 <__ieee754_atan2f+0x108>
 800beaa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800bf7c <__ieee754_atan2f+0x11c>
 800beae:	2c03      	cmp	r4, #3
 800beb0:	bf08      	it	eq
 800beb2:	eef0 7a47 	vmoveq.f32	s15, s14
 800beb6:	e7e6      	b.n	800be86 <__ieee754_atan2f+0x26>
 800beb8:	b941      	cbnz	r1, 800becc <__ieee754_atan2f+0x6c>
 800beba:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bf80 <__ieee754_atan2f+0x120>
 800bebe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800bf84 <__ieee754_atan2f+0x124>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	bfb8      	it	lt
 800bec6:	eef0 7a40 	vmovlt.f32	s15, s0
 800beca:	e7dc      	b.n	800be86 <__ieee754_atan2f+0x26>
 800becc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bed0:	d110      	bne.n	800bef4 <__ieee754_atan2f+0x94>
 800bed2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bed6:	f104 34ff 	add.w	r4, r4, #4294967295
 800beda:	d107      	bne.n	800beec <__ieee754_atan2f+0x8c>
 800bedc:	2c02      	cmp	r4, #2
 800bede:	d846      	bhi.n	800bf6e <__ieee754_atan2f+0x10e>
 800bee0:	4b29      	ldr	r3, [pc, #164]	; (800bf88 <__ieee754_atan2f+0x128>)
 800bee2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bee6:	edd4 7a00 	vldr	s15, [r4]
 800beea:	e7cc      	b.n	800be86 <__ieee754_atan2f+0x26>
 800beec:	2c02      	cmp	r4, #2
 800beee:	d841      	bhi.n	800bf74 <__ieee754_atan2f+0x114>
 800bef0:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <__ieee754_atan2f+0x12c>)
 800bef2:	e7f6      	b.n	800bee2 <__ieee754_atan2f+0x82>
 800bef4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bef8:	d0df      	beq.n	800beba <__ieee754_atan2f+0x5a>
 800befa:	1a5b      	subs	r3, r3, r1
 800befc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800bf00:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bf04:	da1a      	bge.n	800bf3c <__ieee754_atan2f+0xdc>
 800bf06:	2a00      	cmp	r2, #0
 800bf08:	da01      	bge.n	800bf0e <__ieee754_atan2f+0xae>
 800bf0a:	313c      	adds	r1, #60	; 0x3c
 800bf0c:	db19      	blt.n	800bf42 <__ieee754_atan2f+0xe2>
 800bf0e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bf12:	f000 fac7 	bl	800c4a4 <fabsf>
 800bf16:	f000 f9f1 	bl	800c2fc <atanf>
 800bf1a:	eef0 7a40 	vmov.f32	s15, s0
 800bf1e:	2c01      	cmp	r4, #1
 800bf20:	d012      	beq.n	800bf48 <__ieee754_atan2f+0xe8>
 800bf22:	2c02      	cmp	r4, #2
 800bf24:	d017      	beq.n	800bf56 <__ieee754_atan2f+0xf6>
 800bf26:	2c00      	cmp	r4, #0
 800bf28:	d0ad      	beq.n	800be86 <__ieee754_atan2f+0x26>
 800bf2a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800bf90 <__ieee754_atan2f+0x130>
 800bf2e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf32:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800bf94 <__ieee754_atan2f+0x134>
 800bf36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bf3a:	e7a4      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf3c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800bf80 <__ieee754_atan2f+0x120>
 800bf40:	e7ed      	b.n	800bf1e <__ieee754_atan2f+0xbe>
 800bf42:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bf98 <__ieee754_atan2f+0x138>
 800bf46:	e7ea      	b.n	800bf1e <__ieee754_atan2f+0xbe>
 800bf48:	ee17 3a90 	vmov	r3, s15
 800bf4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf50:	ee07 3a90 	vmov	s15, r3
 800bf54:	e797      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf56:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bf90 <__ieee754_atan2f+0x130>
 800bf5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf5e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800bf94 <__ieee754_atan2f+0x134>
 800bf62:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bf66:	e78e      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf68:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bf94 <__ieee754_atan2f+0x134>
 800bf6c:	e78b      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf6e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800bf9c <__ieee754_atan2f+0x13c>
 800bf72:	e788      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf74:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bf98 <__ieee754_atan2f+0x138>
 800bf78:	e785      	b.n	800be86 <__ieee754_atan2f+0x26>
 800bf7a:	bf00      	nop
 800bf7c:	c0490fdb 	.word	0xc0490fdb
 800bf80:	3fc90fdb 	.word	0x3fc90fdb
 800bf84:	bfc90fdb 	.word	0xbfc90fdb
 800bf88:	08011d28 	.word	0x08011d28
 800bf8c:	08011d34 	.word	0x08011d34
 800bf90:	33bbbd2e 	.word	0x33bbbd2e
 800bf94:	40490fdb 	.word	0x40490fdb
 800bf98:	00000000 	.word	0x00000000
 800bf9c:	3f490fdb 	.word	0x3f490fdb

0800bfa0 <__ieee754_sqrtf>:
 800bfa0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <atan>:
 800bfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	ec55 4b10 	vmov	r4, r5, d0
 800bfb0:	4bc3      	ldr	r3, [pc, #780]	; (800c2c0 <atan+0x318>)
 800bfb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfb6:	429e      	cmp	r6, r3
 800bfb8:	46ab      	mov	fp, r5
 800bfba:	dd18      	ble.n	800bfee <atan+0x46>
 800bfbc:	4bc1      	ldr	r3, [pc, #772]	; (800c2c4 <atan+0x31c>)
 800bfbe:	429e      	cmp	r6, r3
 800bfc0:	dc01      	bgt.n	800bfc6 <atan+0x1e>
 800bfc2:	d109      	bne.n	800bfd8 <atan+0x30>
 800bfc4:	b144      	cbz	r4, 800bfd8 <atan+0x30>
 800bfc6:	4622      	mov	r2, r4
 800bfc8:	462b      	mov	r3, r5
 800bfca:	4620      	mov	r0, r4
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7f4 f965 	bl	800029c <__adddf3>
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	e006      	b.n	800bfe6 <atan+0x3e>
 800bfd8:	f1bb 0f00 	cmp.w	fp, #0
 800bfdc:	f300 8131 	bgt.w	800c242 <atan+0x29a>
 800bfe0:	a59b      	add	r5, pc, #620	; (adr r5, 800c250 <atan+0x2a8>)
 800bfe2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfe6:	ec45 4b10 	vmov	d0, r4, r5
 800bfea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfee:	4bb6      	ldr	r3, [pc, #728]	; (800c2c8 <atan+0x320>)
 800bff0:	429e      	cmp	r6, r3
 800bff2:	dc14      	bgt.n	800c01e <atan+0x76>
 800bff4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bff8:	429e      	cmp	r6, r3
 800bffa:	dc0d      	bgt.n	800c018 <atan+0x70>
 800bffc:	a396      	add	r3, pc, #600	; (adr r3, 800c258 <atan+0x2b0>)
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	ee10 0a10 	vmov	r0, s0
 800c006:	4629      	mov	r1, r5
 800c008:	f7f4 f948 	bl	800029c <__adddf3>
 800c00c:	4baf      	ldr	r3, [pc, #700]	; (800c2cc <atan+0x324>)
 800c00e:	2200      	movs	r2, #0
 800c010:	f7f4 fd8a 	bl	8000b28 <__aeabi_dcmpgt>
 800c014:	2800      	cmp	r0, #0
 800c016:	d1e6      	bne.n	800bfe6 <atan+0x3e>
 800c018:	f04f 3aff 	mov.w	sl, #4294967295
 800c01c:	e02b      	b.n	800c076 <atan+0xce>
 800c01e:	f000 f963 	bl	800c2e8 <fabs>
 800c022:	4bab      	ldr	r3, [pc, #684]	; (800c2d0 <atan+0x328>)
 800c024:	429e      	cmp	r6, r3
 800c026:	ec55 4b10 	vmov	r4, r5, d0
 800c02a:	f300 80bf 	bgt.w	800c1ac <atan+0x204>
 800c02e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c032:	429e      	cmp	r6, r3
 800c034:	f300 80a0 	bgt.w	800c178 <atan+0x1d0>
 800c038:	ee10 2a10 	vmov	r2, s0
 800c03c:	ee10 0a10 	vmov	r0, s0
 800c040:	462b      	mov	r3, r5
 800c042:	4629      	mov	r1, r5
 800c044:	f7f4 f92a 	bl	800029c <__adddf3>
 800c048:	4ba0      	ldr	r3, [pc, #640]	; (800c2cc <atan+0x324>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 f924 	bl	8000298 <__aeabi_dsub>
 800c050:	2200      	movs	r2, #0
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c05a:	4620      	mov	r0, r4
 800c05c:	4629      	mov	r1, r5
 800c05e:	f7f4 f91d 	bl	800029c <__adddf3>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fbf7 	bl	800085c <__aeabi_ddiv>
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	4622      	mov	r2, r4
 800c078:	462b      	mov	r3, r5
 800c07a:	4620      	mov	r0, r4
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7f4 fac3 	bl	8000608 <__aeabi_dmul>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4680      	mov	r8, r0
 800c088:	4689      	mov	r9, r1
 800c08a:	f7f4 fabd 	bl	8000608 <__aeabi_dmul>
 800c08e:	a374      	add	r3, pc, #464	; (adr r3, 800c260 <atan+0x2b8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	f7f4 fab6 	bl	8000608 <__aeabi_dmul>
 800c09c:	a372      	add	r3, pc, #456	; (adr r3, 800c268 <atan+0x2c0>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f8fb 	bl	800029c <__adddf3>
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	f7f4 faad 	bl	8000608 <__aeabi_dmul>
 800c0ae:	a370      	add	r3, pc, #448	; (adr r3, 800c270 <atan+0x2c8>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f7f4 f8f2 	bl	800029c <__adddf3>
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	f7f4 faa4 	bl	8000608 <__aeabi_dmul>
 800c0c0:	a36d      	add	r3, pc, #436	; (adr r3, 800c278 <atan+0x2d0>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 f8e9 	bl	800029c <__adddf3>
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	f7f4 fa9b 	bl	8000608 <__aeabi_dmul>
 800c0d2:	a36b      	add	r3, pc, #428	; (adr r3, 800c280 <atan+0x2d8>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f7f4 f8e0 	bl	800029c <__adddf3>
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	f7f4 fa92 	bl	8000608 <__aeabi_dmul>
 800c0e4:	a368      	add	r3, pc, #416	; (adr r3, 800c288 <atan+0x2e0>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f7f4 f8d7 	bl	800029c <__adddf3>
 800c0ee:	4642      	mov	r2, r8
 800c0f0:	464b      	mov	r3, r9
 800c0f2:	f7f4 fa89 	bl	8000608 <__aeabi_dmul>
 800c0f6:	a366      	add	r3, pc, #408	; (adr r3, 800c290 <atan+0x2e8>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	4680      	mov	r8, r0
 800c0fe:	4689      	mov	r9, r1
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fa80 	bl	8000608 <__aeabi_dmul>
 800c108:	a363      	add	r3, pc, #396	; (adr r3, 800c298 <atan+0x2f0>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 f8c3 	bl	8000298 <__aeabi_dsub>
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	f7f4 fa77 	bl	8000608 <__aeabi_dmul>
 800c11a:	a361      	add	r3, pc, #388	; (adr r3, 800c2a0 <atan+0x2f8>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 f8ba 	bl	8000298 <__aeabi_dsub>
 800c124:	4632      	mov	r2, r6
 800c126:	463b      	mov	r3, r7
 800c128:	f7f4 fa6e 	bl	8000608 <__aeabi_dmul>
 800c12c:	a35e      	add	r3, pc, #376	; (adr r3, 800c2a8 <atan+0x300>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	f7f4 f8b1 	bl	8000298 <__aeabi_dsub>
 800c136:	4632      	mov	r2, r6
 800c138:	463b      	mov	r3, r7
 800c13a:	f7f4 fa65 	bl	8000608 <__aeabi_dmul>
 800c13e:	a35c      	add	r3, pc, #368	; (adr r3, 800c2b0 <atan+0x308>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f7f4 f8a8 	bl	8000298 <__aeabi_dsub>
 800c148:	4632      	mov	r2, r6
 800c14a:	463b      	mov	r3, r7
 800c14c:	f7f4 fa5c 	bl	8000608 <__aeabi_dmul>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4640      	mov	r0, r8
 800c156:	4649      	mov	r1, r9
 800c158:	f7f4 f8a0 	bl	800029c <__adddf3>
 800c15c:	4622      	mov	r2, r4
 800c15e:	462b      	mov	r3, r5
 800c160:	f7f4 fa52 	bl	8000608 <__aeabi_dmul>
 800c164:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	d14b      	bne.n	800c206 <atan+0x25e>
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 f891 	bl	8000298 <__aeabi_dsub>
 800c176:	e72c      	b.n	800bfd2 <atan+0x2a>
 800c178:	ee10 0a10 	vmov	r0, s0
 800c17c:	4b53      	ldr	r3, [pc, #332]	; (800c2cc <atan+0x324>)
 800c17e:	2200      	movs	r2, #0
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 f889 	bl	8000298 <__aeabi_dsub>
 800c186:	4b51      	ldr	r3, [pc, #324]	; (800c2cc <atan+0x324>)
 800c188:	4606      	mov	r6, r0
 800c18a:	460f      	mov	r7, r1
 800c18c:	2200      	movs	r2, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 f883 	bl	800029c <__adddf3>
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4630      	mov	r0, r6
 800c19c:	4639      	mov	r1, r7
 800c19e:	f7f4 fb5d 	bl	800085c <__aeabi_ddiv>
 800c1a2:	f04f 0a01 	mov.w	sl, #1
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	e764      	b.n	800c076 <atan+0xce>
 800c1ac:	4b49      	ldr	r3, [pc, #292]	; (800c2d4 <atan+0x32c>)
 800c1ae:	429e      	cmp	r6, r3
 800c1b0:	da1d      	bge.n	800c1ee <atan+0x246>
 800c1b2:	ee10 0a10 	vmov	r0, s0
 800c1b6:	4b48      	ldr	r3, [pc, #288]	; (800c2d8 <atan+0x330>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f4 f86c 	bl	8000298 <__aeabi_dsub>
 800c1c0:	4b45      	ldr	r3, [pc, #276]	; (800c2d8 <atan+0x330>)
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	f7f4 fa1c 	bl	8000608 <__aeabi_dmul>
 800c1d0:	4b3e      	ldr	r3, [pc, #248]	; (800c2cc <atan+0x324>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f862 	bl	800029c <__adddf3>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4630      	mov	r0, r6
 800c1de:	4639      	mov	r1, r7
 800c1e0:	f7f4 fb3c 	bl	800085c <__aeabi_ddiv>
 800c1e4:	f04f 0a02 	mov.w	sl, #2
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	460d      	mov	r5, r1
 800c1ec:	e743      	b.n	800c076 <atan+0xce>
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	ee10 2a10 	vmov	r2, s0
 800c1f4:	4939      	ldr	r1, [pc, #228]	; (800c2dc <atan+0x334>)
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	f7f4 fb30 	bl	800085c <__aeabi_ddiv>
 800c1fc:	f04f 0a03 	mov.w	sl, #3
 800c200:	4604      	mov	r4, r0
 800c202:	460d      	mov	r5, r1
 800c204:	e737      	b.n	800c076 <atan+0xce>
 800c206:	4b36      	ldr	r3, [pc, #216]	; (800c2e0 <atan+0x338>)
 800c208:	4e36      	ldr	r6, [pc, #216]	; (800c2e4 <atan+0x33c>)
 800c20a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c20e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c212:	e9da 2300 	ldrd	r2, r3, [sl]
 800c216:	f7f4 f83f 	bl	8000298 <__aeabi_dsub>
 800c21a:	4622      	mov	r2, r4
 800c21c:	462b      	mov	r3, r5
 800c21e:	f7f4 f83b 	bl	8000298 <__aeabi_dsub>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c22a:	f7f4 f835 	bl	8000298 <__aeabi_dsub>
 800c22e:	f1bb 0f00 	cmp.w	fp, #0
 800c232:	4604      	mov	r4, r0
 800c234:	460d      	mov	r5, r1
 800c236:	f6bf aed6 	bge.w	800bfe6 <atan+0x3e>
 800c23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c23e:	461d      	mov	r5, r3
 800c240:	e6d1      	b.n	800bfe6 <atan+0x3e>
 800c242:	a51d      	add	r5, pc, #116	; (adr r5, 800c2b8 <atan+0x310>)
 800c244:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c248:	e6cd      	b.n	800bfe6 <atan+0x3e>
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w
 800c250:	54442d18 	.word	0x54442d18
 800c254:	bff921fb 	.word	0xbff921fb
 800c258:	8800759c 	.word	0x8800759c
 800c25c:	7e37e43c 	.word	0x7e37e43c
 800c260:	e322da11 	.word	0xe322da11
 800c264:	3f90ad3a 	.word	0x3f90ad3a
 800c268:	24760deb 	.word	0x24760deb
 800c26c:	3fa97b4b 	.word	0x3fa97b4b
 800c270:	a0d03d51 	.word	0xa0d03d51
 800c274:	3fb10d66 	.word	0x3fb10d66
 800c278:	c54c206e 	.word	0xc54c206e
 800c27c:	3fb745cd 	.word	0x3fb745cd
 800c280:	920083ff 	.word	0x920083ff
 800c284:	3fc24924 	.word	0x3fc24924
 800c288:	5555550d 	.word	0x5555550d
 800c28c:	3fd55555 	.word	0x3fd55555
 800c290:	2c6a6c2f 	.word	0x2c6a6c2f
 800c294:	bfa2b444 	.word	0xbfa2b444
 800c298:	52defd9a 	.word	0x52defd9a
 800c29c:	3fadde2d 	.word	0x3fadde2d
 800c2a0:	af749a6d 	.word	0xaf749a6d
 800c2a4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c2a8:	fe231671 	.word	0xfe231671
 800c2ac:	3fbc71c6 	.word	0x3fbc71c6
 800c2b0:	9998ebc4 	.word	0x9998ebc4
 800c2b4:	3fc99999 	.word	0x3fc99999
 800c2b8:	54442d18 	.word	0x54442d18
 800c2bc:	3ff921fb 	.word	0x3ff921fb
 800c2c0:	440fffff 	.word	0x440fffff
 800c2c4:	7ff00000 	.word	0x7ff00000
 800c2c8:	3fdbffff 	.word	0x3fdbffff
 800c2cc:	3ff00000 	.word	0x3ff00000
 800c2d0:	3ff2ffff 	.word	0x3ff2ffff
 800c2d4:	40038000 	.word	0x40038000
 800c2d8:	3ff80000 	.word	0x3ff80000
 800c2dc:	bff00000 	.word	0xbff00000
 800c2e0:	08011d60 	.word	0x08011d60
 800c2e4:	08011d40 	.word	0x08011d40

0800c2e8 <fabs>:
 800c2e8:	ec51 0b10 	vmov	r0, r1, d0
 800c2ec:	ee10 2a10 	vmov	r2, s0
 800c2f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2f4:	ec43 2b10 	vmov	d0, r2, r3
 800c2f8:	4770      	bx	lr
	...

0800c2fc <atanf>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	ee10 5a10 	vmov	r5, s0
 800c302:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c306:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c30a:	eef0 7a40 	vmov.f32	s15, s0
 800c30e:	db10      	blt.n	800c332 <atanf+0x36>
 800c310:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c314:	dd04      	ble.n	800c320 <atanf+0x24>
 800c316:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c31a:	eeb0 0a67 	vmov.f32	s0, s15
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c458 <atanf+0x15c>
 800c324:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c45c <atanf+0x160>
 800c328:	2d00      	cmp	r5, #0
 800c32a:	bfd8      	it	le
 800c32c:	eef0 7a40 	vmovle.f32	s15, s0
 800c330:	e7f3      	b.n	800c31a <atanf+0x1e>
 800c332:	4b4b      	ldr	r3, [pc, #300]	; (800c460 <atanf+0x164>)
 800c334:	429c      	cmp	r4, r3
 800c336:	dc10      	bgt.n	800c35a <atanf+0x5e>
 800c338:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c33c:	da0a      	bge.n	800c354 <atanf+0x58>
 800c33e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c464 <atanf+0x168>
 800c342:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c34a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c352:	dce2      	bgt.n	800c31a <atanf+0x1e>
 800c354:	f04f 33ff 	mov.w	r3, #4294967295
 800c358:	e013      	b.n	800c382 <atanf+0x86>
 800c35a:	f000 f8a3 	bl	800c4a4 <fabsf>
 800c35e:	4b42      	ldr	r3, [pc, #264]	; (800c468 <atanf+0x16c>)
 800c360:	429c      	cmp	r4, r3
 800c362:	dc4f      	bgt.n	800c404 <atanf+0x108>
 800c364:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c368:	429c      	cmp	r4, r3
 800c36a:	dc41      	bgt.n	800c3f0 <atanf+0xf4>
 800c36c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c370:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c374:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c378:	2300      	movs	r3, #0
 800c37a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c37e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c388:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c46c <atanf+0x170>
 800c38c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800c470 <atanf+0x174>
 800c390:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c474 <atanf+0x178>
 800c394:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c478 <atanf+0x17c>
 800c398:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c39c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c3a0:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c47c <atanf+0x180>
 800c3a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3a8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800c480 <atanf+0x184>
 800c3ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c3b0:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c484 <atanf+0x188>
 800c3b4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3b8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800c488 <atanf+0x18c>
 800c3bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c3c0:	eddf 5a32 	vldr	s11, [pc, #200]	; 800c48c <atanf+0x190>
 800c3c4:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c3c8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800c490 <atanf+0x194>
 800c3cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c3d0:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c494 <atanf+0x198>
 800c3d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c3d8:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c3dc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c3e0:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c3e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c3e8:	d121      	bne.n	800c42e <atanf+0x132>
 800c3ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c3ee:	e794      	b.n	800c31a <atanf+0x1e>
 800c3f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c3f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c3f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c402:	e7be      	b.n	800c382 <atanf+0x86>
 800c404:	4b24      	ldr	r3, [pc, #144]	; (800c498 <atanf+0x19c>)
 800c406:	429c      	cmp	r4, r3
 800c408:	dc0b      	bgt.n	800c422 <atanf+0x126>
 800c40a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c412:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c416:	2302      	movs	r3, #2
 800c418:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c41c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c420:	e7af      	b.n	800c382 <atanf+0x86>
 800c422:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c426:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c42a:	2303      	movs	r3, #3
 800c42c:	e7a9      	b.n	800c382 <atanf+0x86>
 800c42e:	4a1b      	ldr	r2, [pc, #108]	; (800c49c <atanf+0x1a0>)
 800c430:	491b      	ldr	r1, [pc, #108]	; (800c4a0 <atanf+0x1a4>)
 800c432:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c436:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c43a:	ed93 7a00 	vldr	s14, [r3]
 800c43e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c442:	2d00      	cmp	r5, #0
 800c444:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c448:	ed92 0a00 	vldr	s0, [r2]
 800c44c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c450:	bfb8      	it	lt
 800c452:	eef1 7a67 	vneglt.f32	s15, s15
 800c456:	e760      	b.n	800c31a <atanf+0x1e>
 800c458:	3fc90fdb 	.word	0x3fc90fdb
 800c45c:	bfc90fdb 	.word	0xbfc90fdb
 800c460:	3edfffff 	.word	0x3edfffff
 800c464:	7149f2ca 	.word	0x7149f2ca
 800c468:	3f97ffff 	.word	0x3f97ffff
 800c46c:	3c8569d7 	.word	0x3c8569d7
 800c470:	3d4bda59 	.word	0x3d4bda59
 800c474:	bd15a221 	.word	0xbd15a221
 800c478:	be4ccccd 	.word	0xbe4ccccd
 800c47c:	3d886b35 	.word	0x3d886b35
 800c480:	3dba2e6e 	.word	0x3dba2e6e
 800c484:	3e124925 	.word	0x3e124925
 800c488:	3eaaaaab 	.word	0x3eaaaaab
 800c48c:	bd6ef16b 	.word	0xbd6ef16b
 800c490:	bd9d8795 	.word	0xbd9d8795
 800c494:	bde38e38 	.word	0xbde38e38
 800c498:	401bffff 	.word	0x401bffff
 800c49c:	08011d80 	.word	0x08011d80
 800c4a0:	08011d90 	.word	0x08011d90

0800c4a4 <fabsf>:
 800c4a4:	ee10 3a10 	vmov	r3, s0
 800c4a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4ac:	ee00 3a10 	vmov	s0, r3
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <nanf>:
 800c4b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4bc <nanf+0x8>
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	7fc00000 	.word	0x7fc00000

0800c4c0 <__errno>:
 800c4c0:	4b01      	ldr	r3, [pc, #4]	; (800c4c8 <__errno+0x8>)
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	20000048 	.word	0x20000048

0800c4cc <__libc_init_array>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	4d0d      	ldr	r5, [pc, #52]	; (800c504 <__libc_init_array+0x38>)
 800c4d0:	4c0d      	ldr	r4, [pc, #52]	; (800c508 <__libc_init_array+0x3c>)
 800c4d2:	1b64      	subs	r4, r4, r5
 800c4d4:	10a4      	asrs	r4, r4, #2
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	42a6      	cmp	r6, r4
 800c4da:	d109      	bne.n	800c4f0 <__libc_init_array+0x24>
 800c4dc:	4d0b      	ldr	r5, [pc, #44]	; (800c50c <__libc_init_array+0x40>)
 800c4de:	4c0c      	ldr	r4, [pc, #48]	; (800c510 <__libc_init_array+0x44>)
 800c4e0:	f004 fc68 	bl	8010db4 <_init>
 800c4e4:	1b64      	subs	r4, r4, r5
 800c4e6:	10a4      	asrs	r4, r4, #2
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	42a6      	cmp	r6, r4
 800c4ec:	d105      	bne.n	800c4fa <__libc_init_array+0x2e>
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f4:	4798      	blx	r3
 800c4f6:	3601      	adds	r6, #1
 800c4f8:	e7ee      	b.n	800c4d8 <__libc_init_array+0xc>
 800c4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fe:	4798      	blx	r3
 800c500:	3601      	adds	r6, #1
 800c502:	e7f2      	b.n	800c4ea <__libc_init_array+0x1e>
 800c504:	0801225c 	.word	0x0801225c
 800c508:	0801225c 	.word	0x0801225c
 800c50c:	0801225c 	.word	0x0801225c
 800c510:	08012260 	.word	0x08012260

0800c514 <memcmp>:
 800c514:	b530      	push	{r4, r5, lr}
 800c516:	3901      	subs	r1, #1
 800c518:	2400      	movs	r4, #0
 800c51a:	42a2      	cmp	r2, r4
 800c51c:	d101      	bne.n	800c522 <memcmp+0xe>
 800c51e:	2000      	movs	r0, #0
 800c520:	e005      	b.n	800c52e <memcmp+0x1a>
 800c522:	5d03      	ldrb	r3, [r0, r4]
 800c524:	3401      	adds	r4, #1
 800c526:	5d0d      	ldrb	r5, [r1, r4]
 800c528:	42ab      	cmp	r3, r5
 800c52a:	d0f6      	beq.n	800c51a <memcmp+0x6>
 800c52c:	1b58      	subs	r0, r3, r5
 800c52e:	bd30      	pop	{r4, r5, pc}

0800c530 <memset>:
 800c530:	4402      	add	r2, r0
 800c532:	4603      	mov	r3, r0
 800c534:	4293      	cmp	r3, r2
 800c536:	d100      	bne.n	800c53a <memset+0xa>
 800c538:	4770      	bx	lr
 800c53a:	f803 1b01 	strb.w	r1, [r3], #1
 800c53e:	e7f9      	b.n	800c534 <memset+0x4>

0800c540 <__cvt>:
 800c540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	ec55 4b10 	vmov	r4, r5, d0
 800c548:	2d00      	cmp	r5, #0
 800c54a:	460e      	mov	r6, r1
 800c54c:	4619      	mov	r1, r3
 800c54e:	462b      	mov	r3, r5
 800c550:	bfbb      	ittet	lt
 800c552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c556:	461d      	movlt	r5, r3
 800c558:	2300      	movge	r3, #0
 800c55a:	232d      	movlt	r3, #45	; 0x2d
 800c55c:	700b      	strb	r3, [r1, #0]
 800c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c560:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c564:	4691      	mov	r9, r2
 800c566:	f023 0820 	bic.w	r8, r3, #32
 800c56a:	bfbc      	itt	lt
 800c56c:	4622      	movlt	r2, r4
 800c56e:	4614      	movlt	r4, r2
 800c570:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c574:	d005      	beq.n	800c582 <__cvt+0x42>
 800c576:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c57a:	d100      	bne.n	800c57e <__cvt+0x3e>
 800c57c:	3601      	adds	r6, #1
 800c57e:	2102      	movs	r1, #2
 800c580:	e000      	b.n	800c584 <__cvt+0x44>
 800c582:	2103      	movs	r1, #3
 800c584:	ab03      	add	r3, sp, #12
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	ab02      	add	r3, sp, #8
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	ec45 4b10 	vmov	d0, r4, r5
 800c590:	4653      	mov	r3, sl
 800c592:	4632      	mov	r2, r6
 800c594:	f001 fdc8 	bl	800e128 <_dtoa_r>
 800c598:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c59c:	4607      	mov	r7, r0
 800c59e:	d102      	bne.n	800c5a6 <__cvt+0x66>
 800c5a0:	f019 0f01 	tst.w	r9, #1
 800c5a4:	d022      	beq.n	800c5ec <__cvt+0xac>
 800c5a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5aa:	eb07 0906 	add.w	r9, r7, r6
 800c5ae:	d110      	bne.n	800c5d2 <__cvt+0x92>
 800c5b0:	783b      	ldrb	r3, [r7, #0]
 800c5b2:	2b30      	cmp	r3, #48	; 0x30
 800c5b4:	d10a      	bne.n	800c5cc <__cvt+0x8c>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	4629      	mov	r1, r5
 800c5be:	f7f4 fa8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c2:	b918      	cbnz	r0, 800c5cc <__cvt+0x8c>
 800c5c4:	f1c6 0601 	rsb	r6, r6, #1
 800c5c8:	f8ca 6000 	str.w	r6, [sl]
 800c5cc:	f8da 3000 	ldr.w	r3, [sl]
 800c5d0:	4499      	add	r9, r3
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	f7f4 fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5de:	b108      	cbz	r0, 800c5e4 <__cvt+0xa4>
 800c5e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5e4:	2230      	movs	r2, #48	; 0x30
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	454b      	cmp	r3, r9
 800c5ea:	d307      	bcc.n	800c5fc <__cvt+0xbc>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5f0:	1bdb      	subs	r3, r3, r7
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	b004      	add	sp, #16
 800c5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fc:	1c59      	adds	r1, r3, #1
 800c5fe:	9103      	str	r1, [sp, #12]
 800c600:	701a      	strb	r2, [r3, #0]
 800c602:	e7f0      	b.n	800c5e6 <__cvt+0xa6>

0800c604 <__exponent>:
 800c604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c606:	4603      	mov	r3, r0
 800c608:	2900      	cmp	r1, #0
 800c60a:	bfb8      	it	lt
 800c60c:	4249      	neglt	r1, r1
 800c60e:	f803 2b02 	strb.w	r2, [r3], #2
 800c612:	bfb4      	ite	lt
 800c614:	222d      	movlt	r2, #45	; 0x2d
 800c616:	222b      	movge	r2, #43	; 0x2b
 800c618:	2909      	cmp	r1, #9
 800c61a:	7042      	strb	r2, [r0, #1]
 800c61c:	dd2a      	ble.n	800c674 <__exponent+0x70>
 800c61e:	f10d 0407 	add.w	r4, sp, #7
 800c622:	46a4      	mov	ip, r4
 800c624:	270a      	movs	r7, #10
 800c626:	46a6      	mov	lr, r4
 800c628:	460a      	mov	r2, r1
 800c62a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c62e:	fb07 1516 	mls	r5, r7, r6, r1
 800c632:	3530      	adds	r5, #48	; 0x30
 800c634:	2a63      	cmp	r2, #99	; 0x63
 800c636:	f104 34ff 	add.w	r4, r4, #4294967295
 800c63a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c63e:	4631      	mov	r1, r6
 800c640:	dcf1      	bgt.n	800c626 <__exponent+0x22>
 800c642:	3130      	adds	r1, #48	; 0x30
 800c644:	f1ae 0502 	sub.w	r5, lr, #2
 800c648:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c64c:	1c44      	adds	r4, r0, #1
 800c64e:	4629      	mov	r1, r5
 800c650:	4561      	cmp	r1, ip
 800c652:	d30a      	bcc.n	800c66a <__exponent+0x66>
 800c654:	f10d 0209 	add.w	r2, sp, #9
 800c658:	eba2 020e 	sub.w	r2, r2, lr
 800c65c:	4565      	cmp	r5, ip
 800c65e:	bf88      	it	hi
 800c660:	2200      	movhi	r2, #0
 800c662:	4413      	add	r3, r2
 800c664:	1a18      	subs	r0, r3, r0
 800c666:	b003      	add	sp, #12
 800c668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c672:	e7ed      	b.n	800c650 <__exponent+0x4c>
 800c674:	2330      	movs	r3, #48	; 0x30
 800c676:	3130      	adds	r1, #48	; 0x30
 800c678:	7083      	strb	r3, [r0, #2]
 800c67a:	70c1      	strb	r1, [r0, #3]
 800c67c:	1d03      	adds	r3, r0, #4
 800c67e:	e7f1      	b.n	800c664 <__exponent+0x60>

0800c680 <_printf_float>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	ed2d 8b02 	vpush	{d8}
 800c688:	b08d      	sub	sp, #52	; 0x34
 800c68a:	460c      	mov	r4, r1
 800c68c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c690:	4616      	mov	r6, r2
 800c692:	461f      	mov	r7, r3
 800c694:	4605      	mov	r5, r0
 800c696:	f002 ff97 	bl	800f5c8 <_localeconv_r>
 800c69a:	f8d0 a000 	ldr.w	sl, [r0]
 800c69e:	4650      	mov	r0, sl
 800c6a0:	f7f3 fd9e 	bl	80001e0 <strlen>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	9305      	str	r3, [sp, #20]
 800c6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c6b4:	3307      	adds	r3, #7
 800c6b6:	f023 0307 	bic.w	r3, r3, #7
 800c6ba:	f103 0208 	add.w	r2, r3, #8
 800c6be:	f8c8 2000 	str.w	r2, [r8]
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c6ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c6ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6d2:	9307      	str	r3, [sp, #28]
 800c6d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6d8:	ee08 0a10 	vmov	s16, r0
 800c6dc:	4b9f      	ldr	r3, [pc, #636]	; (800c95c <_printf_float+0x2dc>)
 800c6de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e6:	f7f4 fa29 	bl	8000b3c <__aeabi_dcmpun>
 800c6ea:	bb88      	cbnz	r0, 800c750 <_printf_float+0xd0>
 800c6ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6f0:	4b9a      	ldr	r3, [pc, #616]	; (800c95c <_printf_float+0x2dc>)
 800c6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f6:	f7f4 fa03 	bl	8000b00 <__aeabi_dcmple>
 800c6fa:	bb48      	cbnz	r0, 800c750 <_printf_float+0xd0>
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2300      	movs	r3, #0
 800c700:	4640      	mov	r0, r8
 800c702:	4649      	mov	r1, r9
 800c704:	f7f4 f9f2 	bl	8000aec <__aeabi_dcmplt>
 800c708:	b110      	cbz	r0, 800c710 <_printf_float+0x90>
 800c70a:	232d      	movs	r3, #45	; 0x2d
 800c70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c710:	4b93      	ldr	r3, [pc, #588]	; (800c960 <_printf_float+0x2e0>)
 800c712:	4894      	ldr	r0, [pc, #592]	; (800c964 <_printf_float+0x2e4>)
 800c714:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c718:	bf94      	ite	ls
 800c71a:	4698      	movls	r8, r3
 800c71c:	4680      	movhi	r8, r0
 800c71e:	2303      	movs	r3, #3
 800c720:	6123      	str	r3, [r4, #16]
 800c722:	9b05      	ldr	r3, [sp, #20]
 800c724:	f023 0204 	bic.w	r2, r3, #4
 800c728:	6022      	str	r2, [r4, #0]
 800c72a:	f04f 0900 	mov.w	r9, #0
 800c72e:	9700      	str	r7, [sp, #0]
 800c730:	4633      	mov	r3, r6
 800c732:	aa0b      	add	r2, sp, #44	; 0x2c
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f9d8 	bl	800caec <_printf_common>
 800c73c:	3001      	adds	r0, #1
 800c73e:	f040 8090 	bne.w	800c862 <_printf_float+0x1e2>
 800c742:	f04f 30ff 	mov.w	r0, #4294967295
 800c746:	b00d      	add	sp, #52	; 0x34
 800c748:	ecbd 8b02 	vpop	{d8}
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	4642      	mov	r2, r8
 800c752:	464b      	mov	r3, r9
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f4 f9f0 	bl	8000b3c <__aeabi_dcmpun>
 800c75c:	b140      	cbz	r0, 800c770 <_printf_float+0xf0>
 800c75e:	464b      	mov	r3, r9
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfbc      	itt	lt
 800c764:	232d      	movlt	r3, #45	; 0x2d
 800c766:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c76a:	487f      	ldr	r0, [pc, #508]	; (800c968 <_printf_float+0x2e8>)
 800c76c:	4b7f      	ldr	r3, [pc, #508]	; (800c96c <_printf_float+0x2ec>)
 800c76e:	e7d1      	b.n	800c714 <_printf_float+0x94>
 800c770:	6863      	ldr	r3, [r4, #4]
 800c772:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c776:	9206      	str	r2, [sp, #24]
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	d13f      	bne.n	800c7fc <_printf_float+0x17c>
 800c77c:	2306      	movs	r3, #6
 800c77e:	6063      	str	r3, [r4, #4]
 800c780:	9b05      	ldr	r3, [sp, #20]
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c788:	2300      	movs	r3, #0
 800c78a:	9303      	str	r3, [sp, #12]
 800c78c:	ab0a      	add	r3, sp, #40	; 0x28
 800c78e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c792:	ab09      	add	r3, sp, #36	; 0x24
 800c794:	ec49 8b10 	vmov	d0, r8, r9
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	6022      	str	r2, [r4, #0]
 800c79c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f7ff fecd 	bl	800c540 <__cvt>
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7aa:	2b47      	cmp	r3, #71	; 0x47
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	d108      	bne.n	800c7c2 <_printf_float+0x142>
 800c7b0:	1cc8      	adds	r0, r1, #3
 800c7b2:	db02      	blt.n	800c7ba <_printf_float+0x13a>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	dd41      	ble.n	800c83e <_printf_float+0x1be>
 800c7ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800c7be:	fa5f fb8b 	uxtb.w	fp, fp
 800c7c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7c6:	d820      	bhi.n	800c80a <_printf_float+0x18a>
 800c7c8:	3901      	subs	r1, #1
 800c7ca:	465a      	mov	r2, fp
 800c7cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7d0:	9109      	str	r1, [sp, #36]	; 0x24
 800c7d2:	f7ff ff17 	bl	800c604 <__exponent>
 800c7d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7d8:	1813      	adds	r3, r2, r0
 800c7da:	2a01      	cmp	r2, #1
 800c7dc:	4681      	mov	r9, r0
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	dc02      	bgt.n	800c7e8 <_printf_float+0x168>
 800c7e2:	6822      	ldr	r2, [r4, #0]
 800c7e4:	07d2      	lsls	r2, r2, #31
 800c7e6:	d501      	bpl.n	800c7ec <_printf_float+0x16c>
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	6123      	str	r3, [r4, #16]
 800c7ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d09c      	beq.n	800c72e <_printf_float+0xae>
 800c7f4:	232d      	movs	r3, #45	; 0x2d
 800c7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fa:	e798      	b.n	800c72e <_printf_float+0xae>
 800c7fc:	9a06      	ldr	r2, [sp, #24]
 800c7fe:	2a47      	cmp	r2, #71	; 0x47
 800c800:	d1be      	bne.n	800c780 <_printf_float+0x100>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1bc      	bne.n	800c780 <_printf_float+0x100>
 800c806:	2301      	movs	r3, #1
 800c808:	e7b9      	b.n	800c77e <_printf_float+0xfe>
 800c80a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c80e:	d118      	bne.n	800c842 <_printf_float+0x1c2>
 800c810:	2900      	cmp	r1, #0
 800c812:	6863      	ldr	r3, [r4, #4]
 800c814:	dd0b      	ble.n	800c82e <_printf_float+0x1ae>
 800c816:	6121      	str	r1, [r4, #16]
 800c818:	b913      	cbnz	r3, 800c820 <_printf_float+0x1a0>
 800c81a:	6822      	ldr	r2, [r4, #0]
 800c81c:	07d0      	lsls	r0, r2, #31
 800c81e:	d502      	bpl.n	800c826 <_printf_float+0x1a6>
 800c820:	3301      	adds	r3, #1
 800c822:	440b      	add	r3, r1
 800c824:	6123      	str	r3, [r4, #16]
 800c826:	65a1      	str	r1, [r4, #88]	; 0x58
 800c828:	f04f 0900 	mov.w	r9, #0
 800c82c:	e7de      	b.n	800c7ec <_printf_float+0x16c>
 800c82e:	b913      	cbnz	r3, 800c836 <_printf_float+0x1b6>
 800c830:	6822      	ldr	r2, [r4, #0]
 800c832:	07d2      	lsls	r2, r2, #31
 800c834:	d501      	bpl.n	800c83a <_printf_float+0x1ba>
 800c836:	3302      	adds	r3, #2
 800c838:	e7f4      	b.n	800c824 <_printf_float+0x1a4>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e7f2      	b.n	800c824 <_printf_float+0x1a4>
 800c83e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c844:	4299      	cmp	r1, r3
 800c846:	db05      	blt.n	800c854 <_printf_float+0x1d4>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	6121      	str	r1, [r4, #16]
 800c84c:	07d8      	lsls	r0, r3, #31
 800c84e:	d5ea      	bpl.n	800c826 <_printf_float+0x1a6>
 800c850:	1c4b      	adds	r3, r1, #1
 800c852:	e7e7      	b.n	800c824 <_printf_float+0x1a4>
 800c854:	2900      	cmp	r1, #0
 800c856:	bfd4      	ite	le
 800c858:	f1c1 0202 	rsble	r2, r1, #2
 800c85c:	2201      	movgt	r2, #1
 800c85e:	4413      	add	r3, r2
 800c860:	e7e0      	b.n	800c824 <_printf_float+0x1a4>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	055a      	lsls	r2, r3, #21
 800c866:	d407      	bmi.n	800c878 <_printf_float+0x1f8>
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	4642      	mov	r2, r8
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	d12c      	bne.n	800c8d0 <_printf_float+0x250>
 800c876:	e764      	b.n	800c742 <_printf_float+0xc2>
 800c878:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c87c:	f240 80e0 	bls.w	800ca40 <_printf_float+0x3c0>
 800c880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c884:	2200      	movs	r2, #0
 800c886:	2300      	movs	r3, #0
 800c888:	f7f4 f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d034      	beq.n	800c8fa <_printf_float+0x27a>
 800c890:	4a37      	ldr	r2, [pc, #220]	; (800c970 <_printf_float+0x2f0>)
 800c892:	2301      	movs	r3, #1
 800c894:	4631      	mov	r1, r6
 800c896:	4628      	mov	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	3001      	adds	r0, #1
 800c89c:	f43f af51 	beq.w	800c742 <_printf_float+0xc2>
 800c8a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	db02      	blt.n	800c8ae <_printf_float+0x22e>
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	07d8      	lsls	r0, r3, #31
 800c8ac:	d510      	bpl.n	800c8d0 <_printf_float+0x250>
 800c8ae:	ee18 3a10 	vmov	r3, s16
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b8      	blx	r7
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	f43f af41 	beq.w	800c742 <_printf_float+0xc2>
 800c8c0:	f04f 0800 	mov.w	r8, #0
 800c8c4:	f104 091a 	add.w	r9, r4, #26
 800c8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4543      	cmp	r3, r8
 800c8ce:	dc09      	bgt.n	800c8e4 <_printf_float+0x264>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	079b      	lsls	r3, r3, #30
 800c8d4:	f100 8105 	bmi.w	800cae2 <_printf_float+0x462>
 800c8d8:	68e0      	ldr	r0, [r4, #12]
 800c8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8dc:	4298      	cmp	r0, r3
 800c8de:	bfb8      	it	lt
 800c8e0:	4618      	movlt	r0, r3
 800c8e2:	e730      	b.n	800c746 <_printf_float+0xc6>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	464a      	mov	r2, r9
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	f43f af27 	beq.w	800c742 <_printf_float+0xc2>
 800c8f4:	f108 0801 	add.w	r8, r8, #1
 800c8f8:	e7e6      	b.n	800c8c8 <_printf_float+0x248>
 800c8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	dc39      	bgt.n	800c974 <_printf_float+0x2f4>
 800c900:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <_printf_float+0x2f0>)
 800c902:	2301      	movs	r3, #1
 800c904:	4631      	mov	r1, r6
 800c906:	4628      	mov	r0, r5
 800c908:	47b8      	blx	r7
 800c90a:	3001      	adds	r0, #1
 800c90c:	f43f af19 	beq.w	800c742 <_printf_float+0xc2>
 800c910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c914:	4313      	orrs	r3, r2
 800c916:	d102      	bne.n	800c91e <_printf_float+0x29e>
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	07d9      	lsls	r1, r3, #31
 800c91c:	d5d8      	bpl.n	800c8d0 <_printf_float+0x250>
 800c91e:	ee18 3a10 	vmov	r3, s16
 800c922:	4652      	mov	r2, sl
 800c924:	4631      	mov	r1, r6
 800c926:	4628      	mov	r0, r5
 800c928:	47b8      	blx	r7
 800c92a:	3001      	adds	r0, #1
 800c92c:	f43f af09 	beq.w	800c742 <_printf_float+0xc2>
 800c930:	f04f 0900 	mov.w	r9, #0
 800c934:	f104 0a1a 	add.w	sl, r4, #26
 800c938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c93a:	425b      	negs	r3, r3
 800c93c:	454b      	cmp	r3, r9
 800c93e:	dc01      	bgt.n	800c944 <_printf_float+0x2c4>
 800c940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c942:	e792      	b.n	800c86a <_printf_float+0x1ea>
 800c944:	2301      	movs	r3, #1
 800c946:	4652      	mov	r2, sl
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	f43f aef7 	beq.w	800c742 <_printf_float+0xc2>
 800c954:	f109 0901 	add.w	r9, r9, #1
 800c958:	e7ee      	b.n	800c938 <_printf_float+0x2b8>
 800c95a:	bf00      	nop
 800c95c:	7fefffff 	.word	0x7fefffff
 800c960:	08011da4 	.word	0x08011da4
 800c964:	08011da8 	.word	0x08011da8
 800c968:	08011db0 	.word	0x08011db0
 800c96c:	08011dac 	.word	0x08011dac
 800c970:	08011db4 	.word	0x08011db4
 800c974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c978:	429a      	cmp	r2, r3
 800c97a:	bfa8      	it	ge
 800c97c:	461a      	movge	r2, r3
 800c97e:	2a00      	cmp	r2, #0
 800c980:	4691      	mov	r9, r2
 800c982:	dc37      	bgt.n	800c9f4 <_printf_float+0x374>
 800c984:	f04f 0b00 	mov.w	fp, #0
 800c988:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c98c:	f104 021a 	add.w	r2, r4, #26
 800c990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c992:	9305      	str	r3, [sp, #20]
 800c994:	eba3 0309 	sub.w	r3, r3, r9
 800c998:	455b      	cmp	r3, fp
 800c99a:	dc33      	bgt.n	800ca04 <_printf_float+0x384>
 800c99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	db3b      	blt.n	800ca1c <_printf_float+0x39c>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	07da      	lsls	r2, r3, #31
 800c9a8:	d438      	bmi.n	800ca1c <_printf_float+0x39c>
 800c9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ac:	9b05      	ldr	r3, [sp, #20]
 800c9ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	eba2 0901 	sub.w	r9, r2, r1
 800c9b6:	4599      	cmp	r9, r3
 800c9b8:	bfa8      	it	ge
 800c9ba:	4699      	movge	r9, r3
 800c9bc:	f1b9 0f00 	cmp.w	r9, #0
 800c9c0:	dc35      	bgt.n	800ca2e <_printf_float+0x3ae>
 800c9c2:	f04f 0800 	mov.w	r8, #0
 800c9c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ca:	f104 0a1a 	add.w	sl, r4, #26
 800c9ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	eba3 0309 	sub.w	r3, r3, r9
 800c9d8:	4543      	cmp	r3, r8
 800c9da:	f77f af79 	ble.w	800c8d0 <_printf_float+0x250>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	4631      	mov	r1, r6
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	47b8      	blx	r7
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f43f aeaa 	beq.w	800c742 <_printf_float+0xc2>
 800c9ee:	f108 0801 	add.w	r8, r8, #1
 800c9f2:	e7ec      	b.n	800c9ce <_printf_float+0x34e>
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4642      	mov	r2, r8
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b8      	blx	r7
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d1c0      	bne.n	800c984 <_printf_float+0x304>
 800ca02:	e69e      	b.n	800c742 <_printf_float+0xc2>
 800ca04:	2301      	movs	r3, #1
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	9205      	str	r2, [sp, #20]
 800ca0c:	47b8      	blx	r7
 800ca0e:	3001      	adds	r0, #1
 800ca10:	f43f ae97 	beq.w	800c742 <_printf_float+0xc2>
 800ca14:	9a05      	ldr	r2, [sp, #20]
 800ca16:	f10b 0b01 	add.w	fp, fp, #1
 800ca1a:	e7b9      	b.n	800c990 <_printf_float+0x310>
 800ca1c:	ee18 3a10 	vmov	r3, s16
 800ca20:	4652      	mov	r2, sl
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d1be      	bne.n	800c9aa <_printf_float+0x32a>
 800ca2c:	e689      	b.n	800c742 <_printf_float+0xc2>
 800ca2e:	9a05      	ldr	r2, [sp, #20]
 800ca30:	464b      	mov	r3, r9
 800ca32:	4442      	add	r2, r8
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d1c1      	bne.n	800c9c2 <_printf_float+0x342>
 800ca3e:	e680      	b.n	800c742 <_printf_float+0xc2>
 800ca40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca42:	2a01      	cmp	r2, #1
 800ca44:	dc01      	bgt.n	800ca4a <_printf_float+0x3ca>
 800ca46:	07db      	lsls	r3, r3, #31
 800ca48:	d538      	bpl.n	800cabc <_printf_float+0x43c>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	4642      	mov	r2, r8
 800ca4e:	4631      	mov	r1, r6
 800ca50:	4628      	mov	r0, r5
 800ca52:	47b8      	blx	r7
 800ca54:	3001      	adds	r0, #1
 800ca56:	f43f ae74 	beq.w	800c742 <_printf_float+0xc2>
 800ca5a:	ee18 3a10 	vmov	r3, s16
 800ca5e:	4652      	mov	r2, sl
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	47b8      	blx	r7
 800ca66:	3001      	adds	r0, #1
 800ca68:	f43f ae6b 	beq.w	800c742 <_printf_float+0xc2>
 800ca6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca70:	2200      	movs	r2, #0
 800ca72:	2300      	movs	r3, #0
 800ca74:	f7f4 f830 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca78:	b9d8      	cbnz	r0, 800cab2 <_printf_float+0x432>
 800ca7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca7c:	f108 0201 	add.w	r2, r8, #1
 800ca80:	3b01      	subs	r3, #1
 800ca82:	4631      	mov	r1, r6
 800ca84:	4628      	mov	r0, r5
 800ca86:	47b8      	blx	r7
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d10e      	bne.n	800caaa <_printf_float+0x42a>
 800ca8c:	e659      	b.n	800c742 <_printf_float+0xc2>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4652      	mov	r2, sl
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae52 	beq.w	800c742 <_printf_float+0xc2>
 800ca9e:	f108 0801 	add.w	r8, r8, #1
 800caa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa4:	3b01      	subs	r3, #1
 800caa6:	4543      	cmp	r3, r8
 800caa8:	dcf1      	bgt.n	800ca8e <_printf_float+0x40e>
 800caaa:	464b      	mov	r3, r9
 800caac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cab0:	e6dc      	b.n	800c86c <_printf_float+0x1ec>
 800cab2:	f04f 0800 	mov.w	r8, #0
 800cab6:	f104 0a1a 	add.w	sl, r4, #26
 800caba:	e7f2      	b.n	800caa2 <_printf_float+0x422>
 800cabc:	2301      	movs	r3, #1
 800cabe:	4642      	mov	r2, r8
 800cac0:	e7df      	b.n	800ca82 <_printf_float+0x402>
 800cac2:	2301      	movs	r3, #1
 800cac4:	464a      	mov	r2, r9
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	f43f ae38 	beq.w	800c742 <_printf_float+0xc2>
 800cad2:	f108 0801 	add.w	r8, r8, #1
 800cad6:	68e3      	ldr	r3, [r4, #12]
 800cad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cada:	1a5b      	subs	r3, r3, r1
 800cadc:	4543      	cmp	r3, r8
 800cade:	dcf0      	bgt.n	800cac2 <_printf_float+0x442>
 800cae0:	e6fa      	b.n	800c8d8 <_printf_float+0x258>
 800cae2:	f04f 0800 	mov.w	r8, #0
 800cae6:	f104 0919 	add.w	r9, r4, #25
 800caea:	e7f4      	b.n	800cad6 <_printf_float+0x456>

0800caec <_printf_common>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	4616      	mov	r6, r2
 800caf2:	4699      	mov	r9, r3
 800caf4:	688a      	ldr	r2, [r1, #8]
 800caf6:	690b      	ldr	r3, [r1, #16]
 800caf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cafc:	4293      	cmp	r3, r2
 800cafe:	bfb8      	it	lt
 800cb00:	4613      	movlt	r3, r2
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb08:	4607      	mov	r7, r0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	b10a      	cbz	r2, 800cb12 <_printf_common+0x26>
 800cb0e:	3301      	adds	r3, #1
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	0699      	lsls	r1, r3, #26
 800cb16:	bf42      	ittt	mi
 800cb18:	6833      	ldrmi	r3, [r6, #0]
 800cb1a:	3302      	addmi	r3, #2
 800cb1c:	6033      	strmi	r3, [r6, #0]
 800cb1e:	6825      	ldr	r5, [r4, #0]
 800cb20:	f015 0506 	ands.w	r5, r5, #6
 800cb24:	d106      	bne.n	800cb34 <_printf_common+0x48>
 800cb26:	f104 0a19 	add.w	sl, r4, #25
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	6832      	ldr	r2, [r6, #0]
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dc26      	bgt.n	800cb82 <_printf_common+0x96>
 800cb34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb38:	1e13      	subs	r3, r2, #0
 800cb3a:	6822      	ldr	r2, [r4, #0]
 800cb3c:	bf18      	it	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	0692      	lsls	r2, r2, #26
 800cb42:	d42b      	bmi.n	800cb9c <_printf_common+0xb0>
 800cb44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb48:	4649      	mov	r1, r9
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	47c0      	blx	r8
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d01e      	beq.n	800cb90 <_printf_common+0xa4>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	68e5      	ldr	r5, [r4, #12]
 800cb56:	6832      	ldr	r2, [r6, #0]
 800cb58:	f003 0306 	and.w	r3, r3, #6
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	bf08      	it	eq
 800cb60:	1aad      	subeq	r5, r5, r2
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	6922      	ldr	r2, [r4, #16]
 800cb66:	bf0c      	ite	eq
 800cb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb6c:	2500      	movne	r5, #0
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	bfc4      	itt	gt
 800cb72:	1a9b      	subgt	r3, r3, r2
 800cb74:	18ed      	addgt	r5, r5, r3
 800cb76:	2600      	movs	r6, #0
 800cb78:	341a      	adds	r4, #26
 800cb7a:	42b5      	cmp	r5, r6
 800cb7c:	d11a      	bne.n	800cbb4 <_printf_common+0xc8>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e008      	b.n	800cb94 <_printf_common+0xa8>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4652      	mov	r2, sl
 800cb86:	4649      	mov	r1, r9
 800cb88:	4638      	mov	r0, r7
 800cb8a:	47c0      	blx	r8
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d103      	bne.n	800cb98 <_printf_common+0xac>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb98:	3501      	adds	r5, #1
 800cb9a:	e7c6      	b.n	800cb2a <_printf_common+0x3e>
 800cb9c:	18e1      	adds	r1, r4, r3
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	2030      	movs	r0, #48	; 0x30
 800cba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cba6:	4422      	add	r2, r4
 800cba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	e7c7      	b.n	800cb44 <_printf_common+0x58>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4649      	mov	r1, r9
 800cbba:	4638      	mov	r0, r7
 800cbbc:	47c0      	blx	r8
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d0e6      	beq.n	800cb90 <_printf_common+0xa4>
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7d9      	b.n	800cb7a <_printf_common+0x8e>
	...

0800cbc8 <_printf_i>:
 800cbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	460c      	mov	r4, r1
 800cbce:	4691      	mov	r9, r2
 800cbd0:	7e27      	ldrb	r7, [r4, #24]
 800cbd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbd4:	2f78      	cmp	r7, #120	; 0x78
 800cbd6:	4680      	mov	r8, r0
 800cbd8:	469a      	mov	sl, r3
 800cbda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbde:	d807      	bhi.n	800cbf0 <_printf_i+0x28>
 800cbe0:	2f62      	cmp	r7, #98	; 0x62
 800cbe2:	d80a      	bhi.n	800cbfa <_printf_i+0x32>
 800cbe4:	2f00      	cmp	r7, #0
 800cbe6:	f000 80d8 	beq.w	800cd9a <_printf_i+0x1d2>
 800cbea:	2f58      	cmp	r7, #88	; 0x58
 800cbec:	f000 80a3 	beq.w	800cd36 <_printf_i+0x16e>
 800cbf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cbf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbf8:	e03a      	b.n	800cc70 <_printf_i+0xa8>
 800cbfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbfe:	2b15      	cmp	r3, #21
 800cc00:	d8f6      	bhi.n	800cbf0 <_printf_i+0x28>
 800cc02:	a001      	add	r0, pc, #4	; (adr r0, 800cc08 <_printf_i+0x40>)
 800cc04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc75 	.word	0x0800cc75
 800cc10:	0800cbf1 	.word	0x0800cbf1
 800cc14:	0800cbf1 	.word	0x0800cbf1
 800cc18:	0800cbf1 	.word	0x0800cbf1
 800cc1c:	0800cbf1 	.word	0x0800cbf1
 800cc20:	0800cc75 	.word	0x0800cc75
 800cc24:	0800cbf1 	.word	0x0800cbf1
 800cc28:	0800cbf1 	.word	0x0800cbf1
 800cc2c:	0800cbf1 	.word	0x0800cbf1
 800cc30:	0800cbf1 	.word	0x0800cbf1
 800cc34:	0800cd81 	.word	0x0800cd81
 800cc38:	0800cca5 	.word	0x0800cca5
 800cc3c:	0800cd63 	.word	0x0800cd63
 800cc40:	0800cbf1 	.word	0x0800cbf1
 800cc44:	0800cbf1 	.word	0x0800cbf1
 800cc48:	0800cda3 	.word	0x0800cda3
 800cc4c:	0800cbf1 	.word	0x0800cbf1
 800cc50:	0800cca5 	.word	0x0800cca5
 800cc54:	0800cbf1 	.word	0x0800cbf1
 800cc58:	0800cbf1 	.word	0x0800cbf1
 800cc5c:	0800cd6b 	.word	0x0800cd6b
 800cc60:	680b      	ldr	r3, [r1, #0]
 800cc62:	1d1a      	adds	r2, r3, #4
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	600a      	str	r2, [r1, #0]
 800cc68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc70:	2301      	movs	r3, #1
 800cc72:	e0a3      	b.n	800cdbc <_printf_i+0x1f4>
 800cc74:	6825      	ldr	r5, [r4, #0]
 800cc76:	6808      	ldr	r0, [r1, #0]
 800cc78:	062e      	lsls	r6, r5, #24
 800cc7a:	f100 0304 	add.w	r3, r0, #4
 800cc7e:	d50a      	bpl.n	800cc96 <_printf_i+0xce>
 800cc80:	6805      	ldr	r5, [r0, #0]
 800cc82:	600b      	str	r3, [r1, #0]
 800cc84:	2d00      	cmp	r5, #0
 800cc86:	da03      	bge.n	800cc90 <_printf_i+0xc8>
 800cc88:	232d      	movs	r3, #45	; 0x2d
 800cc8a:	426d      	negs	r5, r5
 800cc8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc90:	485e      	ldr	r0, [pc, #376]	; (800ce0c <_printf_i+0x244>)
 800cc92:	230a      	movs	r3, #10
 800cc94:	e019      	b.n	800ccca <_printf_i+0x102>
 800cc96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cc9a:	6805      	ldr	r5, [r0, #0]
 800cc9c:	600b      	str	r3, [r1, #0]
 800cc9e:	bf18      	it	ne
 800cca0:	b22d      	sxthne	r5, r5
 800cca2:	e7ef      	b.n	800cc84 <_printf_i+0xbc>
 800cca4:	680b      	ldr	r3, [r1, #0]
 800cca6:	6825      	ldr	r5, [r4, #0]
 800cca8:	1d18      	adds	r0, r3, #4
 800ccaa:	6008      	str	r0, [r1, #0]
 800ccac:	0628      	lsls	r0, r5, #24
 800ccae:	d501      	bpl.n	800ccb4 <_printf_i+0xec>
 800ccb0:	681d      	ldr	r5, [r3, #0]
 800ccb2:	e002      	b.n	800ccba <_printf_i+0xf2>
 800ccb4:	0669      	lsls	r1, r5, #25
 800ccb6:	d5fb      	bpl.n	800ccb0 <_printf_i+0xe8>
 800ccb8:	881d      	ldrh	r5, [r3, #0]
 800ccba:	4854      	ldr	r0, [pc, #336]	; (800ce0c <_printf_i+0x244>)
 800ccbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ccbe:	bf0c      	ite	eq
 800ccc0:	2308      	moveq	r3, #8
 800ccc2:	230a      	movne	r3, #10
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccca:	6866      	ldr	r6, [r4, #4]
 800cccc:	60a6      	str	r6, [r4, #8]
 800ccce:	2e00      	cmp	r6, #0
 800ccd0:	bfa2      	ittt	ge
 800ccd2:	6821      	ldrge	r1, [r4, #0]
 800ccd4:	f021 0104 	bicge.w	r1, r1, #4
 800ccd8:	6021      	strge	r1, [r4, #0]
 800ccda:	b90d      	cbnz	r5, 800cce0 <_printf_i+0x118>
 800ccdc:	2e00      	cmp	r6, #0
 800ccde:	d04d      	beq.n	800cd7c <_printf_i+0x1b4>
 800cce0:	4616      	mov	r6, r2
 800cce2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cce6:	fb03 5711 	mls	r7, r3, r1, r5
 800ccea:	5dc7      	ldrb	r7, [r0, r7]
 800ccec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccf0:	462f      	mov	r7, r5
 800ccf2:	42bb      	cmp	r3, r7
 800ccf4:	460d      	mov	r5, r1
 800ccf6:	d9f4      	bls.n	800cce2 <_printf_i+0x11a>
 800ccf8:	2b08      	cmp	r3, #8
 800ccfa:	d10b      	bne.n	800cd14 <_printf_i+0x14c>
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	07df      	lsls	r7, r3, #31
 800cd00:	d508      	bpl.n	800cd14 <_printf_i+0x14c>
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	6861      	ldr	r1, [r4, #4]
 800cd06:	4299      	cmp	r1, r3
 800cd08:	bfde      	ittt	le
 800cd0a:	2330      	movle	r3, #48	; 0x30
 800cd0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd14:	1b92      	subs	r2, r2, r6
 800cd16:	6122      	str	r2, [r4, #16]
 800cd18:	f8cd a000 	str.w	sl, [sp]
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	aa03      	add	r2, sp, #12
 800cd20:	4621      	mov	r1, r4
 800cd22:	4640      	mov	r0, r8
 800cd24:	f7ff fee2 	bl	800caec <_printf_common>
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d14c      	bne.n	800cdc6 <_printf_i+0x1fe>
 800cd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd30:	b004      	add	sp, #16
 800cd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd36:	4835      	ldr	r0, [pc, #212]	; (800ce0c <_printf_i+0x244>)
 800cd38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	680e      	ldr	r6, [r1, #0]
 800cd40:	061f      	lsls	r7, r3, #24
 800cd42:	f856 5b04 	ldr.w	r5, [r6], #4
 800cd46:	600e      	str	r6, [r1, #0]
 800cd48:	d514      	bpl.n	800cd74 <_printf_i+0x1ac>
 800cd4a:	07d9      	lsls	r1, r3, #31
 800cd4c:	bf44      	itt	mi
 800cd4e:	f043 0320 	orrmi.w	r3, r3, #32
 800cd52:	6023      	strmi	r3, [r4, #0]
 800cd54:	b91d      	cbnz	r5, 800cd5e <_printf_i+0x196>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	f023 0320 	bic.w	r3, r3, #32
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	2310      	movs	r3, #16
 800cd60:	e7b0      	b.n	800ccc4 <_printf_i+0xfc>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	f043 0320 	orr.w	r3, r3, #32
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	2378      	movs	r3, #120	; 0x78
 800cd6c:	4828      	ldr	r0, [pc, #160]	; (800ce10 <_printf_i+0x248>)
 800cd6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd72:	e7e3      	b.n	800cd3c <_printf_i+0x174>
 800cd74:	065e      	lsls	r6, r3, #25
 800cd76:	bf48      	it	mi
 800cd78:	b2ad      	uxthmi	r5, r5
 800cd7a:	e7e6      	b.n	800cd4a <_printf_i+0x182>
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	e7bb      	b.n	800ccf8 <_printf_i+0x130>
 800cd80:	680b      	ldr	r3, [r1, #0]
 800cd82:	6826      	ldr	r6, [r4, #0]
 800cd84:	6960      	ldr	r0, [r4, #20]
 800cd86:	1d1d      	adds	r5, r3, #4
 800cd88:	600d      	str	r5, [r1, #0]
 800cd8a:	0635      	lsls	r5, r6, #24
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	d501      	bpl.n	800cd94 <_printf_i+0x1cc>
 800cd90:	6018      	str	r0, [r3, #0]
 800cd92:	e002      	b.n	800cd9a <_printf_i+0x1d2>
 800cd94:	0671      	lsls	r1, r6, #25
 800cd96:	d5fb      	bpl.n	800cd90 <_printf_i+0x1c8>
 800cd98:	8018      	strh	r0, [r3, #0]
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	4616      	mov	r6, r2
 800cda0:	e7ba      	b.n	800cd18 <_printf_i+0x150>
 800cda2:	680b      	ldr	r3, [r1, #0]
 800cda4:	1d1a      	adds	r2, r3, #4
 800cda6:	600a      	str	r2, [r1, #0]
 800cda8:	681e      	ldr	r6, [r3, #0]
 800cdaa:	6862      	ldr	r2, [r4, #4]
 800cdac:	2100      	movs	r1, #0
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7f3 fa1e 	bl	80001f0 <memchr>
 800cdb4:	b108      	cbz	r0, 800cdba <_printf_i+0x1f2>
 800cdb6:	1b80      	subs	r0, r0, r6
 800cdb8:	6060      	str	r0, [r4, #4]
 800cdba:	6863      	ldr	r3, [r4, #4]
 800cdbc:	6123      	str	r3, [r4, #16]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc4:	e7a8      	b.n	800cd18 <_printf_i+0x150>
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	4632      	mov	r2, r6
 800cdca:	4649      	mov	r1, r9
 800cdcc:	4640      	mov	r0, r8
 800cdce:	47d0      	blx	sl
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d0ab      	beq.n	800cd2c <_printf_i+0x164>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	079b      	lsls	r3, r3, #30
 800cdd8:	d413      	bmi.n	800ce02 <_printf_i+0x23a>
 800cdda:	68e0      	ldr	r0, [r4, #12]
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	4298      	cmp	r0, r3
 800cde0:	bfb8      	it	lt
 800cde2:	4618      	movlt	r0, r3
 800cde4:	e7a4      	b.n	800cd30 <_printf_i+0x168>
 800cde6:	2301      	movs	r3, #1
 800cde8:	4632      	mov	r2, r6
 800cdea:	4649      	mov	r1, r9
 800cdec:	4640      	mov	r0, r8
 800cdee:	47d0      	blx	sl
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	d09b      	beq.n	800cd2c <_printf_i+0x164>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	68e3      	ldr	r3, [r4, #12]
 800cdf8:	9903      	ldr	r1, [sp, #12]
 800cdfa:	1a5b      	subs	r3, r3, r1
 800cdfc:	42ab      	cmp	r3, r5
 800cdfe:	dcf2      	bgt.n	800cde6 <_printf_i+0x21e>
 800ce00:	e7eb      	b.n	800cdda <_printf_i+0x212>
 800ce02:	2500      	movs	r5, #0
 800ce04:	f104 0619 	add.w	r6, r4, #25
 800ce08:	e7f5      	b.n	800cdf6 <_printf_i+0x22e>
 800ce0a:	bf00      	nop
 800ce0c:	08011db6 	.word	0x08011db6
 800ce10:	08011dc7 	.word	0x08011dc7

0800ce14 <_scanf_float>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	b087      	sub	sp, #28
 800ce1a:	4617      	mov	r7, r2
 800ce1c:	9303      	str	r3, [sp, #12]
 800ce1e:	688b      	ldr	r3, [r1, #8]
 800ce20:	1e5a      	subs	r2, r3, #1
 800ce22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ce26:	bf83      	ittte	hi
 800ce28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ce2c:	195b      	addhi	r3, r3, r5
 800ce2e:	9302      	strhi	r3, [sp, #8]
 800ce30:	2300      	movls	r3, #0
 800ce32:	bf86      	itte	hi
 800ce34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ce38:	608b      	strhi	r3, [r1, #8]
 800ce3a:	9302      	strls	r3, [sp, #8]
 800ce3c:	680b      	ldr	r3, [r1, #0]
 800ce3e:	468b      	mov	fp, r1
 800ce40:	2500      	movs	r5, #0
 800ce42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ce46:	f84b 3b1c 	str.w	r3, [fp], #28
 800ce4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ce4e:	4680      	mov	r8, r0
 800ce50:	460c      	mov	r4, r1
 800ce52:	465e      	mov	r6, fp
 800ce54:	46aa      	mov	sl, r5
 800ce56:	46a9      	mov	r9, r5
 800ce58:	9501      	str	r5, [sp, #4]
 800ce5a:	68a2      	ldr	r2, [r4, #8]
 800ce5c:	b152      	cbz	r2, 800ce74 <_scanf_float+0x60>
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b4e      	cmp	r3, #78	; 0x4e
 800ce64:	d864      	bhi.n	800cf30 <_scanf_float+0x11c>
 800ce66:	2b40      	cmp	r3, #64	; 0x40
 800ce68:	d83c      	bhi.n	800cee4 <_scanf_float+0xd0>
 800ce6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ce6e:	b2c8      	uxtb	r0, r1
 800ce70:	280e      	cmp	r0, #14
 800ce72:	d93a      	bls.n	800ceea <_scanf_float+0xd6>
 800ce74:	f1b9 0f00 	cmp.w	r9, #0
 800ce78:	d003      	beq.n	800ce82 <_scanf_float+0x6e>
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce86:	f1ba 0f01 	cmp.w	sl, #1
 800ce8a:	f200 8113 	bhi.w	800d0b4 <_scanf_float+0x2a0>
 800ce8e:	455e      	cmp	r6, fp
 800ce90:	f200 8105 	bhi.w	800d09e <_scanf_float+0x28a>
 800ce94:	2501      	movs	r5, #1
 800ce96:	4628      	mov	r0, r5
 800ce98:	b007      	add	sp, #28
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cea2:	2a0d      	cmp	r2, #13
 800cea4:	d8e6      	bhi.n	800ce74 <_scanf_float+0x60>
 800cea6:	a101      	add	r1, pc, #4	; (adr r1, 800ceac <_scanf_float+0x98>)
 800cea8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ceac:	0800cfeb 	.word	0x0800cfeb
 800ceb0:	0800ce75 	.word	0x0800ce75
 800ceb4:	0800ce75 	.word	0x0800ce75
 800ceb8:	0800ce75 	.word	0x0800ce75
 800cebc:	0800d04b 	.word	0x0800d04b
 800cec0:	0800d023 	.word	0x0800d023
 800cec4:	0800ce75 	.word	0x0800ce75
 800cec8:	0800ce75 	.word	0x0800ce75
 800cecc:	0800cff9 	.word	0x0800cff9
 800ced0:	0800ce75 	.word	0x0800ce75
 800ced4:	0800ce75 	.word	0x0800ce75
 800ced8:	0800ce75 	.word	0x0800ce75
 800cedc:	0800ce75 	.word	0x0800ce75
 800cee0:	0800cfb1 	.word	0x0800cfb1
 800cee4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cee8:	e7db      	b.n	800cea2 <_scanf_float+0x8e>
 800ceea:	290e      	cmp	r1, #14
 800ceec:	d8c2      	bhi.n	800ce74 <_scanf_float+0x60>
 800ceee:	a001      	add	r0, pc, #4	; (adr r0, 800cef4 <_scanf_float+0xe0>)
 800cef0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cef4:	0800cfa3 	.word	0x0800cfa3
 800cef8:	0800ce75 	.word	0x0800ce75
 800cefc:	0800cfa3 	.word	0x0800cfa3
 800cf00:	0800d037 	.word	0x0800d037
 800cf04:	0800ce75 	.word	0x0800ce75
 800cf08:	0800cf51 	.word	0x0800cf51
 800cf0c:	0800cf8d 	.word	0x0800cf8d
 800cf10:	0800cf8d 	.word	0x0800cf8d
 800cf14:	0800cf8d 	.word	0x0800cf8d
 800cf18:	0800cf8d 	.word	0x0800cf8d
 800cf1c:	0800cf8d 	.word	0x0800cf8d
 800cf20:	0800cf8d 	.word	0x0800cf8d
 800cf24:	0800cf8d 	.word	0x0800cf8d
 800cf28:	0800cf8d 	.word	0x0800cf8d
 800cf2c:	0800cf8d 	.word	0x0800cf8d
 800cf30:	2b6e      	cmp	r3, #110	; 0x6e
 800cf32:	d809      	bhi.n	800cf48 <_scanf_float+0x134>
 800cf34:	2b60      	cmp	r3, #96	; 0x60
 800cf36:	d8b2      	bhi.n	800ce9e <_scanf_float+0x8a>
 800cf38:	2b54      	cmp	r3, #84	; 0x54
 800cf3a:	d077      	beq.n	800d02c <_scanf_float+0x218>
 800cf3c:	2b59      	cmp	r3, #89	; 0x59
 800cf3e:	d199      	bne.n	800ce74 <_scanf_float+0x60>
 800cf40:	2d07      	cmp	r5, #7
 800cf42:	d197      	bne.n	800ce74 <_scanf_float+0x60>
 800cf44:	2508      	movs	r5, #8
 800cf46:	e029      	b.n	800cf9c <_scanf_float+0x188>
 800cf48:	2b74      	cmp	r3, #116	; 0x74
 800cf4a:	d06f      	beq.n	800d02c <_scanf_float+0x218>
 800cf4c:	2b79      	cmp	r3, #121	; 0x79
 800cf4e:	e7f6      	b.n	800cf3e <_scanf_float+0x12a>
 800cf50:	6821      	ldr	r1, [r4, #0]
 800cf52:	05c8      	lsls	r0, r1, #23
 800cf54:	d51a      	bpl.n	800cf8c <_scanf_float+0x178>
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cf5c:	6021      	str	r1, [r4, #0]
 800cf5e:	f109 0901 	add.w	r9, r9, #1
 800cf62:	b11b      	cbz	r3, 800cf6c <_scanf_float+0x158>
 800cf64:	3b01      	subs	r3, #1
 800cf66:	3201      	adds	r2, #1
 800cf68:	9302      	str	r3, [sp, #8]
 800cf6a:	60a2      	str	r2, [r4, #8]
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	60a3      	str	r3, [r4, #8]
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	3301      	adds	r3, #1
 800cf76:	6123      	str	r3, [r4, #16]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	607b      	str	r3, [r7, #4]
 800cf80:	f340 8084 	ble.w	800d08c <_scanf_float+0x278>
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	3301      	adds	r3, #1
 800cf88:	603b      	str	r3, [r7, #0]
 800cf8a:	e766      	b.n	800ce5a <_scanf_float+0x46>
 800cf8c:	eb1a 0f05 	cmn.w	sl, r5
 800cf90:	f47f af70 	bne.w	800ce74 <_scanf_float+0x60>
 800cf94:	6822      	ldr	r2, [r4, #0]
 800cf96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cf9a:	6022      	str	r2, [r4, #0]
 800cf9c:	f806 3b01 	strb.w	r3, [r6], #1
 800cfa0:	e7e4      	b.n	800cf6c <_scanf_float+0x158>
 800cfa2:	6822      	ldr	r2, [r4, #0]
 800cfa4:	0610      	lsls	r0, r2, #24
 800cfa6:	f57f af65 	bpl.w	800ce74 <_scanf_float+0x60>
 800cfaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfae:	e7f4      	b.n	800cf9a <_scanf_float+0x186>
 800cfb0:	f1ba 0f00 	cmp.w	sl, #0
 800cfb4:	d10e      	bne.n	800cfd4 <_scanf_float+0x1c0>
 800cfb6:	f1b9 0f00 	cmp.w	r9, #0
 800cfba:	d10e      	bne.n	800cfda <_scanf_float+0x1c6>
 800cfbc:	6822      	ldr	r2, [r4, #0]
 800cfbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cfc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cfc6:	d108      	bne.n	800cfda <_scanf_float+0x1c6>
 800cfc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cfcc:	6022      	str	r2, [r4, #0]
 800cfce:	f04f 0a01 	mov.w	sl, #1
 800cfd2:	e7e3      	b.n	800cf9c <_scanf_float+0x188>
 800cfd4:	f1ba 0f02 	cmp.w	sl, #2
 800cfd8:	d055      	beq.n	800d086 <_scanf_float+0x272>
 800cfda:	2d01      	cmp	r5, #1
 800cfdc:	d002      	beq.n	800cfe4 <_scanf_float+0x1d0>
 800cfde:	2d04      	cmp	r5, #4
 800cfe0:	f47f af48 	bne.w	800ce74 <_scanf_float+0x60>
 800cfe4:	3501      	adds	r5, #1
 800cfe6:	b2ed      	uxtb	r5, r5
 800cfe8:	e7d8      	b.n	800cf9c <_scanf_float+0x188>
 800cfea:	f1ba 0f01 	cmp.w	sl, #1
 800cfee:	f47f af41 	bne.w	800ce74 <_scanf_float+0x60>
 800cff2:	f04f 0a02 	mov.w	sl, #2
 800cff6:	e7d1      	b.n	800cf9c <_scanf_float+0x188>
 800cff8:	b97d      	cbnz	r5, 800d01a <_scanf_float+0x206>
 800cffa:	f1b9 0f00 	cmp.w	r9, #0
 800cffe:	f47f af3c 	bne.w	800ce7a <_scanf_float+0x66>
 800d002:	6822      	ldr	r2, [r4, #0]
 800d004:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d008:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d00c:	f47f af39 	bne.w	800ce82 <_scanf_float+0x6e>
 800d010:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d014:	6022      	str	r2, [r4, #0]
 800d016:	2501      	movs	r5, #1
 800d018:	e7c0      	b.n	800cf9c <_scanf_float+0x188>
 800d01a:	2d03      	cmp	r5, #3
 800d01c:	d0e2      	beq.n	800cfe4 <_scanf_float+0x1d0>
 800d01e:	2d05      	cmp	r5, #5
 800d020:	e7de      	b.n	800cfe0 <_scanf_float+0x1cc>
 800d022:	2d02      	cmp	r5, #2
 800d024:	f47f af26 	bne.w	800ce74 <_scanf_float+0x60>
 800d028:	2503      	movs	r5, #3
 800d02a:	e7b7      	b.n	800cf9c <_scanf_float+0x188>
 800d02c:	2d06      	cmp	r5, #6
 800d02e:	f47f af21 	bne.w	800ce74 <_scanf_float+0x60>
 800d032:	2507      	movs	r5, #7
 800d034:	e7b2      	b.n	800cf9c <_scanf_float+0x188>
 800d036:	6822      	ldr	r2, [r4, #0]
 800d038:	0591      	lsls	r1, r2, #22
 800d03a:	f57f af1b 	bpl.w	800ce74 <_scanf_float+0x60>
 800d03e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d042:	6022      	str	r2, [r4, #0]
 800d044:	f8cd 9004 	str.w	r9, [sp, #4]
 800d048:	e7a8      	b.n	800cf9c <_scanf_float+0x188>
 800d04a:	6822      	ldr	r2, [r4, #0]
 800d04c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d050:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d054:	d006      	beq.n	800d064 <_scanf_float+0x250>
 800d056:	0550      	lsls	r0, r2, #21
 800d058:	f57f af0c 	bpl.w	800ce74 <_scanf_float+0x60>
 800d05c:	f1b9 0f00 	cmp.w	r9, #0
 800d060:	f43f af0f 	beq.w	800ce82 <_scanf_float+0x6e>
 800d064:	0591      	lsls	r1, r2, #22
 800d066:	bf58      	it	pl
 800d068:	9901      	ldrpl	r1, [sp, #4]
 800d06a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d06e:	bf58      	it	pl
 800d070:	eba9 0101 	subpl.w	r1, r9, r1
 800d074:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d078:	bf58      	it	pl
 800d07a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d07e:	6022      	str	r2, [r4, #0]
 800d080:	f04f 0900 	mov.w	r9, #0
 800d084:	e78a      	b.n	800cf9c <_scanf_float+0x188>
 800d086:	f04f 0a03 	mov.w	sl, #3
 800d08a:	e787      	b.n	800cf9c <_scanf_float+0x188>
 800d08c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d090:	4639      	mov	r1, r7
 800d092:	4640      	mov	r0, r8
 800d094:	4798      	blx	r3
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aedf 	beq.w	800ce5a <_scanf_float+0x46>
 800d09c:	e6ea      	b.n	800ce74 <_scanf_float+0x60>
 800d09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d0a6:	463a      	mov	r2, r7
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	4798      	blx	r3
 800d0ac:	6923      	ldr	r3, [r4, #16]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	6123      	str	r3, [r4, #16]
 800d0b2:	e6ec      	b.n	800ce8e <_scanf_float+0x7a>
 800d0b4:	1e6b      	subs	r3, r5, #1
 800d0b6:	2b06      	cmp	r3, #6
 800d0b8:	d825      	bhi.n	800d106 <_scanf_float+0x2f2>
 800d0ba:	2d02      	cmp	r5, #2
 800d0bc:	d836      	bhi.n	800d12c <_scanf_float+0x318>
 800d0be:	455e      	cmp	r6, fp
 800d0c0:	f67f aee8 	bls.w	800ce94 <_scanf_float+0x80>
 800d0c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d0cc:	463a      	mov	r2, r7
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	4798      	blx	r3
 800d0d2:	6923      	ldr	r3, [r4, #16]
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	e7f1      	b.n	800d0be <_scanf_float+0x2aa>
 800d0da:	9802      	ldr	r0, [sp, #8]
 800d0dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d0e4:	9002      	str	r0, [sp, #8]
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4798      	blx	r3
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0f6:	fa5f fa8a 	uxtb.w	sl, sl
 800d0fa:	f1ba 0f02 	cmp.w	sl, #2
 800d0fe:	d1ec      	bne.n	800d0da <_scanf_float+0x2c6>
 800d100:	3d03      	subs	r5, #3
 800d102:	b2ed      	uxtb	r5, r5
 800d104:	1b76      	subs	r6, r6, r5
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	05da      	lsls	r2, r3, #23
 800d10a:	d52f      	bpl.n	800d16c <_scanf_float+0x358>
 800d10c:	055b      	lsls	r3, r3, #21
 800d10e:	d510      	bpl.n	800d132 <_scanf_float+0x31e>
 800d110:	455e      	cmp	r6, fp
 800d112:	f67f aebf 	bls.w	800ce94 <_scanf_float+0x80>
 800d116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d11a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d11e:	463a      	mov	r2, r7
 800d120:	4640      	mov	r0, r8
 800d122:	4798      	blx	r3
 800d124:	6923      	ldr	r3, [r4, #16]
 800d126:	3b01      	subs	r3, #1
 800d128:	6123      	str	r3, [r4, #16]
 800d12a:	e7f1      	b.n	800d110 <_scanf_float+0x2fc>
 800d12c:	46aa      	mov	sl, r5
 800d12e:	9602      	str	r6, [sp, #8]
 800d130:	e7df      	b.n	800d0f2 <_scanf_float+0x2de>
 800d132:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d136:	6923      	ldr	r3, [r4, #16]
 800d138:	2965      	cmp	r1, #101	; 0x65
 800d13a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d13e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d142:	6123      	str	r3, [r4, #16]
 800d144:	d00c      	beq.n	800d160 <_scanf_float+0x34c>
 800d146:	2945      	cmp	r1, #69	; 0x45
 800d148:	d00a      	beq.n	800d160 <_scanf_float+0x34c>
 800d14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d14e:	463a      	mov	r2, r7
 800d150:	4640      	mov	r0, r8
 800d152:	4798      	blx	r3
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	1eb5      	subs	r5, r6, #2
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d164:	463a      	mov	r2, r7
 800d166:	4640      	mov	r0, r8
 800d168:	4798      	blx	r3
 800d16a:	462e      	mov	r6, r5
 800d16c:	6825      	ldr	r5, [r4, #0]
 800d16e:	f015 0510 	ands.w	r5, r5, #16
 800d172:	d158      	bne.n	800d226 <_scanf_float+0x412>
 800d174:	7035      	strb	r5, [r6, #0]
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d180:	d11c      	bne.n	800d1bc <_scanf_float+0x3a8>
 800d182:	9b01      	ldr	r3, [sp, #4]
 800d184:	454b      	cmp	r3, r9
 800d186:	eba3 0209 	sub.w	r2, r3, r9
 800d18a:	d124      	bne.n	800d1d6 <_scanf_float+0x3c2>
 800d18c:	2200      	movs	r2, #0
 800d18e:	4659      	mov	r1, fp
 800d190:	4640      	mov	r0, r8
 800d192:	f000 feaf 	bl	800def4 <_strtod_r>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	6821      	ldr	r1, [r4, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f011 0f02 	tst.w	r1, #2
 800d1a0:	ec57 6b10 	vmov	r6, r7, d0
 800d1a4:	f103 0204 	add.w	r2, r3, #4
 800d1a8:	d020      	beq.n	800d1ec <_scanf_float+0x3d8>
 800d1aa:	9903      	ldr	r1, [sp, #12]
 800d1ac:	600a      	str	r2, [r1, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	e9c3 6700 	strd	r6, r7, [r3]
 800d1b4:	68e3      	ldr	r3, [r4, #12]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	60e3      	str	r3, [r4, #12]
 800d1ba:	e66c      	b.n	800ce96 <_scanf_float+0x82>
 800d1bc:	9b04      	ldr	r3, [sp, #16]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d0e4      	beq.n	800d18c <_scanf_float+0x378>
 800d1c2:	9905      	ldr	r1, [sp, #20]
 800d1c4:	230a      	movs	r3, #10
 800d1c6:	462a      	mov	r2, r5
 800d1c8:	3101      	adds	r1, #1
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	f000 ff1c 	bl	800e008 <_strtol_r>
 800d1d0:	9b04      	ldr	r3, [sp, #16]
 800d1d2:	9e05      	ldr	r6, [sp, #20]
 800d1d4:	1ac2      	subs	r2, r0, r3
 800d1d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d1da:	429e      	cmp	r6, r3
 800d1dc:	bf28      	it	cs
 800d1de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d1e2:	4912      	ldr	r1, [pc, #72]	; (800d22c <_scanf_float+0x418>)
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f000 f83d 	bl	800d264 <siprintf>
 800d1ea:	e7cf      	b.n	800d18c <_scanf_float+0x378>
 800d1ec:	f011 0f04 	tst.w	r1, #4
 800d1f0:	9903      	ldr	r1, [sp, #12]
 800d1f2:	600a      	str	r2, [r1, #0]
 800d1f4:	d1db      	bne.n	800d1ae <_scanf_float+0x39a>
 800d1f6:	f8d3 8000 	ldr.w	r8, [r3]
 800d1fa:	ee10 2a10 	vmov	r2, s0
 800d1fe:	ee10 0a10 	vmov	r0, s0
 800d202:	463b      	mov	r3, r7
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 fc99 	bl	8000b3c <__aeabi_dcmpun>
 800d20a:	b128      	cbz	r0, 800d218 <_scanf_float+0x404>
 800d20c:	4808      	ldr	r0, [pc, #32]	; (800d230 <_scanf_float+0x41c>)
 800d20e:	f7ff f951 	bl	800c4b4 <nanf>
 800d212:	ed88 0a00 	vstr	s0, [r8]
 800d216:	e7cd      	b.n	800d1b4 <_scanf_float+0x3a0>
 800d218:	4630      	mov	r0, r6
 800d21a:	4639      	mov	r1, r7
 800d21c:	f7f3 fcec 	bl	8000bf8 <__aeabi_d2f>
 800d220:	f8c8 0000 	str.w	r0, [r8]
 800d224:	e7c6      	b.n	800d1b4 <_scanf_float+0x3a0>
 800d226:	2500      	movs	r5, #0
 800d228:	e635      	b.n	800ce96 <_scanf_float+0x82>
 800d22a:	bf00      	nop
 800d22c:	08011dd8 	.word	0x08011dd8
 800d230:	08012250 	.word	0x08012250

0800d234 <iprintf>:
 800d234:	b40f      	push	{r0, r1, r2, r3}
 800d236:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <iprintf+0x2c>)
 800d238:	b513      	push	{r0, r1, r4, lr}
 800d23a:	681c      	ldr	r4, [r3, #0]
 800d23c:	b124      	cbz	r4, 800d248 <iprintf+0x14>
 800d23e:	69a3      	ldr	r3, [r4, #24]
 800d240:	b913      	cbnz	r3, 800d248 <iprintf+0x14>
 800d242:	4620      	mov	r0, r4
 800d244:	f001 fdb4 	bl	800edb0 <__sinit>
 800d248:	ab05      	add	r3, sp, #20
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	68a1      	ldr	r1, [r4, #8]
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	4620      	mov	r0, r4
 800d252:	f003 f8e3 	bl	801041c <_vfiprintf_r>
 800d256:	b002      	add	sp, #8
 800d258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d25c:	b004      	add	sp, #16
 800d25e:	4770      	bx	lr
 800d260:	20000048 	.word	0x20000048

0800d264 <siprintf>:
 800d264:	b40e      	push	{r1, r2, r3}
 800d266:	b500      	push	{lr}
 800d268:	b09c      	sub	sp, #112	; 0x70
 800d26a:	ab1d      	add	r3, sp, #116	; 0x74
 800d26c:	9002      	str	r0, [sp, #8]
 800d26e:	9006      	str	r0, [sp, #24]
 800d270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d274:	4809      	ldr	r0, [pc, #36]	; (800d29c <siprintf+0x38>)
 800d276:	9107      	str	r1, [sp, #28]
 800d278:	9104      	str	r1, [sp, #16]
 800d27a:	4909      	ldr	r1, [pc, #36]	; (800d2a0 <siprintf+0x3c>)
 800d27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d280:	9105      	str	r1, [sp, #20]
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	a902      	add	r1, sp, #8
 800d288:	f002 ff9e 	bl	80101c8 <_svfiprintf_r>
 800d28c:	9b02      	ldr	r3, [sp, #8]
 800d28e:	2200      	movs	r2, #0
 800d290:	701a      	strb	r2, [r3, #0]
 800d292:	b01c      	add	sp, #112	; 0x70
 800d294:	f85d eb04 	ldr.w	lr, [sp], #4
 800d298:	b003      	add	sp, #12
 800d29a:	4770      	bx	lr
 800d29c:	20000048 	.word	0x20000048
 800d2a0:	ffff0208 	.word	0xffff0208

0800d2a4 <sulp>:
 800d2a4:	b570      	push	{r4, r5, r6, lr}
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	ec45 4b10 	vmov	d0, r4, r5
 800d2ae:	4616      	mov	r6, r2
 800d2b0:	f002 fd26 	bl	800fd00 <__ulp>
 800d2b4:	ec51 0b10 	vmov	r0, r1, d0
 800d2b8:	b17e      	cbz	r6, 800d2da <sulp+0x36>
 800d2ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d2be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	dd09      	ble.n	800d2da <sulp+0x36>
 800d2c6:	051b      	lsls	r3, r3, #20
 800d2c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d2cc:	2400      	movs	r4, #0
 800d2ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	462b      	mov	r3, r5
 800d2d6:	f7f3 f997 	bl	8000608 <__aeabi_dmul>
 800d2da:	bd70      	pop	{r4, r5, r6, pc}
 800d2dc:	0000      	movs	r0, r0
	...

0800d2e0 <_strtod_l>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	b0a3      	sub	sp, #140	; 0x8c
 800d2e6:	461f      	mov	r7, r3
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	931e      	str	r3, [sp, #120]	; 0x78
 800d2ec:	4ba4      	ldr	r3, [pc, #656]	; (800d580 <_strtod_l+0x2a0>)
 800d2ee:	9219      	str	r2, [sp, #100]	; 0x64
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	9307      	str	r3, [sp, #28]
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	4688      	mov	r8, r1
 800d2fa:	f7f2 ff71 	bl	80001e0 <strlen>
 800d2fe:	f04f 0a00 	mov.w	sl, #0
 800d302:	4605      	mov	r5, r0
 800d304:	f04f 0b00 	mov.w	fp, #0
 800d308:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d30e:	781a      	ldrb	r2, [r3, #0]
 800d310:	2a2b      	cmp	r2, #43	; 0x2b
 800d312:	d04c      	beq.n	800d3ae <_strtod_l+0xce>
 800d314:	d839      	bhi.n	800d38a <_strtod_l+0xaa>
 800d316:	2a0d      	cmp	r2, #13
 800d318:	d832      	bhi.n	800d380 <_strtod_l+0xa0>
 800d31a:	2a08      	cmp	r2, #8
 800d31c:	d832      	bhi.n	800d384 <_strtod_l+0xa4>
 800d31e:	2a00      	cmp	r2, #0
 800d320:	d03c      	beq.n	800d39c <_strtod_l+0xbc>
 800d322:	2300      	movs	r3, #0
 800d324:	930e      	str	r3, [sp, #56]	; 0x38
 800d326:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d328:	7833      	ldrb	r3, [r6, #0]
 800d32a:	2b30      	cmp	r3, #48	; 0x30
 800d32c:	f040 80b4 	bne.w	800d498 <_strtod_l+0x1b8>
 800d330:	7873      	ldrb	r3, [r6, #1]
 800d332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d336:	2b58      	cmp	r3, #88	; 0x58
 800d338:	d16c      	bne.n	800d414 <_strtod_l+0x134>
 800d33a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	ab1e      	add	r3, sp, #120	; 0x78
 800d340:	9702      	str	r7, [sp, #8]
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	4a8f      	ldr	r2, [pc, #572]	; (800d584 <_strtod_l+0x2a4>)
 800d346:	ab1f      	add	r3, sp, #124	; 0x7c
 800d348:	a91d      	add	r1, sp, #116	; 0x74
 800d34a:	4620      	mov	r0, r4
 800d34c:	f001 fe34 	bl	800efb8 <__gethex>
 800d350:	f010 0707 	ands.w	r7, r0, #7
 800d354:	4605      	mov	r5, r0
 800d356:	d005      	beq.n	800d364 <_strtod_l+0x84>
 800d358:	2f06      	cmp	r7, #6
 800d35a:	d12a      	bne.n	800d3b2 <_strtod_l+0xd2>
 800d35c:	3601      	adds	r6, #1
 800d35e:	2300      	movs	r3, #0
 800d360:	961d      	str	r6, [sp, #116]	; 0x74
 800d362:	930e      	str	r3, [sp, #56]	; 0x38
 800d364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 8596 	bne.w	800de98 <_strtod_l+0xbb8>
 800d36c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d36e:	b1db      	cbz	r3, 800d3a8 <_strtod_l+0xc8>
 800d370:	4652      	mov	r2, sl
 800d372:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d376:	ec43 2b10 	vmov	d0, r2, r3
 800d37a:	b023      	add	sp, #140	; 0x8c
 800d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d380:	2a20      	cmp	r2, #32
 800d382:	d1ce      	bne.n	800d322 <_strtod_l+0x42>
 800d384:	3301      	adds	r3, #1
 800d386:	931d      	str	r3, [sp, #116]	; 0x74
 800d388:	e7c0      	b.n	800d30c <_strtod_l+0x2c>
 800d38a:	2a2d      	cmp	r2, #45	; 0x2d
 800d38c:	d1c9      	bne.n	800d322 <_strtod_l+0x42>
 800d38e:	2201      	movs	r2, #1
 800d390:	920e      	str	r2, [sp, #56]	; 0x38
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	921d      	str	r2, [sp, #116]	; 0x74
 800d396:	785b      	ldrb	r3, [r3, #1]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1c4      	bne.n	800d326 <_strtod_l+0x46>
 800d39c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d39e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f040 8576 	bne.w	800de94 <_strtod_l+0xbb4>
 800d3a8:	4652      	mov	r2, sl
 800d3aa:	465b      	mov	r3, fp
 800d3ac:	e7e3      	b.n	800d376 <_strtod_l+0x96>
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	e7ee      	b.n	800d390 <_strtod_l+0xb0>
 800d3b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d3b4:	b13a      	cbz	r2, 800d3c6 <_strtod_l+0xe6>
 800d3b6:	2135      	movs	r1, #53	; 0x35
 800d3b8:	a820      	add	r0, sp, #128	; 0x80
 800d3ba:	f002 fdac 	bl	800ff16 <__copybits>
 800d3be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f002 f971 	bl	800f6a8 <_Bfree>
 800d3c6:	3f01      	subs	r7, #1
 800d3c8:	2f05      	cmp	r7, #5
 800d3ca:	d807      	bhi.n	800d3dc <_strtod_l+0xfc>
 800d3cc:	e8df f007 	tbb	[pc, r7]
 800d3d0:	1d180b0e 	.word	0x1d180b0e
 800d3d4:	030e      	.short	0x030e
 800d3d6:	f04f 0b00 	mov.w	fp, #0
 800d3da:	46da      	mov	sl, fp
 800d3dc:	0728      	lsls	r0, r5, #28
 800d3de:	d5c1      	bpl.n	800d364 <_strtod_l+0x84>
 800d3e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d3e4:	e7be      	b.n	800d364 <_strtod_l+0x84>
 800d3e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d3ea:	e7f7      	b.n	800d3dc <_strtod_l+0xfc>
 800d3ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d3f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d3f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d3f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d3fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d3fe:	e7ed      	b.n	800d3dc <_strtod_l+0xfc>
 800d400:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d588 <_strtod_l+0x2a8>
 800d404:	f04f 0a00 	mov.w	sl, #0
 800d408:	e7e8      	b.n	800d3dc <_strtod_l+0xfc>
 800d40a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d40e:	f04f 3aff 	mov.w	sl, #4294967295
 800d412:	e7e3      	b.n	800d3dc <_strtod_l+0xfc>
 800d414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d416:	1c5a      	adds	r2, r3, #1
 800d418:	921d      	str	r2, [sp, #116]	; 0x74
 800d41a:	785b      	ldrb	r3, [r3, #1]
 800d41c:	2b30      	cmp	r3, #48	; 0x30
 800d41e:	d0f9      	beq.n	800d414 <_strtod_l+0x134>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d09f      	beq.n	800d364 <_strtod_l+0x84>
 800d424:	2301      	movs	r3, #1
 800d426:	f04f 0900 	mov.w	r9, #0
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d42e:	930a      	str	r3, [sp, #40]	; 0x28
 800d430:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d434:	464f      	mov	r7, r9
 800d436:	220a      	movs	r2, #10
 800d438:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d43a:	7806      	ldrb	r6, [r0, #0]
 800d43c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d440:	b2d9      	uxtb	r1, r3
 800d442:	2909      	cmp	r1, #9
 800d444:	d92a      	bls.n	800d49c <_strtod_l+0x1bc>
 800d446:	9907      	ldr	r1, [sp, #28]
 800d448:	462a      	mov	r2, r5
 800d44a:	f003 f974 	bl	8010736 <strncmp>
 800d44e:	b398      	cbz	r0, 800d4b8 <_strtod_l+0x1d8>
 800d450:	2000      	movs	r0, #0
 800d452:	4633      	mov	r3, r6
 800d454:	463d      	mov	r5, r7
 800d456:	9007      	str	r0, [sp, #28]
 800d458:	4602      	mov	r2, r0
 800d45a:	2b65      	cmp	r3, #101	; 0x65
 800d45c:	d001      	beq.n	800d462 <_strtod_l+0x182>
 800d45e:	2b45      	cmp	r3, #69	; 0x45
 800d460:	d118      	bne.n	800d494 <_strtod_l+0x1b4>
 800d462:	b91d      	cbnz	r5, 800d46c <_strtod_l+0x18c>
 800d464:	9b04      	ldr	r3, [sp, #16]
 800d466:	4303      	orrs	r3, r0
 800d468:	d098      	beq.n	800d39c <_strtod_l+0xbc>
 800d46a:	2500      	movs	r5, #0
 800d46c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d470:	f108 0301 	add.w	r3, r8, #1
 800d474:	931d      	str	r3, [sp, #116]	; 0x74
 800d476:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d47a:	2b2b      	cmp	r3, #43	; 0x2b
 800d47c:	d075      	beq.n	800d56a <_strtod_l+0x28a>
 800d47e:	2b2d      	cmp	r3, #45	; 0x2d
 800d480:	d07b      	beq.n	800d57a <_strtod_l+0x29a>
 800d482:	f04f 0c00 	mov.w	ip, #0
 800d486:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d48a:	2909      	cmp	r1, #9
 800d48c:	f240 8082 	bls.w	800d594 <_strtod_l+0x2b4>
 800d490:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d494:	2600      	movs	r6, #0
 800d496:	e09d      	b.n	800d5d4 <_strtod_l+0x2f4>
 800d498:	2300      	movs	r3, #0
 800d49a:	e7c4      	b.n	800d426 <_strtod_l+0x146>
 800d49c:	2f08      	cmp	r7, #8
 800d49e:	bfd8      	it	le
 800d4a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d4a2:	f100 0001 	add.w	r0, r0, #1
 800d4a6:	bfda      	itte	le
 800d4a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d4ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800d4ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d4b2:	3701      	adds	r7, #1
 800d4b4:	901d      	str	r0, [sp, #116]	; 0x74
 800d4b6:	e7bf      	b.n	800d438 <_strtod_l+0x158>
 800d4b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4ba:	195a      	adds	r2, r3, r5
 800d4bc:	921d      	str	r2, [sp, #116]	; 0x74
 800d4be:	5d5b      	ldrb	r3, [r3, r5]
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	d037      	beq.n	800d534 <_strtod_l+0x254>
 800d4c4:	9007      	str	r0, [sp, #28]
 800d4c6:	463d      	mov	r5, r7
 800d4c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d4cc:	2a09      	cmp	r2, #9
 800d4ce:	d912      	bls.n	800d4f6 <_strtod_l+0x216>
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	e7c2      	b.n	800d45a <_strtod_l+0x17a>
 800d4d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	921d      	str	r2, [sp, #116]	; 0x74
 800d4da:	785b      	ldrb	r3, [r3, #1]
 800d4dc:	3001      	adds	r0, #1
 800d4de:	2b30      	cmp	r3, #48	; 0x30
 800d4e0:	d0f8      	beq.n	800d4d4 <_strtod_l+0x1f4>
 800d4e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d4e6:	2a08      	cmp	r2, #8
 800d4e8:	f200 84db 	bhi.w	800dea2 <_strtod_l+0xbc2>
 800d4ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d4ee:	9007      	str	r0, [sp, #28]
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	920a      	str	r2, [sp, #40]	; 0x28
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	3b30      	subs	r3, #48	; 0x30
 800d4f8:	f100 0201 	add.w	r2, r0, #1
 800d4fc:	d014      	beq.n	800d528 <_strtod_l+0x248>
 800d4fe:	9907      	ldr	r1, [sp, #28]
 800d500:	4411      	add	r1, r2
 800d502:	9107      	str	r1, [sp, #28]
 800d504:	462a      	mov	r2, r5
 800d506:	eb00 0e05 	add.w	lr, r0, r5
 800d50a:	210a      	movs	r1, #10
 800d50c:	4572      	cmp	r2, lr
 800d50e:	d113      	bne.n	800d538 <_strtod_l+0x258>
 800d510:	182a      	adds	r2, r5, r0
 800d512:	2a08      	cmp	r2, #8
 800d514:	f105 0501 	add.w	r5, r5, #1
 800d518:	4405      	add	r5, r0
 800d51a:	dc1c      	bgt.n	800d556 <_strtod_l+0x276>
 800d51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d51e:	220a      	movs	r2, #10
 800d520:	fb02 3301 	mla	r3, r2, r1, r3
 800d524:	9309      	str	r3, [sp, #36]	; 0x24
 800d526:	2200      	movs	r2, #0
 800d528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d52a:	1c59      	adds	r1, r3, #1
 800d52c:	911d      	str	r1, [sp, #116]	; 0x74
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	4610      	mov	r0, r2
 800d532:	e7c9      	b.n	800d4c8 <_strtod_l+0x1e8>
 800d534:	4638      	mov	r0, r7
 800d536:	e7d2      	b.n	800d4de <_strtod_l+0x1fe>
 800d538:	2a08      	cmp	r2, #8
 800d53a:	dc04      	bgt.n	800d546 <_strtod_l+0x266>
 800d53c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d53e:	434e      	muls	r6, r1
 800d540:	9609      	str	r6, [sp, #36]	; 0x24
 800d542:	3201      	adds	r2, #1
 800d544:	e7e2      	b.n	800d50c <_strtod_l+0x22c>
 800d546:	f102 0c01 	add.w	ip, r2, #1
 800d54a:	f1bc 0f10 	cmp.w	ip, #16
 800d54e:	bfd8      	it	le
 800d550:	fb01 f909 	mulle.w	r9, r1, r9
 800d554:	e7f5      	b.n	800d542 <_strtod_l+0x262>
 800d556:	2d10      	cmp	r5, #16
 800d558:	bfdc      	itt	le
 800d55a:	220a      	movle	r2, #10
 800d55c:	fb02 3909 	mlale	r9, r2, r9, r3
 800d560:	e7e1      	b.n	800d526 <_strtod_l+0x246>
 800d562:	2300      	movs	r3, #0
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	2201      	movs	r2, #1
 800d568:	e77c      	b.n	800d464 <_strtod_l+0x184>
 800d56a:	f04f 0c00 	mov.w	ip, #0
 800d56e:	f108 0302 	add.w	r3, r8, #2
 800d572:	931d      	str	r3, [sp, #116]	; 0x74
 800d574:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d578:	e785      	b.n	800d486 <_strtod_l+0x1a6>
 800d57a:	f04f 0c01 	mov.w	ip, #1
 800d57e:	e7f6      	b.n	800d56e <_strtod_l+0x28e>
 800d580:	08012094 	.word	0x08012094
 800d584:	08011de0 	.word	0x08011de0
 800d588:	7ff00000 	.word	0x7ff00000
 800d58c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d58e:	1c59      	adds	r1, r3, #1
 800d590:	911d      	str	r1, [sp, #116]	; 0x74
 800d592:	785b      	ldrb	r3, [r3, #1]
 800d594:	2b30      	cmp	r3, #48	; 0x30
 800d596:	d0f9      	beq.n	800d58c <_strtod_l+0x2ac>
 800d598:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d59c:	2908      	cmp	r1, #8
 800d59e:	f63f af79 	bhi.w	800d494 <_strtod_l+0x1b4>
 800d5a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d5a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5a8:	9308      	str	r3, [sp, #32]
 800d5aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5ac:	1c59      	adds	r1, r3, #1
 800d5ae:	911d      	str	r1, [sp, #116]	; 0x74
 800d5b0:	785b      	ldrb	r3, [r3, #1]
 800d5b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800d5b6:	2e09      	cmp	r6, #9
 800d5b8:	d937      	bls.n	800d62a <_strtod_l+0x34a>
 800d5ba:	9e08      	ldr	r6, [sp, #32]
 800d5bc:	1b89      	subs	r1, r1, r6
 800d5be:	2908      	cmp	r1, #8
 800d5c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d5c4:	dc02      	bgt.n	800d5cc <_strtod_l+0x2ec>
 800d5c6:	4576      	cmp	r6, lr
 800d5c8:	bfa8      	it	ge
 800d5ca:	4676      	movge	r6, lr
 800d5cc:	f1bc 0f00 	cmp.w	ip, #0
 800d5d0:	d000      	beq.n	800d5d4 <_strtod_l+0x2f4>
 800d5d2:	4276      	negs	r6, r6
 800d5d4:	2d00      	cmp	r5, #0
 800d5d6:	d14f      	bne.n	800d678 <_strtod_l+0x398>
 800d5d8:	9904      	ldr	r1, [sp, #16]
 800d5da:	4301      	orrs	r1, r0
 800d5dc:	f47f aec2 	bne.w	800d364 <_strtod_l+0x84>
 800d5e0:	2a00      	cmp	r2, #0
 800d5e2:	f47f aedb 	bne.w	800d39c <_strtod_l+0xbc>
 800d5e6:	2b69      	cmp	r3, #105	; 0x69
 800d5e8:	d027      	beq.n	800d63a <_strtod_l+0x35a>
 800d5ea:	dc24      	bgt.n	800d636 <_strtod_l+0x356>
 800d5ec:	2b49      	cmp	r3, #73	; 0x49
 800d5ee:	d024      	beq.n	800d63a <_strtod_l+0x35a>
 800d5f0:	2b4e      	cmp	r3, #78	; 0x4e
 800d5f2:	f47f aed3 	bne.w	800d39c <_strtod_l+0xbc>
 800d5f6:	499e      	ldr	r1, [pc, #632]	; (800d870 <_strtod_l+0x590>)
 800d5f8:	a81d      	add	r0, sp, #116	; 0x74
 800d5fa:	f001 ff35 	bl	800f468 <__match>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f43f aecc 	beq.w	800d39c <_strtod_l+0xbc>
 800d604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	2b28      	cmp	r3, #40	; 0x28
 800d60a:	d12d      	bne.n	800d668 <_strtod_l+0x388>
 800d60c:	4999      	ldr	r1, [pc, #612]	; (800d874 <_strtod_l+0x594>)
 800d60e:	aa20      	add	r2, sp, #128	; 0x80
 800d610:	a81d      	add	r0, sp, #116	; 0x74
 800d612:	f001 ff3d 	bl	800f490 <__hexnan>
 800d616:	2805      	cmp	r0, #5
 800d618:	d126      	bne.n	800d668 <_strtod_l+0x388>
 800d61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d61c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d620:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d624:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d628:	e69c      	b.n	800d364 <_strtod_l+0x84>
 800d62a:	210a      	movs	r1, #10
 800d62c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d630:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d634:	e7b9      	b.n	800d5aa <_strtod_l+0x2ca>
 800d636:	2b6e      	cmp	r3, #110	; 0x6e
 800d638:	e7db      	b.n	800d5f2 <_strtod_l+0x312>
 800d63a:	498f      	ldr	r1, [pc, #572]	; (800d878 <_strtod_l+0x598>)
 800d63c:	a81d      	add	r0, sp, #116	; 0x74
 800d63e:	f001 ff13 	bl	800f468 <__match>
 800d642:	2800      	cmp	r0, #0
 800d644:	f43f aeaa 	beq.w	800d39c <_strtod_l+0xbc>
 800d648:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d64a:	498c      	ldr	r1, [pc, #560]	; (800d87c <_strtod_l+0x59c>)
 800d64c:	3b01      	subs	r3, #1
 800d64e:	a81d      	add	r0, sp, #116	; 0x74
 800d650:	931d      	str	r3, [sp, #116]	; 0x74
 800d652:	f001 ff09 	bl	800f468 <__match>
 800d656:	b910      	cbnz	r0, 800d65e <_strtod_l+0x37e>
 800d658:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d65a:	3301      	adds	r3, #1
 800d65c:	931d      	str	r3, [sp, #116]	; 0x74
 800d65e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d88c <_strtod_l+0x5ac>
 800d662:	f04f 0a00 	mov.w	sl, #0
 800d666:	e67d      	b.n	800d364 <_strtod_l+0x84>
 800d668:	4885      	ldr	r0, [pc, #532]	; (800d880 <_strtod_l+0x5a0>)
 800d66a:	f003 f809 	bl	8010680 <nan>
 800d66e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d672:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d676:	e675      	b.n	800d364 <_strtod_l+0x84>
 800d678:	9b07      	ldr	r3, [sp, #28]
 800d67a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d67c:	1af3      	subs	r3, r6, r3
 800d67e:	2f00      	cmp	r7, #0
 800d680:	bf08      	it	eq
 800d682:	462f      	moveq	r7, r5
 800d684:	2d10      	cmp	r5, #16
 800d686:	9308      	str	r3, [sp, #32]
 800d688:	46a8      	mov	r8, r5
 800d68a:	bfa8      	it	ge
 800d68c:	f04f 0810 	movge.w	r8, #16
 800d690:	f7f2 ff40 	bl	8000514 <__aeabi_ui2d>
 800d694:	2d09      	cmp	r5, #9
 800d696:	4682      	mov	sl, r0
 800d698:	468b      	mov	fp, r1
 800d69a:	dd13      	ble.n	800d6c4 <_strtod_l+0x3e4>
 800d69c:	4b79      	ldr	r3, [pc, #484]	; (800d884 <_strtod_l+0x5a4>)
 800d69e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d6a6:	f7f2 ffaf 	bl	8000608 <__aeabi_dmul>
 800d6aa:	4682      	mov	sl, r0
 800d6ac:	4648      	mov	r0, r9
 800d6ae:	468b      	mov	fp, r1
 800d6b0:	f7f2 ff30 	bl	8000514 <__aeabi_ui2d>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	4659      	mov	r1, fp
 800d6bc:	f7f2 fdee 	bl	800029c <__adddf3>
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	468b      	mov	fp, r1
 800d6c4:	2d0f      	cmp	r5, #15
 800d6c6:	dc38      	bgt.n	800d73a <_strtod_l+0x45a>
 800d6c8:	9b08      	ldr	r3, [sp, #32]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f43f ae4a 	beq.w	800d364 <_strtod_l+0x84>
 800d6d0:	dd24      	ble.n	800d71c <_strtod_l+0x43c>
 800d6d2:	2b16      	cmp	r3, #22
 800d6d4:	dc0b      	bgt.n	800d6ee <_strtod_l+0x40e>
 800d6d6:	4d6b      	ldr	r5, [pc, #428]	; (800d884 <_strtod_l+0x5a4>)
 800d6d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d6dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	465b      	mov	r3, fp
 800d6e4:	f7f2 ff90 	bl	8000608 <__aeabi_dmul>
 800d6e8:	4682      	mov	sl, r0
 800d6ea:	468b      	mov	fp, r1
 800d6ec:	e63a      	b.n	800d364 <_strtod_l+0x84>
 800d6ee:	9a08      	ldr	r2, [sp, #32]
 800d6f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	db20      	blt.n	800d73a <_strtod_l+0x45a>
 800d6f8:	4c62      	ldr	r4, [pc, #392]	; (800d884 <_strtod_l+0x5a4>)
 800d6fa:	f1c5 050f 	rsb	r5, r5, #15
 800d6fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d702:	4652      	mov	r2, sl
 800d704:	465b      	mov	r3, fp
 800d706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d70a:	f7f2 ff7d 	bl	8000608 <__aeabi_dmul>
 800d70e:	9b08      	ldr	r3, [sp, #32]
 800d710:	1b5d      	subs	r5, r3, r5
 800d712:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d716:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d71a:	e7e3      	b.n	800d6e4 <_strtod_l+0x404>
 800d71c:	9b08      	ldr	r3, [sp, #32]
 800d71e:	3316      	adds	r3, #22
 800d720:	db0b      	blt.n	800d73a <_strtod_l+0x45a>
 800d722:	9b07      	ldr	r3, [sp, #28]
 800d724:	4a57      	ldr	r2, [pc, #348]	; (800d884 <_strtod_l+0x5a4>)
 800d726:	1b9e      	subs	r6, r3, r6
 800d728:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d72c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	f7f3 f892 	bl	800085c <__aeabi_ddiv>
 800d738:	e7d6      	b.n	800d6e8 <_strtod_l+0x408>
 800d73a:	9b08      	ldr	r3, [sp, #32]
 800d73c:	eba5 0808 	sub.w	r8, r5, r8
 800d740:	4498      	add	r8, r3
 800d742:	f1b8 0f00 	cmp.w	r8, #0
 800d746:	dd71      	ble.n	800d82c <_strtod_l+0x54c>
 800d748:	f018 030f 	ands.w	r3, r8, #15
 800d74c:	d00a      	beq.n	800d764 <_strtod_l+0x484>
 800d74e:	494d      	ldr	r1, [pc, #308]	; (800d884 <_strtod_l+0x5a4>)
 800d750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d754:	4652      	mov	r2, sl
 800d756:	465b      	mov	r3, fp
 800d758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d75c:	f7f2 ff54 	bl	8000608 <__aeabi_dmul>
 800d760:	4682      	mov	sl, r0
 800d762:	468b      	mov	fp, r1
 800d764:	f038 080f 	bics.w	r8, r8, #15
 800d768:	d04d      	beq.n	800d806 <_strtod_l+0x526>
 800d76a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d76e:	dd22      	ble.n	800d7b6 <_strtod_l+0x4d6>
 800d770:	2500      	movs	r5, #0
 800d772:	462e      	mov	r6, r5
 800d774:	9509      	str	r5, [sp, #36]	; 0x24
 800d776:	9507      	str	r5, [sp, #28]
 800d778:	2322      	movs	r3, #34	; 0x22
 800d77a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d88c <_strtod_l+0x5ac>
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	f04f 0a00 	mov.w	sl, #0
 800d784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d786:	2b00      	cmp	r3, #0
 800d788:	f43f adec 	beq.w	800d364 <_strtod_l+0x84>
 800d78c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d78e:	4620      	mov	r0, r4
 800d790:	f001 ff8a 	bl	800f6a8 <_Bfree>
 800d794:	9907      	ldr	r1, [sp, #28]
 800d796:	4620      	mov	r0, r4
 800d798:	f001 ff86 	bl	800f6a8 <_Bfree>
 800d79c:	4631      	mov	r1, r6
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f001 ff82 	bl	800f6a8 <_Bfree>
 800d7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f001 ff7e 	bl	800f6a8 <_Bfree>
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f001 ff7a 	bl	800f6a8 <_Bfree>
 800d7b4:	e5d6      	b.n	800d364 <_strtod_l+0x84>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d7bc:	4650      	mov	r0, sl
 800d7be:	4659      	mov	r1, fp
 800d7c0:	4699      	mov	r9, r3
 800d7c2:	f1b8 0f01 	cmp.w	r8, #1
 800d7c6:	dc21      	bgt.n	800d80c <_strtod_l+0x52c>
 800d7c8:	b10b      	cbz	r3, 800d7ce <_strtod_l+0x4ee>
 800d7ca:	4682      	mov	sl, r0
 800d7cc:	468b      	mov	fp, r1
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	; (800d888 <_strtod_l+0x5a8>)
 800d7d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d7d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d7d8:	4652      	mov	r2, sl
 800d7da:	465b      	mov	r3, fp
 800d7dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d7e0:	f7f2 ff12 	bl	8000608 <__aeabi_dmul>
 800d7e4:	4b29      	ldr	r3, [pc, #164]	; (800d88c <_strtod_l+0x5ac>)
 800d7e6:	460a      	mov	r2, r1
 800d7e8:	400b      	ands	r3, r1
 800d7ea:	4929      	ldr	r1, [pc, #164]	; (800d890 <_strtod_l+0x5b0>)
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	4682      	mov	sl, r0
 800d7f0:	d8be      	bhi.n	800d770 <_strtod_l+0x490>
 800d7f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d7f6:	428b      	cmp	r3, r1
 800d7f8:	bf86      	itte	hi
 800d7fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d894 <_strtod_l+0x5b4>
 800d7fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800d802:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d806:	2300      	movs	r3, #0
 800d808:	9304      	str	r3, [sp, #16]
 800d80a:	e081      	b.n	800d910 <_strtod_l+0x630>
 800d80c:	f018 0f01 	tst.w	r8, #1
 800d810:	d007      	beq.n	800d822 <_strtod_l+0x542>
 800d812:	4b1d      	ldr	r3, [pc, #116]	; (800d888 <_strtod_l+0x5a8>)
 800d814:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f7f2 fef4 	bl	8000608 <__aeabi_dmul>
 800d820:	2301      	movs	r3, #1
 800d822:	f109 0901 	add.w	r9, r9, #1
 800d826:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d82a:	e7ca      	b.n	800d7c2 <_strtod_l+0x4e2>
 800d82c:	d0eb      	beq.n	800d806 <_strtod_l+0x526>
 800d82e:	f1c8 0800 	rsb	r8, r8, #0
 800d832:	f018 020f 	ands.w	r2, r8, #15
 800d836:	d00a      	beq.n	800d84e <_strtod_l+0x56e>
 800d838:	4b12      	ldr	r3, [pc, #72]	; (800d884 <_strtod_l+0x5a4>)
 800d83a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	f7f3 f809 	bl	800085c <__aeabi_ddiv>
 800d84a:	4682      	mov	sl, r0
 800d84c:	468b      	mov	fp, r1
 800d84e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d852:	d0d8      	beq.n	800d806 <_strtod_l+0x526>
 800d854:	f1b8 0f1f 	cmp.w	r8, #31
 800d858:	dd1e      	ble.n	800d898 <_strtod_l+0x5b8>
 800d85a:	2500      	movs	r5, #0
 800d85c:	462e      	mov	r6, r5
 800d85e:	9509      	str	r5, [sp, #36]	; 0x24
 800d860:	9507      	str	r5, [sp, #28]
 800d862:	2322      	movs	r3, #34	; 0x22
 800d864:	f04f 0a00 	mov.w	sl, #0
 800d868:	f04f 0b00 	mov.w	fp, #0
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	e789      	b.n	800d784 <_strtod_l+0x4a4>
 800d870:	08011db1 	.word	0x08011db1
 800d874:	08011df4 	.word	0x08011df4
 800d878:	08011da9 	.word	0x08011da9
 800d87c:	08011f34 	.word	0x08011f34
 800d880:	08012250 	.word	0x08012250
 800d884:	08012130 	.word	0x08012130
 800d888:	08012108 	.word	0x08012108
 800d88c:	7ff00000 	.word	0x7ff00000
 800d890:	7ca00000 	.word	0x7ca00000
 800d894:	7fefffff 	.word	0x7fefffff
 800d898:	f018 0310 	ands.w	r3, r8, #16
 800d89c:	bf18      	it	ne
 800d89e:	236a      	movne	r3, #106	; 0x6a
 800d8a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800dc58 <_strtod_l+0x978>
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	4659      	mov	r1, fp
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f018 0f01 	tst.w	r8, #1
 800d8b0:	d004      	beq.n	800d8bc <_strtod_l+0x5dc>
 800d8b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d8b6:	f7f2 fea7 	bl	8000608 <__aeabi_dmul>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d8c0:	f109 0908 	add.w	r9, r9, #8
 800d8c4:	d1f2      	bne.n	800d8ac <_strtod_l+0x5cc>
 800d8c6:	b10b      	cbz	r3, 800d8cc <_strtod_l+0x5ec>
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	468b      	mov	fp, r1
 800d8cc:	9b04      	ldr	r3, [sp, #16]
 800d8ce:	b1bb      	cbz	r3, 800d900 <_strtod_l+0x620>
 800d8d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d8d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	4659      	mov	r1, fp
 800d8dc:	dd10      	ble.n	800d900 <_strtod_l+0x620>
 800d8de:	2b1f      	cmp	r3, #31
 800d8e0:	f340 8128 	ble.w	800db34 <_strtod_l+0x854>
 800d8e4:	2b34      	cmp	r3, #52	; 0x34
 800d8e6:	bfde      	ittt	le
 800d8e8:	3b20      	suble	r3, #32
 800d8ea:	f04f 32ff 	movle.w	r2, #4294967295
 800d8ee:	fa02 f303 	lslle.w	r3, r2, r3
 800d8f2:	f04f 0a00 	mov.w	sl, #0
 800d8f6:	bfcc      	ite	gt
 800d8f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d8fc:	ea03 0b01 	andle.w	fp, r3, r1
 800d900:	2200      	movs	r2, #0
 800d902:	2300      	movs	r3, #0
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	f7f3 f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d1a4      	bne.n	800d85a <_strtod_l+0x57a>
 800d910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d916:	462b      	mov	r3, r5
 800d918:	463a      	mov	r2, r7
 800d91a:	4620      	mov	r0, r4
 800d91c:	f001 ff30 	bl	800f780 <__s2b>
 800d920:	9009      	str	r0, [sp, #36]	; 0x24
 800d922:	2800      	cmp	r0, #0
 800d924:	f43f af24 	beq.w	800d770 <_strtod_l+0x490>
 800d928:	9b07      	ldr	r3, [sp, #28]
 800d92a:	1b9e      	subs	r6, r3, r6
 800d92c:	9b08      	ldr	r3, [sp, #32]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bfb4      	ite	lt
 800d932:	4633      	movlt	r3, r6
 800d934:	2300      	movge	r3, #0
 800d936:	9310      	str	r3, [sp, #64]	; 0x40
 800d938:	9b08      	ldr	r3, [sp, #32]
 800d93a:	2500      	movs	r5, #0
 800d93c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d940:	9318      	str	r3, [sp, #96]	; 0x60
 800d942:	462e      	mov	r6, r5
 800d944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d946:	4620      	mov	r0, r4
 800d948:	6859      	ldr	r1, [r3, #4]
 800d94a:	f001 fe6d 	bl	800f628 <_Balloc>
 800d94e:	9007      	str	r0, [sp, #28]
 800d950:	2800      	cmp	r0, #0
 800d952:	f43f af11 	beq.w	800d778 <_strtod_l+0x498>
 800d956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d958:	691a      	ldr	r2, [r3, #16]
 800d95a:	3202      	adds	r2, #2
 800d95c:	f103 010c 	add.w	r1, r3, #12
 800d960:	0092      	lsls	r2, r2, #2
 800d962:	300c      	adds	r0, #12
 800d964:	f001 fe52 	bl	800f60c <memcpy>
 800d968:	ec4b ab10 	vmov	d0, sl, fp
 800d96c:	aa20      	add	r2, sp, #128	; 0x80
 800d96e:	a91f      	add	r1, sp, #124	; 0x7c
 800d970:	4620      	mov	r0, r4
 800d972:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d976:	f002 fa3f 	bl	800fdf8 <__d2b>
 800d97a:	901e      	str	r0, [sp, #120]	; 0x78
 800d97c:	2800      	cmp	r0, #0
 800d97e:	f43f aefb 	beq.w	800d778 <_strtod_l+0x498>
 800d982:	2101      	movs	r1, #1
 800d984:	4620      	mov	r0, r4
 800d986:	f001 ff95 	bl	800f8b4 <__i2b>
 800d98a:	4606      	mov	r6, r0
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f43f aef3 	beq.w	800d778 <_strtod_l+0x498>
 800d992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d994:	9904      	ldr	r1, [sp, #16]
 800d996:	2b00      	cmp	r3, #0
 800d998:	bfab      	itete	ge
 800d99a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d99c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d99e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d9a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d9a4:	bfac      	ite	ge
 800d9a6:	eb03 0902 	addge.w	r9, r3, r2
 800d9aa:	1ad7      	sublt	r7, r2, r3
 800d9ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d9ae:	eba3 0801 	sub.w	r8, r3, r1
 800d9b2:	4490      	add	r8, r2
 800d9b4:	4ba3      	ldr	r3, [pc, #652]	; (800dc44 <_strtod_l+0x964>)
 800d9b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d9ba:	4598      	cmp	r8, r3
 800d9bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d9c0:	f280 80cc 	bge.w	800db5c <_strtod_l+0x87c>
 800d9c4:	eba3 0308 	sub.w	r3, r3, r8
 800d9c8:	2b1f      	cmp	r3, #31
 800d9ca:	eba2 0203 	sub.w	r2, r2, r3
 800d9ce:	f04f 0101 	mov.w	r1, #1
 800d9d2:	f300 80b6 	bgt.w	800db42 <_strtod_l+0x862>
 800d9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9da:	9311      	str	r3, [sp, #68]	; 0x44
 800d9dc:	2300      	movs	r3, #0
 800d9de:	930c      	str	r3, [sp, #48]	; 0x30
 800d9e0:	eb09 0802 	add.w	r8, r9, r2
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	45c1      	cmp	r9, r8
 800d9e8:	4417      	add	r7, r2
 800d9ea:	441f      	add	r7, r3
 800d9ec:	464b      	mov	r3, r9
 800d9ee:	bfa8      	it	ge
 800d9f0:	4643      	movge	r3, r8
 800d9f2:	42bb      	cmp	r3, r7
 800d9f4:	bfa8      	it	ge
 800d9f6:	463b      	movge	r3, r7
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfc2      	ittt	gt
 800d9fc:	eba8 0803 	subgt.w	r8, r8, r3
 800da00:	1aff      	subgt	r7, r7, r3
 800da02:	eba9 0903 	subgt.w	r9, r9, r3
 800da06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dd17      	ble.n	800da3c <_strtod_l+0x75c>
 800da0c:	4631      	mov	r1, r6
 800da0e:	461a      	mov	r2, r3
 800da10:	4620      	mov	r0, r4
 800da12:	f002 f80b 	bl	800fa2c <__pow5mult>
 800da16:	4606      	mov	r6, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	f43f aead 	beq.w	800d778 <_strtod_l+0x498>
 800da1e:	4601      	mov	r1, r0
 800da20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800da22:	4620      	mov	r0, r4
 800da24:	f001 ff5c 	bl	800f8e0 <__multiply>
 800da28:	900f      	str	r0, [sp, #60]	; 0x3c
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f43f aea4 	beq.w	800d778 <_strtod_l+0x498>
 800da30:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da32:	4620      	mov	r0, r4
 800da34:	f001 fe38 	bl	800f6a8 <_Bfree>
 800da38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da3a:	931e      	str	r3, [sp, #120]	; 0x78
 800da3c:	f1b8 0f00 	cmp.w	r8, #0
 800da40:	f300 8091 	bgt.w	800db66 <_strtod_l+0x886>
 800da44:	9b08      	ldr	r3, [sp, #32]
 800da46:	2b00      	cmp	r3, #0
 800da48:	dd08      	ble.n	800da5c <_strtod_l+0x77c>
 800da4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da4c:	9907      	ldr	r1, [sp, #28]
 800da4e:	4620      	mov	r0, r4
 800da50:	f001 ffec 	bl	800fa2c <__pow5mult>
 800da54:	9007      	str	r0, [sp, #28]
 800da56:	2800      	cmp	r0, #0
 800da58:	f43f ae8e 	beq.w	800d778 <_strtod_l+0x498>
 800da5c:	2f00      	cmp	r7, #0
 800da5e:	dd08      	ble.n	800da72 <_strtod_l+0x792>
 800da60:	9907      	ldr	r1, [sp, #28]
 800da62:	463a      	mov	r2, r7
 800da64:	4620      	mov	r0, r4
 800da66:	f002 f83b 	bl	800fae0 <__lshift>
 800da6a:	9007      	str	r0, [sp, #28]
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f43f ae83 	beq.w	800d778 <_strtod_l+0x498>
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	dd08      	ble.n	800da8a <_strtod_l+0x7aa>
 800da78:	4631      	mov	r1, r6
 800da7a:	464a      	mov	r2, r9
 800da7c:	4620      	mov	r0, r4
 800da7e:	f002 f82f 	bl	800fae0 <__lshift>
 800da82:	4606      	mov	r6, r0
 800da84:	2800      	cmp	r0, #0
 800da86:	f43f ae77 	beq.w	800d778 <_strtod_l+0x498>
 800da8a:	9a07      	ldr	r2, [sp, #28]
 800da8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800da8e:	4620      	mov	r0, r4
 800da90:	f002 f8ae 	bl	800fbf0 <__mdiff>
 800da94:	4605      	mov	r5, r0
 800da96:	2800      	cmp	r0, #0
 800da98:	f43f ae6e 	beq.w	800d778 <_strtod_l+0x498>
 800da9c:	68c3      	ldr	r3, [r0, #12]
 800da9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800daa0:	2300      	movs	r3, #0
 800daa2:	60c3      	str	r3, [r0, #12]
 800daa4:	4631      	mov	r1, r6
 800daa6:	f002 f887 	bl	800fbb8 <__mcmp>
 800daaa:	2800      	cmp	r0, #0
 800daac:	da65      	bge.n	800db7a <_strtod_l+0x89a>
 800daae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dab0:	ea53 030a 	orrs.w	r3, r3, sl
 800dab4:	f040 8087 	bne.w	800dbc6 <_strtod_l+0x8e6>
 800dab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f040 8082 	bne.w	800dbc6 <_strtod_l+0x8e6>
 800dac2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dac6:	0d1b      	lsrs	r3, r3, #20
 800dac8:	051b      	lsls	r3, r3, #20
 800daca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dace:	d97a      	bls.n	800dbc6 <_strtod_l+0x8e6>
 800dad0:	696b      	ldr	r3, [r5, #20]
 800dad2:	b913      	cbnz	r3, 800dada <_strtod_l+0x7fa>
 800dad4:	692b      	ldr	r3, [r5, #16]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	dd75      	ble.n	800dbc6 <_strtod_l+0x8e6>
 800dada:	4629      	mov	r1, r5
 800dadc:	2201      	movs	r2, #1
 800dade:	4620      	mov	r0, r4
 800dae0:	f001 fffe 	bl	800fae0 <__lshift>
 800dae4:	4631      	mov	r1, r6
 800dae6:	4605      	mov	r5, r0
 800dae8:	f002 f866 	bl	800fbb8 <__mcmp>
 800daec:	2800      	cmp	r0, #0
 800daee:	dd6a      	ble.n	800dbc6 <_strtod_l+0x8e6>
 800daf0:	9904      	ldr	r1, [sp, #16]
 800daf2:	4a55      	ldr	r2, [pc, #340]	; (800dc48 <_strtod_l+0x968>)
 800daf4:	465b      	mov	r3, fp
 800daf6:	2900      	cmp	r1, #0
 800daf8:	f000 8085 	beq.w	800dc06 <_strtod_l+0x926>
 800dafc:	ea02 010b 	and.w	r1, r2, fp
 800db00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db04:	dc7f      	bgt.n	800dc06 <_strtod_l+0x926>
 800db06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db0a:	f77f aeaa 	ble.w	800d862 <_strtod_l+0x582>
 800db0e:	4a4f      	ldr	r2, [pc, #316]	; (800dc4c <_strtod_l+0x96c>)
 800db10:	2300      	movs	r3, #0
 800db12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800db16:	4650      	mov	r0, sl
 800db18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800db1c:	4659      	mov	r1, fp
 800db1e:	f7f2 fd73 	bl	8000608 <__aeabi_dmul>
 800db22:	460b      	mov	r3, r1
 800db24:	4303      	orrs	r3, r0
 800db26:	bf08      	it	eq
 800db28:	2322      	moveq	r3, #34	; 0x22
 800db2a:	4682      	mov	sl, r0
 800db2c:	468b      	mov	fp, r1
 800db2e:	bf08      	it	eq
 800db30:	6023      	streq	r3, [r4, #0]
 800db32:	e62b      	b.n	800d78c <_strtod_l+0x4ac>
 800db34:	f04f 32ff 	mov.w	r2, #4294967295
 800db38:	fa02 f303 	lsl.w	r3, r2, r3
 800db3c:	ea03 0a0a 	and.w	sl, r3, sl
 800db40:	e6de      	b.n	800d900 <_strtod_l+0x620>
 800db42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800db46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800db4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800db4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800db52:	fa01 f308 	lsl.w	r3, r1, r8
 800db56:	930c      	str	r3, [sp, #48]	; 0x30
 800db58:	9111      	str	r1, [sp, #68]	; 0x44
 800db5a:	e741      	b.n	800d9e0 <_strtod_l+0x700>
 800db5c:	2300      	movs	r3, #0
 800db5e:	930c      	str	r3, [sp, #48]	; 0x30
 800db60:	2301      	movs	r3, #1
 800db62:	9311      	str	r3, [sp, #68]	; 0x44
 800db64:	e73c      	b.n	800d9e0 <_strtod_l+0x700>
 800db66:	991e      	ldr	r1, [sp, #120]	; 0x78
 800db68:	4642      	mov	r2, r8
 800db6a:	4620      	mov	r0, r4
 800db6c:	f001 ffb8 	bl	800fae0 <__lshift>
 800db70:	901e      	str	r0, [sp, #120]	; 0x78
 800db72:	2800      	cmp	r0, #0
 800db74:	f47f af66 	bne.w	800da44 <_strtod_l+0x764>
 800db78:	e5fe      	b.n	800d778 <_strtod_l+0x498>
 800db7a:	465f      	mov	r7, fp
 800db7c:	d16e      	bne.n	800dc5c <_strtod_l+0x97c>
 800db7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db84:	b342      	cbz	r2, 800dbd8 <_strtod_l+0x8f8>
 800db86:	4a32      	ldr	r2, [pc, #200]	; (800dc50 <_strtod_l+0x970>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d128      	bne.n	800dbde <_strtod_l+0x8fe>
 800db8c:	9b04      	ldr	r3, [sp, #16]
 800db8e:	4650      	mov	r0, sl
 800db90:	b1eb      	cbz	r3, 800dbce <_strtod_l+0x8ee>
 800db92:	4a2d      	ldr	r2, [pc, #180]	; (800dc48 <_strtod_l+0x968>)
 800db94:	403a      	ands	r2, r7
 800db96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800db9a:	f04f 31ff 	mov.w	r1, #4294967295
 800db9e:	d819      	bhi.n	800dbd4 <_strtod_l+0x8f4>
 800dba0:	0d12      	lsrs	r2, r2, #20
 800dba2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dba6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbaa:	4298      	cmp	r0, r3
 800dbac:	d117      	bne.n	800dbde <_strtod_l+0x8fe>
 800dbae:	4b29      	ldr	r3, [pc, #164]	; (800dc54 <_strtod_l+0x974>)
 800dbb0:	429f      	cmp	r7, r3
 800dbb2:	d102      	bne.n	800dbba <_strtod_l+0x8da>
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	f43f addf 	beq.w	800d778 <_strtod_l+0x498>
 800dbba:	4b23      	ldr	r3, [pc, #140]	; (800dc48 <_strtod_l+0x968>)
 800dbbc:	403b      	ands	r3, r7
 800dbbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dbc2:	f04f 0a00 	mov.w	sl, #0
 800dbc6:	9b04      	ldr	r3, [sp, #16]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1a0      	bne.n	800db0e <_strtod_l+0x82e>
 800dbcc:	e5de      	b.n	800d78c <_strtod_l+0x4ac>
 800dbce:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd2:	e7ea      	b.n	800dbaa <_strtod_l+0x8ca>
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	e7e8      	b.n	800dbaa <_strtod_l+0x8ca>
 800dbd8:	ea53 030a 	orrs.w	r3, r3, sl
 800dbdc:	d088      	beq.n	800daf0 <_strtod_l+0x810>
 800dbde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbe0:	b1db      	cbz	r3, 800dc1a <_strtod_l+0x93a>
 800dbe2:	423b      	tst	r3, r7
 800dbe4:	d0ef      	beq.n	800dbc6 <_strtod_l+0x8e6>
 800dbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbe8:	9a04      	ldr	r2, [sp, #16]
 800dbea:	4650      	mov	r0, sl
 800dbec:	4659      	mov	r1, fp
 800dbee:	b1c3      	cbz	r3, 800dc22 <_strtod_l+0x942>
 800dbf0:	f7ff fb58 	bl	800d2a4 <sulp>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbfc:	f7f2 fb4e 	bl	800029c <__adddf3>
 800dc00:	4682      	mov	sl, r0
 800dc02:	468b      	mov	fp, r1
 800dc04:	e7df      	b.n	800dbc6 <_strtod_l+0x8e6>
 800dc06:	4013      	ands	r3, r2
 800dc08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc14:	f04f 3aff 	mov.w	sl, #4294967295
 800dc18:	e7d5      	b.n	800dbc6 <_strtod_l+0x8e6>
 800dc1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc1c:	ea13 0f0a 	tst.w	r3, sl
 800dc20:	e7e0      	b.n	800dbe4 <_strtod_l+0x904>
 800dc22:	f7ff fb3f 	bl	800d2a4 <sulp>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc2e:	f7f2 fb33 	bl	8000298 <__aeabi_dsub>
 800dc32:	2200      	movs	r2, #0
 800dc34:	2300      	movs	r3, #0
 800dc36:	4682      	mov	sl, r0
 800dc38:	468b      	mov	fp, r1
 800dc3a:	f7f2 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d0c1      	beq.n	800dbc6 <_strtod_l+0x8e6>
 800dc42:	e60e      	b.n	800d862 <_strtod_l+0x582>
 800dc44:	fffffc02 	.word	0xfffffc02
 800dc48:	7ff00000 	.word	0x7ff00000
 800dc4c:	39500000 	.word	0x39500000
 800dc50:	000fffff 	.word	0x000fffff
 800dc54:	7fefffff 	.word	0x7fefffff
 800dc58:	08011e08 	.word	0x08011e08
 800dc5c:	4631      	mov	r1, r6
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f002 f926 	bl	800feb0 <__ratio>
 800dc64:	ec59 8b10 	vmov	r8, r9, d0
 800dc68:	ee10 0a10 	vmov	r0, s0
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc72:	4649      	mov	r1, r9
 800dc74:	f7f2 ff44 	bl	8000b00 <__aeabi_dcmple>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d07c      	beq.n	800dd76 <_strtod_l+0xa96>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d04c      	beq.n	800dd1c <_strtod_l+0xa3c>
 800dc82:	4b95      	ldr	r3, [pc, #596]	; (800ded8 <_strtod_l+0xbf8>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dc8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ded8 <_strtod_l+0xbf8>
 800dc8e:	f04f 0800 	mov.w	r8, #0
 800dc92:	4b92      	ldr	r3, [pc, #584]	; (800dedc <_strtod_l+0xbfc>)
 800dc94:	403b      	ands	r3, r7
 800dc96:	9311      	str	r3, [sp, #68]	; 0x44
 800dc98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dc9a:	4b91      	ldr	r3, [pc, #580]	; (800dee0 <_strtod_l+0xc00>)
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	f040 80b2 	bne.w	800de06 <_strtod_l+0xb26>
 800dca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dcaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dcae:	ec4b ab10 	vmov	d0, sl, fp
 800dcb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800dcb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dcba:	f002 f821 	bl	800fd00 <__ulp>
 800dcbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dcc2:	ec53 2b10 	vmov	r2, r3, d0
 800dcc6:	f7f2 fc9f 	bl	8000608 <__aeabi_dmul>
 800dcca:	4652      	mov	r2, sl
 800dccc:	465b      	mov	r3, fp
 800dcce:	f7f2 fae5 	bl	800029c <__adddf3>
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4981      	ldr	r1, [pc, #516]	; (800dedc <_strtod_l+0xbfc>)
 800dcd6:	4a83      	ldr	r2, [pc, #524]	; (800dee4 <_strtod_l+0xc04>)
 800dcd8:	4019      	ands	r1, r3
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	4682      	mov	sl, r0
 800dcde:	d95e      	bls.n	800dd9e <_strtod_l+0xabe>
 800dce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d103      	bne.n	800dcf2 <_strtod_l+0xa12>
 800dcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcec:	3301      	adds	r3, #1
 800dcee:	f43f ad43 	beq.w	800d778 <_strtod_l+0x498>
 800dcf2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800def0 <_strtod_l+0xc10>
 800dcf6:	f04f 3aff 	mov.w	sl, #4294967295
 800dcfa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f001 fcd3 	bl	800f6a8 <_Bfree>
 800dd02:	9907      	ldr	r1, [sp, #28]
 800dd04:	4620      	mov	r0, r4
 800dd06:	f001 fccf 	bl	800f6a8 <_Bfree>
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f001 fccb 	bl	800f6a8 <_Bfree>
 800dd12:	4629      	mov	r1, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	f001 fcc7 	bl	800f6a8 <_Bfree>
 800dd1a:	e613      	b.n	800d944 <_strtod_l+0x664>
 800dd1c:	f1ba 0f00 	cmp.w	sl, #0
 800dd20:	d11b      	bne.n	800dd5a <_strtod_l+0xa7a>
 800dd22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd26:	b9f3      	cbnz	r3, 800dd66 <_strtod_l+0xa86>
 800dd28:	4b6b      	ldr	r3, [pc, #428]	; (800ded8 <_strtod_l+0xbf8>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f7f2 fedc 	bl	8000aec <__aeabi_dcmplt>
 800dd34:	b9d0      	cbnz	r0, 800dd6c <_strtod_l+0xa8c>
 800dd36:	4640      	mov	r0, r8
 800dd38:	4649      	mov	r1, r9
 800dd3a:	4b6b      	ldr	r3, [pc, #428]	; (800dee8 <_strtod_l+0xc08>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f7f2 fc63 	bl	8000608 <__aeabi_dmul>
 800dd42:	4680      	mov	r8, r0
 800dd44:	4689      	mov	r9, r1
 800dd46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800dd4e:	931b      	str	r3, [sp, #108]	; 0x6c
 800dd50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800dd54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800dd58:	e79b      	b.n	800dc92 <_strtod_l+0x9b2>
 800dd5a:	f1ba 0f01 	cmp.w	sl, #1
 800dd5e:	d102      	bne.n	800dd66 <_strtod_l+0xa86>
 800dd60:	2f00      	cmp	r7, #0
 800dd62:	f43f ad7e 	beq.w	800d862 <_strtod_l+0x582>
 800dd66:	4b61      	ldr	r3, [pc, #388]	; (800deec <_strtod_l+0xc0c>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	e78c      	b.n	800dc86 <_strtod_l+0x9a6>
 800dd6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dee8 <_strtod_l+0xc08>
 800dd70:	f04f 0800 	mov.w	r8, #0
 800dd74:	e7e7      	b.n	800dd46 <_strtod_l+0xa66>
 800dd76:	4b5c      	ldr	r3, [pc, #368]	; (800dee8 <_strtod_l+0xc08>)
 800dd78:	4640      	mov	r0, r8
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f7f2 fc43 	bl	8000608 <__aeabi_dmul>
 800dd82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd84:	4680      	mov	r8, r0
 800dd86:	4689      	mov	r9, r1
 800dd88:	b933      	cbnz	r3, 800dd98 <_strtod_l+0xab8>
 800dd8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd8e:	9012      	str	r0, [sp, #72]	; 0x48
 800dd90:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dd96:	e7dd      	b.n	800dd54 <_strtod_l+0xa74>
 800dd98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800dd9c:	e7f9      	b.n	800dd92 <_strtod_l+0xab2>
 800dd9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1a8      	bne.n	800dcfa <_strtod_l+0xa1a>
 800dda8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddae:	0d1b      	lsrs	r3, r3, #20
 800ddb0:	051b      	lsls	r3, r3, #20
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d1a1      	bne.n	800dcfa <_strtod_l+0xa1a>
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	4649      	mov	r1, r9
 800ddba:	f7f2 ffd5 	bl	8000d68 <__aeabi_d2lz>
 800ddbe:	f7f2 fbf5 	bl	80005ac <__aeabi_l2d>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4640      	mov	r0, r8
 800ddc8:	4649      	mov	r1, r9
 800ddca:	f7f2 fa65 	bl	8000298 <__aeabi_dsub>
 800ddce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ddd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddd4:	ea43 030a 	orr.w	r3, r3, sl
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	4680      	mov	r8, r0
 800dddc:	4689      	mov	r9, r1
 800ddde:	d053      	beq.n	800de88 <_strtod_l+0xba8>
 800dde0:	a335      	add	r3, pc, #212	; (adr r3, 800deb8 <_strtod_l+0xbd8>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	f7f2 fe81 	bl	8000aec <__aeabi_dcmplt>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f47f acce 	bne.w	800d78c <_strtod_l+0x4ac>
 800ddf0:	a333      	add	r3, pc, #204	; (adr r3, 800dec0 <_strtod_l+0xbe0>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	4649      	mov	r1, r9
 800ddfa:	f7f2 fe95 	bl	8000b28 <__aeabi_dcmpgt>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f43f af7b 	beq.w	800dcfa <_strtod_l+0xa1a>
 800de04:	e4c2      	b.n	800d78c <_strtod_l+0x4ac>
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	b333      	cbz	r3, 800de58 <_strtod_l+0xb78>
 800de0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de10:	d822      	bhi.n	800de58 <_strtod_l+0xb78>
 800de12:	a32d      	add	r3, pc, #180	; (adr r3, 800dec8 <_strtod_l+0xbe8>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	4640      	mov	r0, r8
 800de1a:	4649      	mov	r1, r9
 800de1c:	f7f2 fe70 	bl	8000b00 <__aeabi_dcmple>
 800de20:	b1a0      	cbz	r0, 800de4c <_strtod_l+0xb6c>
 800de22:	4649      	mov	r1, r9
 800de24:	4640      	mov	r0, r8
 800de26:	f7f2 fec7 	bl	8000bb8 <__aeabi_d2uiz>
 800de2a:	2801      	cmp	r0, #1
 800de2c:	bf38      	it	cc
 800de2e:	2001      	movcc	r0, #1
 800de30:	f7f2 fb70 	bl	8000514 <__aeabi_ui2d>
 800de34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de36:	4680      	mov	r8, r0
 800de38:	4689      	mov	r9, r1
 800de3a:	bb13      	cbnz	r3, 800de82 <_strtod_l+0xba2>
 800de3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de40:	9014      	str	r0, [sp, #80]	; 0x50
 800de42:	9315      	str	r3, [sp, #84]	; 0x54
 800de44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800de48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800de4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800de54:	1a9b      	subs	r3, r3, r2
 800de56:	930d      	str	r3, [sp, #52]	; 0x34
 800de58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800de60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800de64:	f001 ff4c 	bl	800fd00 <__ulp>
 800de68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de6c:	ec53 2b10 	vmov	r2, r3, d0
 800de70:	f7f2 fbca 	bl	8000608 <__aeabi_dmul>
 800de74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de78:	f7f2 fa10 	bl	800029c <__adddf3>
 800de7c:	4682      	mov	sl, r0
 800de7e:	468b      	mov	fp, r1
 800de80:	e78f      	b.n	800dda2 <_strtod_l+0xac2>
 800de82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800de86:	e7dd      	b.n	800de44 <_strtod_l+0xb64>
 800de88:	a311      	add	r3, pc, #68	; (adr r3, 800ded0 <_strtod_l+0xbf0>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7f2 fe2d 	bl	8000aec <__aeabi_dcmplt>
 800de92:	e7b4      	b.n	800ddfe <_strtod_l+0xb1e>
 800de94:	2300      	movs	r3, #0
 800de96:	930e      	str	r3, [sp, #56]	; 0x38
 800de98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800de9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	f7ff ba65 	b.w	800d36c <_strtod_l+0x8c>
 800dea2:	2b65      	cmp	r3, #101	; 0x65
 800dea4:	f43f ab5d 	beq.w	800d562 <_strtod_l+0x282>
 800dea8:	2b45      	cmp	r3, #69	; 0x45
 800deaa:	f43f ab5a 	beq.w	800d562 <_strtod_l+0x282>
 800deae:	2201      	movs	r2, #1
 800deb0:	f7ff bb92 	b.w	800d5d8 <_strtod_l+0x2f8>
 800deb4:	f3af 8000 	nop.w
 800deb8:	94a03595 	.word	0x94a03595
 800debc:	3fdfffff 	.word	0x3fdfffff
 800dec0:	35afe535 	.word	0x35afe535
 800dec4:	3fe00000 	.word	0x3fe00000
 800dec8:	ffc00000 	.word	0xffc00000
 800decc:	41dfffff 	.word	0x41dfffff
 800ded0:	94a03595 	.word	0x94a03595
 800ded4:	3fcfffff 	.word	0x3fcfffff
 800ded8:	3ff00000 	.word	0x3ff00000
 800dedc:	7ff00000 	.word	0x7ff00000
 800dee0:	7fe00000 	.word	0x7fe00000
 800dee4:	7c9fffff 	.word	0x7c9fffff
 800dee8:	3fe00000 	.word	0x3fe00000
 800deec:	bff00000 	.word	0xbff00000
 800def0:	7fefffff 	.word	0x7fefffff

0800def4 <_strtod_r>:
 800def4:	4b01      	ldr	r3, [pc, #4]	; (800defc <_strtod_r+0x8>)
 800def6:	f7ff b9f3 	b.w	800d2e0 <_strtod_l>
 800defa:	bf00      	nop
 800defc:	200000b0 	.word	0x200000b0

0800df00 <_strtol_l.isra.0>:
 800df00:	2b01      	cmp	r3, #1
 800df02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df06:	d001      	beq.n	800df0c <_strtol_l.isra.0+0xc>
 800df08:	2b24      	cmp	r3, #36	; 0x24
 800df0a:	d906      	bls.n	800df1a <_strtol_l.isra.0+0x1a>
 800df0c:	f7fe fad8 	bl	800c4c0 <__errno>
 800df10:	2316      	movs	r3, #22
 800df12:	6003      	str	r3, [r0, #0]
 800df14:	2000      	movs	r0, #0
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	4f3a      	ldr	r7, [pc, #232]	; (800e004 <_strtol_l.isra.0+0x104>)
 800df1c:	468e      	mov	lr, r1
 800df1e:	4676      	mov	r6, lr
 800df20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800df24:	5de5      	ldrb	r5, [r4, r7]
 800df26:	f015 0508 	ands.w	r5, r5, #8
 800df2a:	d1f8      	bne.n	800df1e <_strtol_l.isra.0+0x1e>
 800df2c:	2c2d      	cmp	r4, #45	; 0x2d
 800df2e:	d134      	bne.n	800df9a <_strtol_l.isra.0+0x9a>
 800df30:	f89e 4000 	ldrb.w	r4, [lr]
 800df34:	f04f 0801 	mov.w	r8, #1
 800df38:	f106 0e02 	add.w	lr, r6, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d05c      	beq.n	800dffa <_strtol_l.isra.0+0xfa>
 800df40:	2b10      	cmp	r3, #16
 800df42:	d10c      	bne.n	800df5e <_strtol_l.isra.0+0x5e>
 800df44:	2c30      	cmp	r4, #48	; 0x30
 800df46:	d10a      	bne.n	800df5e <_strtol_l.isra.0+0x5e>
 800df48:	f89e 4000 	ldrb.w	r4, [lr]
 800df4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df50:	2c58      	cmp	r4, #88	; 0x58
 800df52:	d14d      	bne.n	800dff0 <_strtol_l.isra.0+0xf0>
 800df54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800df58:	2310      	movs	r3, #16
 800df5a:	f10e 0e02 	add.w	lr, lr, #2
 800df5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800df62:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df66:	2600      	movs	r6, #0
 800df68:	fbbc f9f3 	udiv	r9, ip, r3
 800df6c:	4635      	mov	r5, r6
 800df6e:	fb03 ca19 	mls	sl, r3, r9, ip
 800df72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800df76:	2f09      	cmp	r7, #9
 800df78:	d818      	bhi.n	800dfac <_strtol_l.isra.0+0xac>
 800df7a:	463c      	mov	r4, r7
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	dd24      	ble.n	800dfca <_strtol_l.isra.0+0xca>
 800df80:	2e00      	cmp	r6, #0
 800df82:	db1f      	blt.n	800dfc4 <_strtol_l.isra.0+0xc4>
 800df84:	45a9      	cmp	r9, r5
 800df86:	d31d      	bcc.n	800dfc4 <_strtol_l.isra.0+0xc4>
 800df88:	d101      	bne.n	800df8e <_strtol_l.isra.0+0x8e>
 800df8a:	45a2      	cmp	sl, r4
 800df8c:	db1a      	blt.n	800dfc4 <_strtol_l.isra.0+0xc4>
 800df8e:	fb05 4503 	mla	r5, r5, r3, r4
 800df92:	2601      	movs	r6, #1
 800df94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800df98:	e7eb      	b.n	800df72 <_strtol_l.isra.0+0x72>
 800df9a:	2c2b      	cmp	r4, #43	; 0x2b
 800df9c:	bf08      	it	eq
 800df9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800dfa2:	46a8      	mov	r8, r5
 800dfa4:	bf08      	it	eq
 800dfa6:	f106 0e02 	addeq.w	lr, r6, #2
 800dfaa:	e7c7      	b.n	800df3c <_strtol_l.isra.0+0x3c>
 800dfac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800dfb0:	2f19      	cmp	r7, #25
 800dfb2:	d801      	bhi.n	800dfb8 <_strtol_l.isra.0+0xb8>
 800dfb4:	3c37      	subs	r4, #55	; 0x37
 800dfb6:	e7e1      	b.n	800df7c <_strtol_l.isra.0+0x7c>
 800dfb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800dfbc:	2f19      	cmp	r7, #25
 800dfbe:	d804      	bhi.n	800dfca <_strtol_l.isra.0+0xca>
 800dfc0:	3c57      	subs	r4, #87	; 0x57
 800dfc2:	e7db      	b.n	800df7c <_strtol_l.isra.0+0x7c>
 800dfc4:	f04f 36ff 	mov.w	r6, #4294967295
 800dfc8:	e7e4      	b.n	800df94 <_strtol_l.isra.0+0x94>
 800dfca:	2e00      	cmp	r6, #0
 800dfcc:	da05      	bge.n	800dfda <_strtol_l.isra.0+0xda>
 800dfce:	2322      	movs	r3, #34	; 0x22
 800dfd0:	6003      	str	r3, [r0, #0]
 800dfd2:	4665      	mov	r5, ip
 800dfd4:	b942      	cbnz	r2, 800dfe8 <_strtol_l.isra.0+0xe8>
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	e79d      	b.n	800df16 <_strtol_l.isra.0+0x16>
 800dfda:	f1b8 0f00 	cmp.w	r8, #0
 800dfde:	d000      	beq.n	800dfe2 <_strtol_l.isra.0+0xe2>
 800dfe0:	426d      	negs	r5, r5
 800dfe2:	2a00      	cmp	r2, #0
 800dfe4:	d0f7      	beq.n	800dfd6 <_strtol_l.isra.0+0xd6>
 800dfe6:	b10e      	cbz	r6, 800dfec <_strtol_l.isra.0+0xec>
 800dfe8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	e7f2      	b.n	800dfd6 <_strtol_l.isra.0+0xd6>
 800dff0:	2430      	movs	r4, #48	; 0x30
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1b3      	bne.n	800df5e <_strtol_l.isra.0+0x5e>
 800dff6:	2308      	movs	r3, #8
 800dff8:	e7b1      	b.n	800df5e <_strtol_l.isra.0+0x5e>
 800dffa:	2c30      	cmp	r4, #48	; 0x30
 800dffc:	d0a4      	beq.n	800df48 <_strtol_l.isra.0+0x48>
 800dffe:	230a      	movs	r3, #10
 800e000:	e7ad      	b.n	800df5e <_strtol_l.isra.0+0x5e>
 800e002:	bf00      	nop
 800e004:	08011e31 	.word	0x08011e31

0800e008 <_strtol_r>:
 800e008:	f7ff bf7a 	b.w	800df00 <_strtol_l.isra.0>

0800e00c <quorem>:
 800e00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	6903      	ldr	r3, [r0, #16]
 800e012:	690c      	ldr	r4, [r1, #16]
 800e014:	42a3      	cmp	r3, r4
 800e016:	4607      	mov	r7, r0
 800e018:	f2c0 8081 	blt.w	800e11e <quorem+0x112>
 800e01c:	3c01      	subs	r4, #1
 800e01e:	f101 0814 	add.w	r8, r1, #20
 800e022:	f100 0514 	add.w	r5, r0, #20
 800e026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e034:	3301      	adds	r3, #1
 800e036:	429a      	cmp	r2, r3
 800e038:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e03c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e040:	fbb2 f6f3 	udiv	r6, r2, r3
 800e044:	d331      	bcc.n	800e0aa <quorem+0x9e>
 800e046:	f04f 0e00 	mov.w	lr, #0
 800e04a:	4640      	mov	r0, r8
 800e04c:	46ac      	mov	ip, r5
 800e04e:	46f2      	mov	sl, lr
 800e050:	f850 2b04 	ldr.w	r2, [r0], #4
 800e054:	b293      	uxth	r3, r2
 800e056:	fb06 e303 	mla	r3, r6, r3, lr
 800e05a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e05e:	b29b      	uxth	r3, r3
 800e060:	ebaa 0303 	sub.w	r3, sl, r3
 800e064:	0c12      	lsrs	r2, r2, #16
 800e066:	f8dc a000 	ldr.w	sl, [ip]
 800e06a:	fb06 e202 	mla	r2, r6, r2, lr
 800e06e:	fa13 f38a 	uxtah	r3, r3, sl
 800e072:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e076:	fa1f fa82 	uxth.w	sl, r2
 800e07a:	f8dc 2000 	ldr.w	r2, [ip]
 800e07e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e082:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e086:	b29b      	uxth	r3, r3
 800e088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e08c:	4581      	cmp	r9, r0
 800e08e:	f84c 3b04 	str.w	r3, [ip], #4
 800e092:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e096:	d2db      	bcs.n	800e050 <quorem+0x44>
 800e098:	f855 300b 	ldr.w	r3, [r5, fp]
 800e09c:	b92b      	cbnz	r3, 800e0aa <quorem+0x9e>
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	3b04      	subs	r3, #4
 800e0a2:	429d      	cmp	r5, r3
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	d32e      	bcc.n	800e106 <quorem+0xfa>
 800e0a8:	613c      	str	r4, [r7, #16]
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f001 fd84 	bl	800fbb8 <__mcmp>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	db24      	blt.n	800e0fe <quorem+0xf2>
 800e0b4:	3601      	adds	r6, #1
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f04f 0c00 	mov.w	ip, #0
 800e0bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0c0:	f8d0 e000 	ldr.w	lr, [r0]
 800e0c4:	b293      	uxth	r3, r2
 800e0c6:	ebac 0303 	sub.w	r3, ip, r3
 800e0ca:	0c12      	lsrs	r2, r2, #16
 800e0cc:	fa13 f38e 	uxtah	r3, r3, lr
 800e0d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e0d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0de:	45c1      	cmp	r9, r8
 800e0e0:	f840 3b04 	str.w	r3, [r0], #4
 800e0e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e0e8:	d2e8      	bcs.n	800e0bc <quorem+0xb0>
 800e0ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0f2:	b922      	cbnz	r2, 800e0fe <quorem+0xf2>
 800e0f4:	3b04      	subs	r3, #4
 800e0f6:	429d      	cmp	r5, r3
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	d30a      	bcc.n	800e112 <quorem+0x106>
 800e0fc:	613c      	str	r4, [r7, #16]
 800e0fe:	4630      	mov	r0, r6
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e106:	6812      	ldr	r2, [r2, #0]
 800e108:	3b04      	subs	r3, #4
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	d1cc      	bne.n	800e0a8 <quorem+0x9c>
 800e10e:	3c01      	subs	r4, #1
 800e110:	e7c7      	b.n	800e0a2 <quorem+0x96>
 800e112:	6812      	ldr	r2, [r2, #0]
 800e114:	3b04      	subs	r3, #4
 800e116:	2a00      	cmp	r2, #0
 800e118:	d1f0      	bne.n	800e0fc <quorem+0xf0>
 800e11a:	3c01      	subs	r4, #1
 800e11c:	e7eb      	b.n	800e0f6 <quorem+0xea>
 800e11e:	2000      	movs	r0, #0
 800e120:	e7ee      	b.n	800e100 <quorem+0xf4>
 800e122:	0000      	movs	r0, r0
 800e124:	0000      	movs	r0, r0
	...

0800e128 <_dtoa_r>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	ed2d 8b02 	vpush	{d8}
 800e130:	ec57 6b10 	vmov	r6, r7, d0
 800e134:	b095      	sub	sp, #84	; 0x54
 800e136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e13c:	9105      	str	r1, [sp, #20]
 800e13e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e142:	4604      	mov	r4, r0
 800e144:	9209      	str	r2, [sp, #36]	; 0x24
 800e146:	930f      	str	r3, [sp, #60]	; 0x3c
 800e148:	b975      	cbnz	r5, 800e168 <_dtoa_r+0x40>
 800e14a:	2010      	movs	r0, #16
 800e14c:	f001 fa44 	bl	800f5d8 <malloc>
 800e150:	4602      	mov	r2, r0
 800e152:	6260      	str	r0, [r4, #36]	; 0x24
 800e154:	b920      	cbnz	r0, 800e160 <_dtoa_r+0x38>
 800e156:	4bb2      	ldr	r3, [pc, #712]	; (800e420 <_dtoa_r+0x2f8>)
 800e158:	21ea      	movs	r1, #234	; 0xea
 800e15a:	48b2      	ldr	r0, [pc, #712]	; (800e424 <_dtoa_r+0x2fc>)
 800e15c:	f002 fbde 	bl	801091c <__assert_func>
 800e160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e164:	6005      	str	r5, [r0, #0]
 800e166:	60c5      	str	r5, [r0, #12]
 800e168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e16a:	6819      	ldr	r1, [r3, #0]
 800e16c:	b151      	cbz	r1, 800e184 <_dtoa_r+0x5c>
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	604a      	str	r2, [r1, #4]
 800e172:	2301      	movs	r3, #1
 800e174:	4093      	lsls	r3, r2
 800e176:	608b      	str	r3, [r1, #8]
 800e178:	4620      	mov	r0, r4
 800e17a:	f001 fa95 	bl	800f6a8 <_Bfree>
 800e17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e180:	2200      	movs	r2, #0
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	1e3b      	subs	r3, r7, #0
 800e186:	bfb9      	ittee	lt
 800e188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e18c:	9303      	strlt	r3, [sp, #12]
 800e18e:	2300      	movge	r3, #0
 800e190:	f8c8 3000 	strge.w	r3, [r8]
 800e194:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e198:	4ba3      	ldr	r3, [pc, #652]	; (800e428 <_dtoa_r+0x300>)
 800e19a:	bfbc      	itt	lt
 800e19c:	2201      	movlt	r2, #1
 800e19e:	f8c8 2000 	strlt.w	r2, [r8]
 800e1a2:	ea33 0309 	bics.w	r3, r3, r9
 800e1a6:	d11b      	bne.n	800e1e0 <_dtoa_r+0xb8>
 800e1a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1b4:	4333      	orrs	r3, r6
 800e1b6:	f000 857a 	beq.w	800ecae <_dtoa_r+0xb86>
 800e1ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1bc:	b963      	cbnz	r3, 800e1d8 <_dtoa_r+0xb0>
 800e1be:	4b9b      	ldr	r3, [pc, #620]	; (800e42c <_dtoa_r+0x304>)
 800e1c0:	e024      	b.n	800e20c <_dtoa_r+0xe4>
 800e1c2:	4b9b      	ldr	r3, [pc, #620]	; (800e430 <_dtoa_r+0x308>)
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	9800      	ldr	r0, [sp, #0]
 800e1ce:	b015      	add	sp, #84	; 0x54
 800e1d0:	ecbd 8b02 	vpop	{d8}
 800e1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d8:	4b94      	ldr	r3, [pc, #592]	; (800e42c <_dtoa_r+0x304>)
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	3303      	adds	r3, #3
 800e1de:	e7f3      	b.n	800e1c8 <_dtoa_r+0xa0>
 800e1e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	ec51 0b17 	vmov	r0, r1, d7
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e1f0:	f7f2 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	b158      	cbz	r0, 800e210 <_dtoa_r+0xe8>
 800e1f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 8551 	beq.w	800eca8 <_dtoa_r+0xb80>
 800e206:	488b      	ldr	r0, [pc, #556]	; (800e434 <_dtoa_r+0x30c>)
 800e208:	6018      	str	r0, [r3, #0]
 800e20a:	1e43      	subs	r3, r0, #1
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	e7dd      	b.n	800e1cc <_dtoa_r+0xa4>
 800e210:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e214:	aa12      	add	r2, sp, #72	; 0x48
 800e216:	a913      	add	r1, sp, #76	; 0x4c
 800e218:	4620      	mov	r0, r4
 800e21a:	f001 fded 	bl	800fdf8 <__d2b>
 800e21e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e222:	4683      	mov	fp, r0
 800e224:	2d00      	cmp	r5, #0
 800e226:	d07c      	beq.n	800e322 <_dtoa_r+0x1fa>
 800e228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e22a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e232:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e236:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e23a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e23e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e242:	4b7d      	ldr	r3, [pc, #500]	; (800e438 <_dtoa_r+0x310>)
 800e244:	2200      	movs	r2, #0
 800e246:	4630      	mov	r0, r6
 800e248:	4639      	mov	r1, r7
 800e24a:	f7f2 f825 	bl	8000298 <__aeabi_dsub>
 800e24e:	a36e      	add	r3, pc, #440	; (adr r3, 800e408 <_dtoa_r+0x2e0>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	a36d      	add	r3, pc, #436	; (adr r3, 800e410 <_dtoa_r+0x2e8>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f81d 	bl	800029c <__adddf3>
 800e262:	4606      	mov	r6, r0
 800e264:	4628      	mov	r0, r5
 800e266:	460f      	mov	r7, r1
 800e268:	f7f2 f964 	bl	8000534 <__aeabi_i2d>
 800e26c:	a36a      	add	r3, pc, #424	; (adr r3, 800e418 <_dtoa_r+0x2f0>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f2 f9c9 	bl	8000608 <__aeabi_dmul>
 800e276:	4602      	mov	r2, r0
 800e278:	460b      	mov	r3, r1
 800e27a:	4630      	mov	r0, r6
 800e27c:	4639      	mov	r1, r7
 800e27e:	f7f2 f80d 	bl	800029c <__adddf3>
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	f7f2 fc6f 	bl	8000b68 <__aeabi_d2iz>
 800e28a:	2200      	movs	r2, #0
 800e28c:	4682      	mov	sl, r0
 800e28e:	2300      	movs	r3, #0
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f2 fc2a 	bl	8000aec <__aeabi_dcmplt>
 800e298:	b148      	cbz	r0, 800e2ae <_dtoa_r+0x186>
 800e29a:	4650      	mov	r0, sl
 800e29c:	f7f2 f94a 	bl	8000534 <__aeabi_i2d>
 800e2a0:	4632      	mov	r2, r6
 800e2a2:	463b      	mov	r3, r7
 800e2a4:	f7f2 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2a8:	b908      	cbnz	r0, 800e2ae <_dtoa_r+0x186>
 800e2aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2ae:	f1ba 0f16 	cmp.w	sl, #22
 800e2b2:	d854      	bhi.n	800e35e <_dtoa_r+0x236>
 800e2b4:	4b61      	ldr	r3, [pc, #388]	; (800e43c <_dtoa_r+0x314>)
 800e2b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e2c2:	f7f2 fc13 	bl	8000aec <__aeabi_dcmplt>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d04b      	beq.n	800e362 <_dtoa_r+0x23a>
 800e2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	930e      	str	r3, [sp, #56]	; 0x38
 800e2d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2d4:	1b5d      	subs	r5, r3, r5
 800e2d6:	1e6b      	subs	r3, r5, #1
 800e2d8:	9304      	str	r3, [sp, #16]
 800e2da:	bf43      	ittte	mi
 800e2dc:	2300      	movmi	r3, #0
 800e2de:	f1c5 0801 	rsbmi	r8, r5, #1
 800e2e2:	9304      	strmi	r3, [sp, #16]
 800e2e4:	f04f 0800 	movpl.w	r8, #0
 800e2e8:	f1ba 0f00 	cmp.w	sl, #0
 800e2ec:	db3b      	blt.n	800e366 <_dtoa_r+0x23e>
 800e2ee:	9b04      	ldr	r3, [sp, #16]
 800e2f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e2f4:	4453      	add	r3, sl
 800e2f6:	9304      	str	r3, [sp, #16]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9306      	str	r3, [sp, #24]
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	d869      	bhi.n	800e3d6 <_dtoa_r+0x2ae>
 800e302:	2b05      	cmp	r3, #5
 800e304:	bfc4      	itt	gt
 800e306:	3b04      	subgt	r3, #4
 800e308:	9305      	strgt	r3, [sp, #20]
 800e30a:	9b05      	ldr	r3, [sp, #20]
 800e30c:	f1a3 0302 	sub.w	r3, r3, #2
 800e310:	bfcc      	ite	gt
 800e312:	2500      	movgt	r5, #0
 800e314:	2501      	movle	r5, #1
 800e316:	2b03      	cmp	r3, #3
 800e318:	d869      	bhi.n	800e3ee <_dtoa_r+0x2c6>
 800e31a:	e8df f003 	tbb	[pc, r3]
 800e31e:	4e2c      	.short	0x4e2c
 800e320:	5a4c      	.short	0x5a4c
 800e322:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e326:	441d      	add	r5, r3
 800e328:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	bfc1      	itttt	gt
 800e330:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e334:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e338:	fa09 f303 	lslgt.w	r3, r9, r3
 800e33c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e340:	bfda      	itte	le
 800e342:	f1c3 0320 	rsble	r3, r3, #32
 800e346:	fa06 f003 	lslle.w	r0, r6, r3
 800e34a:	4318      	orrgt	r0, r3
 800e34c:	f7f2 f8e2 	bl	8000514 <__aeabi_ui2d>
 800e350:	2301      	movs	r3, #1
 800e352:	4606      	mov	r6, r0
 800e354:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e358:	3d01      	subs	r5, #1
 800e35a:	9310      	str	r3, [sp, #64]	; 0x40
 800e35c:	e771      	b.n	800e242 <_dtoa_r+0x11a>
 800e35e:	2301      	movs	r3, #1
 800e360:	e7b6      	b.n	800e2d0 <_dtoa_r+0x1a8>
 800e362:	900e      	str	r0, [sp, #56]	; 0x38
 800e364:	e7b5      	b.n	800e2d2 <_dtoa_r+0x1aa>
 800e366:	f1ca 0300 	rsb	r3, sl, #0
 800e36a:	9306      	str	r3, [sp, #24]
 800e36c:	2300      	movs	r3, #0
 800e36e:	eba8 080a 	sub.w	r8, r8, sl
 800e372:	930d      	str	r3, [sp, #52]	; 0x34
 800e374:	e7c2      	b.n	800e2fc <_dtoa_r+0x1d4>
 800e376:	2300      	movs	r3, #0
 800e378:	9308      	str	r3, [sp, #32]
 800e37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	dc39      	bgt.n	800e3f4 <_dtoa_r+0x2cc>
 800e380:	f04f 0901 	mov.w	r9, #1
 800e384:	f8cd 9004 	str.w	r9, [sp, #4]
 800e388:	464b      	mov	r3, r9
 800e38a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e38e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e390:	2200      	movs	r2, #0
 800e392:	6042      	str	r2, [r0, #4]
 800e394:	2204      	movs	r2, #4
 800e396:	f102 0614 	add.w	r6, r2, #20
 800e39a:	429e      	cmp	r6, r3
 800e39c:	6841      	ldr	r1, [r0, #4]
 800e39e:	d92f      	bls.n	800e400 <_dtoa_r+0x2d8>
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f001 f941 	bl	800f628 <_Balloc>
 800e3a6:	9000      	str	r0, [sp, #0]
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d14b      	bne.n	800e444 <_dtoa_r+0x31c>
 800e3ac:	4b24      	ldr	r3, [pc, #144]	; (800e440 <_dtoa_r+0x318>)
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e3b4:	e6d1      	b.n	800e15a <_dtoa_r+0x32>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e7de      	b.n	800e378 <_dtoa_r+0x250>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	9308      	str	r3, [sp, #32]
 800e3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c0:	eb0a 0903 	add.w	r9, sl, r3
 800e3c4:	f109 0301 	add.w	r3, r9, #1
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	bfb8      	it	lt
 800e3ce:	2301      	movlt	r3, #1
 800e3d0:	e7dd      	b.n	800e38e <_dtoa_r+0x266>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e7f2      	b.n	800e3bc <_dtoa_r+0x294>
 800e3d6:	2501      	movs	r5, #1
 800e3d8:	2300      	movs	r3, #0
 800e3da:	9305      	str	r3, [sp, #20]
 800e3dc:	9508      	str	r5, [sp, #32]
 800e3de:	f04f 39ff 	mov.w	r9, #4294967295
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e3e8:	2312      	movs	r3, #18
 800e3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e3ec:	e7cf      	b.n	800e38e <_dtoa_r+0x266>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	9308      	str	r3, [sp, #32]
 800e3f2:	e7f4      	b.n	800e3de <_dtoa_r+0x2b6>
 800e3f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e3f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e3fc:	464b      	mov	r3, r9
 800e3fe:	e7c6      	b.n	800e38e <_dtoa_r+0x266>
 800e400:	3101      	adds	r1, #1
 800e402:	6041      	str	r1, [r0, #4]
 800e404:	0052      	lsls	r2, r2, #1
 800e406:	e7c6      	b.n	800e396 <_dtoa_r+0x26e>
 800e408:	636f4361 	.word	0x636f4361
 800e40c:	3fd287a7 	.word	0x3fd287a7
 800e410:	8b60c8b3 	.word	0x8b60c8b3
 800e414:	3fc68a28 	.word	0x3fc68a28
 800e418:	509f79fb 	.word	0x509f79fb
 800e41c:	3fd34413 	.word	0x3fd34413
 800e420:	08011f3e 	.word	0x08011f3e
 800e424:	08011f55 	.word	0x08011f55
 800e428:	7ff00000 	.word	0x7ff00000
 800e42c:	08011f3a 	.word	0x08011f3a
 800e430:	08011f31 	.word	0x08011f31
 800e434:	08011db5 	.word	0x08011db5
 800e438:	3ff80000 	.word	0x3ff80000
 800e43c:	08012130 	.word	0x08012130
 800e440:	08011fb4 	.word	0x08011fb4
 800e444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e446:	9a00      	ldr	r2, [sp, #0]
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	9b01      	ldr	r3, [sp, #4]
 800e44c:	2b0e      	cmp	r3, #14
 800e44e:	f200 80ad 	bhi.w	800e5ac <_dtoa_r+0x484>
 800e452:	2d00      	cmp	r5, #0
 800e454:	f000 80aa 	beq.w	800e5ac <_dtoa_r+0x484>
 800e458:	f1ba 0f00 	cmp.w	sl, #0
 800e45c:	dd36      	ble.n	800e4cc <_dtoa_r+0x3a4>
 800e45e:	4ac3      	ldr	r2, [pc, #780]	; (800e76c <_dtoa_r+0x644>)
 800e460:	f00a 030f 	and.w	r3, sl, #15
 800e464:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e468:	ed93 7b00 	vldr	d7, [r3]
 800e46c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e470:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e474:	eeb0 8a47 	vmov.f32	s16, s14
 800e478:	eef0 8a67 	vmov.f32	s17, s15
 800e47c:	d016      	beq.n	800e4ac <_dtoa_r+0x384>
 800e47e:	4bbc      	ldr	r3, [pc, #752]	; (800e770 <_dtoa_r+0x648>)
 800e480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e488:	f7f2 f9e8 	bl	800085c <__aeabi_ddiv>
 800e48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e490:	f007 070f 	and.w	r7, r7, #15
 800e494:	2503      	movs	r5, #3
 800e496:	4eb6      	ldr	r6, [pc, #728]	; (800e770 <_dtoa_r+0x648>)
 800e498:	b957      	cbnz	r7, 800e4b0 <_dtoa_r+0x388>
 800e49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e49e:	ec53 2b18 	vmov	r2, r3, d8
 800e4a2:	f7f2 f9db 	bl	800085c <__aeabi_ddiv>
 800e4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4aa:	e029      	b.n	800e500 <_dtoa_r+0x3d8>
 800e4ac:	2502      	movs	r5, #2
 800e4ae:	e7f2      	b.n	800e496 <_dtoa_r+0x36e>
 800e4b0:	07f9      	lsls	r1, r7, #31
 800e4b2:	d508      	bpl.n	800e4c6 <_dtoa_r+0x39e>
 800e4b4:	ec51 0b18 	vmov	r0, r1, d8
 800e4b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e4bc:	f7f2 f8a4 	bl	8000608 <__aeabi_dmul>
 800e4c0:	ec41 0b18 	vmov	d8, r0, r1
 800e4c4:	3501      	adds	r5, #1
 800e4c6:	107f      	asrs	r7, r7, #1
 800e4c8:	3608      	adds	r6, #8
 800e4ca:	e7e5      	b.n	800e498 <_dtoa_r+0x370>
 800e4cc:	f000 80a6 	beq.w	800e61c <_dtoa_r+0x4f4>
 800e4d0:	f1ca 0600 	rsb	r6, sl, #0
 800e4d4:	4ba5      	ldr	r3, [pc, #660]	; (800e76c <_dtoa_r+0x644>)
 800e4d6:	4fa6      	ldr	r7, [pc, #664]	; (800e770 <_dtoa_r+0x648>)
 800e4d8:	f006 020f 	and.w	r2, r6, #15
 800e4dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e4e8:	f7f2 f88e 	bl	8000608 <__aeabi_dmul>
 800e4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f0:	1136      	asrs	r6, r6, #4
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2502      	movs	r5, #2
 800e4f6:	2e00      	cmp	r6, #0
 800e4f8:	f040 8085 	bne.w	800e606 <_dtoa_r+0x4de>
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1d2      	bne.n	800e4a6 <_dtoa_r+0x37e>
 800e500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 808c 	beq.w	800e620 <_dtoa_r+0x4f8>
 800e508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e50c:	4b99      	ldr	r3, [pc, #612]	; (800e774 <_dtoa_r+0x64c>)
 800e50e:	2200      	movs	r2, #0
 800e510:	4630      	mov	r0, r6
 800e512:	4639      	mov	r1, r7
 800e514:	f7f2 faea 	bl	8000aec <__aeabi_dcmplt>
 800e518:	2800      	cmp	r0, #0
 800e51a:	f000 8081 	beq.w	800e620 <_dtoa_r+0x4f8>
 800e51e:	9b01      	ldr	r3, [sp, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d07d      	beq.n	800e620 <_dtoa_r+0x4f8>
 800e524:	f1b9 0f00 	cmp.w	r9, #0
 800e528:	dd3c      	ble.n	800e5a4 <_dtoa_r+0x47c>
 800e52a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e52e:	9307      	str	r3, [sp, #28]
 800e530:	2200      	movs	r2, #0
 800e532:	4b91      	ldr	r3, [pc, #580]	; (800e778 <_dtoa_r+0x650>)
 800e534:	4630      	mov	r0, r6
 800e536:	4639      	mov	r1, r7
 800e538:	f7f2 f866 	bl	8000608 <__aeabi_dmul>
 800e53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e540:	3501      	adds	r5, #1
 800e542:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e54a:	4628      	mov	r0, r5
 800e54c:	f7f1 fff2 	bl	8000534 <__aeabi_i2d>
 800e550:	4632      	mov	r2, r6
 800e552:	463b      	mov	r3, r7
 800e554:	f7f2 f858 	bl	8000608 <__aeabi_dmul>
 800e558:	4b88      	ldr	r3, [pc, #544]	; (800e77c <_dtoa_r+0x654>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	f7f1 fe9e 	bl	800029c <__adddf3>
 800e560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e568:	9303      	str	r3, [sp, #12]
 800e56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d15c      	bne.n	800e62a <_dtoa_r+0x502>
 800e570:	4b83      	ldr	r3, [pc, #524]	; (800e780 <_dtoa_r+0x658>)
 800e572:	2200      	movs	r2, #0
 800e574:	4630      	mov	r0, r6
 800e576:	4639      	mov	r1, r7
 800e578:	f7f1 fe8e 	bl	8000298 <__aeabi_dsub>
 800e57c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	f7f2 fad0 	bl	8000b28 <__aeabi_dcmpgt>
 800e588:	2800      	cmp	r0, #0
 800e58a:	f040 8296 	bne.w	800eaba <_dtoa_r+0x992>
 800e58e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e592:	4630      	mov	r0, r6
 800e594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f2 faa7 	bl	8000aec <__aeabi_dcmplt>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	f040 8288 	bne.w	800eab4 <_dtoa_r+0x98c>
 800e5a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e5a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f2c0 8158 	blt.w	800e864 <_dtoa_r+0x73c>
 800e5b4:	f1ba 0f0e 	cmp.w	sl, #14
 800e5b8:	f300 8154 	bgt.w	800e864 <_dtoa_r+0x73c>
 800e5bc:	4b6b      	ldr	r3, [pc, #428]	; (800e76c <_dtoa_r+0x644>)
 800e5be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f280 80e3 	bge.w	800e794 <_dtoa_r+0x66c>
 800e5ce:	9b01      	ldr	r3, [sp, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f300 80df 	bgt.w	800e794 <_dtoa_r+0x66c>
 800e5d6:	f040 826d 	bne.w	800eab4 <_dtoa_r+0x98c>
 800e5da:	4b69      	ldr	r3, [pc, #420]	; (800e780 <_dtoa_r+0x658>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	f7f2 f811 	bl	8000608 <__aeabi_dmul>
 800e5e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5ea:	f7f2 fa93 	bl	8000b14 <__aeabi_dcmpge>
 800e5ee:	9e01      	ldr	r6, [sp, #4]
 800e5f0:	4637      	mov	r7, r6
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f040 8243 	bne.w	800ea7e <_dtoa_r+0x956>
 800e5f8:	9d00      	ldr	r5, [sp, #0]
 800e5fa:	2331      	movs	r3, #49	; 0x31
 800e5fc:	f805 3b01 	strb.w	r3, [r5], #1
 800e600:	f10a 0a01 	add.w	sl, sl, #1
 800e604:	e23f      	b.n	800ea86 <_dtoa_r+0x95e>
 800e606:	07f2      	lsls	r2, r6, #31
 800e608:	d505      	bpl.n	800e616 <_dtoa_r+0x4ee>
 800e60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e60e:	f7f1 fffb 	bl	8000608 <__aeabi_dmul>
 800e612:	3501      	adds	r5, #1
 800e614:	2301      	movs	r3, #1
 800e616:	1076      	asrs	r6, r6, #1
 800e618:	3708      	adds	r7, #8
 800e61a:	e76c      	b.n	800e4f6 <_dtoa_r+0x3ce>
 800e61c:	2502      	movs	r5, #2
 800e61e:	e76f      	b.n	800e500 <_dtoa_r+0x3d8>
 800e620:	9b01      	ldr	r3, [sp, #4]
 800e622:	f8cd a01c 	str.w	sl, [sp, #28]
 800e626:	930c      	str	r3, [sp, #48]	; 0x30
 800e628:	e78d      	b.n	800e546 <_dtoa_r+0x41e>
 800e62a:	9900      	ldr	r1, [sp, #0]
 800e62c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e62e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e630:	4b4e      	ldr	r3, [pc, #312]	; (800e76c <_dtoa_r+0x644>)
 800e632:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e636:	4401      	add	r1, r0
 800e638:	9102      	str	r1, [sp, #8]
 800e63a:	9908      	ldr	r1, [sp, #32]
 800e63c:	eeb0 8a47 	vmov.f32	s16, s14
 800e640:	eef0 8a67 	vmov.f32	s17, s15
 800e644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e64c:	2900      	cmp	r1, #0
 800e64e:	d045      	beq.n	800e6dc <_dtoa_r+0x5b4>
 800e650:	494c      	ldr	r1, [pc, #304]	; (800e784 <_dtoa_r+0x65c>)
 800e652:	2000      	movs	r0, #0
 800e654:	f7f2 f902 	bl	800085c <__aeabi_ddiv>
 800e658:	ec53 2b18 	vmov	r2, r3, d8
 800e65c:	f7f1 fe1c 	bl	8000298 <__aeabi_dsub>
 800e660:	9d00      	ldr	r5, [sp, #0]
 800e662:	ec41 0b18 	vmov	d8, r0, r1
 800e666:	4639      	mov	r1, r7
 800e668:	4630      	mov	r0, r6
 800e66a:	f7f2 fa7d 	bl	8000b68 <__aeabi_d2iz>
 800e66e:	900c      	str	r0, [sp, #48]	; 0x30
 800e670:	f7f1 ff60 	bl	8000534 <__aeabi_i2d>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4630      	mov	r0, r6
 800e67a:	4639      	mov	r1, r7
 800e67c:	f7f1 fe0c 	bl	8000298 <__aeabi_dsub>
 800e680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e682:	3330      	adds	r3, #48	; 0x30
 800e684:	f805 3b01 	strb.w	r3, [r5], #1
 800e688:	ec53 2b18 	vmov	r2, r3, d8
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	f7f2 fa2c 	bl	8000aec <__aeabi_dcmplt>
 800e694:	2800      	cmp	r0, #0
 800e696:	d165      	bne.n	800e764 <_dtoa_r+0x63c>
 800e698:	4632      	mov	r2, r6
 800e69a:	463b      	mov	r3, r7
 800e69c:	4935      	ldr	r1, [pc, #212]	; (800e774 <_dtoa_r+0x64c>)
 800e69e:	2000      	movs	r0, #0
 800e6a0:	f7f1 fdfa 	bl	8000298 <__aeabi_dsub>
 800e6a4:	ec53 2b18 	vmov	r2, r3, d8
 800e6a8:	f7f2 fa20 	bl	8000aec <__aeabi_dcmplt>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f040 80b9 	bne.w	800e824 <_dtoa_r+0x6fc>
 800e6b2:	9b02      	ldr	r3, [sp, #8]
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	f43f af75 	beq.w	800e5a4 <_dtoa_r+0x47c>
 800e6ba:	4b2f      	ldr	r3, [pc, #188]	; (800e778 <_dtoa_r+0x650>)
 800e6bc:	ec51 0b18 	vmov	r0, r1, d8
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f7f1 ffa1 	bl	8000608 <__aeabi_dmul>
 800e6c6:	4b2c      	ldr	r3, [pc, #176]	; (800e778 <_dtoa_r+0x650>)
 800e6c8:	ec41 0b18 	vmov	d8, r0, r1
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	f7f1 ff99 	bl	8000608 <__aeabi_dmul>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	460f      	mov	r7, r1
 800e6da:	e7c4      	b.n	800e666 <_dtoa_r+0x53e>
 800e6dc:	ec51 0b17 	vmov	r0, r1, d7
 800e6e0:	f7f1 ff92 	bl	8000608 <__aeabi_dmul>
 800e6e4:	9b02      	ldr	r3, [sp, #8]
 800e6e6:	9d00      	ldr	r5, [sp, #0]
 800e6e8:	930c      	str	r3, [sp, #48]	; 0x30
 800e6ea:	ec41 0b18 	vmov	d8, r0, r1
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7f2 fa39 	bl	8000b68 <__aeabi_d2iz>
 800e6f6:	9011      	str	r0, [sp, #68]	; 0x44
 800e6f8:	f7f1 ff1c 	bl	8000534 <__aeabi_i2d>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4630      	mov	r0, r6
 800e702:	4639      	mov	r1, r7
 800e704:	f7f1 fdc8 	bl	8000298 <__aeabi_dsub>
 800e708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e70a:	3330      	adds	r3, #48	; 0x30
 800e70c:	f805 3b01 	strb.w	r3, [r5], #1
 800e710:	9b02      	ldr	r3, [sp, #8]
 800e712:	429d      	cmp	r5, r3
 800e714:	4606      	mov	r6, r0
 800e716:	460f      	mov	r7, r1
 800e718:	f04f 0200 	mov.w	r2, #0
 800e71c:	d134      	bne.n	800e788 <_dtoa_r+0x660>
 800e71e:	4b19      	ldr	r3, [pc, #100]	; (800e784 <_dtoa_r+0x65c>)
 800e720:	ec51 0b18 	vmov	r0, r1, d8
 800e724:	f7f1 fdba 	bl	800029c <__adddf3>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4630      	mov	r0, r6
 800e72e:	4639      	mov	r1, r7
 800e730:	f7f2 f9fa 	bl	8000b28 <__aeabi_dcmpgt>
 800e734:	2800      	cmp	r0, #0
 800e736:	d175      	bne.n	800e824 <_dtoa_r+0x6fc>
 800e738:	ec53 2b18 	vmov	r2, r3, d8
 800e73c:	4911      	ldr	r1, [pc, #68]	; (800e784 <_dtoa_r+0x65c>)
 800e73e:	2000      	movs	r0, #0
 800e740:	f7f1 fdaa 	bl	8000298 <__aeabi_dsub>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4630      	mov	r0, r6
 800e74a:	4639      	mov	r1, r7
 800e74c:	f7f2 f9ce 	bl	8000aec <__aeabi_dcmplt>
 800e750:	2800      	cmp	r0, #0
 800e752:	f43f af27 	beq.w	800e5a4 <_dtoa_r+0x47c>
 800e756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e758:	1e6b      	subs	r3, r5, #1
 800e75a:	930c      	str	r3, [sp, #48]	; 0x30
 800e75c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e760:	2b30      	cmp	r3, #48	; 0x30
 800e762:	d0f8      	beq.n	800e756 <_dtoa_r+0x62e>
 800e764:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e768:	e04a      	b.n	800e800 <_dtoa_r+0x6d8>
 800e76a:	bf00      	nop
 800e76c:	08012130 	.word	0x08012130
 800e770:	08012108 	.word	0x08012108
 800e774:	3ff00000 	.word	0x3ff00000
 800e778:	40240000 	.word	0x40240000
 800e77c:	401c0000 	.word	0x401c0000
 800e780:	40140000 	.word	0x40140000
 800e784:	3fe00000 	.word	0x3fe00000
 800e788:	4baf      	ldr	r3, [pc, #700]	; (800ea48 <_dtoa_r+0x920>)
 800e78a:	f7f1 ff3d 	bl	8000608 <__aeabi_dmul>
 800e78e:	4606      	mov	r6, r0
 800e790:	460f      	mov	r7, r1
 800e792:	e7ac      	b.n	800e6ee <_dtoa_r+0x5c6>
 800e794:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e798:	9d00      	ldr	r5, [sp, #0]
 800e79a:	4642      	mov	r2, r8
 800e79c:	464b      	mov	r3, r9
 800e79e:	4630      	mov	r0, r6
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	f7f2 f85b 	bl	800085c <__aeabi_ddiv>
 800e7a6:	f7f2 f9df 	bl	8000b68 <__aeabi_d2iz>
 800e7aa:	9002      	str	r0, [sp, #8]
 800e7ac:	f7f1 fec2 	bl	8000534 <__aeabi_i2d>
 800e7b0:	4642      	mov	r2, r8
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	f7f1 ff28 	bl	8000608 <__aeabi_dmul>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	f7f1 fd6a 	bl	8000298 <__aeabi_dsub>
 800e7c4:	9e02      	ldr	r6, [sp, #8]
 800e7c6:	9f01      	ldr	r7, [sp, #4]
 800e7c8:	3630      	adds	r6, #48	; 0x30
 800e7ca:	f805 6b01 	strb.w	r6, [r5], #1
 800e7ce:	9e00      	ldr	r6, [sp, #0]
 800e7d0:	1bae      	subs	r6, r5, r6
 800e7d2:	42b7      	cmp	r7, r6
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	d137      	bne.n	800e84a <_dtoa_r+0x722>
 800e7da:	f7f1 fd5f 	bl	800029c <__adddf3>
 800e7de:	4642      	mov	r2, r8
 800e7e0:	464b      	mov	r3, r9
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	460f      	mov	r7, r1
 800e7e6:	f7f2 f99f 	bl	8000b28 <__aeabi_dcmpgt>
 800e7ea:	b9c8      	cbnz	r0, 800e820 <_dtoa_r+0x6f8>
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	464b      	mov	r3, r9
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f2 f970 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7f8:	b110      	cbz	r0, 800e800 <_dtoa_r+0x6d8>
 800e7fa:	9b02      	ldr	r3, [sp, #8]
 800e7fc:	07d9      	lsls	r1, r3, #31
 800e7fe:	d40f      	bmi.n	800e820 <_dtoa_r+0x6f8>
 800e800:	4620      	mov	r0, r4
 800e802:	4659      	mov	r1, fp
 800e804:	f000 ff50 	bl	800f6a8 <_Bfree>
 800e808:	2300      	movs	r3, #0
 800e80a:	702b      	strb	r3, [r5, #0]
 800e80c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e80e:	f10a 0001 	add.w	r0, sl, #1
 800e812:	6018      	str	r0, [r3, #0]
 800e814:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e816:	2b00      	cmp	r3, #0
 800e818:	f43f acd8 	beq.w	800e1cc <_dtoa_r+0xa4>
 800e81c:	601d      	str	r5, [r3, #0]
 800e81e:	e4d5      	b.n	800e1cc <_dtoa_r+0xa4>
 800e820:	f8cd a01c 	str.w	sl, [sp, #28]
 800e824:	462b      	mov	r3, r5
 800e826:	461d      	mov	r5, r3
 800e828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e82c:	2a39      	cmp	r2, #57	; 0x39
 800e82e:	d108      	bne.n	800e842 <_dtoa_r+0x71a>
 800e830:	9a00      	ldr	r2, [sp, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d1f7      	bne.n	800e826 <_dtoa_r+0x6fe>
 800e836:	9a07      	ldr	r2, [sp, #28]
 800e838:	9900      	ldr	r1, [sp, #0]
 800e83a:	3201      	adds	r2, #1
 800e83c:	9207      	str	r2, [sp, #28]
 800e83e:	2230      	movs	r2, #48	; 0x30
 800e840:	700a      	strb	r2, [r1, #0]
 800e842:	781a      	ldrb	r2, [r3, #0]
 800e844:	3201      	adds	r2, #1
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	e78c      	b.n	800e764 <_dtoa_r+0x63c>
 800e84a:	4b7f      	ldr	r3, [pc, #508]	; (800ea48 <_dtoa_r+0x920>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	f7f1 fedb 	bl	8000608 <__aeabi_dmul>
 800e852:	2200      	movs	r2, #0
 800e854:	2300      	movs	r3, #0
 800e856:	4606      	mov	r6, r0
 800e858:	460f      	mov	r7, r1
 800e85a:	f7f2 f93d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e85e:	2800      	cmp	r0, #0
 800e860:	d09b      	beq.n	800e79a <_dtoa_r+0x672>
 800e862:	e7cd      	b.n	800e800 <_dtoa_r+0x6d8>
 800e864:	9a08      	ldr	r2, [sp, #32]
 800e866:	2a00      	cmp	r2, #0
 800e868:	f000 80c4 	beq.w	800e9f4 <_dtoa_r+0x8cc>
 800e86c:	9a05      	ldr	r2, [sp, #20]
 800e86e:	2a01      	cmp	r2, #1
 800e870:	f300 80a8 	bgt.w	800e9c4 <_dtoa_r+0x89c>
 800e874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e876:	2a00      	cmp	r2, #0
 800e878:	f000 80a0 	beq.w	800e9bc <_dtoa_r+0x894>
 800e87c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e880:	9e06      	ldr	r6, [sp, #24]
 800e882:	4645      	mov	r5, r8
 800e884:	9a04      	ldr	r2, [sp, #16]
 800e886:	2101      	movs	r1, #1
 800e888:	441a      	add	r2, r3
 800e88a:	4620      	mov	r0, r4
 800e88c:	4498      	add	r8, r3
 800e88e:	9204      	str	r2, [sp, #16]
 800e890:	f001 f810 	bl	800f8b4 <__i2b>
 800e894:	4607      	mov	r7, r0
 800e896:	2d00      	cmp	r5, #0
 800e898:	dd0b      	ble.n	800e8b2 <_dtoa_r+0x78a>
 800e89a:	9b04      	ldr	r3, [sp, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dd08      	ble.n	800e8b2 <_dtoa_r+0x78a>
 800e8a0:	42ab      	cmp	r3, r5
 800e8a2:	9a04      	ldr	r2, [sp, #16]
 800e8a4:	bfa8      	it	ge
 800e8a6:	462b      	movge	r3, r5
 800e8a8:	eba8 0803 	sub.w	r8, r8, r3
 800e8ac:	1aed      	subs	r5, r5, r3
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	9304      	str	r3, [sp, #16]
 800e8b2:	9b06      	ldr	r3, [sp, #24]
 800e8b4:	b1fb      	cbz	r3, 800e8f6 <_dtoa_r+0x7ce>
 800e8b6:	9b08      	ldr	r3, [sp, #32]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 809f 	beq.w	800e9fc <_dtoa_r+0x8d4>
 800e8be:	2e00      	cmp	r6, #0
 800e8c0:	dd11      	ble.n	800e8e6 <_dtoa_r+0x7be>
 800e8c2:	4639      	mov	r1, r7
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f001 f8b0 	bl	800fa2c <__pow5mult>
 800e8cc:	465a      	mov	r2, fp
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4607      	mov	r7, r0
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f001 f804 	bl	800f8e0 <__multiply>
 800e8d8:	4659      	mov	r1, fp
 800e8da:	9007      	str	r0, [sp, #28]
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f000 fee3 	bl	800f6a8 <_Bfree>
 800e8e2:	9b07      	ldr	r3, [sp, #28]
 800e8e4:	469b      	mov	fp, r3
 800e8e6:	9b06      	ldr	r3, [sp, #24]
 800e8e8:	1b9a      	subs	r2, r3, r6
 800e8ea:	d004      	beq.n	800e8f6 <_dtoa_r+0x7ce>
 800e8ec:	4659      	mov	r1, fp
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f001 f89c 	bl	800fa2c <__pow5mult>
 800e8f4:	4683      	mov	fp, r0
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 ffdb 	bl	800f8b4 <__i2b>
 800e8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e900:	2b00      	cmp	r3, #0
 800e902:	4606      	mov	r6, r0
 800e904:	dd7c      	ble.n	800ea00 <_dtoa_r+0x8d8>
 800e906:	461a      	mov	r2, r3
 800e908:	4601      	mov	r1, r0
 800e90a:	4620      	mov	r0, r4
 800e90c:	f001 f88e 	bl	800fa2c <__pow5mult>
 800e910:	9b05      	ldr	r3, [sp, #20]
 800e912:	2b01      	cmp	r3, #1
 800e914:	4606      	mov	r6, r0
 800e916:	dd76      	ble.n	800ea06 <_dtoa_r+0x8de>
 800e918:	2300      	movs	r3, #0
 800e91a:	9306      	str	r3, [sp, #24]
 800e91c:	6933      	ldr	r3, [r6, #16]
 800e91e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e922:	6918      	ldr	r0, [r3, #16]
 800e924:	f000 ff76 	bl	800f814 <__hi0bits>
 800e928:	f1c0 0020 	rsb	r0, r0, #32
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	4418      	add	r0, r3
 800e930:	f010 001f 	ands.w	r0, r0, #31
 800e934:	f000 8086 	beq.w	800ea44 <_dtoa_r+0x91c>
 800e938:	f1c0 0320 	rsb	r3, r0, #32
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	dd7f      	ble.n	800ea40 <_dtoa_r+0x918>
 800e940:	f1c0 001c 	rsb	r0, r0, #28
 800e944:	9b04      	ldr	r3, [sp, #16]
 800e946:	4403      	add	r3, r0
 800e948:	4480      	add	r8, r0
 800e94a:	4405      	add	r5, r0
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	f1b8 0f00 	cmp.w	r8, #0
 800e952:	dd05      	ble.n	800e960 <_dtoa_r+0x838>
 800e954:	4659      	mov	r1, fp
 800e956:	4642      	mov	r2, r8
 800e958:	4620      	mov	r0, r4
 800e95a:	f001 f8c1 	bl	800fae0 <__lshift>
 800e95e:	4683      	mov	fp, r0
 800e960:	9b04      	ldr	r3, [sp, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd05      	ble.n	800e972 <_dtoa_r+0x84a>
 800e966:	4631      	mov	r1, r6
 800e968:	461a      	mov	r2, r3
 800e96a:	4620      	mov	r0, r4
 800e96c:	f001 f8b8 	bl	800fae0 <__lshift>
 800e970:	4606      	mov	r6, r0
 800e972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e974:	2b00      	cmp	r3, #0
 800e976:	d069      	beq.n	800ea4c <_dtoa_r+0x924>
 800e978:	4631      	mov	r1, r6
 800e97a:	4658      	mov	r0, fp
 800e97c:	f001 f91c 	bl	800fbb8 <__mcmp>
 800e980:	2800      	cmp	r0, #0
 800e982:	da63      	bge.n	800ea4c <_dtoa_r+0x924>
 800e984:	2300      	movs	r3, #0
 800e986:	4659      	mov	r1, fp
 800e988:	220a      	movs	r2, #10
 800e98a:	4620      	mov	r0, r4
 800e98c:	f000 feae 	bl	800f6ec <__multadd>
 800e990:	9b08      	ldr	r3, [sp, #32]
 800e992:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e996:	4683      	mov	fp, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f000 818f 	beq.w	800ecbc <_dtoa_r+0xb94>
 800e99e:	4639      	mov	r1, r7
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	220a      	movs	r2, #10
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 fea1 	bl	800f6ec <__multadd>
 800e9aa:	f1b9 0f00 	cmp.w	r9, #0
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	f300 808e 	bgt.w	800ead0 <_dtoa_r+0x9a8>
 800e9b4:	9b05      	ldr	r3, [sp, #20]
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	dc50      	bgt.n	800ea5c <_dtoa_r+0x934>
 800e9ba:	e089      	b.n	800ead0 <_dtoa_r+0x9a8>
 800e9bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e9c2:	e75d      	b.n	800e880 <_dtoa_r+0x758>
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	1e5e      	subs	r6, r3, #1
 800e9c8:	9b06      	ldr	r3, [sp, #24]
 800e9ca:	42b3      	cmp	r3, r6
 800e9cc:	bfbf      	itttt	lt
 800e9ce:	9b06      	ldrlt	r3, [sp, #24]
 800e9d0:	9606      	strlt	r6, [sp, #24]
 800e9d2:	1af2      	sublt	r2, r6, r3
 800e9d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e9d6:	bfb6      	itet	lt
 800e9d8:	189b      	addlt	r3, r3, r2
 800e9da:	1b9e      	subge	r6, r3, r6
 800e9dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e9de:	9b01      	ldr	r3, [sp, #4]
 800e9e0:	bfb8      	it	lt
 800e9e2:	2600      	movlt	r6, #0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	bfb5      	itete	lt
 800e9e8:	eba8 0503 	sublt.w	r5, r8, r3
 800e9ec:	9b01      	ldrge	r3, [sp, #4]
 800e9ee:	2300      	movlt	r3, #0
 800e9f0:	4645      	movge	r5, r8
 800e9f2:	e747      	b.n	800e884 <_dtoa_r+0x75c>
 800e9f4:	9e06      	ldr	r6, [sp, #24]
 800e9f6:	9f08      	ldr	r7, [sp, #32]
 800e9f8:	4645      	mov	r5, r8
 800e9fa:	e74c      	b.n	800e896 <_dtoa_r+0x76e>
 800e9fc:	9a06      	ldr	r2, [sp, #24]
 800e9fe:	e775      	b.n	800e8ec <_dtoa_r+0x7c4>
 800ea00:	9b05      	ldr	r3, [sp, #20]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	dc18      	bgt.n	800ea38 <_dtoa_r+0x910>
 800ea06:	9b02      	ldr	r3, [sp, #8]
 800ea08:	b9b3      	cbnz	r3, 800ea38 <_dtoa_r+0x910>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea10:	b9a3      	cbnz	r3, 800ea3c <_dtoa_r+0x914>
 800ea12:	9b03      	ldr	r3, [sp, #12]
 800ea14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea18:	0d1b      	lsrs	r3, r3, #20
 800ea1a:	051b      	lsls	r3, r3, #20
 800ea1c:	b12b      	cbz	r3, 800ea2a <_dtoa_r+0x902>
 800ea1e:	9b04      	ldr	r3, [sp, #16]
 800ea20:	3301      	adds	r3, #1
 800ea22:	9304      	str	r3, [sp, #16]
 800ea24:	f108 0801 	add.w	r8, r8, #1
 800ea28:	2301      	movs	r3, #1
 800ea2a:	9306      	str	r3, [sp, #24]
 800ea2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f47f af74 	bne.w	800e91c <_dtoa_r+0x7f4>
 800ea34:	2001      	movs	r0, #1
 800ea36:	e779      	b.n	800e92c <_dtoa_r+0x804>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	e7f6      	b.n	800ea2a <_dtoa_r+0x902>
 800ea3c:	9b02      	ldr	r3, [sp, #8]
 800ea3e:	e7f4      	b.n	800ea2a <_dtoa_r+0x902>
 800ea40:	d085      	beq.n	800e94e <_dtoa_r+0x826>
 800ea42:	4618      	mov	r0, r3
 800ea44:	301c      	adds	r0, #28
 800ea46:	e77d      	b.n	800e944 <_dtoa_r+0x81c>
 800ea48:	40240000 	.word	0x40240000
 800ea4c:	9b01      	ldr	r3, [sp, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	dc38      	bgt.n	800eac4 <_dtoa_r+0x99c>
 800ea52:	9b05      	ldr	r3, [sp, #20]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	dd35      	ble.n	800eac4 <_dtoa_r+0x99c>
 800ea58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ea5c:	f1b9 0f00 	cmp.w	r9, #0
 800ea60:	d10d      	bne.n	800ea7e <_dtoa_r+0x956>
 800ea62:	4631      	mov	r1, r6
 800ea64:	464b      	mov	r3, r9
 800ea66:	2205      	movs	r2, #5
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 fe3f 	bl	800f6ec <__multadd>
 800ea6e:	4601      	mov	r1, r0
 800ea70:	4606      	mov	r6, r0
 800ea72:	4658      	mov	r0, fp
 800ea74:	f001 f8a0 	bl	800fbb8 <__mcmp>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	f73f adbd 	bgt.w	800e5f8 <_dtoa_r+0x4d0>
 800ea7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea80:	9d00      	ldr	r5, [sp, #0]
 800ea82:	ea6f 0a03 	mvn.w	sl, r3
 800ea86:	f04f 0800 	mov.w	r8, #0
 800ea8a:	4631      	mov	r1, r6
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f000 fe0b 	bl	800f6a8 <_Bfree>
 800ea92:	2f00      	cmp	r7, #0
 800ea94:	f43f aeb4 	beq.w	800e800 <_dtoa_r+0x6d8>
 800ea98:	f1b8 0f00 	cmp.w	r8, #0
 800ea9c:	d005      	beq.n	800eaaa <_dtoa_r+0x982>
 800ea9e:	45b8      	cmp	r8, r7
 800eaa0:	d003      	beq.n	800eaaa <_dtoa_r+0x982>
 800eaa2:	4641      	mov	r1, r8
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f000 fdff 	bl	800f6a8 <_Bfree>
 800eaaa:	4639      	mov	r1, r7
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 fdfb 	bl	800f6a8 <_Bfree>
 800eab2:	e6a5      	b.n	800e800 <_dtoa_r+0x6d8>
 800eab4:	2600      	movs	r6, #0
 800eab6:	4637      	mov	r7, r6
 800eab8:	e7e1      	b.n	800ea7e <_dtoa_r+0x956>
 800eaba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eabc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eac0:	4637      	mov	r7, r6
 800eac2:	e599      	b.n	800e5f8 <_dtoa_r+0x4d0>
 800eac4:	9b08      	ldr	r3, [sp, #32]
 800eac6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 80fd 	beq.w	800ecca <_dtoa_r+0xba2>
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	dd05      	ble.n	800eae0 <_dtoa_r+0x9b8>
 800ead4:	4639      	mov	r1, r7
 800ead6:	462a      	mov	r2, r5
 800ead8:	4620      	mov	r0, r4
 800eada:	f001 f801 	bl	800fae0 <__lshift>
 800eade:	4607      	mov	r7, r0
 800eae0:	9b06      	ldr	r3, [sp, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d05c      	beq.n	800eba0 <_dtoa_r+0xa78>
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fd9d 	bl	800f628 <_Balloc>
 800eaee:	4605      	mov	r5, r0
 800eaf0:	b928      	cbnz	r0, 800eafe <_dtoa_r+0x9d6>
 800eaf2:	4b80      	ldr	r3, [pc, #512]	; (800ecf4 <_dtoa_r+0xbcc>)
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eafa:	f7ff bb2e 	b.w	800e15a <_dtoa_r+0x32>
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	3202      	adds	r2, #2
 800eb02:	0092      	lsls	r2, r2, #2
 800eb04:	f107 010c 	add.w	r1, r7, #12
 800eb08:	300c      	adds	r0, #12
 800eb0a:	f000 fd7f 	bl	800f60c <memcpy>
 800eb0e:	2201      	movs	r2, #1
 800eb10:	4629      	mov	r1, r5
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 ffe4 	bl	800fae0 <__lshift>
 800eb18:	9b00      	ldr	r3, [sp, #0]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	9b00      	ldr	r3, [sp, #0]
 800eb20:	444b      	add	r3, r9
 800eb22:	9307      	str	r3, [sp, #28]
 800eb24:	9b02      	ldr	r3, [sp, #8]
 800eb26:	f003 0301 	and.w	r3, r3, #1
 800eb2a:	46b8      	mov	r8, r7
 800eb2c:	9306      	str	r3, [sp, #24]
 800eb2e:	4607      	mov	r7, r0
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	4631      	mov	r1, r6
 800eb34:	3b01      	subs	r3, #1
 800eb36:	4658      	mov	r0, fp
 800eb38:	9302      	str	r3, [sp, #8]
 800eb3a:	f7ff fa67 	bl	800e00c <quorem>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	3330      	adds	r3, #48	; 0x30
 800eb42:	9004      	str	r0, [sp, #16]
 800eb44:	4641      	mov	r1, r8
 800eb46:	4658      	mov	r0, fp
 800eb48:	9308      	str	r3, [sp, #32]
 800eb4a:	f001 f835 	bl	800fbb8 <__mcmp>
 800eb4e:	463a      	mov	r2, r7
 800eb50:	4681      	mov	r9, r0
 800eb52:	4631      	mov	r1, r6
 800eb54:	4620      	mov	r0, r4
 800eb56:	f001 f84b 	bl	800fbf0 <__mdiff>
 800eb5a:	68c2      	ldr	r2, [r0, #12]
 800eb5c:	9b08      	ldr	r3, [sp, #32]
 800eb5e:	4605      	mov	r5, r0
 800eb60:	bb02      	cbnz	r2, 800eba4 <_dtoa_r+0xa7c>
 800eb62:	4601      	mov	r1, r0
 800eb64:	4658      	mov	r0, fp
 800eb66:	f001 f827 	bl	800fbb8 <__mcmp>
 800eb6a:	9b08      	ldr	r3, [sp, #32]
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4620      	mov	r0, r4
 800eb72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800eb76:	f000 fd97 	bl	800f6a8 <_Bfree>
 800eb7a:	9b05      	ldr	r3, [sp, #20]
 800eb7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb7e:	9d01      	ldr	r5, [sp, #4]
 800eb80:	ea43 0102 	orr.w	r1, r3, r2
 800eb84:	9b06      	ldr	r3, [sp, #24]
 800eb86:	430b      	orrs	r3, r1
 800eb88:	9b08      	ldr	r3, [sp, #32]
 800eb8a:	d10d      	bne.n	800eba8 <_dtoa_r+0xa80>
 800eb8c:	2b39      	cmp	r3, #57	; 0x39
 800eb8e:	d029      	beq.n	800ebe4 <_dtoa_r+0xabc>
 800eb90:	f1b9 0f00 	cmp.w	r9, #0
 800eb94:	dd01      	ble.n	800eb9a <_dtoa_r+0xa72>
 800eb96:	9b04      	ldr	r3, [sp, #16]
 800eb98:	3331      	adds	r3, #49	; 0x31
 800eb9a:	9a02      	ldr	r2, [sp, #8]
 800eb9c:	7013      	strb	r3, [r2, #0]
 800eb9e:	e774      	b.n	800ea8a <_dtoa_r+0x962>
 800eba0:	4638      	mov	r0, r7
 800eba2:	e7b9      	b.n	800eb18 <_dtoa_r+0x9f0>
 800eba4:	2201      	movs	r2, #1
 800eba6:	e7e2      	b.n	800eb6e <_dtoa_r+0xa46>
 800eba8:	f1b9 0f00 	cmp.w	r9, #0
 800ebac:	db06      	blt.n	800ebbc <_dtoa_r+0xa94>
 800ebae:	9905      	ldr	r1, [sp, #20]
 800ebb0:	ea41 0909 	orr.w	r9, r1, r9
 800ebb4:	9906      	ldr	r1, [sp, #24]
 800ebb6:	ea59 0101 	orrs.w	r1, r9, r1
 800ebba:	d120      	bne.n	800ebfe <_dtoa_r+0xad6>
 800ebbc:	2a00      	cmp	r2, #0
 800ebbe:	ddec      	ble.n	800eb9a <_dtoa_r+0xa72>
 800ebc0:	4659      	mov	r1, fp
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	f000 ff8a 	bl	800fae0 <__lshift>
 800ebcc:	4631      	mov	r1, r6
 800ebce:	4683      	mov	fp, r0
 800ebd0:	f000 fff2 	bl	800fbb8 <__mcmp>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	9b01      	ldr	r3, [sp, #4]
 800ebd8:	dc02      	bgt.n	800ebe0 <_dtoa_r+0xab8>
 800ebda:	d1de      	bne.n	800eb9a <_dtoa_r+0xa72>
 800ebdc:	07da      	lsls	r2, r3, #31
 800ebde:	d5dc      	bpl.n	800eb9a <_dtoa_r+0xa72>
 800ebe0:	2b39      	cmp	r3, #57	; 0x39
 800ebe2:	d1d8      	bne.n	800eb96 <_dtoa_r+0xa6e>
 800ebe4:	9a02      	ldr	r2, [sp, #8]
 800ebe6:	2339      	movs	r3, #57	; 0x39
 800ebe8:	7013      	strb	r3, [r2, #0]
 800ebea:	462b      	mov	r3, r5
 800ebec:	461d      	mov	r5, r3
 800ebee:	3b01      	subs	r3, #1
 800ebf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebf4:	2a39      	cmp	r2, #57	; 0x39
 800ebf6:	d050      	beq.n	800ec9a <_dtoa_r+0xb72>
 800ebf8:	3201      	adds	r2, #1
 800ebfa:	701a      	strb	r2, [r3, #0]
 800ebfc:	e745      	b.n	800ea8a <_dtoa_r+0x962>
 800ebfe:	2a00      	cmp	r2, #0
 800ec00:	dd03      	ble.n	800ec0a <_dtoa_r+0xae2>
 800ec02:	2b39      	cmp	r3, #57	; 0x39
 800ec04:	d0ee      	beq.n	800ebe4 <_dtoa_r+0xabc>
 800ec06:	3301      	adds	r3, #1
 800ec08:	e7c7      	b.n	800eb9a <_dtoa_r+0xa72>
 800ec0a:	9a01      	ldr	r2, [sp, #4]
 800ec0c:	9907      	ldr	r1, [sp, #28]
 800ec0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ec12:	428a      	cmp	r2, r1
 800ec14:	d02a      	beq.n	800ec6c <_dtoa_r+0xb44>
 800ec16:	4659      	mov	r1, fp
 800ec18:	2300      	movs	r3, #0
 800ec1a:	220a      	movs	r2, #10
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fd65 	bl	800f6ec <__multadd>
 800ec22:	45b8      	cmp	r8, r7
 800ec24:	4683      	mov	fp, r0
 800ec26:	f04f 0300 	mov.w	r3, #0
 800ec2a:	f04f 020a 	mov.w	r2, #10
 800ec2e:	4641      	mov	r1, r8
 800ec30:	4620      	mov	r0, r4
 800ec32:	d107      	bne.n	800ec44 <_dtoa_r+0xb1c>
 800ec34:	f000 fd5a 	bl	800f6ec <__multadd>
 800ec38:	4680      	mov	r8, r0
 800ec3a:	4607      	mov	r7, r0
 800ec3c:	9b01      	ldr	r3, [sp, #4]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	e775      	b.n	800eb30 <_dtoa_r+0xa08>
 800ec44:	f000 fd52 	bl	800f6ec <__multadd>
 800ec48:	4639      	mov	r1, r7
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	220a      	movs	r2, #10
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 fd4b 	bl	800f6ec <__multadd>
 800ec56:	4607      	mov	r7, r0
 800ec58:	e7f0      	b.n	800ec3c <_dtoa_r+0xb14>
 800ec5a:	f1b9 0f00 	cmp.w	r9, #0
 800ec5e:	9a00      	ldr	r2, [sp, #0]
 800ec60:	bfcc      	ite	gt
 800ec62:	464d      	movgt	r5, r9
 800ec64:	2501      	movle	r5, #1
 800ec66:	4415      	add	r5, r2
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	4659      	mov	r1, fp
 800ec6e:	2201      	movs	r2, #1
 800ec70:	4620      	mov	r0, r4
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	f000 ff34 	bl	800fae0 <__lshift>
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4683      	mov	fp, r0
 800ec7c:	f000 ff9c 	bl	800fbb8 <__mcmp>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	dcb2      	bgt.n	800ebea <_dtoa_r+0xac2>
 800ec84:	d102      	bne.n	800ec8c <_dtoa_r+0xb64>
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	07db      	lsls	r3, r3, #31
 800ec8a:	d4ae      	bmi.n	800ebea <_dtoa_r+0xac2>
 800ec8c:	462b      	mov	r3, r5
 800ec8e:	461d      	mov	r5, r3
 800ec90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec94:	2a30      	cmp	r2, #48	; 0x30
 800ec96:	d0fa      	beq.n	800ec8e <_dtoa_r+0xb66>
 800ec98:	e6f7      	b.n	800ea8a <_dtoa_r+0x962>
 800ec9a:	9a00      	ldr	r2, [sp, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d1a5      	bne.n	800ebec <_dtoa_r+0xac4>
 800eca0:	f10a 0a01 	add.w	sl, sl, #1
 800eca4:	2331      	movs	r3, #49	; 0x31
 800eca6:	e779      	b.n	800eb9c <_dtoa_r+0xa74>
 800eca8:	4b13      	ldr	r3, [pc, #76]	; (800ecf8 <_dtoa_r+0xbd0>)
 800ecaa:	f7ff baaf 	b.w	800e20c <_dtoa_r+0xe4>
 800ecae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f47f aa86 	bne.w	800e1c2 <_dtoa_r+0x9a>
 800ecb6:	4b11      	ldr	r3, [pc, #68]	; (800ecfc <_dtoa_r+0xbd4>)
 800ecb8:	f7ff baa8 	b.w	800e20c <_dtoa_r+0xe4>
 800ecbc:	f1b9 0f00 	cmp.w	r9, #0
 800ecc0:	dc03      	bgt.n	800ecca <_dtoa_r+0xba2>
 800ecc2:	9b05      	ldr	r3, [sp, #20]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	f73f aec9 	bgt.w	800ea5c <_dtoa_r+0x934>
 800ecca:	9d00      	ldr	r5, [sp, #0]
 800eccc:	4631      	mov	r1, r6
 800ecce:	4658      	mov	r0, fp
 800ecd0:	f7ff f99c 	bl	800e00c <quorem>
 800ecd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ecd8:	f805 3b01 	strb.w	r3, [r5], #1
 800ecdc:	9a00      	ldr	r2, [sp, #0]
 800ecde:	1aaa      	subs	r2, r5, r2
 800ece0:	4591      	cmp	r9, r2
 800ece2:	ddba      	ble.n	800ec5a <_dtoa_r+0xb32>
 800ece4:	4659      	mov	r1, fp
 800ece6:	2300      	movs	r3, #0
 800ece8:	220a      	movs	r2, #10
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fcfe 	bl	800f6ec <__multadd>
 800ecf0:	4683      	mov	fp, r0
 800ecf2:	e7eb      	b.n	800eccc <_dtoa_r+0xba4>
 800ecf4:	08011fb4 	.word	0x08011fb4
 800ecf8:	08011db4 	.word	0x08011db4
 800ecfc:	08011f31 	.word	0x08011f31

0800ed00 <std>:
 800ed00:	2300      	movs	r3, #0
 800ed02:	b510      	push	{r4, lr}
 800ed04:	4604      	mov	r4, r0
 800ed06:	e9c0 3300 	strd	r3, r3, [r0]
 800ed0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed0e:	6083      	str	r3, [r0, #8]
 800ed10:	8181      	strh	r1, [r0, #12]
 800ed12:	6643      	str	r3, [r0, #100]	; 0x64
 800ed14:	81c2      	strh	r2, [r0, #14]
 800ed16:	6183      	str	r3, [r0, #24]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	305c      	adds	r0, #92	; 0x5c
 800ed1e:	f7fd fc07 	bl	800c530 <memset>
 800ed22:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <std+0x38>)
 800ed24:	6263      	str	r3, [r4, #36]	; 0x24
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <std+0x3c>)
 800ed28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed2a:	4b05      	ldr	r3, [pc, #20]	; (800ed40 <std+0x40>)
 800ed2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <std+0x44>)
 800ed30:	6224      	str	r4, [r4, #32]
 800ed32:	6323      	str	r3, [r4, #48]	; 0x30
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop
 800ed38:	080106b1 	.word	0x080106b1
 800ed3c:	080106d3 	.word	0x080106d3
 800ed40:	0801070b 	.word	0x0801070b
 800ed44:	0801072f 	.word	0x0801072f

0800ed48 <_cleanup_r>:
 800ed48:	4901      	ldr	r1, [pc, #4]	; (800ed50 <_cleanup_r+0x8>)
 800ed4a:	f000 b8af 	b.w	800eeac <_fwalk_reent>
 800ed4e:	bf00      	nop
 800ed50:	08010a85 	.word	0x08010a85

0800ed54 <__sfmoreglue>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	1e4a      	subs	r2, r1, #1
 800ed58:	2568      	movs	r5, #104	; 0x68
 800ed5a:	4355      	muls	r5, r2
 800ed5c:	460e      	mov	r6, r1
 800ed5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed62:	f001 f97b 	bl	801005c <_malloc_r>
 800ed66:	4604      	mov	r4, r0
 800ed68:	b140      	cbz	r0, 800ed7c <__sfmoreglue+0x28>
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed70:	300c      	adds	r0, #12
 800ed72:	60a0      	str	r0, [r4, #8]
 800ed74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed78:	f7fd fbda 	bl	800c530 <memset>
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}

0800ed80 <__sfp_lock_acquire>:
 800ed80:	4801      	ldr	r0, [pc, #4]	; (800ed88 <__sfp_lock_acquire+0x8>)
 800ed82:	f000 bc26 	b.w	800f5d2 <__retarget_lock_acquire_recursive>
 800ed86:	bf00      	nop
 800ed88:	20000a48 	.word	0x20000a48

0800ed8c <__sfp_lock_release>:
 800ed8c:	4801      	ldr	r0, [pc, #4]	; (800ed94 <__sfp_lock_release+0x8>)
 800ed8e:	f000 bc21 	b.w	800f5d4 <__retarget_lock_release_recursive>
 800ed92:	bf00      	nop
 800ed94:	20000a48 	.word	0x20000a48

0800ed98 <__sinit_lock_acquire>:
 800ed98:	4801      	ldr	r0, [pc, #4]	; (800eda0 <__sinit_lock_acquire+0x8>)
 800ed9a:	f000 bc1a 	b.w	800f5d2 <__retarget_lock_acquire_recursive>
 800ed9e:	bf00      	nop
 800eda0:	20000a43 	.word	0x20000a43

0800eda4 <__sinit_lock_release>:
 800eda4:	4801      	ldr	r0, [pc, #4]	; (800edac <__sinit_lock_release+0x8>)
 800eda6:	f000 bc15 	b.w	800f5d4 <__retarget_lock_release_recursive>
 800edaa:	bf00      	nop
 800edac:	20000a43 	.word	0x20000a43

0800edb0 <__sinit>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	f7ff fff0 	bl	800ed98 <__sinit_lock_acquire>
 800edb8:	69a3      	ldr	r3, [r4, #24]
 800edba:	b11b      	cbz	r3, 800edc4 <__sinit+0x14>
 800edbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc0:	f7ff bff0 	b.w	800eda4 <__sinit_lock_release>
 800edc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edc8:	6523      	str	r3, [r4, #80]	; 0x50
 800edca:	4b13      	ldr	r3, [pc, #76]	; (800ee18 <__sinit+0x68>)
 800edcc:	4a13      	ldr	r2, [pc, #76]	; (800ee1c <__sinit+0x6c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	bf04      	itt	eq
 800edd6:	2301      	moveq	r3, #1
 800edd8:	61a3      	streq	r3, [r4, #24]
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 f820 	bl	800ee20 <__sfp>
 800ede0:	6060      	str	r0, [r4, #4]
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 f81c 	bl	800ee20 <__sfp>
 800ede8:	60a0      	str	r0, [r4, #8]
 800edea:	4620      	mov	r0, r4
 800edec:	f000 f818 	bl	800ee20 <__sfp>
 800edf0:	2200      	movs	r2, #0
 800edf2:	60e0      	str	r0, [r4, #12]
 800edf4:	2104      	movs	r1, #4
 800edf6:	6860      	ldr	r0, [r4, #4]
 800edf8:	f7ff ff82 	bl	800ed00 <std>
 800edfc:	68a0      	ldr	r0, [r4, #8]
 800edfe:	2201      	movs	r2, #1
 800ee00:	2109      	movs	r1, #9
 800ee02:	f7ff ff7d 	bl	800ed00 <std>
 800ee06:	68e0      	ldr	r0, [r4, #12]
 800ee08:	2202      	movs	r2, #2
 800ee0a:	2112      	movs	r1, #18
 800ee0c:	f7ff ff78 	bl	800ed00 <std>
 800ee10:	2301      	movs	r3, #1
 800ee12:	61a3      	str	r3, [r4, #24]
 800ee14:	e7d2      	b.n	800edbc <__sinit+0xc>
 800ee16:	bf00      	nop
 800ee18:	08011da0 	.word	0x08011da0
 800ee1c:	0800ed49 	.word	0x0800ed49

0800ee20 <__sfp>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	4607      	mov	r7, r0
 800ee24:	f7ff ffac 	bl	800ed80 <__sfp_lock_acquire>
 800ee28:	4b1e      	ldr	r3, [pc, #120]	; (800eea4 <__sfp+0x84>)
 800ee2a:	681e      	ldr	r6, [r3, #0]
 800ee2c:	69b3      	ldr	r3, [r6, #24]
 800ee2e:	b913      	cbnz	r3, 800ee36 <__sfp+0x16>
 800ee30:	4630      	mov	r0, r6
 800ee32:	f7ff ffbd 	bl	800edb0 <__sinit>
 800ee36:	3648      	adds	r6, #72	; 0x48
 800ee38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	d503      	bpl.n	800ee48 <__sfp+0x28>
 800ee40:	6833      	ldr	r3, [r6, #0]
 800ee42:	b30b      	cbz	r3, 800ee88 <__sfp+0x68>
 800ee44:	6836      	ldr	r6, [r6, #0]
 800ee46:	e7f7      	b.n	800ee38 <__sfp+0x18>
 800ee48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee4c:	b9d5      	cbnz	r5, 800ee84 <__sfp+0x64>
 800ee4e:	4b16      	ldr	r3, [pc, #88]	; (800eea8 <__sfp+0x88>)
 800ee50:	60e3      	str	r3, [r4, #12]
 800ee52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee56:	6665      	str	r5, [r4, #100]	; 0x64
 800ee58:	f000 fbba 	bl	800f5d0 <__retarget_lock_init_recursive>
 800ee5c:	f7ff ff96 	bl	800ed8c <__sfp_lock_release>
 800ee60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee68:	6025      	str	r5, [r4, #0]
 800ee6a:	61a5      	str	r5, [r4, #24]
 800ee6c:	2208      	movs	r2, #8
 800ee6e:	4629      	mov	r1, r5
 800ee70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee74:	f7fd fb5c 	bl	800c530 <memset>
 800ee78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee80:	4620      	mov	r0, r4
 800ee82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee84:	3468      	adds	r4, #104	; 0x68
 800ee86:	e7d9      	b.n	800ee3c <__sfp+0x1c>
 800ee88:	2104      	movs	r1, #4
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	f7ff ff62 	bl	800ed54 <__sfmoreglue>
 800ee90:	4604      	mov	r4, r0
 800ee92:	6030      	str	r0, [r6, #0]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d1d5      	bne.n	800ee44 <__sfp+0x24>
 800ee98:	f7ff ff78 	bl	800ed8c <__sfp_lock_release>
 800ee9c:	230c      	movs	r3, #12
 800ee9e:	603b      	str	r3, [r7, #0]
 800eea0:	e7ee      	b.n	800ee80 <__sfp+0x60>
 800eea2:	bf00      	nop
 800eea4:	08011da0 	.word	0x08011da0
 800eea8:	ffff0001 	.word	0xffff0001

0800eeac <_fwalk_reent>:
 800eeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	4688      	mov	r8, r1
 800eeb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeb8:	2700      	movs	r7, #0
 800eeba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eebe:	f1b9 0901 	subs.w	r9, r9, #1
 800eec2:	d505      	bpl.n	800eed0 <_fwalk_reent+0x24>
 800eec4:	6824      	ldr	r4, [r4, #0]
 800eec6:	2c00      	cmp	r4, #0
 800eec8:	d1f7      	bne.n	800eeba <_fwalk_reent+0xe>
 800eeca:	4638      	mov	r0, r7
 800eecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eed0:	89ab      	ldrh	r3, [r5, #12]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d907      	bls.n	800eee6 <_fwalk_reent+0x3a>
 800eed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeda:	3301      	adds	r3, #1
 800eedc:	d003      	beq.n	800eee6 <_fwalk_reent+0x3a>
 800eede:	4629      	mov	r1, r5
 800eee0:	4630      	mov	r0, r6
 800eee2:	47c0      	blx	r8
 800eee4:	4307      	orrs	r7, r0
 800eee6:	3568      	adds	r5, #104	; 0x68
 800eee8:	e7e9      	b.n	800eebe <_fwalk_reent+0x12>

0800eeea <rshift>:
 800eeea:	6903      	ldr	r3, [r0, #16]
 800eeec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eef4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eef8:	f100 0414 	add.w	r4, r0, #20
 800eefc:	dd45      	ble.n	800ef8a <rshift+0xa0>
 800eefe:	f011 011f 	ands.w	r1, r1, #31
 800ef02:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef06:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef0a:	d10c      	bne.n	800ef26 <rshift+0x3c>
 800ef0c:	f100 0710 	add.w	r7, r0, #16
 800ef10:	4629      	mov	r1, r5
 800ef12:	42b1      	cmp	r1, r6
 800ef14:	d334      	bcc.n	800ef80 <rshift+0x96>
 800ef16:	1a9b      	subs	r3, r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	1eea      	subs	r2, r5, #3
 800ef1c:	4296      	cmp	r6, r2
 800ef1e:	bf38      	it	cc
 800ef20:	2300      	movcc	r3, #0
 800ef22:	4423      	add	r3, r4
 800ef24:	e015      	b.n	800ef52 <rshift+0x68>
 800ef26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef2a:	f1c1 0820 	rsb	r8, r1, #32
 800ef2e:	40cf      	lsrs	r7, r1
 800ef30:	f105 0e04 	add.w	lr, r5, #4
 800ef34:	46a1      	mov	r9, r4
 800ef36:	4576      	cmp	r6, lr
 800ef38:	46f4      	mov	ip, lr
 800ef3a:	d815      	bhi.n	800ef68 <rshift+0x7e>
 800ef3c:	1a9b      	subs	r3, r3, r2
 800ef3e:	009a      	lsls	r2, r3, #2
 800ef40:	3a04      	subs	r2, #4
 800ef42:	3501      	adds	r5, #1
 800ef44:	42ae      	cmp	r6, r5
 800ef46:	bf38      	it	cc
 800ef48:	2200      	movcc	r2, #0
 800ef4a:	18a3      	adds	r3, r4, r2
 800ef4c:	50a7      	str	r7, [r4, r2]
 800ef4e:	b107      	cbz	r7, 800ef52 <rshift+0x68>
 800ef50:	3304      	adds	r3, #4
 800ef52:	1b1a      	subs	r2, r3, r4
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef5a:	bf08      	it	eq
 800ef5c:	2300      	moveq	r3, #0
 800ef5e:	6102      	str	r2, [r0, #16]
 800ef60:	bf08      	it	eq
 800ef62:	6143      	streq	r3, [r0, #20]
 800ef64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef68:	f8dc c000 	ldr.w	ip, [ip]
 800ef6c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef70:	ea4c 0707 	orr.w	r7, ip, r7
 800ef74:	f849 7b04 	str.w	r7, [r9], #4
 800ef78:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef7c:	40cf      	lsrs	r7, r1
 800ef7e:	e7da      	b.n	800ef36 <rshift+0x4c>
 800ef80:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef84:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef88:	e7c3      	b.n	800ef12 <rshift+0x28>
 800ef8a:	4623      	mov	r3, r4
 800ef8c:	e7e1      	b.n	800ef52 <rshift+0x68>

0800ef8e <__hexdig_fun>:
 800ef8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef92:	2b09      	cmp	r3, #9
 800ef94:	d802      	bhi.n	800ef9c <__hexdig_fun+0xe>
 800ef96:	3820      	subs	r0, #32
 800ef98:	b2c0      	uxtb	r0, r0
 800ef9a:	4770      	bx	lr
 800ef9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efa0:	2b05      	cmp	r3, #5
 800efa2:	d801      	bhi.n	800efa8 <__hexdig_fun+0x1a>
 800efa4:	3847      	subs	r0, #71	; 0x47
 800efa6:	e7f7      	b.n	800ef98 <__hexdig_fun+0xa>
 800efa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efac:	2b05      	cmp	r3, #5
 800efae:	d801      	bhi.n	800efb4 <__hexdig_fun+0x26>
 800efb0:	3827      	subs	r0, #39	; 0x27
 800efb2:	e7f1      	b.n	800ef98 <__hexdig_fun+0xa>
 800efb4:	2000      	movs	r0, #0
 800efb6:	4770      	bx	lr

0800efb8 <__gethex>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	ed2d 8b02 	vpush	{d8}
 800efc0:	b089      	sub	sp, #36	; 0x24
 800efc2:	ee08 0a10 	vmov	s16, r0
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	4bbc      	ldr	r3, [pc, #752]	; (800f2bc <__gethex+0x304>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	4618      	mov	r0, r3
 800efd0:	468b      	mov	fp, r1
 800efd2:	4690      	mov	r8, r2
 800efd4:	f7f1 f904 	bl	80001e0 <strlen>
 800efd8:	9b01      	ldr	r3, [sp, #4]
 800efda:	f8db 2000 	ldr.w	r2, [fp]
 800efde:	4403      	add	r3, r0
 800efe0:	4682      	mov	sl, r0
 800efe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800efe6:	9305      	str	r3, [sp, #20]
 800efe8:	1c93      	adds	r3, r2, #2
 800efea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eff2:	32fe      	adds	r2, #254	; 0xfe
 800eff4:	18d1      	adds	r1, r2, r3
 800eff6:	461f      	mov	r7, r3
 800eff8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800effc:	9100      	str	r1, [sp, #0]
 800effe:	2830      	cmp	r0, #48	; 0x30
 800f000:	d0f8      	beq.n	800eff4 <__gethex+0x3c>
 800f002:	f7ff ffc4 	bl	800ef8e <__hexdig_fun>
 800f006:	4604      	mov	r4, r0
 800f008:	2800      	cmp	r0, #0
 800f00a:	d13a      	bne.n	800f082 <__gethex+0xca>
 800f00c:	9901      	ldr	r1, [sp, #4]
 800f00e:	4652      	mov	r2, sl
 800f010:	4638      	mov	r0, r7
 800f012:	f001 fb90 	bl	8010736 <strncmp>
 800f016:	4605      	mov	r5, r0
 800f018:	2800      	cmp	r0, #0
 800f01a:	d168      	bne.n	800f0ee <__gethex+0x136>
 800f01c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f020:	eb07 060a 	add.w	r6, r7, sl
 800f024:	f7ff ffb3 	bl	800ef8e <__hexdig_fun>
 800f028:	2800      	cmp	r0, #0
 800f02a:	d062      	beq.n	800f0f2 <__gethex+0x13a>
 800f02c:	4633      	mov	r3, r6
 800f02e:	7818      	ldrb	r0, [r3, #0]
 800f030:	2830      	cmp	r0, #48	; 0x30
 800f032:	461f      	mov	r7, r3
 800f034:	f103 0301 	add.w	r3, r3, #1
 800f038:	d0f9      	beq.n	800f02e <__gethex+0x76>
 800f03a:	f7ff ffa8 	bl	800ef8e <__hexdig_fun>
 800f03e:	2301      	movs	r3, #1
 800f040:	fab0 f480 	clz	r4, r0
 800f044:	0964      	lsrs	r4, r4, #5
 800f046:	4635      	mov	r5, r6
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	463a      	mov	r2, r7
 800f04c:	4616      	mov	r6, r2
 800f04e:	3201      	adds	r2, #1
 800f050:	7830      	ldrb	r0, [r6, #0]
 800f052:	f7ff ff9c 	bl	800ef8e <__hexdig_fun>
 800f056:	2800      	cmp	r0, #0
 800f058:	d1f8      	bne.n	800f04c <__gethex+0x94>
 800f05a:	9901      	ldr	r1, [sp, #4]
 800f05c:	4652      	mov	r2, sl
 800f05e:	4630      	mov	r0, r6
 800f060:	f001 fb69 	bl	8010736 <strncmp>
 800f064:	b980      	cbnz	r0, 800f088 <__gethex+0xd0>
 800f066:	b94d      	cbnz	r5, 800f07c <__gethex+0xc4>
 800f068:	eb06 050a 	add.w	r5, r6, sl
 800f06c:	462a      	mov	r2, r5
 800f06e:	4616      	mov	r6, r2
 800f070:	3201      	adds	r2, #1
 800f072:	7830      	ldrb	r0, [r6, #0]
 800f074:	f7ff ff8b 	bl	800ef8e <__hexdig_fun>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d1f8      	bne.n	800f06e <__gethex+0xb6>
 800f07c:	1bad      	subs	r5, r5, r6
 800f07e:	00ad      	lsls	r5, r5, #2
 800f080:	e004      	b.n	800f08c <__gethex+0xd4>
 800f082:	2400      	movs	r4, #0
 800f084:	4625      	mov	r5, r4
 800f086:	e7e0      	b.n	800f04a <__gethex+0x92>
 800f088:	2d00      	cmp	r5, #0
 800f08a:	d1f7      	bne.n	800f07c <__gethex+0xc4>
 800f08c:	7833      	ldrb	r3, [r6, #0]
 800f08e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f092:	2b50      	cmp	r3, #80	; 0x50
 800f094:	d13b      	bne.n	800f10e <__gethex+0x156>
 800f096:	7873      	ldrb	r3, [r6, #1]
 800f098:	2b2b      	cmp	r3, #43	; 0x2b
 800f09a:	d02c      	beq.n	800f0f6 <__gethex+0x13e>
 800f09c:	2b2d      	cmp	r3, #45	; 0x2d
 800f09e:	d02e      	beq.n	800f0fe <__gethex+0x146>
 800f0a0:	1c71      	adds	r1, r6, #1
 800f0a2:	f04f 0900 	mov.w	r9, #0
 800f0a6:	7808      	ldrb	r0, [r1, #0]
 800f0a8:	f7ff ff71 	bl	800ef8e <__hexdig_fun>
 800f0ac:	1e43      	subs	r3, r0, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b18      	cmp	r3, #24
 800f0b2:	d82c      	bhi.n	800f10e <__gethex+0x156>
 800f0b4:	f1a0 0210 	sub.w	r2, r0, #16
 800f0b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0bc:	f7ff ff67 	bl	800ef8e <__hexdig_fun>
 800f0c0:	1e43      	subs	r3, r0, #1
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b18      	cmp	r3, #24
 800f0c6:	d91d      	bls.n	800f104 <__gethex+0x14c>
 800f0c8:	f1b9 0f00 	cmp.w	r9, #0
 800f0cc:	d000      	beq.n	800f0d0 <__gethex+0x118>
 800f0ce:	4252      	negs	r2, r2
 800f0d0:	4415      	add	r5, r2
 800f0d2:	f8cb 1000 	str.w	r1, [fp]
 800f0d6:	b1e4      	cbz	r4, 800f112 <__gethex+0x15a>
 800f0d8:	9b00      	ldr	r3, [sp, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	bf14      	ite	ne
 800f0de:	2700      	movne	r7, #0
 800f0e0:	2706      	moveq	r7, #6
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	b009      	add	sp, #36	; 0x24
 800f0e6:	ecbd 8b02 	vpop	{d8}
 800f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ee:	463e      	mov	r6, r7
 800f0f0:	4625      	mov	r5, r4
 800f0f2:	2401      	movs	r4, #1
 800f0f4:	e7ca      	b.n	800f08c <__gethex+0xd4>
 800f0f6:	f04f 0900 	mov.w	r9, #0
 800f0fa:	1cb1      	adds	r1, r6, #2
 800f0fc:	e7d3      	b.n	800f0a6 <__gethex+0xee>
 800f0fe:	f04f 0901 	mov.w	r9, #1
 800f102:	e7fa      	b.n	800f0fa <__gethex+0x142>
 800f104:	230a      	movs	r3, #10
 800f106:	fb03 0202 	mla	r2, r3, r2, r0
 800f10a:	3a10      	subs	r2, #16
 800f10c:	e7d4      	b.n	800f0b8 <__gethex+0x100>
 800f10e:	4631      	mov	r1, r6
 800f110:	e7df      	b.n	800f0d2 <__gethex+0x11a>
 800f112:	1bf3      	subs	r3, r6, r7
 800f114:	3b01      	subs	r3, #1
 800f116:	4621      	mov	r1, r4
 800f118:	2b07      	cmp	r3, #7
 800f11a:	dc0b      	bgt.n	800f134 <__gethex+0x17c>
 800f11c:	ee18 0a10 	vmov	r0, s16
 800f120:	f000 fa82 	bl	800f628 <_Balloc>
 800f124:	4604      	mov	r4, r0
 800f126:	b940      	cbnz	r0, 800f13a <__gethex+0x182>
 800f128:	4b65      	ldr	r3, [pc, #404]	; (800f2c0 <__gethex+0x308>)
 800f12a:	4602      	mov	r2, r0
 800f12c:	21de      	movs	r1, #222	; 0xde
 800f12e:	4865      	ldr	r0, [pc, #404]	; (800f2c4 <__gethex+0x30c>)
 800f130:	f001 fbf4 	bl	801091c <__assert_func>
 800f134:	3101      	adds	r1, #1
 800f136:	105b      	asrs	r3, r3, #1
 800f138:	e7ee      	b.n	800f118 <__gethex+0x160>
 800f13a:	f100 0914 	add.w	r9, r0, #20
 800f13e:	f04f 0b00 	mov.w	fp, #0
 800f142:	f1ca 0301 	rsb	r3, sl, #1
 800f146:	f8cd 9008 	str.w	r9, [sp, #8]
 800f14a:	f8cd b000 	str.w	fp, [sp]
 800f14e:	9306      	str	r3, [sp, #24]
 800f150:	42b7      	cmp	r7, r6
 800f152:	d340      	bcc.n	800f1d6 <__gethex+0x21e>
 800f154:	9802      	ldr	r0, [sp, #8]
 800f156:	9b00      	ldr	r3, [sp, #0]
 800f158:	f840 3b04 	str.w	r3, [r0], #4
 800f15c:	eba0 0009 	sub.w	r0, r0, r9
 800f160:	1080      	asrs	r0, r0, #2
 800f162:	0146      	lsls	r6, r0, #5
 800f164:	6120      	str	r0, [r4, #16]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 fb54 	bl	800f814 <__hi0bits>
 800f16c:	1a30      	subs	r0, r6, r0
 800f16e:	f8d8 6000 	ldr.w	r6, [r8]
 800f172:	42b0      	cmp	r0, r6
 800f174:	dd63      	ble.n	800f23e <__gethex+0x286>
 800f176:	1b87      	subs	r7, r0, r6
 800f178:	4639      	mov	r1, r7
 800f17a:	4620      	mov	r0, r4
 800f17c:	f000 feee 	bl	800ff5c <__any_on>
 800f180:	4682      	mov	sl, r0
 800f182:	b1a8      	cbz	r0, 800f1b0 <__gethex+0x1f8>
 800f184:	1e7b      	subs	r3, r7, #1
 800f186:	1159      	asrs	r1, r3, #5
 800f188:	f003 021f 	and.w	r2, r3, #31
 800f18c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f190:	f04f 0a01 	mov.w	sl, #1
 800f194:	fa0a f202 	lsl.w	r2, sl, r2
 800f198:	420a      	tst	r2, r1
 800f19a:	d009      	beq.n	800f1b0 <__gethex+0x1f8>
 800f19c:	4553      	cmp	r3, sl
 800f19e:	dd05      	ble.n	800f1ac <__gethex+0x1f4>
 800f1a0:	1eb9      	subs	r1, r7, #2
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 feda 	bl	800ff5c <__any_on>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d145      	bne.n	800f238 <__gethex+0x280>
 800f1ac:	f04f 0a02 	mov.w	sl, #2
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f7ff fe99 	bl	800eeea <rshift>
 800f1b8:	443d      	add	r5, r7
 800f1ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1be:	42ab      	cmp	r3, r5
 800f1c0:	da4c      	bge.n	800f25c <__gethex+0x2a4>
 800f1c2:	ee18 0a10 	vmov	r0, s16
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	f000 fa6e 	bl	800f6a8 <_Bfree>
 800f1cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	27a3      	movs	r7, #163	; 0xa3
 800f1d4:	e785      	b.n	800f0e2 <__gethex+0x12a>
 800f1d6:	1e73      	subs	r3, r6, #1
 800f1d8:	9a05      	ldr	r2, [sp, #20]
 800f1da:	9303      	str	r3, [sp, #12]
 800f1dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d019      	beq.n	800f218 <__gethex+0x260>
 800f1e4:	f1bb 0f20 	cmp.w	fp, #32
 800f1e8:	d107      	bne.n	800f1fa <__gethex+0x242>
 800f1ea:	9b02      	ldr	r3, [sp, #8]
 800f1ec:	9a00      	ldr	r2, [sp, #0]
 800f1ee:	f843 2b04 	str.w	r2, [r3], #4
 800f1f2:	9302      	str	r3, [sp, #8]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	469b      	mov	fp, r3
 800f1fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f1fe:	f7ff fec6 	bl	800ef8e <__hexdig_fun>
 800f202:	9b00      	ldr	r3, [sp, #0]
 800f204:	f000 000f 	and.w	r0, r0, #15
 800f208:	fa00 f00b 	lsl.w	r0, r0, fp
 800f20c:	4303      	orrs	r3, r0
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	f10b 0b04 	add.w	fp, fp, #4
 800f214:	9b03      	ldr	r3, [sp, #12]
 800f216:	e00d      	b.n	800f234 <__gethex+0x27c>
 800f218:	9b03      	ldr	r3, [sp, #12]
 800f21a:	9a06      	ldr	r2, [sp, #24]
 800f21c:	4413      	add	r3, r2
 800f21e:	42bb      	cmp	r3, r7
 800f220:	d3e0      	bcc.n	800f1e4 <__gethex+0x22c>
 800f222:	4618      	mov	r0, r3
 800f224:	9901      	ldr	r1, [sp, #4]
 800f226:	9307      	str	r3, [sp, #28]
 800f228:	4652      	mov	r2, sl
 800f22a:	f001 fa84 	bl	8010736 <strncmp>
 800f22e:	9b07      	ldr	r3, [sp, #28]
 800f230:	2800      	cmp	r0, #0
 800f232:	d1d7      	bne.n	800f1e4 <__gethex+0x22c>
 800f234:	461e      	mov	r6, r3
 800f236:	e78b      	b.n	800f150 <__gethex+0x198>
 800f238:	f04f 0a03 	mov.w	sl, #3
 800f23c:	e7b8      	b.n	800f1b0 <__gethex+0x1f8>
 800f23e:	da0a      	bge.n	800f256 <__gethex+0x29e>
 800f240:	1a37      	subs	r7, r6, r0
 800f242:	4621      	mov	r1, r4
 800f244:	ee18 0a10 	vmov	r0, s16
 800f248:	463a      	mov	r2, r7
 800f24a:	f000 fc49 	bl	800fae0 <__lshift>
 800f24e:	1bed      	subs	r5, r5, r7
 800f250:	4604      	mov	r4, r0
 800f252:	f100 0914 	add.w	r9, r0, #20
 800f256:	f04f 0a00 	mov.w	sl, #0
 800f25a:	e7ae      	b.n	800f1ba <__gethex+0x202>
 800f25c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f260:	42a8      	cmp	r0, r5
 800f262:	dd72      	ble.n	800f34a <__gethex+0x392>
 800f264:	1b45      	subs	r5, r0, r5
 800f266:	42ae      	cmp	r6, r5
 800f268:	dc36      	bgt.n	800f2d8 <__gethex+0x320>
 800f26a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d02a      	beq.n	800f2c8 <__gethex+0x310>
 800f272:	2b03      	cmp	r3, #3
 800f274:	d02c      	beq.n	800f2d0 <__gethex+0x318>
 800f276:	2b01      	cmp	r3, #1
 800f278:	d115      	bne.n	800f2a6 <__gethex+0x2ee>
 800f27a:	42ae      	cmp	r6, r5
 800f27c:	d113      	bne.n	800f2a6 <__gethex+0x2ee>
 800f27e:	2e01      	cmp	r6, #1
 800f280:	d10b      	bne.n	800f29a <__gethex+0x2e2>
 800f282:	9a04      	ldr	r2, [sp, #16]
 800f284:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f288:	6013      	str	r3, [r2, #0]
 800f28a:	2301      	movs	r3, #1
 800f28c:	6123      	str	r3, [r4, #16]
 800f28e:	f8c9 3000 	str.w	r3, [r9]
 800f292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f294:	2762      	movs	r7, #98	; 0x62
 800f296:	601c      	str	r4, [r3, #0]
 800f298:	e723      	b.n	800f0e2 <__gethex+0x12a>
 800f29a:	1e71      	subs	r1, r6, #1
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 fe5d 	bl	800ff5c <__any_on>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d1ed      	bne.n	800f282 <__gethex+0x2ca>
 800f2a6:	ee18 0a10 	vmov	r0, s16
 800f2aa:	4621      	mov	r1, r4
 800f2ac:	f000 f9fc 	bl	800f6a8 <_Bfree>
 800f2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6013      	str	r3, [r2, #0]
 800f2b6:	2750      	movs	r7, #80	; 0x50
 800f2b8:	e713      	b.n	800f0e2 <__gethex+0x12a>
 800f2ba:	bf00      	nop
 800f2bc:	08012094 	.word	0x08012094
 800f2c0:	08011fb4 	.word	0x08011fb4
 800f2c4:	08012028 	.word	0x08012028
 800f2c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1eb      	bne.n	800f2a6 <__gethex+0x2ee>
 800f2ce:	e7d8      	b.n	800f282 <__gethex+0x2ca>
 800f2d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1d5      	bne.n	800f282 <__gethex+0x2ca>
 800f2d6:	e7e6      	b.n	800f2a6 <__gethex+0x2ee>
 800f2d8:	1e6f      	subs	r7, r5, #1
 800f2da:	f1ba 0f00 	cmp.w	sl, #0
 800f2de:	d131      	bne.n	800f344 <__gethex+0x38c>
 800f2e0:	b127      	cbz	r7, 800f2ec <__gethex+0x334>
 800f2e2:	4639      	mov	r1, r7
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f000 fe39 	bl	800ff5c <__any_on>
 800f2ea:	4682      	mov	sl, r0
 800f2ec:	117b      	asrs	r3, r7, #5
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f2f4:	f007 071f 	and.w	r7, r7, #31
 800f2f8:	fa01 f707 	lsl.w	r7, r1, r7
 800f2fc:	421f      	tst	r7, r3
 800f2fe:	4629      	mov	r1, r5
 800f300:	4620      	mov	r0, r4
 800f302:	bf18      	it	ne
 800f304:	f04a 0a02 	orrne.w	sl, sl, #2
 800f308:	1b76      	subs	r6, r6, r5
 800f30a:	f7ff fdee 	bl	800eeea <rshift>
 800f30e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f312:	2702      	movs	r7, #2
 800f314:	f1ba 0f00 	cmp.w	sl, #0
 800f318:	d048      	beq.n	800f3ac <__gethex+0x3f4>
 800f31a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d015      	beq.n	800f34e <__gethex+0x396>
 800f322:	2b03      	cmp	r3, #3
 800f324:	d017      	beq.n	800f356 <__gethex+0x39e>
 800f326:	2b01      	cmp	r3, #1
 800f328:	d109      	bne.n	800f33e <__gethex+0x386>
 800f32a:	f01a 0f02 	tst.w	sl, #2
 800f32e:	d006      	beq.n	800f33e <__gethex+0x386>
 800f330:	f8d9 0000 	ldr.w	r0, [r9]
 800f334:	ea4a 0a00 	orr.w	sl, sl, r0
 800f338:	f01a 0f01 	tst.w	sl, #1
 800f33c:	d10e      	bne.n	800f35c <__gethex+0x3a4>
 800f33e:	f047 0710 	orr.w	r7, r7, #16
 800f342:	e033      	b.n	800f3ac <__gethex+0x3f4>
 800f344:	f04f 0a01 	mov.w	sl, #1
 800f348:	e7d0      	b.n	800f2ec <__gethex+0x334>
 800f34a:	2701      	movs	r7, #1
 800f34c:	e7e2      	b.n	800f314 <__gethex+0x35c>
 800f34e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f350:	f1c3 0301 	rsb	r3, r3, #1
 800f354:	9315      	str	r3, [sp, #84]	; 0x54
 800f356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d0f0      	beq.n	800f33e <__gethex+0x386>
 800f35c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f360:	f104 0314 	add.w	r3, r4, #20
 800f364:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f368:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f36c:	f04f 0c00 	mov.w	ip, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f853 2b04 	ldr.w	r2, [r3], #4
 800f376:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f37a:	d01c      	beq.n	800f3b6 <__gethex+0x3fe>
 800f37c:	3201      	adds	r2, #1
 800f37e:	6002      	str	r2, [r0, #0]
 800f380:	2f02      	cmp	r7, #2
 800f382:	f104 0314 	add.w	r3, r4, #20
 800f386:	d13f      	bne.n	800f408 <__gethex+0x450>
 800f388:	f8d8 2000 	ldr.w	r2, [r8]
 800f38c:	3a01      	subs	r2, #1
 800f38e:	42b2      	cmp	r2, r6
 800f390:	d10a      	bne.n	800f3a8 <__gethex+0x3f0>
 800f392:	1171      	asrs	r1, r6, #5
 800f394:	2201      	movs	r2, #1
 800f396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f39a:	f006 061f 	and.w	r6, r6, #31
 800f39e:	fa02 f606 	lsl.w	r6, r2, r6
 800f3a2:	421e      	tst	r6, r3
 800f3a4:	bf18      	it	ne
 800f3a6:	4617      	movne	r7, r2
 800f3a8:	f047 0720 	orr.w	r7, r7, #32
 800f3ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3ae:	601c      	str	r4, [r3, #0]
 800f3b0:	9b04      	ldr	r3, [sp, #16]
 800f3b2:	601d      	str	r5, [r3, #0]
 800f3b4:	e695      	b.n	800f0e2 <__gethex+0x12a>
 800f3b6:	4299      	cmp	r1, r3
 800f3b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f3bc:	d8d8      	bhi.n	800f370 <__gethex+0x3b8>
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	459b      	cmp	fp, r3
 800f3c2:	db19      	blt.n	800f3f8 <__gethex+0x440>
 800f3c4:	6861      	ldr	r1, [r4, #4]
 800f3c6:	ee18 0a10 	vmov	r0, s16
 800f3ca:	3101      	adds	r1, #1
 800f3cc:	f000 f92c 	bl	800f628 <_Balloc>
 800f3d0:	4681      	mov	r9, r0
 800f3d2:	b918      	cbnz	r0, 800f3dc <__gethex+0x424>
 800f3d4:	4b1a      	ldr	r3, [pc, #104]	; (800f440 <__gethex+0x488>)
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	2184      	movs	r1, #132	; 0x84
 800f3da:	e6a8      	b.n	800f12e <__gethex+0x176>
 800f3dc:	6922      	ldr	r2, [r4, #16]
 800f3de:	3202      	adds	r2, #2
 800f3e0:	f104 010c 	add.w	r1, r4, #12
 800f3e4:	0092      	lsls	r2, r2, #2
 800f3e6:	300c      	adds	r0, #12
 800f3e8:	f000 f910 	bl	800f60c <memcpy>
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	ee18 0a10 	vmov	r0, s16
 800f3f2:	f000 f959 	bl	800f6a8 <_Bfree>
 800f3f6:	464c      	mov	r4, r9
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f400:	6122      	str	r2, [r4, #16]
 800f402:	2201      	movs	r2, #1
 800f404:	615a      	str	r2, [r3, #20]
 800f406:	e7bb      	b.n	800f380 <__gethex+0x3c8>
 800f408:	6922      	ldr	r2, [r4, #16]
 800f40a:	455a      	cmp	r2, fp
 800f40c:	dd0b      	ble.n	800f426 <__gethex+0x46e>
 800f40e:	2101      	movs	r1, #1
 800f410:	4620      	mov	r0, r4
 800f412:	f7ff fd6a 	bl	800eeea <rshift>
 800f416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f41a:	3501      	adds	r5, #1
 800f41c:	42ab      	cmp	r3, r5
 800f41e:	f6ff aed0 	blt.w	800f1c2 <__gethex+0x20a>
 800f422:	2701      	movs	r7, #1
 800f424:	e7c0      	b.n	800f3a8 <__gethex+0x3f0>
 800f426:	f016 061f 	ands.w	r6, r6, #31
 800f42a:	d0fa      	beq.n	800f422 <__gethex+0x46a>
 800f42c:	449a      	add	sl, r3
 800f42e:	f1c6 0620 	rsb	r6, r6, #32
 800f432:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f436:	f000 f9ed 	bl	800f814 <__hi0bits>
 800f43a:	42b0      	cmp	r0, r6
 800f43c:	dbe7      	blt.n	800f40e <__gethex+0x456>
 800f43e:	e7f0      	b.n	800f422 <__gethex+0x46a>
 800f440:	08011fb4 	.word	0x08011fb4

0800f444 <L_shift>:
 800f444:	f1c2 0208 	rsb	r2, r2, #8
 800f448:	0092      	lsls	r2, r2, #2
 800f44a:	b570      	push	{r4, r5, r6, lr}
 800f44c:	f1c2 0620 	rsb	r6, r2, #32
 800f450:	6843      	ldr	r3, [r0, #4]
 800f452:	6804      	ldr	r4, [r0, #0]
 800f454:	fa03 f506 	lsl.w	r5, r3, r6
 800f458:	432c      	orrs	r4, r5
 800f45a:	40d3      	lsrs	r3, r2
 800f45c:	6004      	str	r4, [r0, #0]
 800f45e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f462:	4288      	cmp	r0, r1
 800f464:	d3f4      	bcc.n	800f450 <L_shift+0xc>
 800f466:	bd70      	pop	{r4, r5, r6, pc}

0800f468 <__match>:
 800f468:	b530      	push	{r4, r5, lr}
 800f46a:	6803      	ldr	r3, [r0, #0]
 800f46c:	3301      	adds	r3, #1
 800f46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f472:	b914      	cbnz	r4, 800f47a <__match+0x12>
 800f474:	6003      	str	r3, [r0, #0]
 800f476:	2001      	movs	r0, #1
 800f478:	bd30      	pop	{r4, r5, pc}
 800f47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f47e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f482:	2d19      	cmp	r5, #25
 800f484:	bf98      	it	ls
 800f486:	3220      	addls	r2, #32
 800f488:	42a2      	cmp	r2, r4
 800f48a:	d0f0      	beq.n	800f46e <__match+0x6>
 800f48c:	2000      	movs	r0, #0
 800f48e:	e7f3      	b.n	800f478 <__match+0x10>

0800f490 <__hexnan>:
 800f490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f494:	680b      	ldr	r3, [r1, #0]
 800f496:	6801      	ldr	r1, [r0, #0]
 800f498:	115e      	asrs	r6, r3, #5
 800f49a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f49e:	f013 031f 	ands.w	r3, r3, #31
 800f4a2:	b087      	sub	sp, #28
 800f4a4:	bf18      	it	ne
 800f4a6:	3604      	addne	r6, #4
 800f4a8:	2500      	movs	r5, #0
 800f4aa:	1f37      	subs	r7, r6, #4
 800f4ac:	4682      	mov	sl, r0
 800f4ae:	4690      	mov	r8, r2
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4b6:	46b9      	mov	r9, r7
 800f4b8:	463c      	mov	r4, r7
 800f4ba:	9502      	str	r5, [sp, #8]
 800f4bc:	46ab      	mov	fp, r5
 800f4be:	784a      	ldrb	r2, [r1, #1]
 800f4c0:	1c4b      	adds	r3, r1, #1
 800f4c2:	9303      	str	r3, [sp, #12]
 800f4c4:	b342      	cbz	r2, 800f518 <__hexnan+0x88>
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	9105      	str	r1, [sp, #20]
 800f4ca:	9204      	str	r2, [sp, #16]
 800f4cc:	f7ff fd5f 	bl	800ef8e <__hexdig_fun>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d14f      	bne.n	800f574 <__hexnan+0xe4>
 800f4d4:	9a04      	ldr	r2, [sp, #16]
 800f4d6:	9905      	ldr	r1, [sp, #20]
 800f4d8:	2a20      	cmp	r2, #32
 800f4da:	d818      	bhi.n	800f50e <__hexnan+0x7e>
 800f4dc:	9b02      	ldr	r3, [sp, #8]
 800f4de:	459b      	cmp	fp, r3
 800f4e0:	dd13      	ble.n	800f50a <__hexnan+0x7a>
 800f4e2:	454c      	cmp	r4, r9
 800f4e4:	d206      	bcs.n	800f4f4 <__hexnan+0x64>
 800f4e6:	2d07      	cmp	r5, #7
 800f4e8:	dc04      	bgt.n	800f4f4 <__hexnan+0x64>
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f7ff ffa8 	bl	800f444 <L_shift>
 800f4f4:	4544      	cmp	r4, r8
 800f4f6:	d950      	bls.n	800f59a <__hexnan+0x10a>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	f1a4 0904 	sub.w	r9, r4, #4
 800f4fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800f502:	f8cd b008 	str.w	fp, [sp, #8]
 800f506:	464c      	mov	r4, r9
 800f508:	461d      	mov	r5, r3
 800f50a:	9903      	ldr	r1, [sp, #12]
 800f50c:	e7d7      	b.n	800f4be <__hexnan+0x2e>
 800f50e:	2a29      	cmp	r2, #41	; 0x29
 800f510:	d156      	bne.n	800f5c0 <__hexnan+0x130>
 800f512:	3102      	adds	r1, #2
 800f514:	f8ca 1000 	str.w	r1, [sl]
 800f518:	f1bb 0f00 	cmp.w	fp, #0
 800f51c:	d050      	beq.n	800f5c0 <__hexnan+0x130>
 800f51e:	454c      	cmp	r4, r9
 800f520:	d206      	bcs.n	800f530 <__hexnan+0xa0>
 800f522:	2d07      	cmp	r5, #7
 800f524:	dc04      	bgt.n	800f530 <__hexnan+0xa0>
 800f526:	462a      	mov	r2, r5
 800f528:	4649      	mov	r1, r9
 800f52a:	4620      	mov	r0, r4
 800f52c:	f7ff ff8a 	bl	800f444 <L_shift>
 800f530:	4544      	cmp	r4, r8
 800f532:	d934      	bls.n	800f59e <__hexnan+0x10e>
 800f534:	f1a8 0204 	sub.w	r2, r8, #4
 800f538:	4623      	mov	r3, r4
 800f53a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f53e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f542:	429f      	cmp	r7, r3
 800f544:	d2f9      	bcs.n	800f53a <__hexnan+0xaa>
 800f546:	1b3b      	subs	r3, r7, r4
 800f548:	f023 0303 	bic.w	r3, r3, #3
 800f54c:	3304      	adds	r3, #4
 800f54e:	3401      	adds	r4, #1
 800f550:	3e03      	subs	r6, #3
 800f552:	42b4      	cmp	r4, r6
 800f554:	bf88      	it	hi
 800f556:	2304      	movhi	r3, #4
 800f558:	4443      	add	r3, r8
 800f55a:	2200      	movs	r2, #0
 800f55c:	f843 2b04 	str.w	r2, [r3], #4
 800f560:	429f      	cmp	r7, r3
 800f562:	d2fb      	bcs.n	800f55c <__hexnan+0xcc>
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	b91b      	cbnz	r3, 800f570 <__hexnan+0xe0>
 800f568:	4547      	cmp	r7, r8
 800f56a:	d127      	bne.n	800f5bc <__hexnan+0x12c>
 800f56c:	2301      	movs	r3, #1
 800f56e:	603b      	str	r3, [r7, #0]
 800f570:	2005      	movs	r0, #5
 800f572:	e026      	b.n	800f5c2 <__hexnan+0x132>
 800f574:	3501      	adds	r5, #1
 800f576:	2d08      	cmp	r5, #8
 800f578:	f10b 0b01 	add.w	fp, fp, #1
 800f57c:	dd06      	ble.n	800f58c <__hexnan+0xfc>
 800f57e:	4544      	cmp	r4, r8
 800f580:	d9c3      	bls.n	800f50a <__hexnan+0x7a>
 800f582:	2300      	movs	r3, #0
 800f584:	f844 3c04 	str.w	r3, [r4, #-4]
 800f588:	2501      	movs	r5, #1
 800f58a:	3c04      	subs	r4, #4
 800f58c:	6822      	ldr	r2, [r4, #0]
 800f58e:	f000 000f 	and.w	r0, r0, #15
 800f592:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f596:	6022      	str	r2, [r4, #0]
 800f598:	e7b7      	b.n	800f50a <__hexnan+0x7a>
 800f59a:	2508      	movs	r5, #8
 800f59c:	e7b5      	b.n	800f50a <__hexnan+0x7a>
 800f59e:	9b01      	ldr	r3, [sp, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0df      	beq.n	800f564 <__hexnan+0xd4>
 800f5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a8:	f1c3 0320 	rsb	r3, r3, #32
 800f5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800f5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f5b4:	401a      	ands	r2, r3
 800f5b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800f5ba:	e7d3      	b.n	800f564 <__hexnan+0xd4>
 800f5bc:	3f04      	subs	r7, #4
 800f5be:	e7d1      	b.n	800f564 <__hexnan+0xd4>
 800f5c0:	2004      	movs	r0, #4
 800f5c2:	b007      	add	sp, #28
 800f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5c8 <_localeconv_r>:
 800f5c8:	4800      	ldr	r0, [pc, #0]	; (800f5cc <_localeconv_r+0x4>)
 800f5ca:	4770      	bx	lr
 800f5cc:	200001a0 	.word	0x200001a0

0800f5d0 <__retarget_lock_init_recursive>:
 800f5d0:	4770      	bx	lr

0800f5d2 <__retarget_lock_acquire_recursive>:
 800f5d2:	4770      	bx	lr

0800f5d4 <__retarget_lock_release_recursive>:
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <malloc>:
 800f5d8:	4b02      	ldr	r3, [pc, #8]	; (800f5e4 <malloc+0xc>)
 800f5da:	4601      	mov	r1, r0
 800f5dc:	6818      	ldr	r0, [r3, #0]
 800f5de:	f000 bd3d 	b.w	801005c <_malloc_r>
 800f5e2:	bf00      	nop
 800f5e4:	20000048 	.word	0x20000048

0800f5e8 <__ascii_mbtowc>:
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	b901      	cbnz	r1, 800f5ee <__ascii_mbtowc+0x6>
 800f5ec:	a901      	add	r1, sp, #4
 800f5ee:	b142      	cbz	r2, 800f602 <__ascii_mbtowc+0x1a>
 800f5f0:	b14b      	cbz	r3, 800f606 <__ascii_mbtowc+0x1e>
 800f5f2:	7813      	ldrb	r3, [r2, #0]
 800f5f4:	600b      	str	r3, [r1, #0]
 800f5f6:	7812      	ldrb	r2, [r2, #0]
 800f5f8:	1e10      	subs	r0, r2, #0
 800f5fa:	bf18      	it	ne
 800f5fc:	2001      	movne	r0, #1
 800f5fe:	b002      	add	sp, #8
 800f600:	4770      	bx	lr
 800f602:	4610      	mov	r0, r2
 800f604:	e7fb      	b.n	800f5fe <__ascii_mbtowc+0x16>
 800f606:	f06f 0001 	mvn.w	r0, #1
 800f60a:	e7f8      	b.n	800f5fe <__ascii_mbtowc+0x16>

0800f60c <memcpy>:
 800f60c:	440a      	add	r2, r1
 800f60e:	4291      	cmp	r1, r2
 800f610:	f100 33ff 	add.w	r3, r0, #4294967295
 800f614:	d100      	bne.n	800f618 <memcpy+0xc>
 800f616:	4770      	bx	lr
 800f618:	b510      	push	{r4, lr}
 800f61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f622:	4291      	cmp	r1, r2
 800f624:	d1f9      	bne.n	800f61a <memcpy+0xe>
 800f626:	bd10      	pop	{r4, pc}

0800f628 <_Balloc>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f62c:	4604      	mov	r4, r0
 800f62e:	460d      	mov	r5, r1
 800f630:	b976      	cbnz	r6, 800f650 <_Balloc+0x28>
 800f632:	2010      	movs	r0, #16
 800f634:	f7ff ffd0 	bl	800f5d8 <malloc>
 800f638:	4602      	mov	r2, r0
 800f63a:	6260      	str	r0, [r4, #36]	; 0x24
 800f63c:	b920      	cbnz	r0, 800f648 <_Balloc+0x20>
 800f63e:	4b18      	ldr	r3, [pc, #96]	; (800f6a0 <_Balloc+0x78>)
 800f640:	4818      	ldr	r0, [pc, #96]	; (800f6a4 <_Balloc+0x7c>)
 800f642:	2166      	movs	r1, #102	; 0x66
 800f644:	f001 f96a 	bl	801091c <__assert_func>
 800f648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f64c:	6006      	str	r6, [r0, #0]
 800f64e:	60c6      	str	r6, [r0, #12]
 800f650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f652:	68f3      	ldr	r3, [r6, #12]
 800f654:	b183      	cbz	r3, 800f678 <_Balloc+0x50>
 800f656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f65e:	b9b8      	cbnz	r0, 800f690 <_Balloc+0x68>
 800f660:	2101      	movs	r1, #1
 800f662:	fa01 f605 	lsl.w	r6, r1, r5
 800f666:	1d72      	adds	r2, r6, #5
 800f668:	0092      	lsls	r2, r2, #2
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fc97 	bl	800ff9e <_calloc_r>
 800f670:	b160      	cbz	r0, 800f68c <_Balloc+0x64>
 800f672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f676:	e00e      	b.n	800f696 <_Balloc+0x6e>
 800f678:	2221      	movs	r2, #33	; 0x21
 800f67a:	2104      	movs	r1, #4
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 fc8e 	bl	800ff9e <_calloc_r>
 800f682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f684:	60f0      	str	r0, [r6, #12]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e4      	bne.n	800f656 <_Balloc+0x2e>
 800f68c:	2000      	movs	r0, #0
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	6802      	ldr	r2, [r0, #0]
 800f692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f696:	2300      	movs	r3, #0
 800f698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f69c:	e7f7      	b.n	800f68e <_Balloc+0x66>
 800f69e:	bf00      	nop
 800f6a0:	08011f3e 	.word	0x08011f3e
 800f6a4:	080120a8 	.word	0x080120a8

0800f6a8 <_Bfree>:
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6ac:	4605      	mov	r5, r0
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	b976      	cbnz	r6, 800f6d0 <_Bfree+0x28>
 800f6b2:	2010      	movs	r0, #16
 800f6b4:	f7ff ff90 	bl	800f5d8 <malloc>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	6268      	str	r0, [r5, #36]	; 0x24
 800f6bc:	b920      	cbnz	r0, 800f6c8 <_Bfree+0x20>
 800f6be:	4b09      	ldr	r3, [pc, #36]	; (800f6e4 <_Bfree+0x3c>)
 800f6c0:	4809      	ldr	r0, [pc, #36]	; (800f6e8 <_Bfree+0x40>)
 800f6c2:	218a      	movs	r1, #138	; 0x8a
 800f6c4:	f001 f92a 	bl	801091c <__assert_func>
 800f6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6cc:	6006      	str	r6, [r0, #0]
 800f6ce:	60c6      	str	r6, [r0, #12]
 800f6d0:	b13c      	cbz	r4, 800f6e2 <_Bfree+0x3a>
 800f6d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6d4:	6862      	ldr	r2, [r4, #4]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6dc:	6021      	str	r1, [r4, #0]
 800f6de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	08011f3e 	.word	0x08011f3e
 800f6e8:	080120a8 	.word	0x080120a8

0800f6ec <__multadd>:
 800f6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f0:	690e      	ldr	r6, [r1, #16]
 800f6f2:	4607      	mov	r7, r0
 800f6f4:	4698      	mov	r8, r3
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	f101 0014 	add.w	r0, r1, #20
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	6805      	ldr	r5, [r0, #0]
 800f700:	b2a9      	uxth	r1, r5
 800f702:	fb02 8101 	mla	r1, r2, r1, r8
 800f706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f70a:	0c2d      	lsrs	r5, r5, #16
 800f70c:	fb02 c505 	mla	r5, r2, r5, ip
 800f710:	b289      	uxth	r1, r1
 800f712:	3301      	adds	r3, #1
 800f714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f718:	429e      	cmp	r6, r3
 800f71a:	f840 1b04 	str.w	r1, [r0], #4
 800f71e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f722:	dcec      	bgt.n	800f6fe <__multadd+0x12>
 800f724:	f1b8 0f00 	cmp.w	r8, #0
 800f728:	d022      	beq.n	800f770 <__multadd+0x84>
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	42b3      	cmp	r3, r6
 800f72e:	dc19      	bgt.n	800f764 <__multadd+0x78>
 800f730:	6861      	ldr	r1, [r4, #4]
 800f732:	4638      	mov	r0, r7
 800f734:	3101      	adds	r1, #1
 800f736:	f7ff ff77 	bl	800f628 <_Balloc>
 800f73a:	4605      	mov	r5, r0
 800f73c:	b928      	cbnz	r0, 800f74a <__multadd+0x5e>
 800f73e:	4602      	mov	r2, r0
 800f740:	4b0d      	ldr	r3, [pc, #52]	; (800f778 <__multadd+0x8c>)
 800f742:	480e      	ldr	r0, [pc, #56]	; (800f77c <__multadd+0x90>)
 800f744:	21b5      	movs	r1, #181	; 0xb5
 800f746:	f001 f8e9 	bl	801091c <__assert_func>
 800f74a:	6922      	ldr	r2, [r4, #16]
 800f74c:	3202      	adds	r2, #2
 800f74e:	f104 010c 	add.w	r1, r4, #12
 800f752:	0092      	lsls	r2, r2, #2
 800f754:	300c      	adds	r0, #12
 800f756:	f7ff ff59 	bl	800f60c <memcpy>
 800f75a:	4621      	mov	r1, r4
 800f75c:	4638      	mov	r0, r7
 800f75e:	f7ff ffa3 	bl	800f6a8 <_Bfree>
 800f762:	462c      	mov	r4, r5
 800f764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f768:	3601      	adds	r6, #1
 800f76a:	f8c3 8014 	str.w	r8, [r3, #20]
 800f76e:	6126      	str	r6, [r4, #16]
 800f770:	4620      	mov	r0, r4
 800f772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f776:	bf00      	nop
 800f778:	08011fb4 	.word	0x08011fb4
 800f77c:	080120a8 	.word	0x080120a8

0800f780 <__s2b>:
 800f780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f784:	460c      	mov	r4, r1
 800f786:	4615      	mov	r5, r2
 800f788:	461f      	mov	r7, r3
 800f78a:	2209      	movs	r2, #9
 800f78c:	3308      	adds	r3, #8
 800f78e:	4606      	mov	r6, r0
 800f790:	fb93 f3f2 	sdiv	r3, r3, r2
 800f794:	2100      	movs	r1, #0
 800f796:	2201      	movs	r2, #1
 800f798:	429a      	cmp	r2, r3
 800f79a:	db09      	blt.n	800f7b0 <__s2b+0x30>
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7ff ff43 	bl	800f628 <_Balloc>
 800f7a2:	b940      	cbnz	r0, 800f7b6 <__s2b+0x36>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	4b19      	ldr	r3, [pc, #100]	; (800f80c <__s2b+0x8c>)
 800f7a8:	4819      	ldr	r0, [pc, #100]	; (800f810 <__s2b+0x90>)
 800f7aa:	21ce      	movs	r1, #206	; 0xce
 800f7ac:	f001 f8b6 	bl	801091c <__assert_func>
 800f7b0:	0052      	lsls	r2, r2, #1
 800f7b2:	3101      	adds	r1, #1
 800f7b4:	e7f0      	b.n	800f798 <__s2b+0x18>
 800f7b6:	9b08      	ldr	r3, [sp, #32]
 800f7b8:	6143      	str	r3, [r0, #20]
 800f7ba:	2d09      	cmp	r5, #9
 800f7bc:	f04f 0301 	mov.w	r3, #1
 800f7c0:	6103      	str	r3, [r0, #16]
 800f7c2:	dd16      	ble.n	800f7f2 <__s2b+0x72>
 800f7c4:	f104 0909 	add.w	r9, r4, #9
 800f7c8:	46c8      	mov	r8, r9
 800f7ca:	442c      	add	r4, r5
 800f7cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	3b30      	subs	r3, #48	; 0x30
 800f7d4:	220a      	movs	r2, #10
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f7ff ff88 	bl	800f6ec <__multadd>
 800f7dc:	45a0      	cmp	r8, r4
 800f7de:	d1f5      	bne.n	800f7cc <__s2b+0x4c>
 800f7e0:	f1a5 0408 	sub.w	r4, r5, #8
 800f7e4:	444c      	add	r4, r9
 800f7e6:	1b2d      	subs	r5, r5, r4
 800f7e8:	1963      	adds	r3, r4, r5
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	db04      	blt.n	800f7f8 <__s2b+0x78>
 800f7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f2:	340a      	adds	r4, #10
 800f7f4:	2509      	movs	r5, #9
 800f7f6:	e7f6      	b.n	800f7e6 <__s2b+0x66>
 800f7f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	3b30      	subs	r3, #48	; 0x30
 800f800:	220a      	movs	r2, #10
 800f802:	4630      	mov	r0, r6
 800f804:	f7ff ff72 	bl	800f6ec <__multadd>
 800f808:	e7ee      	b.n	800f7e8 <__s2b+0x68>
 800f80a:	bf00      	nop
 800f80c:	08011fb4 	.word	0x08011fb4
 800f810:	080120a8 	.word	0x080120a8

0800f814 <__hi0bits>:
 800f814:	0c03      	lsrs	r3, r0, #16
 800f816:	041b      	lsls	r3, r3, #16
 800f818:	b9d3      	cbnz	r3, 800f850 <__hi0bits+0x3c>
 800f81a:	0400      	lsls	r0, r0, #16
 800f81c:	2310      	movs	r3, #16
 800f81e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f822:	bf04      	itt	eq
 800f824:	0200      	lsleq	r0, r0, #8
 800f826:	3308      	addeq	r3, #8
 800f828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f82c:	bf04      	itt	eq
 800f82e:	0100      	lsleq	r0, r0, #4
 800f830:	3304      	addeq	r3, #4
 800f832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f836:	bf04      	itt	eq
 800f838:	0080      	lsleq	r0, r0, #2
 800f83a:	3302      	addeq	r3, #2
 800f83c:	2800      	cmp	r0, #0
 800f83e:	db05      	blt.n	800f84c <__hi0bits+0x38>
 800f840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f844:	f103 0301 	add.w	r3, r3, #1
 800f848:	bf08      	it	eq
 800f84a:	2320      	moveq	r3, #32
 800f84c:	4618      	mov	r0, r3
 800f84e:	4770      	bx	lr
 800f850:	2300      	movs	r3, #0
 800f852:	e7e4      	b.n	800f81e <__hi0bits+0xa>

0800f854 <__lo0bits>:
 800f854:	6803      	ldr	r3, [r0, #0]
 800f856:	f013 0207 	ands.w	r2, r3, #7
 800f85a:	4601      	mov	r1, r0
 800f85c:	d00b      	beq.n	800f876 <__lo0bits+0x22>
 800f85e:	07da      	lsls	r2, r3, #31
 800f860:	d424      	bmi.n	800f8ac <__lo0bits+0x58>
 800f862:	0798      	lsls	r0, r3, #30
 800f864:	bf49      	itett	mi
 800f866:	085b      	lsrmi	r3, r3, #1
 800f868:	089b      	lsrpl	r3, r3, #2
 800f86a:	2001      	movmi	r0, #1
 800f86c:	600b      	strmi	r3, [r1, #0]
 800f86e:	bf5c      	itt	pl
 800f870:	600b      	strpl	r3, [r1, #0]
 800f872:	2002      	movpl	r0, #2
 800f874:	4770      	bx	lr
 800f876:	b298      	uxth	r0, r3
 800f878:	b9b0      	cbnz	r0, 800f8a8 <__lo0bits+0x54>
 800f87a:	0c1b      	lsrs	r3, r3, #16
 800f87c:	2010      	movs	r0, #16
 800f87e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f882:	bf04      	itt	eq
 800f884:	0a1b      	lsreq	r3, r3, #8
 800f886:	3008      	addeq	r0, #8
 800f888:	071a      	lsls	r2, r3, #28
 800f88a:	bf04      	itt	eq
 800f88c:	091b      	lsreq	r3, r3, #4
 800f88e:	3004      	addeq	r0, #4
 800f890:	079a      	lsls	r2, r3, #30
 800f892:	bf04      	itt	eq
 800f894:	089b      	lsreq	r3, r3, #2
 800f896:	3002      	addeq	r0, #2
 800f898:	07da      	lsls	r2, r3, #31
 800f89a:	d403      	bmi.n	800f8a4 <__lo0bits+0x50>
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	f100 0001 	add.w	r0, r0, #1
 800f8a2:	d005      	beq.n	800f8b0 <__lo0bits+0x5c>
 800f8a4:	600b      	str	r3, [r1, #0]
 800f8a6:	4770      	bx	lr
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	e7e8      	b.n	800f87e <__lo0bits+0x2a>
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	4770      	bx	lr
 800f8b0:	2020      	movs	r0, #32
 800f8b2:	4770      	bx	lr

0800f8b4 <__i2b>:
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	460c      	mov	r4, r1
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	f7ff feb5 	bl	800f628 <_Balloc>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	b928      	cbnz	r0, 800f8ce <__i2b+0x1a>
 800f8c2:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <__i2b+0x24>)
 800f8c4:	4805      	ldr	r0, [pc, #20]	; (800f8dc <__i2b+0x28>)
 800f8c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f8ca:	f001 f827 	bl	801091c <__assert_func>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	6144      	str	r4, [r0, #20]
 800f8d2:	6103      	str	r3, [r0, #16]
 800f8d4:	bd10      	pop	{r4, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08011fb4 	.word	0x08011fb4
 800f8dc:	080120a8 	.word	0x080120a8

0800f8e0 <__multiply>:
 800f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	4614      	mov	r4, r2
 800f8e6:	690a      	ldr	r2, [r1, #16]
 800f8e8:	6923      	ldr	r3, [r4, #16]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	bfb8      	it	lt
 800f8ee:	460b      	movlt	r3, r1
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	bfbc      	itt	lt
 800f8f4:	4625      	movlt	r5, r4
 800f8f6:	461c      	movlt	r4, r3
 800f8f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f8fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f900:	68ab      	ldr	r3, [r5, #8]
 800f902:	6869      	ldr	r1, [r5, #4]
 800f904:	eb0a 0709 	add.w	r7, sl, r9
 800f908:	42bb      	cmp	r3, r7
 800f90a:	b085      	sub	sp, #20
 800f90c:	bfb8      	it	lt
 800f90e:	3101      	addlt	r1, #1
 800f910:	f7ff fe8a 	bl	800f628 <_Balloc>
 800f914:	b930      	cbnz	r0, 800f924 <__multiply+0x44>
 800f916:	4602      	mov	r2, r0
 800f918:	4b42      	ldr	r3, [pc, #264]	; (800fa24 <__multiply+0x144>)
 800f91a:	4843      	ldr	r0, [pc, #268]	; (800fa28 <__multiply+0x148>)
 800f91c:	f240 115d 	movw	r1, #349	; 0x15d
 800f920:	f000 fffc 	bl	801091c <__assert_func>
 800f924:	f100 0614 	add.w	r6, r0, #20
 800f928:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f92c:	4633      	mov	r3, r6
 800f92e:	2200      	movs	r2, #0
 800f930:	4543      	cmp	r3, r8
 800f932:	d31e      	bcc.n	800f972 <__multiply+0x92>
 800f934:	f105 0c14 	add.w	ip, r5, #20
 800f938:	f104 0314 	add.w	r3, r4, #20
 800f93c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f940:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f944:	9202      	str	r2, [sp, #8]
 800f946:	ebac 0205 	sub.w	r2, ip, r5
 800f94a:	3a15      	subs	r2, #21
 800f94c:	f022 0203 	bic.w	r2, r2, #3
 800f950:	3204      	adds	r2, #4
 800f952:	f105 0115 	add.w	r1, r5, #21
 800f956:	458c      	cmp	ip, r1
 800f958:	bf38      	it	cc
 800f95a:	2204      	movcc	r2, #4
 800f95c:	9201      	str	r2, [sp, #4]
 800f95e:	9a02      	ldr	r2, [sp, #8]
 800f960:	9303      	str	r3, [sp, #12]
 800f962:	429a      	cmp	r2, r3
 800f964:	d808      	bhi.n	800f978 <__multiply+0x98>
 800f966:	2f00      	cmp	r7, #0
 800f968:	dc55      	bgt.n	800fa16 <__multiply+0x136>
 800f96a:	6107      	str	r7, [r0, #16]
 800f96c:	b005      	add	sp, #20
 800f96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f972:	f843 2b04 	str.w	r2, [r3], #4
 800f976:	e7db      	b.n	800f930 <__multiply+0x50>
 800f978:	f8b3 a000 	ldrh.w	sl, [r3]
 800f97c:	f1ba 0f00 	cmp.w	sl, #0
 800f980:	d020      	beq.n	800f9c4 <__multiply+0xe4>
 800f982:	f105 0e14 	add.w	lr, r5, #20
 800f986:	46b1      	mov	r9, r6
 800f988:	2200      	movs	r2, #0
 800f98a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f98e:	f8d9 b000 	ldr.w	fp, [r9]
 800f992:	b2a1      	uxth	r1, r4
 800f994:	fa1f fb8b 	uxth.w	fp, fp
 800f998:	fb0a b101 	mla	r1, sl, r1, fp
 800f99c:	4411      	add	r1, r2
 800f99e:	f8d9 2000 	ldr.w	r2, [r9]
 800f9a2:	0c24      	lsrs	r4, r4, #16
 800f9a4:	0c12      	lsrs	r2, r2, #16
 800f9a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800f9aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f9ae:	b289      	uxth	r1, r1
 800f9b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f9b4:	45f4      	cmp	ip, lr
 800f9b6:	f849 1b04 	str.w	r1, [r9], #4
 800f9ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f9be:	d8e4      	bhi.n	800f98a <__multiply+0xaa>
 800f9c0:	9901      	ldr	r1, [sp, #4]
 800f9c2:	5072      	str	r2, [r6, r1]
 800f9c4:	9a03      	ldr	r2, [sp, #12]
 800f9c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	f1b9 0f00 	cmp.w	r9, #0
 800f9d0:	d01f      	beq.n	800fa12 <__multiply+0x132>
 800f9d2:	6834      	ldr	r4, [r6, #0]
 800f9d4:	f105 0114 	add.w	r1, r5, #20
 800f9d8:	46b6      	mov	lr, r6
 800f9da:	f04f 0a00 	mov.w	sl, #0
 800f9de:	880a      	ldrh	r2, [r1, #0]
 800f9e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f9e4:	fb09 b202 	mla	r2, r9, r2, fp
 800f9e8:	4492      	add	sl, r2
 800f9ea:	b2a4      	uxth	r4, r4
 800f9ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f9f0:	f84e 4b04 	str.w	r4, [lr], #4
 800f9f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f9f8:	f8be 2000 	ldrh.w	r2, [lr]
 800f9fc:	0c24      	lsrs	r4, r4, #16
 800f9fe:	fb09 2404 	mla	r4, r9, r4, r2
 800fa02:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fa06:	458c      	cmp	ip, r1
 800fa08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa0c:	d8e7      	bhi.n	800f9de <__multiply+0xfe>
 800fa0e:	9a01      	ldr	r2, [sp, #4]
 800fa10:	50b4      	str	r4, [r6, r2]
 800fa12:	3604      	adds	r6, #4
 800fa14:	e7a3      	b.n	800f95e <__multiply+0x7e>
 800fa16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1a5      	bne.n	800f96a <__multiply+0x8a>
 800fa1e:	3f01      	subs	r7, #1
 800fa20:	e7a1      	b.n	800f966 <__multiply+0x86>
 800fa22:	bf00      	nop
 800fa24:	08011fb4 	.word	0x08011fb4
 800fa28:	080120a8 	.word	0x080120a8

0800fa2c <__pow5mult>:
 800fa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa30:	4615      	mov	r5, r2
 800fa32:	f012 0203 	ands.w	r2, r2, #3
 800fa36:	4606      	mov	r6, r0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	d007      	beq.n	800fa4c <__pow5mult+0x20>
 800fa3c:	4c25      	ldr	r4, [pc, #148]	; (800fad4 <__pow5mult+0xa8>)
 800fa3e:	3a01      	subs	r2, #1
 800fa40:	2300      	movs	r3, #0
 800fa42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa46:	f7ff fe51 	bl	800f6ec <__multadd>
 800fa4a:	4607      	mov	r7, r0
 800fa4c:	10ad      	asrs	r5, r5, #2
 800fa4e:	d03d      	beq.n	800facc <__pow5mult+0xa0>
 800fa50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa52:	b97c      	cbnz	r4, 800fa74 <__pow5mult+0x48>
 800fa54:	2010      	movs	r0, #16
 800fa56:	f7ff fdbf 	bl	800f5d8 <malloc>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	6270      	str	r0, [r6, #36]	; 0x24
 800fa5e:	b928      	cbnz	r0, 800fa6c <__pow5mult+0x40>
 800fa60:	4b1d      	ldr	r3, [pc, #116]	; (800fad8 <__pow5mult+0xac>)
 800fa62:	481e      	ldr	r0, [pc, #120]	; (800fadc <__pow5mult+0xb0>)
 800fa64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa68:	f000 ff58 	bl	801091c <__assert_func>
 800fa6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa70:	6004      	str	r4, [r0, #0]
 800fa72:	60c4      	str	r4, [r0, #12]
 800fa74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa7c:	b94c      	cbnz	r4, 800fa92 <__pow5mult+0x66>
 800fa7e:	f240 2171 	movw	r1, #625	; 0x271
 800fa82:	4630      	mov	r0, r6
 800fa84:	f7ff ff16 	bl	800f8b4 <__i2b>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa8e:	4604      	mov	r4, r0
 800fa90:	6003      	str	r3, [r0, #0]
 800fa92:	f04f 0900 	mov.w	r9, #0
 800fa96:	07eb      	lsls	r3, r5, #31
 800fa98:	d50a      	bpl.n	800fab0 <__pow5mult+0x84>
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	4622      	mov	r2, r4
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7ff ff1e 	bl	800f8e0 <__multiply>
 800faa4:	4639      	mov	r1, r7
 800faa6:	4680      	mov	r8, r0
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff fdfd 	bl	800f6a8 <_Bfree>
 800faae:	4647      	mov	r7, r8
 800fab0:	106d      	asrs	r5, r5, #1
 800fab2:	d00b      	beq.n	800facc <__pow5mult+0xa0>
 800fab4:	6820      	ldr	r0, [r4, #0]
 800fab6:	b938      	cbnz	r0, 800fac8 <__pow5mult+0x9c>
 800fab8:	4622      	mov	r2, r4
 800faba:	4621      	mov	r1, r4
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ff0f 	bl	800f8e0 <__multiply>
 800fac2:	6020      	str	r0, [r4, #0]
 800fac4:	f8c0 9000 	str.w	r9, [r0]
 800fac8:	4604      	mov	r4, r0
 800faca:	e7e4      	b.n	800fa96 <__pow5mult+0x6a>
 800facc:	4638      	mov	r0, r7
 800face:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad2:	bf00      	nop
 800fad4:	080121f8 	.word	0x080121f8
 800fad8:	08011f3e 	.word	0x08011f3e
 800fadc:	080120a8 	.word	0x080120a8

0800fae0 <__lshift>:
 800fae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	6849      	ldr	r1, [r1, #4]
 800fae8:	6923      	ldr	r3, [r4, #16]
 800faea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	4607      	mov	r7, r0
 800faf2:	4691      	mov	r9, r2
 800faf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800faf8:	f108 0601 	add.w	r6, r8, #1
 800fafc:	42b3      	cmp	r3, r6
 800fafe:	db0b      	blt.n	800fb18 <__lshift+0x38>
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff fd91 	bl	800f628 <_Balloc>
 800fb06:	4605      	mov	r5, r0
 800fb08:	b948      	cbnz	r0, 800fb1e <__lshift+0x3e>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	4b28      	ldr	r3, [pc, #160]	; (800fbb0 <__lshift+0xd0>)
 800fb0e:	4829      	ldr	r0, [pc, #164]	; (800fbb4 <__lshift+0xd4>)
 800fb10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb14:	f000 ff02 	bl	801091c <__assert_func>
 800fb18:	3101      	adds	r1, #1
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	e7ee      	b.n	800fafc <__lshift+0x1c>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f100 0114 	add.w	r1, r0, #20
 800fb24:	f100 0210 	add.w	r2, r0, #16
 800fb28:	4618      	mov	r0, r3
 800fb2a:	4553      	cmp	r3, sl
 800fb2c:	db33      	blt.n	800fb96 <__lshift+0xb6>
 800fb2e:	6920      	ldr	r0, [r4, #16]
 800fb30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb34:	f104 0314 	add.w	r3, r4, #20
 800fb38:	f019 091f 	ands.w	r9, r9, #31
 800fb3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb44:	d02b      	beq.n	800fb9e <__lshift+0xbe>
 800fb46:	f1c9 0e20 	rsb	lr, r9, #32
 800fb4a:	468a      	mov	sl, r1
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	6818      	ldr	r0, [r3, #0]
 800fb50:	fa00 f009 	lsl.w	r0, r0, r9
 800fb54:	4302      	orrs	r2, r0
 800fb56:	f84a 2b04 	str.w	r2, [sl], #4
 800fb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb5e:	459c      	cmp	ip, r3
 800fb60:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb64:	d8f3      	bhi.n	800fb4e <__lshift+0x6e>
 800fb66:	ebac 0304 	sub.w	r3, ip, r4
 800fb6a:	3b15      	subs	r3, #21
 800fb6c:	f023 0303 	bic.w	r3, r3, #3
 800fb70:	3304      	adds	r3, #4
 800fb72:	f104 0015 	add.w	r0, r4, #21
 800fb76:	4584      	cmp	ip, r0
 800fb78:	bf38      	it	cc
 800fb7a:	2304      	movcc	r3, #4
 800fb7c:	50ca      	str	r2, [r1, r3]
 800fb7e:	b10a      	cbz	r2, 800fb84 <__lshift+0xa4>
 800fb80:	f108 0602 	add.w	r6, r8, #2
 800fb84:	3e01      	subs	r6, #1
 800fb86:	4638      	mov	r0, r7
 800fb88:	612e      	str	r6, [r5, #16]
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	f7ff fd8c 	bl	800f6a8 <_Bfree>
 800fb90:	4628      	mov	r0, r5
 800fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb96:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	e7c5      	b.n	800fb2a <__lshift+0x4a>
 800fb9e:	3904      	subs	r1, #4
 800fba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fba8:	459c      	cmp	ip, r3
 800fbaa:	d8f9      	bhi.n	800fba0 <__lshift+0xc0>
 800fbac:	e7ea      	b.n	800fb84 <__lshift+0xa4>
 800fbae:	bf00      	nop
 800fbb0:	08011fb4 	.word	0x08011fb4
 800fbb4:	080120a8 	.word	0x080120a8

0800fbb8 <__mcmp>:
 800fbb8:	b530      	push	{r4, r5, lr}
 800fbba:	6902      	ldr	r2, [r0, #16]
 800fbbc:	690c      	ldr	r4, [r1, #16]
 800fbbe:	1b12      	subs	r2, r2, r4
 800fbc0:	d10e      	bne.n	800fbe0 <__mcmp+0x28>
 800fbc2:	f100 0314 	add.w	r3, r0, #20
 800fbc6:	3114      	adds	r1, #20
 800fbc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fbcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fbd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fbd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fbd8:	42a5      	cmp	r5, r4
 800fbda:	d003      	beq.n	800fbe4 <__mcmp+0x2c>
 800fbdc:	d305      	bcc.n	800fbea <__mcmp+0x32>
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	bd30      	pop	{r4, r5, pc}
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	d3f3      	bcc.n	800fbd0 <__mcmp+0x18>
 800fbe8:	e7fa      	b.n	800fbe0 <__mcmp+0x28>
 800fbea:	f04f 32ff 	mov.w	r2, #4294967295
 800fbee:	e7f7      	b.n	800fbe0 <__mcmp+0x28>

0800fbf0 <__mdiff>:
 800fbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf4:	460c      	mov	r4, r1
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	4617      	mov	r7, r2
 800fbfe:	f7ff ffdb 	bl	800fbb8 <__mcmp>
 800fc02:	1e05      	subs	r5, r0, #0
 800fc04:	d110      	bne.n	800fc28 <__mdiff+0x38>
 800fc06:	4629      	mov	r1, r5
 800fc08:	4630      	mov	r0, r6
 800fc0a:	f7ff fd0d 	bl	800f628 <_Balloc>
 800fc0e:	b930      	cbnz	r0, 800fc1e <__mdiff+0x2e>
 800fc10:	4b39      	ldr	r3, [pc, #228]	; (800fcf8 <__mdiff+0x108>)
 800fc12:	4602      	mov	r2, r0
 800fc14:	f240 2132 	movw	r1, #562	; 0x232
 800fc18:	4838      	ldr	r0, [pc, #224]	; (800fcfc <__mdiff+0x10c>)
 800fc1a:	f000 fe7f 	bl	801091c <__assert_func>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	bfa4      	itt	ge
 800fc2a:	463b      	movge	r3, r7
 800fc2c:	4627      	movge	r7, r4
 800fc2e:	4630      	mov	r0, r6
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	bfa6      	itte	ge
 800fc34:	461c      	movge	r4, r3
 800fc36:	2500      	movge	r5, #0
 800fc38:	2501      	movlt	r5, #1
 800fc3a:	f7ff fcf5 	bl	800f628 <_Balloc>
 800fc3e:	b920      	cbnz	r0, 800fc4a <__mdiff+0x5a>
 800fc40:	4b2d      	ldr	r3, [pc, #180]	; (800fcf8 <__mdiff+0x108>)
 800fc42:	4602      	mov	r2, r0
 800fc44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc48:	e7e6      	b.n	800fc18 <__mdiff+0x28>
 800fc4a:	693e      	ldr	r6, [r7, #16]
 800fc4c:	60c5      	str	r5, [r0, #12]
 800fc4e:	6925      	ldr	r5, [r4, #16]
 800fc50:	f107 0114 	add.w	r1, r7, #20
 800fc54:	f104 0914 	add.w	r9, r4, #20
 800fc58:	f100 0e14 	add.w	lr, r0, #20
 800fc5c:	f107 0210 	add.w	r2, r7, #16
 800fc60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fc64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fc68:	46f2      	mov	sl, lr
 800fc6a:	2700      	movs	r7, #0
 800fc6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc74:	fa1f f883 	uxth.w	r8, r3
 800fc78:	fa17 f78b 	uxtah	r7, r7, fp
 800fc7c:	0c1b      	lsrs	r3, r3, #16
 800fc7e:	eba7 0808 	sub.w	r8, r7, r8
 800fc82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc8a:	fa1f f888 	uxth.w	r8, r8
 800fc8e:	141f      	asrs	r7, r3, #16
 800fc90:	454d      	cmp	r5, r9
 800fc92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc96:	f84a 3b04 	str.w	r3, [sl], #4
 800fc9a:	d8e7      	bhi.n	800fc6c <__mdiff+0x7c>
 800fc9c:	1b2b      	subs	r3, r5, r4
 800fc9e:	3b15      	subs	r3, #21
 800fca0:	f023 0303 	bic.w	r3, r3, #3
 800fca4:	3304      	adds	r3, #4
 800fca6:	3415      	adds	r4, #21
 800fca8:	42a5      	cmp	r5, r4
 800fcaa:	bf38      	it	cc
 800fcac:	2304      	movcc	r3, #4
 800fcae:	4419      	add	r1, r3
 800fcb0:	4473      	add	r3, lr
 800fcb2:	469e      	mov	lr, r3
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	4565      	cmp	r5, ip
 800fcb8:	d30e      	bcc.n	800fcd8 <__mdiff+0xe8>
 800fcba:	f10c 0203 	add.w	r2, ip, #3
 800fcbe:	1a52      	subs	r2, r2, r1
 800fcc0:	f022 0203 	bic.w	r2, r2, #3
 800fcc4:	3903      	subs	r1, #3
 800fcc6:	458c      	cmp	ip, r1
 800fcc8:	bf38      	it	cc
 800fcca:	2200      	movcc	r2, #0
 800fccc:	441a      	add	r2, r3
 800fcce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fcd2:	b17b      	cbz	r3, 800fcf4 <__mdiff+0x104>
 800fcd4:	6106      	str	r6, [r0, #16]
 800fcd6:	e7a5      	b.n	800fc24 <__mdiff+0x34>
 800fcd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800fcdc:	fa17 f488 	uxtah	r4, r7, r8
 800fce0:	1422      	asrs	r2, r4, #16
 800fce2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fce6:	b2a4      	uxth	r4, r4
 800fce8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fcec:	f84e 4b04 	str.w	r4, [lr], #4
 800fcf0:	1417      	asrs	r7, r2, #16
 800fcf2:	e7e0      	b.n	800fcb6 <__mdiff+0xc6>
 800fcf4:	3e01      	subs	r6, #1
 800fcf6:	e7ea      	b.n	800fcce <__mdiff+0xde>
 800fcf8:	08011fb4 	.word	0x08011fb4
 800fcfc:	080120a8 	.word	0x080120a8

0800fd00 <__ulp>:
 800fd00:	b082      	sub	sp, #8
 800fd02:	ed8d 0b00 	vstr	d0, [sp]
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	4912      	ldr	r1, [pc, #72]	; (800fd54 <__ulp+0x54>)
 800fd0a:	4019      	ands	r1, r3
 800fd0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fd10:	2900      	cmp	r1, #0
 800fd12:	dd05      	ble.n	800fd20 <__ulp+0x20>
 800fd14:	2200      	movs	r2, #0
 800fd16:	460b      	mov	r3, r1
 800fd18:	ec43 2b10 	vmov	d0, r2, r3
 800fd1c:	b002      	add	sp, #8
 800fd1e:	4770      	bx	lr
 800fd20:	4249      	negs	r1, r1
 800fd22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fd26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fd2a:	f04f 0200 	mov.w	r2, #0
 800fd2e:	f04f 0300 	mov.w	r3, #0
 800fd32:	da04      	bge.n	800fd3e <__ulp+0x3e>
 800fd34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fd38:	fa41 f300 	asr.w	r3, r1, r0
 800fd3c:	e7ec      	b.n	800fd18 <__ulp+0x18>
 800fd3e:	f1a0 0114 	sub.w	r1, r0, #20
 800fd42:	291e      	cmp	r1, #30
 800fd44:	bfda      	itte	le
 800fd46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd4e:	2101      	movgt	r1, #1
 800fd50:	460a      	mov	r2, r1
 800fd52:	e7e1      	b.n	800fd18 <__ulp+0x18>
 800fd54:	7ff00000 	.word	0x7ff00000

0800fd58 <__b2d>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	6905      	ldr	r5, [r0, #16]
 800fd5c:	f100 0714 	add.w	r7, r0, #20
 800fd60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd64:	1f2e      	subs	r6, r5, #4
 800fd66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f7ff fd52 	bl	800f814 <__hi0bits>
 800fd70:	f1c0 0320 	rsb	r3, r0, #32
 800fd74:	280a      	cmp	r0, #10
 800fd76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fdf4 <__b2d+0x9c>
 800fd7a:	600b      	str	r3, [r1, #0]
 800fd7c:	dc14      	bgt.n	800fda8 <__b2d+0x50>
 800fd7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd82:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd86:	42b7      	cmp	r7, r6
 800fd88:	ea41 030c 	orr.w	r3, r1, ip
 800fd8c:	bf34      	ite	cc
 800fd8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd92:	2100      	movcs	r1, #0
 800fd94:	3015      	adds	r0, #21
 800fd96:	fa04 f000 	lsl.w	r0, r4, r0
 800fd9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd9e:	ea40 0201 	orr.w	r2, r0, r1
 800fda2:	ec43 2b10 	vmov	d0, r2, r3
 800fda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda8:	42b7      	cmp	r7, r6
 800fdaa:	bf3a      	itte	cc
 800fdac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fdb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fdb4:	2100      	movcs	r1, #0
 800fdb6:	380b      	subs	r0, #11
 800fdb8:	d017      	beq.n	800fdea <__b2d+0x92>
 800fdba:	f1c0 0c20 	rsb	ip, r0, #32
 800fdbe:	fa04 f500 	lsl.w	r5, r4, r0
 800fdc2:	42be      	cmp	r6, r7
 800fdc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800fdc8:	ea45 0504 	orr.w	r5, r5, r4
 800fdcc:	bf8c      	ite	hi
 800fdce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fdd2:	2400      	movls	r4, #0
 800fdd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fdd8:	fa01 f000 	lsl.w	r0, r1, r0
 800fddc:	fa24 f40c 	lsr.w	r4, r4, ip
 800fde0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fde4:	ea40 0204 	orr.w	r2, r0, r4
 800fde8:	e7db      	b.n	800fda2 <__b2d+0x4a>
 800fdea:	ea44 030c 	orr.w	r3, r4, ip
 800fdee:	460a      	mov	r2, r1
 800fdf0:	e7d7      	b.n	800fda2 <__b2d+0x4a>
 800fdf2:	bf00      	nop
 800fdf4:	3ff00000 	.word	0x3ff00000

0800fdf8 <__d2b>:
 800fdf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fdfc:	4689      	mov	r9, r1
 800fdfe:	2101      	movs	r1, #1
 800fe00:	ec57 6b10 	vmov	r6, r7, d0
 800fe04:	4690      	mov	r8, r2
 800fe06:	f7ff fc0f 	bl	800f628 <_Balloc>
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	b930      	cbnz	r0, 800fe1c <__d2b+0x24>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b25      	ldr	r3, [pc, #148]	; (800fea8 <__d2b+0xb0>)
 800fe12:	4826      	ldr	r0, [pc, #152]	; (800feac <__d2b+0xb4>)
 800fe14:	f240 310a 	movw	r1, #778	; 0x30a
 800fe18:	f000 fd80 	bl	801091c <__assert_func>
 800fe1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe24:	bb35      	cbnz	r5, 800fe74 <__d2b+0x7c>
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	d028      	beq.n	800fe7e <__d2b+0x86>
 800fe2c:	4668      	mov	r0, sp
 800fe2e:	9600      	str	r6, [sp, #0]
 800fe30:	f7ff fd10 	bl	800f854 <__lo0bits>
 800fe34:	9900      	ldr	r1, [sp, #0]
 800fe36:	b300      	cbz	r0, 800fe7a <__d2b+0x82>
 800fe38:	9a01      	ldr	r2, [sp, #4]
 800fe3a:	f1c0 0320 	rsb	r3, r0, #32
 800fe3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe42:	430b      	orrs	r3, r1
 800fe44:	40c2      	lsrs	r2, r0
 800fe46:	6163      	str	r3, [r4, #20]
 800fe48:	9201      	str	r2, [sp, #4]
 800fe4a:	9b01      	ldr	r3, [sp, #4]
 800fe4c:	61a3      	str	r3, [r4, #24]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	bf14      	ite	ne
 800fe52:	2202      	movne	r2, #2
 800fe54:	2201      	moveq	r2, #1
 800fe56:	6122      	str	r2, [r4, #16]
 800fe58:	b1d5      	cbz	r5, 800fe90 <__d2b+0x98>
 800fe5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe5e:	4405      	add	r5, r0
 800fe60:	f8c9 5000 	str.w	r5, [r9]
 800fe64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe68:	f8c8 0000 	str.w	r0, [r8]
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	b003      	add	sp, #12
 800fe70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe78:	e7d5      	b.n	800fe26 <__d2b+0x2e>
 800fe7a:	6161      	str	r1, [r4, #20]
 800fe7c:	e7e5      	b.n	800fe4a <__d2b+0x52>
 800fe7e:	a801      	add	r0, sp, #4
 800fe80:	f7ff fce8 	bl	800f854 <__lo0bits>
 800fe84:	9b01      	ldr	r3, [sp, #4]
 800fe86:	6163      	str	r3, [r4, #20]
 800fe88:	2201      	movs	r2, #1
 800fe8a:	6122      	str	r2, [r4, #16]
 800fe8c:	3020      	adds	r0, #32
 800fe8e:	e7e3      	b.n	800fe58 <__d2b+0x60>
 800fe90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe98:	f8c9 0000 	str.w	r0, [r9]
 800fe9c:	6918      	ldr	r0, [r3, #16]
 800fe9e:	f7ff fcb9 	bl	800f814 <__hi0bits>
 800fea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fea6:	e7df      	b.n	800fe68 <__d2b+0x70>
 800fea8:	08011fb4 	.word	0x08011fb4
 800feac:	080120a8 	.word	0x080120a8

0800feb0 <__ratio>:
 800feb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	4688      	mov	r8, r1
 800feb6:	4669      	mov	r1, sp
 800feb8:	4681      	mov	r9, r0
 800feba:	f7ff ff4d 	bl	800fd58 <__b2d>
 800febe:	a901      	add	r1, sp, #4
 800fec0:	4640      	mov	r0, r8
 800fec2:	ec55 4b10 	vmov	r4, r5, d0
 800fec6:	f7ff ff47 	bl	800fd58 <__b2d>
 800feca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fece:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fed2:	eba3 0c02 	sub.w	ip, r3, r2
 800fed6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800feda:	1a9b      	subs	r3, r3, r2
 800fedc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fee0:	ec51 0b10 	vmov	r0, r1, d0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	bfd6      	itet	le
 800fee8:	460a      	movle	r2, r1
 800feea:	462a      	movgt	r2, r5
 800feec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fef0:	468b      	mov	fp, r1
 800fef2:	462f      	mov	r7, r5
 800fef4:	bfd4      	ite	le
 800fef6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fefa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fefe:	4620      	mov	r0, r4
 800ff00:	ee10 2a10 	vmov	r2, s0
 800ff04:	465b      	mov	r3, fp
 800ff06:	4639      	mov	r1, r7
 800ff08:	f7f0 fca8 	bl	800085c <__aeabi_ddiv>
 800ff0c:	ec41 0b10 	vmov	d0, r0, r1
 800ff10:	b003      	add	sp, #12
 800ff12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff16 <__copybits>:
 800ff16:	3901      	subs	r1, #1
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	1149      	asrs	r1, r1, #5
 800ff1c:	6914      	ldr	r4, [r2, #16]
 800ff1e:	3101      	adds	r1, #1
 800ff20:	f102 0314 	add.w	r3, r2, #20
 800ff24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff2c:	1f05      	subs	r5, r0, #4
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	d30c      	bcc.n	800ff4c <__copybits+0x36>
 800ff32:	1aa3      	subs	r3, r4, r2
 800ff34:	3b11      	subs	r3, #17
 800ff36:	f023 0303 	bic.w	r3, r3, #3
 800ff3a:	3211      	adds	r2, #17
 800ff3c:	42a2      	cmp	r2, r4
 800ff3e:	bf88      	it	hi
 800ff40:	2300      	movhi	r3, #0
 800ff42:	4418      	add	r0, r3
 800ff44:	2300      	movs	r3, #0
 800ff46:	4288      	cmp	r0, r1
 800ff48:	d305      	bcc.n	800ff56 <__copybits+0x40>
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff54:	e7eb      	b.n	800ff2e <__copybits+0x18>
 800ff56:	f840 3b04 	str.w	r3, [r0], #4
 800ff5a:	e7f4      	b.n	800ff46 <__copybits+0x30>

0800ff5c <__any_on>:
 800ff5c:	f100 0214 	add.w	r2, r0, #20
 800ff60:	6900      	ldr	r0, [r0, #16]
 800ff62:	114b      	asrs	r3, r1, #5
 800ff64:	4298      	cmp	r0, r3
 800ff66:	b510      	push	{r4, lr}
 800ff68:	db11      	blt.n	800ff8e <__any_on+0x32>
 800ff6a:	dd0a      	ble.n	800ff82 <__any_on+0x26>
 800ff6c:	f011 011f 	ands.w	r1, r1, #31
 800ff70:	d007      	beq.n	800ff82 <__any_on+0x26>
 800ff72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff76:	fa24 f001 	lsr.w	r0, r4, r1
 800ff7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ff7e:	428c      	cmp	r4, r1
 800ff80:	d10b      	bne.n	800ff9a <__any_on+0x3e>
 800ff82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d803      	bhi.n	800ff92 <__any_on+0x36>
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	bd10      	pop	{r4, pc}
 800ff8e:	4603      	mov	r3, r0
 800ff90:	e7f7      	b.n	800ff82 <__any_on+0x26>
 800ff92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff96:	2900      	cmp	r1, #0
 800ff98:	d0f5      	beq.n	800ff86 <__any_on+0x2a>
 800ff9a:	2001      	movs	r0, #1
 800ff9c:	e7f6      	b.n	800ff8c <__any_on+0x30>

0800ff9e <_calloc_r>:
 800ff9e:	b513      	push	{r0, r1, r4, lr}
 800ffa0:	434a      	muls	r2, r1
 800ffa2:	4611      	mov	r1, r2
 800ffa4:	9201      	str	r2, [sp, #4]
 800ffa6:	f000 f859 	bl	801005c <_malloc_r>
 800ffaa:	4604      	mov	r4, r0
 800ffac:	b118      	cbz	r0, 800ffb6 <_calloc_r+0x18>
 800ffae:	9a01      	ldr	r2, [sp, #4]
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	f7fc fabd 	bl	800c530 <memset>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	b002      	add	sp, #8
 800ffba:	bd10      	pop	{r4, pc}

0800ffbc <_free_r>:
 800ffbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffbe:	2900      	cmp	r1, #0
 800ffc0:	d048      	beq.n	8010054 <_free_r+0x98>
 800ffc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc6:	9001      	str	r0, [sp, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f1a1 0404 	sub.w	r4, r1, #4
 800ffce:	bfb8      	it	lt
 800ffd0:	18e4      	addlt	r4, r4, r3
 800ffd2:	f000 fe35 	bl	8010c40 <__malloc_lock>
 800ffd6:	4a20      	ldr	r2, [pc, #128]	; (8010058 <_free_r+0x9c>)
 800ffd8:	9801      	ldr	r0, [sp, #4]
 800ffda:	6813      	ldr	r3, [r2, #0]
 800ffdc:	4615      	mov	r5, r2
 800ffde:	b933      	cbnz	r3, 800ffee <_free_r+0x32>
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	6014      	str	r4, [r2, #0]
 800ffe4:	b003      	add	sp, #12
 800ffe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffea:	f000 be2f 	b.w	8010c4c <__malloc_unlock>
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	d90b      	bls.n	801000a <_free_r+0x4e>
 800fff2:	6821      	ldr	r1, [r4, #0]
 800fff4:	1862      	adds	r2, r4, r1
 800fff6:	4293      	cmp	r3, r2
 800fff8:	bf04      	itt	eq
 800fffa:	681a      	ldreq	r2, [r3, #0]
 800fffc:	685b      	ldreq	r3, [r3, #4]
 800fffe:	6063      	str	r3, [r4, #4]
 8010000:	bf04      	itt	eq
 8010002:	1852      	addeq	r2, r2, r1
 8010004:	6022      	streq	r2, [r4, #0]
 8010006:	602c      	str	r4, [r5, #0]
 8010008:	e7ec      	b.n	800ffe4 <_free_r+0x28>
 801000a:	461a      	mov	r2, r3
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	b10b      	cbz	r3, 8010014 <_free_r+0x58>
 8010010:	42a3      	cmp	r3, r4
 8010012:	d9fa      	bls.n	801000a <_free_r+0x4e>
 8010014:	6811      	ldr	r1, [r2, #0]
 8010016:	1855      	adds	r5, r2, r1
 8010018:	42a5      	cmp	r5, r4
 801001a:	d10b      	bne.n	8010034 <_free_r+0x78>
 801001c:	6824      	ldr	r4, [r4, #0]
 801001e:	4421      	add	r1, r4
 8010020:	1854      	adds	r4, r2, r1
 8010022:	42a3      	cmp	r3, r4
 8010024:	6011      	str	r1, [r2, #0]
 8010026:	d1dd      	bne.n	800ffe4 <_free_r+0x28>
 8010028:	681c      	ldr	r4, [r3, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	6053      	str	r3, [r2, #4]
 801002e:	4421      	add	r1, r4
 8010030:	6011      	str	r1, [r2, #0]
 8010032:	e7d7      	b.n	800ffe4 <_free_r+0x28>
 8010034:	d902      	bls.n	801003c <_free_r+0x80>
 8010036:	230c      	movs	r3, #12
 8010038:	6003      	str	r3, [r0, #0]
 801003a:	e7d3      	b.n	800ffe4 <_free_r+0x28>
 801003c:	6825      	ldr	r5, [r4, #0]
 801003e:	1961      	adds	r1, r4, r5
 8010040:	428b      	cmp	r3, r1
 8010042:	bf04      	itt	eq
 8010044:	6819      	ldreq	r1, [r3, #0]
 8010046:	685b      	ldreq	r3, [r3, #4]
 8010048:	6063      	str	r3, [r4, #4]
 801004a:	bf04      	itt	eq
 801004c:	1949      	addeq	r1, r1, r5
 801004e:	6021      	streq	r1, [r4, #0]
 8010050:	6054      	str	r4, [r2, #4]
 8010052:	e7c7      	b.n	800ffe4 <_free_r+0x28>
 8010054:	b003      	add	sp, #12
 8010056:	bd30      	pop	{r4, r5, pc}
 8010058:	2000026c 	.word	0x2000026c

0801005c <_malloc_r>:
 801005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005e:	1ccd      	adds	r5, r1, #3
 8010060:	f025 0503 	bic.w	r5, r5, #3
 8010064:	3508      	adds	r5, #8
 8010066:	2d0c      	cmp	r5, #12
 8010068:	bf38      	it	cc
 801006a:	250c      	movcc	r5, #12
 801006c:	2d00      	cmp	r5, #0
 801006e:	4606      	mov	r6, r0
 8010070:	db01      	blt.n	8010076 <_malloc_r+0x1a>
 8010072:	42a9      	cmp	r1, r5
 8010074:	d903      	bls.n	801007e <_malloc_r+0x22>
 8010076:	230c      	movs	r3, #12
 8010078:	6033      	str	r3, [r6, #0]
 801007a:	2000      	movs	r0, #0
 801007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801007e:	f000 fddf 	bl	8010c40 <__malloc_lock>
 8010082:	4921      	ldr	r1, [pc, #132]	; (8010108 <_malloc_r+0xac>)
 8010084:	680a      	ldr	r2, [r1, #0]
 8010086:	4614      	mov	r4, r2
 8010088:	b99c      	cbnz	r4, 80100b2 <_malloc_r+0x56>
 801008a:	4f20      	ldr	r7, [pc, #128]	; (801010c <_malloc_r+0xb0>)
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	b923      	cbnz	r3, 801009a <_malloc_r+0x3e>
 8010090:	4621      	mov	r1, r4
 8010092:	4630      	mov	r0, r6
 8010094:	f000 fafc 	bl	8010690 <_sbrk_r>
 8010098:	6038      	str	r0, [r7, #0]
 801009a:	4629      	mov	r1, r5
 801009c:	4630      	mov	r0, r6
 801009e:	f000 faf7 	bl	8010690 <_sbrk_r>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d123      	bne.n	80100ee <_malloc_r+0x92>
 80100a6:	230c      	movs	r3, #12
 80100a8:	6033      	str	r3, [r6, #0]
 80100aa:	4630      	mov	r0, r6
 80100ac:	f000 fdce 	bl	8010c4c <__malloc_unlock>
 80100b0:	e7e3      	b.n	801007a <_malloc_r+0x1e>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	1b5b      	subs	r3, r3, r5
 80100b6:	d417      	bmi.n	80100e8 <_malloc_r+0x8c>
 80100b8:	2b0b      	cmp	r3, #11
 80100ba:	d903      	bls.n	80100c4 <_malloc_r+0x68>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	441c      	add	r4, r3
 80100c0:	6025      	str	r5, [r4, #0]
 80100c2:	e004      	b.n	80100ce <_malloc_r+0x72>
 80100c4:	6863      	ldr	r3, [r4, #4]
 80100c6:	42a2      	cmp	r2, r4
 80100c8:	bf0c      	ite	eq
 80100ca:	600b      	streq	r3, [r1, #0]
 80100cc:	6053      	strne	r3, [r2, #4]
 80100ce:	4630      	mov	r0, r6
 80100d0:	f000 fdbc 	bl	8010c4c <__malloc_unlock>
 80100d4:	f104 000b 	add.w	r0, r4, #11
 80100d8:	1d23      	adds	r3, r4, #4
 80100da:	f020 0007 	bic.w	r0, r0, #7
 80100de:	1ac2      	subs	r2, r0, r3
 80100e0:	d0cc      	beq.n	801007c <_malloc_r+0x20>
 80100e2:	1a1b      	subs	r3, r3, r0
 80100e4:	50a3      	str	r3, [r4, r2]
 80100e6:	e7c9      	b.n	801007c <_malloc_r+0x20>
 80100e8:	4622      	mov	r2, r4
 80100ea:	6864      	ldr	r4, [r4, #4]
 80100ec:	e7cc      	b.n	8010088 <_malloc_r+0x2c>
 80100ee:	1cc4      	adds	r4, r0, #3
 80100f0:	f024 0403 	bic.w	r4, r4, #3
 80100f4:	42a0      	cmp	r0, r4
 80100f6:	d0e3      	beq.n	80100c0 <_malloc_r+0x64>
 80100f8:	1a21      	subs	r1, r4, r0
 80100fa:	4630      	mov	r0, r6
 80100fc:	f000 fac8 	bl	8010690 <_sbrk_r>
 8010100:	3001      	adds	r0, #1
 8010102:	d1dd      	bne.n	80100c0 <_malloc_r+0x64>
 8010104:	e7cf      	b.n	80100a6 <_malloc_r+0x4a>
 8010106:	bf00      	nop
 8010108:	2000026c 	.word	0x2000026c
 801010c:	20000270 	.word	0x20000270

08010110 <__ssputs_r>:
 8010110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010114:	688e      	ldr	r6, [r1, #8]
 8010116:	429e      	cmp	r6, r3
 8010118:	4682      	mov	sl, r0
 801011a:	460c      	mov	r4, r1
 801011c:	4690      	mov	r8, r2
 801011e:	461f      	mov	r7, r3
 8010120:	d838      	bhi.n	8010194 <__ssputs_r+0x84>
 8010122:	898a      	ldrh	r2, [r1, #12]
 8010124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010128:	d032      	beq.n	8010190 <__ssputs_r+0x80>
 801012a:	6825      	ldr	r5, [r4, #0]
 801012c:	6909      	ldr	r1, [r1, #16]
 801012e:	eba5 0901 	sub.w	r9, r5, r1
 8010132:	6965      	ldr	r5, [r4, #20]
 8010134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801013c:	3301      	adds	r3, #1
 801013e:	444b      	add	r3, r9
 8010140:	106d      	asrs	r5, r5, #1
 8010142:	429d      	cmp	r5, r3
 8010144:	bf38      	it	cc
 8010146:	461d      	movcc	r5, r3
 8010148:	0553      	lsls	r3, r2, #21
 801014a:	d531      	bpl.n	80101b0 <__ssputs_r+0xa0>
 801014c:	4629      	mov	r1, r5
 801014e:	f7ff ff85 	bl	801005c <_malloc_r>
 8010152:	4606      	mov	r6, r0
 8010154:	b950      	cbnz	r0, 801016c <__ssputs_r+0x5c>
 8010156:	230c      	movs	r3, #12
 8010158:	f8ca 3000 	str.w	r3, [sl]
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016c:	6921      	ldr	r1, [r4, #16]
 801016e:	464a      	mov	r2, r9
 8010170:	f7ff fa4c 	bl	800f60c <memcpy>
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801017a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801017e:	81a3      	strh	r3, [r4, #12]
 8010180:	6126      	str	r6, [r4, #16]
 8010182:	6165      	str	r5, [r4, #20]
 8010184:	444e      	add	r6, r9
 8010186:	eba5 0509 	sub.w	r5, r5, r9
 801018a:	6026      	str	r6, [r4, #0]
 801018c:	60a5      	str	r5, [r4, #8]
 801018e:	463e      	mov	r6, r7
 8010190:	42be      	cmp	r6, r7
 8010192:	d900      	bls.n	8010196 <__ssputs_r+0x86>
 8010194:	463e      	mov	r6, r7
 8010196:	4632      	mov	r2, r6
 8010198:	6820      	ldr	r0, [r4, #0]
 801019a:	4641      	mov	r1, r8
 801019c:	f000 fd36 	bl	8010c0c <memmove>
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	6822      	ldr	r2, [r4, #0]
 80101a4:	1b9b      	subs	r3, r3, r6
 80101a6:	4432      	add	r2, r6
 80101a8:	60a3      	str	r3, [r4, #8]
 80101aa:	6022      	str	r2, [r4, #0]
 80101ac:	2000      	movs	r0, #0
 80101ae:	e7db      	b.n	8010168 <__ssputs_r+0x58>
 80101b0:	462a      	mov	r2, r5
 80101b2:	f000 fd51 	bl	8010c58 <_realloc_r>
 80101b6:	4606      	mov	r6, r0
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d1e1      	bne.n	8010180 <__ssputs_r+0x70>
 80101bc:	6921      	ldr	r1, [r4, #16]
 80101be:	4650      	mov	r0, sl
 80101c0:	f7ff fefc 	bl	800ffbc <_free_r>
 80101c4:	e7c7      	b.n	8010156 <__ssputs_r+0x46>
	...

080101c8 <_svfiprintf_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	4698      	mov	r8, r3
 80101ce:	898b      	ldrh	r3, [r1, #12]
 80101d0:	061b      	lsls	r3, r3, #24
 80101d2:	b09d      	sub	sp, #116	; 0x74
 80101d4:	4607      	mov	r7, r0
 80101d6:	460d      	mov	r5, r1
 80101d8:	4614      	mov	r4, r2
 80101da:	d50e      	bpl.n	80101fa <_svfiprintf_r+0x32>
 80101dc:	690b      	ldr	r3, [r1, #16]
 80101de:	b963      	cbnz	r3, 80101fa <_svfiprintf_r+0x32>
 80101e0:	2140      	movs	r1, #64	; 0x40
 80101e2:	f7ff ff3b 	bl	801005c <_malloc_r>
 80101e6:	6028      	str	r0, [r5, #0]
 80101e8:	6128      	str	r0, [r5, #16]
 80101ea:	b920      	cbnz	r0, 80101f6 <_svfiprintf_r+0x2e>
 80101ec:	230c      	movs	r3, #12
 80101ee:	603b      	str	r3, [r7, #0]
 80101f0:	f04f 30ff 	mov.w	r0, #4294967295
 80101f4:	e0d1      	b.n	801039a <_svfiprintf_r+0x1d2>
 80101f6:	2340      	movs	r3, #64	; 0x40
 80101f8:	616b      	str	r3, [r5, #20]
 80101fa:	2300      	movs	r3, #0
 80101fc:	9309      	str	r3, [sp, #36]	; 0x24
 80101fe:	2320      	movs	r3, #32
 8010200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010204:	f8cd 800c 	str.w	r8, [sp, #12]
 8010208:	2330      	movs	r3, #48	; 0x30
 801020a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103b4 <_svfiprintf_r+0x1ec>
 801020e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010212:	f04f 0901 	mov.w	r9, #1
 8010216:	4623      	mov	r3, r4
 8010218:	469a      	mov	sl, r3
 801021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801021e:	b10a      	cbz	r2, 8010224 <_svfiprintf_r+0x5c>
 8010220:	2a25      	cmp	r2, #37	; 0x25
 8010222:	d1f9      	bne.n	8010218 <_svfiprintf_r+0x50>
 8010224:	ebba 0b04 	subs.w	fp, sl, r4
 8010228:	d00b      	beq.n	8010242 <_svfiprintf_r+0x7a>
 801022a:	465b      	mov	r3, fp
 801022c:	4622      	mov	r2, r4
 801022e:	4629      	mov	r1, r5
 8010230:	4638      	mov	r0, r7
 8010232:	f7ff ff6d 	bl	8010110 <__ssputs_r>
 8010236:	3001      	adds	r0, #1
 8010238:	f000 80aa 	beq.w	8010390 <_svfiprintf_r+0x1c8>
 801023c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801023e:	445a      	add	r2, fp
 8010240:	9209      	str	r2, [sp, #36]	; 0x24
 8010242:	f89a 3000 	ldrb.w	r3, [sl]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80a2 	beq.w	8010390 <_svfiprintf_r+0x1c8>
 801024c:	2300      	movs	r3, #0
 801024e:	f04f 32ff 	mov.w	r2, #4294967295
 8010252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010256:	f10a 0a01 	add.w	sl, sl, #1
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	9307      	str	r3, [sp, #28]
 801025e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010262:	931a      	str	r3, [sp, #104]	; 0x68
 8010264:	4654      	mov	r4, sl
 8010266:	2205      	movs	r2, #5
 8010268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801026c:	4851      	ldr	r0, [pc, #324]	; (80103b4 <_svfiprintf_r+0x1ec>)
 801026e:	f7ef ffbf 	bl	80001f0 <memchr>
 8010272:	9a04      	ldr	r2, [sp, #16]
 8010274:	b9d8      	cbnz	r0, 80102ae <_svfiprintf_r+0xe6>
 8010276:	06d0      	lsls	r0, r2, #27
 8010278:	bf44      	itt	mi
 801027a:	2320      	movmi	r3, #32
 801027c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010280:	0711      	lsls	r1, r2, #28
 8010282:	bf44      	itt	mi
 8010284:	232b      	movmi	r3, #43	; 0x2b
 8010286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801028a:	f89a 3000 	ldrb.w	r3, [sl]
 801028e:	2b2a      	cmp	r3, #42	; 0x2a
 8010290:	d015      	beq.n	80102be <_svfiprintf_r+0xf6>
 8010292:	9a07      	ldr	r2, [sp, #28]
 8010294:	4654      	mov	r4, sl
 8010296:	2000      	movs	r0, #0
 8010298:	f04f 0c0a 	mov.w	ip, #10
 801029c:	4621      	mov	r1, r4
 801029e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102a2:	3b30      	subs	r3, #48	; 0x30
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d94e      	bls.n	8010346 <_svfiprintf_r+0x17e>
 80102a8:	b1b0      	cbz	r0, 80102d8 <_svfiprintf_r+0x110>
 80102aa:	9207      	str	r2, [sp, #28]
 80102ac:	e014      	b.n	80102d8 <_svfiprintf_r+0x110>
 80102ae:	eba0 0308 	sub.w	r3, r0, r8
 80102b2:	fa09 f303 	lsl.w	r3, r9, r3
 80102b6:	4313      	orrs	r3, r2
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	46a2      	mov	sl, r4
 80102bc:	e7d2      	b.n	8010264 <_svfiprintf_r+0x9c>
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	1d19      	adds	r1, r3, #4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	9103      	str	r1, [sp, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bfbb      	ittet	lt
 80102ca:	425b      	neglt	r3, r3
 80102cc:	f042 0202 	orrlt.w	r2, r2, #2
 80102d0:	9307      	strge	r3, [sp, #28]
 80102d2:	9307      	strlt	r3, [sp, #28]
 80102d4:	bfb8      	it	lt
 80102d6:	9204      	strlt	r2, [sp, #16]
 80102d8:	7823      	ldrb	r3, [r4, #0]
 80102da:	2b2e      	cmp	r3, #46	; 0x2e
 80102dc:	d10c      	bne.n	80102f8 <_svfiprintf_r+0x130>
 80102de:	7863      	ldrb	r3, [r4, #1]
 80102e0:	2b2a      	cmp	r3, #42	; 0x2a
 80102e2:	d135      	bne.n	8010350 <_svfiprintf_r+0x188>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	9203      	str	r2, [sp, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	bfb8      	it	lt
 80102f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80102f4:	3402      	adds	r4, #2
 80102f6:	9305      	str	r3, [sp, #20]
 80102f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103c4 <_svfiprintf_r+0x1fc>
 80102fc:	7821      	ldrb	r1, [r4, #0]
 80102fe:	2203      	movs	r2, #3
 8010300:	4650      	mov	r0, sl
 8010302:	f7ef ff75 	bl	80001f0 <memchr>
 8010306:	b140      	cbz	r0, 801031a <_svfiprintf_r+0x152>
 8010308:	2340      	movs	r3, #64	; 0x40
 801030a:	eba0 000a 	sub.w	r0, r0, sl
 801030e:	fa03 f000 	lsl.w	r0, r3, r0
 8010312:	9b04      	ldr	r3, [sp, #16]
 8010314:	4303      	orrs	r3, r0
 8010316:	3401      	adds	r4, #1
 8010318:	9304      	str	r3, [sp, #16]
 801031a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031e:	4826      	ldr	r0, [pc, #152]	; (80103b8 <_svfiprintf_r+0x1f0>)
 8010320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010324:	2206      	movs	r2, #6
 8010326:	f7ef ff63 	bl	80001f0 <memchr>
 801032a:	2800      	cmp	r0, #0
 801032c:	d038      	beq.n	80103a0 <_svfiprintf_r+0x1d8>
 801032e:	4b23      	ldr	r3, [pc, #140]	; (80103bc <_svfiprintf_r+0x1f4>)
 8010330:	bb1b      	cbnz	r3, 801037a <_svfiprintf_r+0x1b2>
 8010332:	9b03      	ldr	r3, [sp, #12]
 8010334:	3307      	adds	r3, #7
 8010336:	f023 0307 	bic.w	r3, r3, #7
 801033a:	3308      	adds	r3, #8
 801033c:	9303      	str	r3, [sp, #12]
 801033e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010340:	4433      	add	r3, r6
 8010342:	9309      	str	r3, [sp, #36]	; 0x24
 8010344:	e767      	b.n	8010216 <_svfiprintf_r+0x4e>
 8010346:	fb0c 3202 	mla	r2, ip, r2, r3
 801034a:	460c      	mov	r4, r1
 801034c:	2001      	movs	r0, #1
 801034e:	e7a5      	b.n	801029c <_svfiprintf_r+0xd4>
 8010350:	2300      	movs	r3, #0
 8010352:	3401      	adds	r4, #1
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	4619      	mov	r1, r3
 8010358:	f04f 0c0a 	mov.w	ip, #10
 801035c:	4620      	mov	r0, r4
 801035e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010362:	3a30      	subs	r2, #48	; 0x30
 8010364:	2a09      	cmp	r2, #9
 8010366:	d903      	bls.n	8010370 <_svfiprintf_r+0x1a8>
 8010368:	2b00      	cmp	r3, #0
 801036a:	d0c5      	beq.n	80102f8 <_svfiprintf_r+0x130>
 801036c:	9105      	str	r1, [sp, #20]
 801036e:	e7c3      	b.n	80102f8 <_svfiprintf_r+0x130>
 8010370:	fb0c 2101 	mla	r1, ip, r1, r2
 8010374:	4604      	mov	r4, r0
 8010376:	2301      	movs	r3, #1
 8010378:	e7f0      	b.n	801035c <_svfiprintf_r+0x194>
 801037a:	ab03      	add	r3, sp, #12
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	462a      	mov	r2, r5
 8010380:	4b0f      	ldr	r3, [pc, #60]	; (80103c0 <_svfiprintf_r+0x1f8>)
 8010382:	a904      	add	r1, sp, #16
 8010384:	4638      	mov	r0, r7
 8010386:	f7fc f97b 	bl	800c680 <_printf_float>
 801038a:	1c42      	adds	r2, r0, #1
 801038c:	4606      	mov	r6, r0
 801038e:	d1d6      	bne.n	801033e <_svfiprintf_r+0x176>
 8010390:	89ab      	ldrh	r3, [r5, #12]
 8010392:	065b      	lsls	r3, r3, #25
 8010394:	f53f af2c 	bmi.w	80101f0 <_svfiprintf_r+0x28>
 8010398:	9809      	ldr	r0, [sp, #36]	; 0x24
 801039a:	b01d      	add	sp, #116	; 0x74
 801039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a0:	ab03      	add	r3, sp, #12
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	462a      	mov	r2, r5
 80103a6:	4b06      	ldr	r3, [pc, #24]	; (80103c0 <_svfiprintf_r+0x1f8>)
 80103a8:	a904      	add	r1, sp, #16
 80103aa:	4638      	mov	r0, r7
 80103ac:	f7fc fc0c 	bl	800cbc8 <_printf_i>
 80103b0:	e7eb      	b.n	801038a <_svfiprintf_r+0x1c2>
 80103b2:	bf00      	nop
 80103b4:	08012204 	.word	0x08012204
 80103b8:	0801220e 	.word	0x0801220e
 80103bc:	0800c681 	.word	0x0800c681
 80103c0:	08010111 	.word	0x08010111
 80103c4:	0801220a 	.word	0x0801220a

080103c8 <__sfputc_r>:
 80103c8:	6893      	ldr	r3, [r2, #8]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	b410      	push	{r4}
 80103d0:	6093      	str	r3, [r2, #8]
 80103d2:	da08      	bge.n	80103e6 <__sfputc_r+0x1e>
 80103d4:	6994      	ldr	r4, [r2, #24]
 80103d6:	42a3      	cmp	r3, r4
 80103d8:	db01      	blt.n	80103de <__sfputc_r+0x16>
 80103da:	290a      	cmp	r1, #10
 80103dc:	d103      	bne.n	80103e6 <__sfputc_r+0x1e>
 80103de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103e2:	f000 b9bb 	b.w	801075c <__swbuf_r>
 80103e6:	6813      	ldr	r3, [r2, #0]
 80103e8:	1c58      	adds	r0, r3, #1
 80103ea:	6010      	str	r0, [r2, #0]
 80103ec:	7019      	strb	r1, [r3, #0]
 80103ee:	4608      	mov	r0, r1
 80103f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <__sfputs_r>:
 80103f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f8:	4606      	mov	r6, r0
 80103fa:	460f      	mov	r7, r1
 80103fc:	4614      	mov	r4, r2
 80103fe:	18d5      	adds	r5, r2, r3
 8010400:	42ac      	cmp	r4, r5
 8010402:	d101      	bne.n	8010408 <__sfputs_r+0x12>
 8010404:	2000      	movs	r0, #0
 8010406:	e007      	b.n	8010418 <__sfputs_r+0x22>
 8010408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801040c:	463a      	mov	r2, r7
 801040e:	4630      	mov	r0, r6
 8010410:	f7ff ffda 	bl	80103c8 <__sfputc_r>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d1f3      	bne.n	8010400 <__sfputs_r+0xa>
 8010418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801041c <_vfiprintf_r>:
 801041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	460d      	mov	r5, r1
 8010422:	b09d      	sub	sp, #116	; 0x74
 8010424:	4614      	mov	r4, r2
 8010426:	4698      	mov	r8, r3
 8010428:	4606      	mov	r6, r0
 801042a:	b118      	cbz	r0, 8010434 <_vfiprintf_r+0x18>
 801042c:	6983      	ldr	r3, [r0, #24]
 801042e:	b90b      	cbnz	r3, 8010434 <_vfiprintf_r+0x18>
 8010430:	f7fe fcbe 	bl	800edb0 <__sinit>
 8010434:	4b89      	ldr	r3, [pc, #548]	; (801065c <_vfiprintf_r+0x240>)
 8010436:	429d      	cmp	r5, r3
 8010438:	d11b      	bne.n	8010472 <_vfiprintf_r+0x56>
 801043a:	6875      	ldr	r5, [r6, #4]
 801043c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801043e:	07d9      	lsls	r1, r3, #31
 8010440:	d405      	bmi.n	801044e <_vfiprintf_r+0x32>
 8010442:	89ab      	ldrh	r3, [r5, #12]
 8010444:	059a      	lsls	r2, r3, #22
 8010446:	d402      	bmi.n	801044e <_vfiprintf_r+0x32>
 8010448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801044a:	f7ff f8c2 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 801044e:	89ab      	ldrh	r3, [r5, #12]
 8010450:	071b      	lsls	r3, r3, #28
 8010452:	d501      	bpl.n	8010458 <_vfiprintf_r+0x3c>
 8010454:	692b      	ldr	r3, [r5, #16]
 8010456:	b9eb      	cbnz	r3, 8010494 <_vfiprintf_r+0x78>
 8010458:	4629      	mov	r1, r5
 801045a:	4630      	mov	r0, r6
 801045c:	f000 f9f0 	bl	8010840 <__swsetup_r>
 8010460:	b1c0      	cbz	r0, 8010494 <_vfiprintf_r+0x78>
 8010462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010464:	07dc      	lsls	r4, r3, #31
 8010466:	d50e      	bpl.n	8010486 <_vfiprintf_r+0x6a>
 8010468:	f04f 30ff 	mov.w	r0, #4294967295
 801046c:	b01d      	add	sp, #116	; 0x74
 801046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010472:	4b7b      	ldr	r3, [pc, #492]	; (8010660 <_vfiprintf_r+0x244>)
 8010474:	429d      	cmp	r5, r3
 8010476:	d101      	bne.n	801047c <_vfiprintf_r+0x60>
 8010478:	68b5      	ldr	r5, [r6, #8]
 801047a:	e7df      	b.n	801043c <_vfiprintf_r+0x20>
 801047c:	4b79      	ldr	r3, [pc, #484]	; (8010664 <_vfiprintf_r+0x248>)
 801047e:	429d      	cmp	r5, r3
 8010480:	bf08      	it	eq
 8010482:	68f5      	ldreq	r5, [r6, #12]
 8010484:	e7da      	b.n	801043c <_vfiprintf_r+0x20>
 8010486:	89ab      	ldrh	r3, [r5, #12]
 8010488:	0598      	lsls	r0, r3, #22
 801048a:	d4ed      	bmi.n	8010468 <_vfiprintf_r+0x4c>
 801048c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801048e:	f7ff f8a1 	bl	800f5d4 <__retarget_lock_release_recursive>
 8010492:	e7e9      	b.n	8010468 <_vfiprintf_r+0x4c>
 8010494:	2300      	movs	r3, #0
 8010496:	9309      	str	r3, [sp, #36]	; 0x24
 8010498:	2320      	movs	r3, #32
 801049a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801049e:	f8cd 800c 	str.w	r8, [sp, #12]
 80104a2:	2330      	movs	r3, #48	; 0x30
 80104a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010668 <_vfiprintf_r+0x24c>
 80104a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104ac:	f04f 0901 	mov.w	r9, #1
 80104b0:	4623      	mov	r3, r4
 80104b2:	469a      	mov	sl, r3
 80104b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104b8:	b10a      	cbz	r2, 80104be <_vfiprintf_r+0xa2>
 80104ba:	2a25      	cmp	r2, #37	; 0x25
 80104bc:	d1f9      	bne.n	80104b2 <_vfiprintf_r+0x96>
 80104be:	ebba 0b04 	subs.w	fp, sl, r4
 80104c2:	d00b      	beq.n	80104dc <_vfiprintf_r+0xc0>
 80104c4:	465b      	mov	r3, fp
 80104c6:	4622      	mov	r2, r4
 80104c8:	4629      	mov	r1, r5
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7ff ff93 	bl	80103f6 <__sfputs_r>
 80104d0:	3001      	adds	r0, #1
 80104d2:	f000 80aa 	beq.w	801062a <_vfiprintf_r+0x20e>
 80104d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104d8:	445a      	add	r2, fp
 80104da:	9209      	str	r2, [sp, #36]	; 0x24
 80104dc:	f89a 3000 	ldrb.w	r3, [sl]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 80a2 	beq.w	801062a <_vfiprintf_r+0x20e>
 80104e6:	2300      	movs	r3, #0
 80104e8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104f0:	f10a 0a01 	add.w	sl, sl, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	9307      	str	r3, [sp, #28]
 80104f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104fc:	931a      	str	r3, [sp, #104]	; 0x68
 80104fe:	4654      	mov	r4, sl
 8010500:	2205      	movs	r2, #5
 8010502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010506:	4858      	ldr	r0, [pc, #352]	; (8010668 <_vfiprintf_r+0x24c>)
 8010508:	f7ef fe72 	bl	80001f0 <memchr>
 801050c:	9a04      	ldr	r2, [sp, #16]
 801050e:	b9d8      	cbnz	r0, 8010548 <_vfiprintf_r+0x12c>
 8010510:	06d1      	lsls	r1, r2, #27
 8010512:	bf44      	itt	mi
 8010514:	2320      	movmi	r3, #32
 8010516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801051a:	0713      	lsls	r3, r2, #28
 801051c:	bf44      	itt	mi
 801051e:	232b      	movmi	r3, #43	; 0x2b
 8010520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010524:	f89a 3000 	ldrb.w	r3, [sl]
 8010528:	2b2a      	cmp	r3, #42	; 0x2a
 801052a:	d015      	beq.n	8010558 <_vfiprintf_r+0x13c>
 801052c:	9a07      	ldr	r2, [sp, #28]
 801052e:	4654      	mov	r4, sl
 8010530:	2000      	movs	r0, #0
 8010532:	f04f 0c0a 	mov.w	ip, #10
 8010536:	4621      	mov	r1, r4
 8010538:	f811 3b01 	ldrb.w	r3, [r1], #1
 801053c:	3b30      	subs	r3, #48	; 0x30
 801053e:	2b09      	cmp	r3, #9
 8010540:	d94e      	bls.n	80105e0 <_vfiprintf_r+0x1c4>
 8010542:	b1b0      	cbz	r0, 8010572 <_vfiprintf_r+0x156>
 8010544:	9207      	str	r2, [sp, #28]
 8010546:	e014      	b.n	8010572 <_vfiprintf_r+0x156>
 8010548:	eba0 0308 	sub.w	r3, r0, r8
 801054c:	fa09 f303 	lsl.w	r3, r9, r3
 8010550:	4313      	orrs	r3, r2
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	46a2      	mov	sl, r4
 8010556:	e7d2      	b.n	80104fe <_vfiprintf_r+0xe2>
 8010558:	9b03      	ldr	r3, [sp, #12]
 801055a:	1d19      	adds	r1, r3, #4
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	9103      	str	r1, [sp, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	bfbb      	ittet	lt
 8010564:	425b      	neglt	r3, r3
 8010566:	f042 0202 	orrlt.w	r2, r2, #2
 801056a:	9307      	strge	r3, [sp, #28]
 801056c:	9307      	strlt	r3, [sp, #28]
 801056e:	bfb8      	it	lt
 8010570:	9204      	strlt	r2, [sp, #16]
 8010572:	7823      	ldrb	r3, [r4, #0]
 8010574:	2b2e      	cmp	r3, #46	; 0x2e
 8010576:	d10c      	bne.n	8010592 <_vfiprintf_r+0x176>
 8010578:	7863      	ldrb	r3, [r4, #1]
 801057a:	2b2a      	cmp	r3, #42	; 0x2a
 801057c:	d135      	bne.n	80105ea <_vfiprintf_r+0x1ce>
 801057e:	9b03      	ldr	r3, [sp, #12]
 8010580:	1d1a      	adds	r2, r3, #4
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	9203      	str	r2, [sp, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfb8      	it	lt
 801058a:	f04f 33ff 	movlt.w	r3, #4294967295
 801058e:	3402      	adds	r4, #2
 8010590:	9305      	str	r3, [sp, #20]
 8010592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010678 <_vfiprintf_r+0x25c>
 8010596:	7821      	ldrb	r1, [r4, #0]
 8010598:	2203      	movs	r2, #3
 801059a:	4650      	mov	r0, sl
 801059c:	f7ef fe28 	bl	80001f0 <memchr>
 80105a0:	b140      	cbz	r0, 80105b4 <_vfiprintf_r+0x198>
 80105a2:	2340      	movs	r3, #64	; 0x40
 80105a4:	eba0 000a 	sub.w	r0, r0, sl
 80105a8:	fa03 f000 	lsl.w	r0, r3, r0
 80105ac:	9b04      	ldr	r3, [sp, #16]
 80105ae:	4303      	orrs	r3, r0
 80105b0:	3401      	adds	r4, #1
 80105b2:	9304      	str	r3, [sp, #16]
 80105b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b8:	482c      	ldr	r0, [pc, #176]	; (801066c <_vfiprintf_r+0x250>)
 80105ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105be:	2206      	movs	r2, #6
 80105c0:	f7ef fe16 	bl	80001f0 <memchr>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d03f      	beq.n	8010648 <_vfiprintf_r+0x22c>
 80105c8:	4b29      	ldr	r3, [pc, #164]	; (8010670 <_vfiprintf_r+0x254>)
 80105ca:	bb1b      	cbnz	r3, 8010614 <_vfiprintf_r+0x1f8>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	3307      	adds	r3, #7
 80105d0:	f023 0307 	bic.w	r3, r3, #7
 80105d4:	3308      	adds	r3, #8
 80105d6:	9303      	str	r3, [sp, #12]
 80105d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105da:	443b      	add	r3, r7
 80105dc:	9309      	str	r3, [sp, #36]	; 0x24
 80105de:	e767      	b.n	80104b0 <_vfiprintf_r+0x94>
 80105e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80105e4:	460c      	mov	r4, r1
 80105e6:	2001      	movs	r0, #1
 80105e8:	e7a5      	b.n	8010536 <_vfiprintf_r+0x11a>
 80105ea:	2300      	movs	r3, #0
 80105ec:	3401      	adds	r4, #1
 80105ee:	9305      	str	r3, [sp, #20]
 80105f0:	4619      	mov	r1, r3
 80105f2:	f04f 0c0a 	mov.w	ip, #10
 80105f6:	4620      	mov	r0, r4
 80105f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105fc:	3a30      	subs	r2, #48	; 0x30
 80105fe:	2a09      	cmp	r2, #9
 8010600:	d903      	bls.n	801060a <_vfiprintf_r+0x1ee>
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0c5      	beq.n	8010592 <_vfiprintf_r+0x176>
 8010606:	9105      	str	r1, [sp, #20]
 8010608:	e7c3      	b.n	8010592 <_vfiprintf_r+0x176>
 801060a:	fb0c 2101 	mla	r1, ip, r1, r2
 801060e:	4604      	mov	r4, r0
 8010610:	2301      	movs	r3, #1
 8010612:	e7f0      	b.n	80105f6 <_vfiprintf_r+0x1da>
 8010614:	ab03      	add	r3, sp, #12
 8010616:	9300      	str	r3, [sp, #0]
 8010618:	462a      	mov	r2, r5
 801061a:	4b16      	ldr	r3, [pc, #88]	; (8010674 <_vfiprintf_r+0x258>)
 801061c:	a904      	add	r1, sp, #16
 801061e:	4630      	mov	r0, r6
 8010620:	f7fc f82e 	bl	800c680 <_printf_float>
 8010624:	4607      	mov	r7, r0
 8010626:	1c78      	adds	r0, r7, #1
 8010628:	d1d6      	bne.n	80105d8 <_vfiprintf_r+0x1bc>
 801062a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801062c:	07d9      	lsls	r1, r3, #31
 801062e:	d405      	bmi.n	801063c <_vfiprintf_r+0x220>
 8010630:	89ab      	ldrh	r3, [r5, #12]
 8010632:	059a      	lsls	r2, r3, #22
 8010634:	d402      	bmi.n	801063c <_vfiprintf_r+0x220>
 8010636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010638:	f7fe ffcc 	bl	800f5d4 <__retarget_lock_release_recursive>
 801063c:	89ab      	ldrh	r3, [r5, #12]
 801063e:	065b      	lsls	r3, r3, #25
 8010640:	f53f af12 	bmi.w	8010468 <_vfiprintf_r+0x4c>
 8010644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010646:	e711      	b.n	801046c <_vfiprintf_r+0x50>
 8010648:	ab03      	add	r3, sp, #12
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	462a      	mov	r2, r5
 801064e:	4b09      	ldr	r3, [pc, #36]	; (8010674 <_vfiprintf_r+0x258>)
 8010650:	a904      	add	r1, sp, #16
 8010652:	4630      	mov	r0, r6
 8010654:	f7fc fab8 	bl	800cbc8 <_printf_i>
 8010658:	e7e4      	b.n	8010624 <_vfiprintf_r+0x208>
 801065a:	bf00      	nop
 801065c:	08011fe8 	.word	0x08011fe8
 8010660:	08012008 	.word	0x08012008
 8010664:	08011fc8 	.word	0x08011fc8
 8010668:	08012204 	.word	0x08012204
 801066c:	0801220e 	.word	0x0801220e
 8010670:	0800c681 	.word	0x0800c681
 8010674:	080103f7 	.word	0x080103f7
 8010678:	0801220a 	.word	0x0801220a
 801067c:	00000000 	.word	0x00000000

08010680 <nan>:
 8010680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010688 <nan+0x8>
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	00000000 	.word	0x00000000
 801068c:	7ff80000 	.word	0x7ff80000

08010690 <_sbrk_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4d06      	ldr	r5, [pc, #24]	; (80106ac <_sbrk_r+0x1c>)
 8010694:	2300      	movs	r3, #0
 8010696:	4604      	mov	r4, r0
 8010698:	4608      	mov	r0, r1
 801069a:	602b      	str	r3, [r5, #0]
 801069c:	f7f1 f9b8 	bl	8001a10 <_sbrk>
 80106a0:	1c43      	adds	r3, r0, #1
 80106a2:	d102      	bne.n	80106aa <_sbrk_r+0x1a>
 80106a4:	682b      	ldr	r3, [r5, #0]
 80106a6:	b103      	cbz	r3, 80106aa <_sbrk_r+0x1a>
 80106a8:	6023      	str	r3, [r4, #0]
 80106aa:	bd38      	pop	{r3, r4, r5, pc}
 80106ac:	20000a4c 	.word	0x20000a4c

080106b0 <__sread>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	460c      	mov	r4, r1
 80106b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b8:	f000 faf4 	bl	8010ca4 <_read_r>
 80106bc:	2800      	cmp	r0, #0
 80106be:	bfab      	itete	ge
 80106c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106c2:	89a3      	ldrhlt	r3, [r4, #12]
 80106c4:	181b      	addge	r3, r3, r0
 80106c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106ca:	bfac      	ite	ge
 80106cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80106ce:	81a3      	strhlt	r3, [r4, #12]
 80106d0:	bd10      	pop	{r4, pc}

080106d2 <__swrite>:
 80106d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d6:	461f      	mov	r7, r3
 80106d8:	898b      	ldrh	r3, [r1, #12]
 80106da:	05db      	lsls	r3, r3, #23
 80106dc:	4605      	mov	r5, r0
 80106de:	460c      	mov	r4, r1
 80106e0:	4616      	mov	r6, r2
 80106e2:	d505      	bpl.n	80106f0 <__swrite+0x1e>
 80106e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e8:	2302      	movs	r3, #2
 80106ea:	2200      	movs	r2, #0
 80106ec:	f000 fa18 	bl	8010b20 <_lseek_r>
 80106f0:	89a3      	ldrh	r3, [r4, #12]
 80106f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106fa:	81a3      	strh	r3, [r4, #12]
 80106fc:	4632      	mov	r2, r6
 80106fe:	463b      	mov	r3, r7
 8010700:	4628      	mov	r0, r5
 8010702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010706:	f000 b889 	b.w	801081c <_write_r>

0801070a <__sseek>:
 801070a:	b510      	push	{r4, lr}
 801070c:	460c      	mov	r4, r1
 801070e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010712:	f000 fa05 	bl	8010b20 <_lseek_r>
 8010716:	1c43      	adds	r3, r0, #1
 8010718:	89a3      	ldrh	r3, [r4, #12]
 801071a:	bf15      	itete	ne
 801071c:	6560      	strne	r0, [r4, #84]	; 0x54
 801071e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010726:	81a3      	strheq	r3, [r4, #12]
 8010728:	bf18      	it	ne
 801072a:	81a3      	strhne	r3, [r4, #12]
 801072c:	bd10      	pop	{r4, pc}

0801072e <__sclose>:
 801072e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010732:	f000 b911 	b.w	8010958 <_close_r>

08010736 <strncmp>:
 8010736:	b510      	push	{r4, lr}
 8010738:	b16a      	cbz	r2, 8010756 <strncmp+0x20>
 801073a:	3901      	subs	r1, #1
 801073c:	1884      	adds	r4, r0, r2
 801073e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010742:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010746:	4293      	cmp	r3, r2
 8010748:	d103      	bne.n	8010752 <strncmp+0x1c>
 801074a:	42a0      	cmp	r0, r4
 801074c:	d001      	beq.n	8010752 <strncmp+0x1c>
 801074e:	2b00      	cmp	r3, #0
 8010750:	d1f5      	bne.n	801073e <strncmp+0x8>
 8010752:	1a98      	subs	r0, r3, r2
 8010754:	bd10      	pop	{r4, pc}
 8010756:	4610      	mov	r0, r2
 8010758:	e7fc      	b.n	8010754 <strncmp+0x1e>
	...

0801075c <__swbuf_r>:
 801075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075e:	460e      	mov	r6, r1
 8010760:	4614      	mov	r4, r2
 8010762:	4605      	mov	r5, r0
 8010764:	b118      	cbz	r0, 801076e <__swbuf_r+0x12>
 8010766:	6983      	ldr	r3, [r0, #24]
 8010768:	b90b      	cbnz	r3, 801076e <__swbuf_r+0x12>
 801076a:	f7fe fb21 	bl	800edb0 <__sinit>
 801076e:	4b21      	ldr	r3, [pc, #132]	; (80107f4 <__swbuf_r+0x98>)
 8010770:	429c      	cmp	r4, r3
 8010772:	d12b      	bne.n	80107cc <__swbuf_r+0x70>
 8010774:	686c      	ldr	r4, [r5, #4]
 8010776:	69a3      	ldr	r3, [r4, #24]
 8010778:	60a3      	str	r3, [r4, #8]
 801077a:	89a3      	ldrh	r3, [r4, #12]
 801077c:	071a      	lsls	r2, r3, #28
 801077e:	d52f      	bpl.n	80107e0 <__swbuf_r+0x84>
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	b36b      	cbz	r3, 80107e0 <__swbuf_r+0x84>
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	6820      	ldr	r0, [r4, #0]
 8010788:	1ac0      	subs	r0, r0, r3
 801078a:	6963      	ldr	r3, [r4, #20]
 801078c:	b2f6      	uxtb	r6, r6
 801078e:	4283      	cmp	r3, r0
 8010790:	4637      	mov	r7, r6
 8010792:	dc04      	bgt.n	801079e <__swbuf_r+0x42>
 8010794:	4621      	mov	r1, r4
 8010796:	4628      	mov	r0, r5
 8010798:	f000 f974 	bl	8010a84 <_fflush_r>
 801079c:	bb30      	cbnz	r0, 80107ec <__swbuf_r+0x90>
 801079e:	68a3      	ldr	r3, [r4, #8]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	60a3      	str	r3, [r4, #8]
 80107a4:	6823      	ldr	r3, [r4, #0]
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	6022      	str	r2, [r4, #0]
 80107aa:	701e      	strb	r6, [r3, #0]
 80107ac:	6963      	ldr	r3, [r4, #20]
 80107ae:	3001      	adds	r0, #1
 80107b0:	4283      	cmp	r3, r0
 80107b2:	d004      	beq.n	80107be <__swbuf_r+0x62>
 80107b4:	89a3      	ldrh	r3, [r4, #12]
 80107b6:	07db      	lsls	r3, r3, #31
 80107b8:	d506      	bpl.n	80107c8 <__swbuf_r+0x6c>
 80107ba:	2e0a      	cmp	r6, #10
 80107bc:	d104      	bne.n	80107c8 <__swbuf_r+0x6c>
 80107be:	4621      	mov	r1, r4
 80107c0:	4628      	mov	r0, r5
 80107c2:	f000 f95f 	bl	8010a84 <_fflush_r>
 80107c6:	b988      	cbnz	r0, 80107ec <__swbuf_r+0x90>
 80107c8:	4638      	mov	r0, r7
 80107ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107cc:	4b0a      	ldr	r3, [pc, #40]	; (80107f8 <__swbuf_r+0x9c>)
 80107ce:	429c      	cmp	r4, r3
 80107d0:	d101      	bne.n	80107d6 <__swbuf_r+0x7a>
 80107d2:	68ac      	ldr	r4, [r5, #8]
 80107d4:	e7cf      	b.n	8010776 <__swbuf_r+0x1a>
 80107d6:	4b09      	ldr	r3, [pc, #36]	; (80107fc <__swbuf_r+0xa0>)
 80107d8:	429c      	cmp	r4, r3
 80107da:	bf08      	it	eq
 80107dc:	68ec      	ldreq	r4, [r5, #12]
 80107de:	e7ca      	b.n	8010776 <__swbuf_r+0x1a>
 80107e0:	4621      	mov	r1, r4
 80107e2:	4628      	mov	r0, r5
 80107e4:	f000 f82c 	bl	8010840 <__swsetup_r>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d0cb      	beq.n	8010784 <__swbuf_r+0x28>
 80107ec:	f04f 37ff 	mov.w	r7, #4294967295
 80107f0:	e7ea      	b.n	80107c8 <__swbuf_r+0x6c>
 80107f2:	bf00      	nop
 80107f4:	08011fe8 	.word	0x08011fe8
 80107f8:	08012008 	.word	0x08012008
 80107fc:	08011fc8 	.word	0x08011fc8

08010800 <__ascii_wctomb>:
 8010800:	b149      	cbz	r1, 8010816 <__ascii_wctomb+0x16>
 8010802:	2aff      	cmp	r2, #255	; 0xff
 8010804:	bf85      	ittet	hi
 8010806:	238a      	movhi	r3, #138	; 0x8a
 8010808:	6003      	strhi	r3, [r0, #0]
 801080a:	700a      	strbls	r2, [r1, #0]
 801080c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010810:	bf98      	it	ls
 8010812:	2001      	movls	r0, #1
 8010814:	4770      	bx	lr
 8010816:	4608      	mov	r0, r1
 8010818:	4770      	bx	lr
	...

0801081c <_write_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d07      	ldr	r5, [pc, #28]	; (801083c <_write_r+0x20>)
 8010820:	4604      	mov	r4, r0
 8010822:	4608      	mov	r0, r1
 8010824:	4611      	mov	r1, r2
 8010826:	2200      	movs	r2, #0
 8010828:	602a      	str	r2, [r5, #0]
 801082a:	461a      	mov	r2, r3
 801082c:	f7f1 f89f 	bl	800196e <_write>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_write_r+0x1e>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_write_r+0x1e>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20000a4c 	.word	0x20000a4c

08010840 <__swsetup_r>:
 8010840:	4b32      	ldr	r3, [pc, #200]	; (801090c <__swsetup_r+0xcc>)
 8010842:	b570      	push	{r4, r5, r6, lr}
 8010844:	681d      	ldr	r5, [r3, #0]
 8010846:	4606      	mov	r6, r0
 8010848:	460c      	mov	r4, r1
 801084a:	b125      	cbz	r5, 8010856 <__swsetup_r+0x16>
 801084c:	69ab      	ldr	r3, [r5, #24]
 801084e:	b913      	cbnz	r3, 8010856 <__swsetup_r+0x16>
 8010850:	4628      	mov	r0, r5
 8010852:	f7fe faad 	bl	800edb0 <__sinit>
 8010856:	4b2e      	ldr	r3, [pc, #184]	; (8010910 <__swsetup_r+0xd0>)
 8010858:	429c      	cmp	r4, r3
 801085a:	d10f      	bne.n	801087c <__swsetup_r+0x3c>
 801085c:	686c      	ldr	r4, [r5, #4]
 801085e:	89a3      	ldrh	r3, [r4, #12]
 8010860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010864:	0719      	lsls	r1, r3, #28
 8010866:	d42c      	bmi.n	80108c2 <__swsetup_r+0x82>
 8010868:	06dd      	lsls	r5, r3, #27
 801086a:	d411      	bmi.n	8010890 <__swsetup_r+0x50>
 801086c:	2309      	movs	r3, #9
 801086e:	6033      	str	r3, [r6, #0]
 8010870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010874:	81a3      	strh	r3, [r4, #12]
 8010876:	f04f 30ff 	mov.w	r0, #4294967295
 801087a:	e03e      	b.n	80108fa <__swsetup_r+0xba>
 801087c:	4b25      	ldr	r3, [pc, #148]	; (8010914 <__swsetup_r+0xd4>)
 801087e:	429c      	cmp	r4, r3
 8010880:	d101      	bne.n	8010886 <__swsetup_r+0x46>
 8010882:	68ac      	ldr	r4, [r5, #8]
 8010884:	e7eb      	b.n	801085e <__swsetup_r+0x1e>
 8010886:	4b24      	ldr	r3, [pc, #144]	; (8010918 <__swsetup_r+0xd8>)
 8010888:	429c      	cmp	r4, r3
 801088a:	bf08      	it	eq
 801088c:	68ec      	ldreq	r4, [r5, #12]
 801088e:	e7e6      	b.n	801085e <__swsetup_r+0x1e>
 8010890:	0758      	lsls	r0, r3, #29
 8010892:	d512      	bpl.n	80108ba <__swsetup_r+0x7a>
 8010894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010896:	b141      	cbz	r1, 80108aa <__swsetup_r+0x6a>
 8010898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801089c:	4299      	cmp	r1, r3
 801089e:	d002      	beq.n	80108a6 <__swsetup_r+0x66>
 80108a0:	4630      	mov	r0, r6
 80108a2:	f7ff fb8b 	bl	800ffbc <_free_r>
 80108a6:	2300      	movs	r3, #0
 80108a8:	6363      	str	r3, [r4, #52]	; 0x34
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108b0:	81a3      	strh	r3, [r4, #12]
 80108b2:	2300      	movs	r3, #0
 80108b4:	6063      	str	r3, [r4, #4]
 80108b6:	6923      	ldr	r3, [r4, #16]
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	89a3      	ldrh	r3, [r4, #12]
 80108bc:	f043 0308 	orr.w	r3, r3, #8
 80108c0:	81a3      	strh	r3, [r4, #12]
 80108c2:	6923      	ldr	r3, [r4, #16]
 80108c4:	b94b      	cbnz	r3, 80108da <__swsetup_r+0x9a>
 80108c6:	89a3      	ldrh	r3, [r4, #12]
 80108c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108d0:	d003      	beq.n	80108da <__swsetup_r+0x9a>
 80108d2:	4621      	mov	r1, r4
 80108d4:	4630      	mov	r0, r6
 80108d6:	f000 f959 	bl	8010b8c <__smakebuf_r>
 80108da:	89a0      	ldrh	r0, [r4, #12]
 80108dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108e0:	f010 0301 	ands.w	r3, r0, #1
 80108e4:	d00a      	beq.n	80108fc <__swsetup_r+0xbc>
 80108e6:	2300      	movs	r3, #0
 80108e8:	60a3      	str	r3, [r4, #8]
 80108ea:	6963      	ldr	r3, [r4, #20]
 80108ec:	425b      	negs	r3, r3
 80108ee:	61a3      	str	r3, [r4, #24]
 80108f0:	6923      	ldr	r3, [r4, #16]
 80108f2:	b943      	cbnz	r3, 8010906 <__swsetup_r+0xc6>
 80108f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108f8:	d1ba      	bne.n	8010870 <__swsetup_r+0x30>
 80108fa:	bd70      	pop	{r4, r5, r6, pc}
 80108fc:	0781      	lsls	r1, r0, #30
 80108fe:	bf58      	it	pl
 8010900:	6963      	ldrpl	r3, [r4, #20]
 8010902:	60a3      	str	r3, [r4, #8]
 8010904:	e7f4      	b.n	80108f0 <__swsetup_r+0xb0>
 8010906:	2000      	movs	r0, #0
 8010908:	e7f7      	b.n	80108fa <__swsetup_r+0xba>
 801090a:	bf00      	nop
 801090c:	20000048 	.word	0x20000048
 8010910:	08011fe8 	.word	0x08011fe8
 8010914:	08012008 	.word	0x08012008
 8010918:	08011fc8 	.word	0x08011fc8

0801091c <__assert_func>:
 801091c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801091e:	4614      	mov	r4, r2
 8010920:	461a      	mov	r2, r3
 8010922:	4b09      	ldr	r3, [pc, #36]	; (8010948 <__assert_func+0x2c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4605      	mov	r5, r0
 8010928:	68d8      	ldr	r0, [r3, #12]
 801092a:	b14c      	cbz	r4, 8010940 <__assert_func+0x24>
 801092c:	4b07      	ldr	r3, [pc, #28]	; (801094c <__assert_func+0x30>)
 801092e:	9100      	str	r1, [sp, #0]
 8010930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010934:	4906      	ldr	r1, [pc, #24]	; (8010950 <__assert_func+0x34>)
 8010936:	462b      	mov	r3, r5
 8010938:	f000 f8e0 	bl	8010afc <fiprintf>
 801093c:	f000 f9c4 	bl	8010cc8 <abort>
 8010940:	4b04      	ldr	r3, [pc, #16]	; (8010954 <__assert_func+0x38>)
 8010942:	461c      	mov	r4, r3
 8010944:	e7f3      	b.n	801092e <__assert_func+0x12>
 8010946:	bf00      	nop
 8010948:	20000048 	.word	0x20000048
 801094c:	08012215 	.word	0x08012215
 8010950:	08012222 	.word	0x08012222
 8010954:	08012250 	.word	0x08012250

08010958 <_close_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4d06      	ldr	r5, [pc, #24]	; (8010974 <_close_r+0x1c>)
 801095c:	2300      	movs	r3, #0
 801095e:	4604      	mov	r4, r0
 8010960:	4608      	mov	r0, r1
 8010962:	602b      	str	r3, [r5, #0]
 8010964:	f7f1 f81f 	bl	80019a6 <_close>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_close_r+0x1a>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	b103      	cbz	r3, 8010972 <_close_r+0x1a>
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	20000a4c 	.word	0x20000a4c

08010978 <__sflush_r>:
 8010978:	898a      	ldrh	r2, [r1, #12]
 801097a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801097e:	4605      	mov	r5, r0
 8010980:	0710      	lsls	r0, r2, #28
 8010982:	460c      	mov	r4, r1
 8010984:	d458      	bmi.n	8010a38 <__sflush_r+0xc0>
 8010986:	684b      	ldr	r3, [r1, #4]
 8010988:	2b00      	cmp	r3, #0
 801098a:	dc05      	bgt.n	8010998 <__sflush_r+0x20>
 801098c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801098e:	2b00      	cmp	r3, #0
 8010990:	dc02      	bgt.n	8010998 <__sflush_r+0x20>
 8010992:	2000      	movs	r0, #0
 8010994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801099a:	2e00      	cmp	r6, #0
 801099c:	d0f9      	beq.n	8010992 <__sflush_r+0x1a>
 801099e:	2300      	movs	r3, #0
 80109a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109a4:	682f      	ldr	r7, [r5, #0]
 80109a6:	602b      	str	r3, [r5, #0]
 80109a8:	d032      	beq.n	8010a10 <__sflush_r+0x98>
 80109aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	075a      	lsls	r2, r3, #29
 80109b0:	d505      	bpl.n	80109be <__sflush_r+0x46>
 80109b2:	6863      	ldr	r3, [r4, #4]
 80109b4:	1ac0      	subs	r0, r0, r3
 80109b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109b8:	b10b      	cbz	r3, 80109be <__sflush_r+0x46>
 80109ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109bc:	1ac0      	subs	r0, r0, r3
 80109be:	2300      	movs	r3, #0
 80109c0:	4602      	mov	r2, r0
 80109c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109c4:	6a21      	ldr	r1, [r4, #32]
 80109c6:	4628      	mov	r0, r5
 80109c8:	47b0      	blx	r6
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	89a3      	ldrh	r3, [r4, #12]
 80109ce:	d106      	bne.n	80109de <__sflush_r+0x66>
 80109d0:	6829      	ldr	r1, [r5, #0]
 80109d2:	291d      	cmp	r1, #29
 80109d4:	d82c      	bhi.n	8010a30 <__sflush_r+0xb8>
 80109d6:	4a2a      	ldr	r2, [pc, #168]	; (8010a80 <__sflush_r+0x108>)
 80109d8:	40ca      	lsrs	r2, r1
 80109da:	07d6      	lsls	r6, r2, #31
 80109dc:	d528      	bpl.n	8010a30 <__sflush_r+0xb8>
 80109de:	2200      	movs	r2, #0
 80109e0:	6062      	str	r2, [r4, #4]
 80109e2:	04d9      	lsls	r1, r3, #19
 80109e4:	6922      	ldr	r2, [r4, #16]
 80109e6:	6022      	str	r2, [r4, #0]
 80109e8:	d504      	bpl.n	80109f4 <__sflush_r+0x7c>
 80109ea:	1c42      	adds	r2, r0, #1
 80109ec:	d101      	bne.n	80109f2 <__sflush_r+0x7a>
 80109ee:	682b      	ldr	r3, [r5, #0]
 80109f0:	b903      	cbnz	r3, 80109f4 <__sflush_r+0x7c>
 80109f2:	6560      	str	r0, [r4, #84]	; 0x54
 80109f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109f6:	602f      	str	r7, [r5, #0]
 80109f8:	2900      	cmp	r1, #0
 80109fa:	d0ca      	beq.n	8010992 <__sflush_r+0x1a>
 80109fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a00:	4299      	cmp	r1, r3
 8010a02:	d002      	beq.n	8010a0a <__sflush_r+0x92>
 8010a04:	4628      	mov	r0, r5
 8010a06:	f7ff fad9 	bl	800ffbc <_free_r>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8010a0e:	e7c1      	b.n	8010994 <__sflush_r+0x1c>
 8010a10:	6a21      	ldr	r1, [r4, #32]
 8010a12:	2301      	movs	r3, #1
 8010a14:	4628      	mov	r0, r5
 8010a16:	47b0      	blx	r6
 8010a18:	1c41      	adds	r1, r0, #1
 8010a1a:	d1c7      	bne.n	80109ac <__sflush_r+0x34>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d0c4      	beq.n	80109ac <__sflush_r+0x34>
 8010a22:	2b1d      	cmp	r3, #29
 8010a24:	d001      	beq.n	8010a2a <__sflush_r+0xb2>
 8010a26:	2b16      	cmp	r3, #22
 8010a28:	d101      	bne.n	8010a2e <__sflush_r+0xb6>
 8010a2a:	602f      	str	r7, [r5, #0]
 8010a2c:	e7b1      	b.n	8010992 <__sflush_r+0x1a>
 8010a2e:	89a3      	ldrh	r3, [r4, #12]
 8010a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a34:	81a3      	strh	r3, [r4, #12]
 8010a36:	e7ad      	b.n	8010994 <__sflush_r+0x1c>
 8010a38:	690f      	ldr	r7, [r1, #16]
 8010a3a:	2f00      	cmp	r7, #0
 8010a3c:	d0a9      	beq.n	8010992 <__sflush_r+0x1a>
 8010a3e:	0793      	lsls	r3, r2, #30
 8010a40:	680e      	ldr	r6, [r1, #0]
 8010a42:	bf08      	it	eq
 8010a44:	694b      	ldreq	r3, [r1, #20]
 8010a46:	600f      	str	r7, [r1, #0]
 8010a48:	bf18      	it	ne
 8010a4a:	2300      	movne	r3, #0
 8010a4c:	eba6 0807 	sub.w	r8, r6, r7
 8010a50:	608b      	str	r3, [r1, #8]
 8010a52:	f1b8 0f00 	cmp.w	r8, #0
 8010a56:	dd9c      	ble.n	8010992 <__sflush_r+0x1a>
 8010a58:	6a21      	ldr	r1, [r4, #32]
 8010a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a5c:	4643      	mov	r3, r8
 8010a5e:	463a      	mov	r2, r7
 8010a60:	4628      	mov	r0, r5
 8010a62:	47b0      	blx	r6
 8010a64:	2800      	cmp	r0, #0
 8010a66:	dc06      	bgt.n	8010a76 <__sflush_r+0xfe>
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a6e:	81a3      	strh	r3, [r4, #12]
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295
 8010a74:	e78e      	b.n	8010994 <__sflush_r+0x1c>
 8010a76:	4407      	add	r7, r0
 8010a78:	eba8 0800 	sub.w	r8, r8, r0
 8010a7c:	e7e9      	b.n	8010a52 <__sflush_r+0xda>
 8010a7e:	bf00      	nop
 8010a80:	20400001 	.word	0x20400001

08010a84 <_fflush_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	690b      	ldr	r3, [r1, #16]
 8010a88:	4605      	mov	r5, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	b913      	cbnz	r3, 8010a94 <_fflush_r+0x10>
 8010a8e:	2500      	movs	r5, #0
 8010a90:	4628      	mov	r0, r5
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	b118      	cbz	r0, 8010a9e <_fflush_r+0x1a>
 8010a96:	6983      	ldr	r3, [r0, #24]
 8010a98:	b90b      	cbnz	r3, 8010a9e <_fflush_r+0x1a>
 8010a9a:	f7fe f989 	bl	800edb0 <__sinit>
 8010a9e:	4b14      	ldr	r3, [pc, #80]	; (8010af0 <_fflush_r+0x6c>)
 8010aa0:	429c      	cmp	r4, r3
 8010aa2:	d11b      	bne.n	8010adc <_fflush_r+0x58>
 8010aa4:	686c      	ldr	r4, [r5, #4]
 8010aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d0ef      	beq.n	8010a8e <_fflush_r+0xa>
 8010aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ab0:	07d0      	lsls	r0, r2, #31
 8010ab2:	d404      	bmi.n	8010abe <_fflush_r+0x3a>
 8010ab4:	0599      	lsls	r1, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_fflush_r+0x3a>
 8010ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aba:	f7fe fd8a 	bl	800f5d2 <__retarget_lock_acquire_recursive>
 8010abe:	4628      	mov	r0, r5
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	f7ff ff59 	bl	8010978 <__sflush_r>
 8010ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ac8:	07da      	lsls	r2, r3, #31
 8010aca:	4605      	mov	r5, r0
 8010acc:	d4e0      	bmi.n	8010a90 <_fflush_r+0xc>
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	059b      	lsls	r3, r3, #22
 8010ad2:	d4dd      	bmi.n	8010a90 <_fflush_r+0xc>
 8010ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ad6:	f7fe fd7d 	bl	800f5d4 <__retarget_lock_release_recursive>
 8010ada:	e7d9      	b.n	8010a90 <_fflush_r+0xc>
 8010adc:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <_fflush_r+0x70>)
 8010ade:	429c      	cmp	r4, r3
 8010ae0:	d101      	bne.n	8010ae6 <_fflush_r+0x62>
 8010ae2:	68ac      	ldr	r4, [r5, #8]
 8010ae4:	e7df      	b.n	8010aa6 <_fflush_r+0x22>
 8010ae6:	4b04      	ldr	r3, [pc, #16]	; (8010af8 <_fflush_r+0x74>)
 8010ae8:	429c      	cmp	r4, r3
 8010aea:	bf08      	it	eq
 8010aec:	68ec      	ldreq	r4, [r5, #12]
 8010aee:	e7da      	b.n	8010aa6 <_fflush_r+0x22>
 8010af0:	08011fe8 	.word	0x08011fe8
 8010af4:	08012008 	.word	0x08012008
 8010af8:	08011fc8 	.word	0x08011fc8

08010afc <fiprintf>:
 8010afc:	b40e      	push	{r1, r2, r3}
 8010afe:	b503      	push	{r0, r1, lr}
 8010b00:	4601      	mov	r1, r0
 8010b02:	ab03      	add	r3, sp, #12
 8010b04:	4805      	ldr	r0, [pc, #20]	; (8010b1c <fiprintf+0x20>)
 8010b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b0a:	6800      	ldr	r0, [r0, #0]
 8010b0c:	9301      	str	r3, [sp, #4]
 8010b0e:	f7ff fc85 	bl	801041c <_vfiprintf_r>
 8010b12:	b002      	add	sp, #8
 8010b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b18:	b003      	add	sp, #12
 8010b1a:	4770      	bx	lr
 8010b1c:	20000048 	.word	0x20000048

08010b20 <_lseek_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d07      	ldr	r5, [pc, #28]	; (8010b40 <_lseek_r+0x20>)
 8010b24:	4604      	mov	r4, r0
 8010b26:	4608      	mov	r0, r1
 8010b28:	4611      	mov	r1, r2
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	602a      	str	r2, [r5, #0]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	f7f0 ff60 	bl	80019f4 <_lseek>
 8010b34:	1c43      	adds	r3, r0, #1
 8010b36:	d102      	bne.n	8010b3e <_lseek_r+0x1e>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	b103      	cbz	r3, 8010b3e <_lseek_r+0x1e>
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	20000a4c 	.word	0x20000a4c

08010b44 <__swhatbuf_r>:
 8010b44:	b570      	push	{r4, r5, r6, lr}
 8010b46:	460e      	mov	r6, r1
 8010b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b4c:	2900      	cmp	r1, #0
 8010b4e:	b096      	sub	sp, #88	; 0x58
 8010b50:	4614      	mov	r4, r2
 8010b52:	461d      	mov	r5, r3
 8010b54:	da07      	bge.n	8010b66 <__swhatbuf_r+0x22>
 8010b56:	2300      	movs	r3, #0
 8010b58:	602b      	str	r3, [r5, #0]
 8010b5a:	89b3      	ldrh	r3, [r6, #12]
 8010b5c:	061a      	lsls	r2, r3, #24
 8010b5e:	d410      	bmi.n	8010b82 <__swhatbuf_r+0x3e>
 8010b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b64:	e00e      	b.n	8010b84 <__swhatbuf_r+0x40>
 8010b66:	466a      	mov	r2, sp
 8010b68:	f000 f8b6 	bl	8010cd8 <_fstat_r>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	dbf2      	blt.n	8010b56 <__swhatbuf_r+0x12>
 8010b70:	9a01      	ldr	r2, [sp, #4]
 8010b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b7a:	425a      	negs	r2, r3
 8010b7c:	415a      	adcs	r2, r3
 8010b7e:	602a      	str	r2, [r5, #0]
 8010b80:	e7ee      	b.n	8010b60 <__swhatbuf_r+0x1c>
 8010b82:	2340      	movs	r3, #64	; 0x40
 8010b84:	2000      	movs	r0, #0
 8010b86:	6023      	str	r3, [r4, #0]
 8010b88:	b016      	add	sp, #88	; 0x58
 8010b8a:	bd70      	pop	{r4, r5, r6, pc}

08010b8c <__smakebuf_r>:
 8010b8c:	898b      	ldrh	r3, [r1, #12]
 8010b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b90:	079d      	lsls	r5, r3, #30
 8010b92:	4606      	mov	r6, r0
 8010b94:	460c      	mov	r4, r1
 8010b96:	d507      	bpl.n	8010ba8 <__smakebuf_r+0x1c>
 8010b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	6123      	str	r3, [r4, #16]
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	6163      	str	r3, [r4, #20]
 8010ba4:	b002      	add	sp, #8
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	ab01      	add	r3, sp, #4
 8010baa:	466a      	mov	r2, sp
 8010bac:	f7ff ffca 	bl	8010b44 <__swhatbuf_r>
 8010bb0:	9900      	ldr	r1, [sp, #0]
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f7ff fa51 	bl	801005c <_malloc_r>
 8010bba:	b948      	cbnz	r0, 8010bd0 <__smakebuf_r+0x44>
 8010bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bc0:	059a      	lsls	r2, r3, #22
 8010bc2:	d4ef      	bmi.n	8010ba4 <__smakebuf_r+0x18>
 8010bc4:	f023 0303 	bic.w	r3, r3, #3
 8010bc8:	f043 0302 	orr.w	r3, r3, #2
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	e7e3      	b.n	8010b98 <__smakebuf_r+0xc>
 8010bd0:	4b0d      	ldr	r3, [pc, #52]	; (8010c08 <__smakebuf_r+0x7c>)
 8010bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	6020      	str	r0, [r4, #0]
 8010bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	9b00      	ldr	r3, [sp, #0]
 8010be0:	6163      	str	r3, [r4, #20]
 8010be2:	9b01      	ldr	r3, [sp, #4]
 8010be4:	6120      	str	r0, [r4, #16]
 8010be6:	b15b      	cbz	r3, 8010c00 <__smakebuf_r+0x74>
 8010be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bec:	4630      	mov	r0, r6
 8010bee:	f000 f885 	bl	8010cfc <_isatty_r>
 8010bf2:	b128      	cbz	r0, 8010c00 <__smakebuf_r+0x74>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f023 0303 	bic.w	r3, r3, #3
 8010bfa:	f043 0301 	orr.w	r3, r3, #1
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	89a0      	ldrh	r0, [r4, #12]
 8010c02:	4305      	orrs	r5, r0
 8010c04:	81a5      	strh	r5, [r4, #12]
 8010c06:	e7cd      	b.n	8010ba4 <__smakebuf_r+0x18>
 8010c08:	0800ed49 	.word	0x0800ed49

08010c0c <memmove>:
 8010c0c:	4288      	cmp	r0, r1
 8010c0e:	b510      	push	{r4, lr}
 8010c10:	eb01 0402 	add.w	r4, r1, r2
 8010c14:	d902      	bls.n	8010c1c <memmove+0x10>
 8010c16:	4284      	cmp	r4, r0
 8010c18:	4623      	mov	r3, r4
 8010c1a:	d807      	bhi.n	8010c2c <memmove+0x20>
 8010c1c:	1e43      	subs	r3, r0, #1
 8010c1e:	42a1      	cmp	r1, r4
 8010c20:	d008      	beq.n	8010c34 <memmove+0x28>
 8010c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c2a:	e7f8      	b.n	8010c1e <memmove+0x12>
 8010c2c:	4402      	add	r2, r0
 8010c2e:	4601      	mov	r1, r0
 8010c30:	428a      	cmp	r2, r1
 8010c32:	d100      	bne.n	8010c36 <memmove+0x2a>
 8010c34:	bd10      	pop	{r4, pc}
 8010c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c3e:	e7f7      	b.n	8010c30 <memmove+0x24>

08010c40 <__malloc_lock>:
 8010c40:	4801      	ldr	r0, [pc, #4]	; (8010c48 <__malloc_lock+0x8>)
 8010c42:	f7fe bcc6 	b.w	800f5d2 <__retarget_lock_acquire_recursive>
 8010c46:	bf00      	nop
 8010c48:	20000a44 	.word	0x20000a44

08010c4c <__malloc_unlock>:
 8010c4c:	4801      	ldr	r0, [pc, #4]	; (8010c54 <__malloc_unlock+0x8>)
 8010c4e:	f7fe bcc1 	b.w	800f5d4 <__retarget_lock_release_recursive>
 8010c52:	bf00      	nop
 8010c54:	20000a44 	.word	0x20000a44

08010c58 <_realloc_r>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	4607      	mov	r7, r0
 8010c5c:	4614      	mov	r4, r2
 8010c5e:	460e      	mov	r6, r1
 8010c60:	b921      	cbnz	r1, 8010c6c <_realloc_r+0x14>
 8010c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c66:	4611      	mov	r1, r2
 8010c68:	f7ff b9f8 	b.w	801005c <_malloc_r>
 8010c6c:	b922      	cbnz	r2, 8010c78 <_realloc_r+0x20>
 8010c6e:	f7ff f9a5 	bl	800ffbc <_free_r>
 8010c72:	4625      	mov	r5, r4
 8010c74:	4628      	mov	r0, r5
 8010c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c78:	f000 f850 	bl	8010d1c <_malloc_usable_size_r>
 8010c7c:	42a0      	cmp	r0, r4
 8010c7e:	d20f      	bcs.n	8010ca0 <_realloc_r+0x48>
 8010c80:	4621      	mov	r1, r4
 8010c82:	4638      	mov	r0, r7
 8010c84:	f7ff f9ea 	bl	801005c <_malloc_r>
 8010c88:	4605      	mov	r5, r0
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	d0f2      	beq.n	8010c74 <_realloc_r+0x1c>
 8010c8e:	4631      	mov	r1, r6
 8010c90:	4622      	mov	r2, r4
 8010c92:	f7fe fcbb 	bl	800f60c <memcpy>
 8010c96:	4631      	mov	r1, r6
 8010c98:	4638      	mov	r0, r7
 8010c9a:	f7ff f98f 	bl	800ffbc <_free_r>
 8010c9e:	e7e9      	b.n	8010c74 <_realloc_r+0x1c>
 8010ca0:	4635      	mov	r5, r6
 8010ca2:	e7e7      	b.n	8010c74 <_realloc_r+0x1c>

08010ca4 <_read_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4d07      	ldr	r5, [pc, #28]	; (8010cc4 <_read_r+0x20>)
 8010ca8:	4604      	mov	r4, r0
 8010caa:	4608      	mov	r0, r1
 8010cac:	4611      	mov	r1, r2
 8010cae:	2200      	movs	r2, #0
 8010cb0:	602a      	str	r2, [r5, #0]
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f7f0 fe3e 	bl	8001934 <_read>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	d102      	bne.n	8010cc2 <_read_r+0x1e>
 8010cbc:	682b      	ldr	r3, [r5, #0]
 8010cbe:	b103      	cbz	r3, 8010cc2 <_read_r+0x1e>
 8010cc0:	6023      	str	r3, [r4, #0]
 8010cc2:	bd38      	pop	{r3, r4, r5, pc}
 8010cc4:	20000a4c 	.word	0x20000a4c

08010cc8 <abort>:
 8010cc8:	b508      	push	{r3, lr}
 8010cca:	2006      	movs	r0, #6
 8010ccc:	f000 f856 	bl	8010d7c <raise>
 8010cd0:	2001      	movs	r0, #1
 8010cd2:	f7f0 fe25 	bl	8001920 <_exit>
	...

08010cd8 <_fstat_r>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4d07      	ldr	r5, [pc, #28]	; (8010cf8 <_fstat_r+0x20>)
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	602b      	str	r3, [r5, #0]
 8010ce6:	f7f0 fe6a 	bl	80019be <_fstat>
 8010cea:	1c43      	adds	r3, r0, #1
 8010cec:	d102      	bne.n	8010cf4 <_fstat_r+0x1c>
 8010cee:	682b      	ldr	r3, [r5, #0]
 8010cf0:	b103      	cbz	r3, 8010cf4 <_fstat_r+0x1c>
 8010cf2:	6023      	str	r3, [r4, #0]
 8010cf4:	bd38      	pop	{r3, r4, r5, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20000a4c 	.word	0x20000a4c

08010cfc <_isatty_r>:
 8010cfc:	b538      	push	{r3, r4, r5, lr}
 8010cfe:	4d06      	ldr	r5, [pc, #24]	; (8010d18 <_isatty_r+0x1c>)
 8010d00:	2300      	movs	r3, #0
 8010d02:	4604      	mov	r4, r0
 8010d04:	4608      	mov	r0, r1
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	f7f0 fe69 	bl	80019de <_isatty>
 8010d0c:	1c43      	adds	r3, r0, #1
 8010d0e:	d102      	bne.n	8010d16 <_isatty_r+0x1a>
 8010d10:	682b      	ldr	r3, [r5, #0]
 8010d12:	b103      	cbz	r3, 8010d16 <_isatty_r+0x1a>
 8010d14:	6023      	str	r3, [r4, #0]
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	20000a4c 	.word	0x20000a4c

08010d1c <_malloc_usable_size_r>:
 8010d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d20:	1f18      	subs	r0, r3, #4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	bfbc      	itt	lt
 8010d26:	580b      	ldrlt	r3, [r1, r0]
 8010d28:	18c0      	addlt	r0, r0, r3
 8010d2a:	4770      	bx	lr

08010d2c <_raise_r>:
 8010d2c:	291f      	cmp	r1, #31
 8010d2e:	b538      	push	{r3, r4, r5, lr}
 8010d30:	4604      	mov	r4, r0
 8010d32:	460d      	mov	r5, r1
 8010d34:	d904      	bls.n	8010d40 <_raise_r+0x14>
 8010d36:	2316      	movs	r3, #22
 8010d38:	6003      	str	r3, [r0, #0]
 8010d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d42:	b112      	cbz	r2, 8010d4a <_raise_r+0x1e>
 8010d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d48:	b94b      	cbnz	r3, 8010d5e <_raise_r+0x32>
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f000 f830 	bl	8010db0 <_getpid_r>
 8010d50:	462a      	mov	r2, r5
 8010d52:	4601      	mov	r1, r0
 8010d54:	4620      	mov	r0, r4
 8010d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d5a:	f000 b817 	b.w	8010d8c <_kill_r>
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d00a      	beq.n	8010d78 <_raise_r+0x4c>
 8010d62:	1c59      	adds	r1, r3, #1
 8010d64:	d103      	bne.n	8010d6e <_raise_r+0x42>
 8010d66:	2316      	movs	r3, #22
 8010d68:	6003      	str	r3, [r0, #0]
 8010d6a:	2001      	movs	r0, #1
 8010d6c:	e7e7      	b.n	8010d3e <_raise_r+0x12>
 8010d6e:	2400      	movs	r4, #0
 8010d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d74:	4628      	mov	r0, r5
 8010d76:	4798      	blx	r3
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7e0      	b.n	8010d3e <_raise_r+0x12>

08010d7c <raise>:
 8010d7c:	4b02      	ldr	r3, [pc, #8]	; (8010d88 <raise+0xc>)
 8010d7e:	4601      	mov	r1, r0
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	f7ff bfd3 	b.w	8010d2c <_raise_r>
 8010d86:	bf00      	nop
 8010d88:	20000048 	.word	0x20000048

08010d8c <_kill_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4d07      	ldr	r5, [pc, #28]	; (8010dac <_kill_r+0x20>)
 8010d90:	2300      	movs	r3, #0
 8010d92:	4604      	mov	r4, r0
 8010d94:	4608      	mov	r0, r1
 8010d96:	4611      	mov	r1, r2
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	f7f0 fdb1 	bl	8001900 <_kill>
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	d102      	bne.n	8010da8 <_kill_r+0x1c>
 8010da2:	682b      	ldr	r3, [r5, #0]
 8010da4:	b103      	cbz	r3, 8010da8 <_kill_r+0x1c>
 8010da6:	6023      	str	r3, [r4, #0]
 8010da8:	bd38      	pop	{r3, r4, r5, pc}
 8010daa:	bf00      	nop
 8010dac:	20000a4c 	.word	0x20000a4c

08010db0 <_getpid_r>:
 8010db0:	f7f0 bd9e 	b.w	80018f0 <_getpid>

08010db4 <_init>:
 8010db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db6:	bf00      	nop
 8010db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dba:	bc08      	pop	{r3}
 8010dbc:	469e      	mov	lr, r3
 8010dbe:	4770      	bx	lr

08010dc0 <_fini>:
 8010dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dc2:	bf00      	nop
 8010dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc6:	bc08      	pop	{r3}
 8010dc8:	469e      	mov	lr, r3
 8010dca:	4770      	bx	lr

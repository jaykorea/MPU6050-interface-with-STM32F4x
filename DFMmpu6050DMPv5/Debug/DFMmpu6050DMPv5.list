
DFMmpu6050DMPv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006a68  08006a68  00016a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eac  08006eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb4  08006eb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001dc  08007098  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200002c0  08007098  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e10  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ef  00000000  00000000  0003501c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  000389b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b335  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ac  00000000  00000000  00054ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009127c  00000000  00000000  00066271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f74ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b3c  00000000  00000000  000f7540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a50 	.word	0x08006a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006a50 	.word	0x08006a50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <__io_putchar+0x20>)
 8000ec2:	f002 fde0 	bl	8003a86 <HAL_UART_Transmit>

    return ch;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000268 	.word	0x20000268

08000ed4 <I2Cdev_readBytes>:
 * @param reg_addr 	Register regAddr to read from
 * @param len 		How many bytes to read
 * @param data 		Buffer to save data into
 * @return Status of read operation (0 = success, <0 = error)
 */
int8_t I2Cdev_readBytes(uint8_t dev_addr, uint8_t reg_addr, uint8_t len, uint8_t *data) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	71bb      	strb	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	717b      	strb	r3, [r7, #5]
	int8_t err = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_data[1] = {reg_addr};
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	733b      	strb	r3, [r7, #12]

	err = i2c_transmit_ack(dev_addr, reg_data, 1);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b299      	uxth	r1, r3
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <I2Cdev_readBytes+0x84>)
 8000f00:	f001 faa0 	bl	8002444 <HAL_I2C_Master_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	bf00      	nop
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <I2Cdev_readBytes+0x84>)
 8000f0c:	f001 fdbe 	bl	8002a8c <HAL_I2C_GetState>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d1f9      	bne.n	8000f0a <I2Cdev_readBytes+0x36>

	if(err < 0) {
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da02      	bge.n	8000f24 <I2Cdev_readBytes+0x50>
		return err;
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	e014      	b.n	8000f4e <I2Cdev_readBytes+0x7a>
	}

	err = i2c_receive_nack(dev_addr, data, len);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	b299      	uxth	r1, r3
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2264      	movs	r2, #100	; 0x64
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <I2Cdev_readBytes+0x84>)
 8000f34:	f001 fb84 	bl	8002640 <HAL_I2C_Master_Receive>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	bf00      	nop
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <I2Cdev_readBytes+0x84>)
 8000f40:	f001 fda4 	bl	8002a8c <HAL_I2C_GetState>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b20      	cmp	r3, #32
 8000f48:	d1f9      	bne.n	8000f3e <I2Cdev_readBytes+0x6a>

	return err;
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000214 	.word	0x20000214

08000f5c <I2Cdev_readByte>:
 * @param dev_addr 	I2C slave device address
 * @param reg_addr 	Register reg_addr to read from
 * @param data 		Buffer to save data into
 * @return Status of read operation (0 = success, <0 = error)
 */
int8_t 	I2Cdev_readByte(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	603a      	str	r2, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	71bb      	strb	r3, [r7, #6]
	return I2Cdev_readBytes(dev_addr, reg_addr, 1, data);
 8000f6c:	79b9      	ldrb	r1, [r7, #6]
 8000f6e:	79f8      	ldrb	r0, [r7, #7]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f7ff ffae 	bl	8000ed4 <I2Cdev_readBytes>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <I2Cdev_writeByte>:
 * @param dev_addr 	I2C slave device address
 * @param reg_addr 	Register address to write to
 * @param data 		New byte value to write
 * @return Status of operation (0 = success, <0 = error)
 */
int8_t 	I2Cdev_writeByte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
	int8_t err;

	uint8_t ts_data[2] = {reg_addr, data};
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	733b      	strb	r3, [r7, #12]
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	737b      	strb	r3, [r7, #13]
	err = i2c_transmit_nack(dev_addr, ts_data, 2);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f107 020c 	add.w	r2, r7, #12
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2302      	movs	r3, #2
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <I2Cdev_writeByte+0x4c>)
 8000fae:	f001 fa49 	bl	8002444 <HAL_I2C_Master_Transmit>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	bf00      	nop
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <I2Cdev_writeByte+0x4c>)
 8000fba:	f001 fd67 	bl	8002a8c <HAL_I2C_GetState>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d1f9      	bne.n	8000fb8 <I2Cdev_writeByte+0x34>

	return err;
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000214 	.word	0x20000214

08000fd4 <I2Cdev_writeWord>:
 * @param dev_addr 	I2C slave device address
 * @param reg_addr 	Register address to write to
 * @param data 		New byte value to write
 * @return Status of operation (0 = success, <0 = error)
 */
int8_t 	I2Cdev_writeWord(uint8_t dev_addr, uint8_t reg_addr, uint16_t data) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	71bb      	strb	r3, [r7, #6]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80bb      	strh	r3, [r7, #4]
	int8_t err;
	uint8_t ts_data[3] = {reg_addr, (data >> 8) & 0xFF, data & 0xFF};
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	733b      	strb	r3, [r7, #12]
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73bb      	strb	r3, [r7, #14]

	err = i2c_transmit_nack(reg_addr, ts_data, 3);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <I2Cdev_writeWord+0x58>)
 800100a:	f001 fa1b 	bl	8002444 <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	bf00      	nop
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <I2Cdev_writeWord+0x58>)
 8001016:	f001 fd39 	bl	8002a8c <HAL_I2C_GetState>
 800101a:	4603      	mov	r3, r0
 800101c:	2b20      	cmp	r3, #32
 800101e:	d1f9      	bne.n	8001014 <I2Cdev_writeWord+0x40>
	return err;
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000214 	.word	0x20000214

08001030 <I2Cdev_writeBit>:
 * @param reg_addr 	Register regAddr to write to
 * @param bit_n 	Bit position to write (0-7)
 * @param data 		New bit value to write
 * @return Status of operation (0 = success, <0 = error)
 */
int8_t 	I2Cdev_writeBit(uint8_t dev_addr, uint8_t reg_addr, uint8_t bit_n, uint8_t data) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	4603      	mov	r3, r0
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	460b      	mov	r3, r1
 8001048:	717b      	strb	r3, [r7, #5]
 800104a:	4613      	mov	r3, r2
 800104c:	713b      	strb	r3, [r7, #4]
	uint8_t b;
	int8_t err;

	err = I2Cdev_readByte(dev_addr, reg_addr, &b);
 800104e:	f107 020e 	add.w	r2, r7, #14
 8001052:	79b9      	ldrb	r1, [r7, #6]
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff80 	bl	8000f5c <I2Cdev_readByte>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
	if(err < 0) {
 8001060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da02      	bge.n	800106e <I2Cdev_writeBit+0x3e>
		return err;
 8001068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106c:	e023      	b.n	80010b6 <I2Cdev_writeBit+0x86>
	}

	b = (data != 0) ? (b | (1<<bit_n)) : (b &= ~(1<<bit_n));
 800106e:	793b      	ldrb	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <I2Cdev_writeBit+0x5a>
 8001074:	797b      	ldrb	r3, [r7, #5]
 8001076:	2201      	movs	r2, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	b25a      	sxtb	r2, r3
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	e00d      	b.n	80010a6 <I2Cdev_writeBit+0x76>
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	2201      	movs	r2, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	b25b      	sxtb	r3, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	b25a      	sxtb	r2, r3
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	4013      	ands	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	73bb      	strb	r3, [r7, #14]

	return I2Cdev_writeByte(dev_addr, reg_addr, b);
 80010a8:	7bba      	ldrb	r2, [r7, #14]
 80010aa:	79b9      	ldrb	r1, [r7, #6]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff68 	bl	8000f84 <I2Cdev_writeByte>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}

080010be <I2Cdev_writeBits>:
 * @param data 		Right-aligned value to write
 * @return Status of operation (0 = success, <0 = error)
 */
int8_t I2Cdev_writeBits(uint8_t dev_addr, uint8_t reg_addr, uint8_t start_bit,
		uint8_t len, uint8_t data)
{
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4604      	mov	r4, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4623      	mov	r3, r4
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4603      	mov	r3, r0
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	460b      	mov	r3, r1
 80010d6:	717b      	strb	r3, [r7, #5]
 80010d8:	4613      	mov	r3, r2
 80010da:	713b      	strb	r3, [r7, #4]
    uint8_t b;
    int8_t err;

    if ((err = I2Cdev_readByte(dev_addr, reg_addr, &b)) == 0) {
 80010dc:	f107 020d 	add.w	r2, r7, #13
 80010e0:	79b9      	ldrb	r1, [r7, #6]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff39 	bl	8000f5c <I2Cdev_readByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d133      	bne.n	800115e <I2Cdev_writeBits+0xa0>
        uint8_t mask = ((1 << len) - 1) << (start_bit - len + 1);
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	7979      	ldrb	r1, [r7, #5]
 8001102:	793b      	ldrb	r3, [r7, #4]
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	3301      	adds	r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	73bb      	strb	r3, [r7, #14]
        data <<= (start_bit - len + 1); // shift data into correct position
 800110e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001112:	7979      	ldrb	r1, [r7, #5]
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	1acb      	subs	r3, r1, r3
 8001118:	3301      	adds	r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	f887 3020 	strb.w	r3, [r7, #32]
        data &= mask; // zero all non-important bits in data
 8001122:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	4013      	ands	r3, r2
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~(mask); // zero all important bits in existing byte
 800112e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001132:	43db      	mvns	r3, r3
 8001134:	b25a      	sxtb	r2, r3
 8001136:	7b7b      	ldrb	r3, [r7, #13]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4013      	ands	r3, r2
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	737b      	strb	r3, [r7, #13]
        b |= data; // combine data with existing byte
 8001142:	7b7a      	ldrb	r2, [r7, #13]
 8001144:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001148:	4313      	orrs	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]

        return I2Cdev_writeByte(dev_addr, reg_addr, b);
 800114e:	7b7a      	ldrb	r2, [r7, #13]
 8001150:	79b9      	ldrb	r1, [r7, #6]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff15 	bl	8000f84 <I2Cdev_writeByte>
 800115a:	4603      	mov	r3, r0
 800115c:	e001      	b.n	8001162 <I2Cdev_writeBits+0xa4>
    }
    else {
        return err;
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}

0800116a <MPU6050_initialize>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050_initialize() {
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
    MPU6050_setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 f8be 	bl	80012f0 <MPU6050_setClockSource>
    MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f809 	bl	800118c <MPU6050_setFullScaleGyroRange>
    MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f81a 	bl	80011b4 <MPU6050_setFullScaleAccelRange>
    MPU6050_setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f8a3 	bl	80012cc <MPU6050_setSleepEnabled>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
    I2Cdev_writeBits(mpu6050.devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MPU6050_setFullScaleGyroRange+0x24>)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	2204      	movs	r2, #4
 80011a2:	211b      	movs	r1, #27
 80011a4:	f7ff ff8b 	bl	80010be <I2Cdev_writeBits>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204

080011b4 <MPU6050_setFullScaleAccelRange>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
    I2Cdev_writeBits(mpu6050.devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MPU6050_setFullScaleAccelRange+0x24>)
 80011c0:	7818      	ldrb	r0, [r3, #0]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2302      	movs	r3, #2
 80011c8:	2204      	movs	r2, #4
 80011ca:	211c      	movs	r1, #28
 80011cc:	f7ff ff77 	bl	80010be <I2Cdev_writeBits>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000204 	.word	0x20000204

080011dc <MPU6050_getAccelerationX>:
/** Get X-axis accelerometer reading.
 * @return X-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
int16_t MPU6050_getAccelerationX() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, mpu6050.buffer);
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MPU6050_getAccelerationX+0x28>)
 80011e2:	7818      	ldrb	r0, [r3, #0]
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MPU6050_getAccelerationX+0x2c>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	213b      	movs	r1, #59	; 0x3b
 80011ea:	f7ff fe73 	bl	8000ed4 <I2Cdev_readBytes>
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MPU6050_getAccelerationX+0x28>)
 80011f0:	785b      	ldrb	r3, [r3, #1]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <MPU6050_getAccelerationX+0x28>)
 80011f8:	789b      	ldrb	r3, [r3, #2]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000204 	.word	0x20000204
 8001208:	20000205 	.word	0x20000205

0800120c <MPU6050_getAccelerationY>:
/** Get Y-axis accelerometer reading.
 * @return Y-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_YOUT_H
 */
int16_t MPU6050_getAccelerationY() {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, mpu6050.buffer);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MPU6050_getAccelerationY+0x28>)
 8001212:	7818      	ldrb	r0, [r3, #0]
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MPU6050_getAccelerationY+0x2c>)
 8001216:	2202      	movs	r2, #2
 8001218:	213d      	movs	r1, #61	; 0x3d
 800121a:	f7ff fe5b 	bl	8000ed4 <I2Cdev_readBytes>
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MPU6050_getAccelerationY+0x28>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <MPU6050_getAccelerationY+0x28>)
 8001228:	789b      	ldrb	r3, [r3, #2]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000204 	.word	0x20000204
 8001238:	20000205 	.word	0x20000205

0800123c <MPU6050_getAccelerationZ>:
/** Get Z-axis accelerometer reading.
 * @return Z-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_ZOUT_H
 */
int16_t MPU6050_getAccelerationZ() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, mpu6050.buffer);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MPU6050_getAccelerationZ+0x28>)
 8001242:	7818      	ldrb	r0, [r3, #0]
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MPU6050_getAccelerationZ+0x2c>)
 8001246:	2202      	movs	r2, #2
 8001248:	213f      	movs	r1, #63	; 0x3f
 800124a:	f7ff fe43 	bl	8000ed4 <I2Cdev_readBytes>
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <MPU6050_getAccelerationZ+0x28>)
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <MPU6050_getAccelerationZ+0x28>)
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000204 	.word	0x20000204
 8001268:	20000205 	.word	0x20000205

0800126c <MPU6050_getRotationX>:
/** Get X-axis gyroscope reading.
 * @return X-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_XOUT_H
 */
int16_t MPU6050_getRotationX() {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_GYRO_XOUT_H, 2, mpu6050.buffer);
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MPU6050_getRotationX+0x28>)
 8001272:	7818      	ldrb	r0, [r3, #0]
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MPU6050_getRotationX+0x2c>)
 8001276:	2202      	movs	r2, #2
 8001278:	2143      	movs	r1, #67	; 0x43
 800127a:	f7ff fe2b 	bl	8000ed4 <I2Cdev_readBytes>
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <MPU6050_getRotationX+0x28>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <MPU6050_getRotationX+0x28>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000204 	.word	0x20000204
 8001298:	20000205 	.word	0x20000205

0800129c <MPU6050_getRotationY>:
/** Get Y-axis gyroscope reading.
 * @return Y-axis rotation measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_GYRO_YOUT_H
 */
int16_t MPU6050_getRotationY() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_GYRO_YOUT_H, 2, mpu6050.buffer);
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MPU6050_getRotationY+0x28>)
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MPU6050_getRotationY+0x2c>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	2145      	movs	r1, #69	; 0x45
 80012aa:	f7ff fe13 	bl	8000ed4 <I2Cdev_readBytes>
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <MPU6050_getRotationY+0x28>)
 80012b0:	785b      	ldrb	r3, [r3, #1]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <MPU6050_getRotationY+0x28>)
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21b      	sxth	r3, r3
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000204 	.word	0x20000204
 80012c8:	20000205 	.word	0x20000205

080012cc <MPU6050_setSleepEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050_setSleepEnabled(bool enabled) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    I2Cdev_writeBit(mpu6050.devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <MPU6050_setSleepEnabled+0x20>)
 80012d8:	7818      	ldrb	r0, [r3, #0]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2206      	movs	r2, #6
 80012de:	216b      	movs	r1, #107	; 0x6b
 80012e0:	f7ff fea6 	bl	8001030 <I2Cdev_writeBit>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000204 	.word	0x20000204

080012f0 <MPU6050_setClockSource>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050_setClockSource(uint8_t source) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    I2Cdev_writeBits(mpu6050.devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MPU6050_setClockSource+0x24>)
 80012fc:	7818      	ldrb	r0, [r3, #0]
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2303      	movs	r3, #3
 8001304:	2202      	movs	r2, #2
 8001306:	216b      	movs	r1, #107	; 0x6b
 8001308:	f7ff fed9 	bl	80010be <I2Cdev_writeBits>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000204 	.word	0x20000204

08001318 <MPU6050_setXAccelOffset>:

int16_t MPU6050_getXAccelOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_XA_OFFS_H, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setXAccelOffset(int16_t offset) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <MPU6050_setXAccelOffset+0x20>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	2106      	movs	r1, #6
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe52 	bl	8000fd4 <I2Cdev_writeWord>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000204 	.word	0x20000204

0800133c <MPU6050_setYAccelOffset>:

int16_t MPU6050_getYAccelOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_YA_OFFS_H, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setYAccelOffset(int16_t offset) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_YA_OFFS_H, offset);
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <MPU6050_setYAccelOffset+0x20>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	2108      	movs	r1, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe40 	bl	8000fd4 <I2Cdev_writeWord>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000204 	.word	0x20000204

08001360 <MPU6050_setZAccelOffset>:

int16_t MPU6050_getZAccelOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_ZA_OFFS_H, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setZAccelOffset(int16_t offset) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <MPU6050_setZAccelOffset+0x20>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	210a      	movs	r1, #10
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe2e 	bl	8000fd4 <I2Cdev_writeWord>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000204 	.word	0x20000204

08001384 <MPU6050_setXGyroOffset>:

int16_t MPU6050_getXGyroOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_XG_OFFS_USRH, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setXGyroOffset(int16_t offset) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <MPU6050_setXGyroOffset+0x20>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	2113      	movs	r1, #19
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe1c 	bl	8000fd4 <I2Cdev_writeWord>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000204 	.word	0x20000204

080013a8 <MPU6050_setYGyroOffset>:

int16_t MPU6050_getYGyroOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_YG_OFFS_USRH, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setYGyroOffset(int16_t offset) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <MPU6050_setYGyroOffset+0x20>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	2115      	movs	r1, #21
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe0a 	bl	8000fd4 <I2Cdev_writeWord>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000204 	.word	0x20000204

080013cc <MPU6050_setZGyroOffset>:

int16_t MPU6050_getZGyroOffset() {
    I2Cdev_readBytes(mpu6050.devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, mpu6050.buffer);
    return (((int16_t)mpu6050.buffer[0]) << 8) | mpu6050.buffer[1];
}
void MPU6050_setZGyroOffset(int16_t offset) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
    I2Cdev_writeWord(mpu6050.devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <MPU6050_setZGyroOffset+0x20>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	88fa      	ldrh	r2, [r7, #6]
 80013dc:	2117      	movs	r1, #23
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fdf8 	bl	8000fd4 <I2Cdev_writeWord>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000204 	.word	0x20000204

080013f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <MX_GPIO_Init+0xd0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800147c:	f000 fe84 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001486:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_GPIO_Init+0xd8>)
 8001498:	f000 fcf2 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149c:	2320      	movs	r3, #32
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0xd4>)
 80014b4:	f000 fce4 	bl	8001e80 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020800 	.word	0x40020800

080014cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x50>)
 800150a:	f000 fe57 	bl	80021bc <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 f96c 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000214 	.word	0x20000214
 8001520:	40005400 	.word	0x40005400
 8001524:	00061a80 	.word	0x00061a80

08001528 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_I2C_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23c0      	movs	r3, #192	; 0xc0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001576:	2304      	movs	r3, #4
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <HAL_I2C_MspInit+0x8c>)
 8001582:	f000 fc7d 	bl	8001e80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_I2C_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 fae3 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f8a1 	bl	8001708 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff ff13 	bl	80013f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ca:	f000 fa41 	bl	8001a50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015ce:	f7ff ff7d 	bl	80014cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mpu6050.devAddr = MPU6050_DEFAULT_ADDRESS;
 80015d2:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <main+0x12c>)
 80015d4:	22d0      	movs	r2, #208	; 0xd0
 80015d6:	701a      	strb	r2, [r3, #0]
  MPU6050_initialize();
 80015d8:	f7ff fdc7 	bl	800116a <MPU6050_initialize>
  int32_t retvar = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  int32_t retvar2 = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  int32_t retvar3 = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  int32_t retvar4 = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  int32_t retvar5 = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  MPU6050_setXGyroOffset(0);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fec7 	bl	8001384 <MPU6050_setXGyroOffset>
  MPU6050_setYGyroOffset(0);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fed6 	bl	80013a8 <MPU6050_setYGyroOffset>
  MPU6050_setZGyroOffset(0);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fee5 	bl	80013cc <MPU6050_setZGyroOffset>
  MPU6050_setXAccelOffset(0);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fe88 	bl	8001318 <MPU6050_setXAccelOffset>
  MPU6050_setYAccelOffset(0);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fe97 	bl	800133c <MPU6050_setYAccelOffset>
  MPU6050_setZAccelOffset(0);
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fea6 	bl	8001360 <MPU6050_setZAccelOffset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f000 fb29 	bl	8001c6c <HAL_Delay>
	  retvar = (int32_t) MPU6050_getRotationX();
 800161a:	f7ff fe27 	bl	800126c <MPU6050_getRotationX>
 800161e:	4603      	mov	r3, r0
 8001620:	617b      	str	r3, [r7, #20]
	  retvar2 = (int32_t) MPU6050_getRotationY();
 8001622:	f7ff fe3b 	bl	800129c <MPU6050_getRotationY>
 8001626:	4603      	mov	r3, r0
 8001628:	613b      	str	r3, [r7, #16]
	  retvar3 = (int32_t)MPU6050_getAccelerationX();
 800162a:	f7ff fdd7 	bl	80011dc <MPU6050_getAccelerationX>
 800162e:	4603      	mov	r3, r0
 8001630:	60fb      	str	r3, [r7, #12]
	  retvar4 = (int32_t)MPU6050_getAccelerationY();
 8001632:	f7ff fdeb 	bl	800120c <MPU6050_getAccelerationY>
 8001636:	4603      	mov	r3, r0
 8001638:	60bb      	str	r3, [r7, #8]
      retvar5 = (int32_t)MPU6050_getAccelerationZ();
 800163a:	f7ff fdff 	bl	800123c <MPU6050_getAccelerationZ>
 800163e:	4603      	mov	r3, r0
 8001640:	607b      	str	r3, [r7, #4]

      printf("Gyro X : ");
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <main+0x130>)
 8001644:	f003 f992 	bl	800496c <iprintf>
	  printf("%ld\r\n", retvar);
 8001648:	6979      	ldr	r1, [r7, #20]
 800164a:	4828      	ldr	r0, [pc, #160]	; (80016ec <main+0x134>)
 800164c:	f003 f98e 	bl	800496c <iprintf>
	  printf("Gyro Y : ");
 8001650:	4827      	ldr	r0, [pc, #156]	; (80016f0 <main+0x138>)
 8001652:	f003 f98b 	bl	800496c <iprintf>
	  printf("%ld\r\n", retvar2);
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	4824      	ldr	r0, [pc, #144]	; (80016ec <main+0x134>)
 800165a:	f003 f987 	bl	800496c <iprintf>
      printf("Accel X : ");
 800165e:	4825      	ldr	r0, [pc, #148]	; (80016f4 <main+0x13c>)
 8001660:	f003 f984 	bl	800496c <iprintf>
	  printf("%.2f\r\n", retvar3/(float)16384);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80016f8 <main+0x140>
 8001672:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001676:	ee16 0a90 	vmov	r0, s13
 800167a:	f7fe ff6d 	bl	8000558 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	481e      	ldr	r0, [pc, #120]	; (80016fc <main+0x144>)
 8001684:	f003 f972 	bl	800496c <iprintf>
	  printf("Accel Y : ");
 8001688:	481d      	ldr	r0, [pc, #116]	; (8001700 <main+0x148>)
 800168a:	f003 f96f 	bl	800496c <iprintf>
	  printf("%.2f\r\n", retvar4/(float)16384);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001698:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016f8 <main+0x140>
 800169c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016a0:	ee16 0a90 	vmov	r0, s13
 80016a4:	f7fe ff58 	bl	8000558 <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4813      	ldr	r0, [pc, #76]	; (80016fc <main+0x144>)
 80016ae:	f003 f95d 	bl	800496c <iprintf>
	  printf("Accel Z : ");
 80016b2:	4814      	ldr	r0, [pc, #80]	; (8001704 <main+0x14c>)
 80016b4:	f003 f95a 	bl	800496c <iprintf>
	  printf("%.2f\r\n", retvar5/(float)16384);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80016f8 <main+0x140>
 80016c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ca:	ee16 0a90 	vmov	r0, s13
 80016ce:	f7fe ff43 	bl	8000558 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <main+0x144>)
 80016d8:	f003 f948 	bl	800496c <iprintf>

	  HAL_Delay(50);
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f000 fac5 	bl	8001c6c <HAL_Delay>
	  HAL_Delay(50);
 80016e2:	e797      	b.n	8001614 <main+0x5c>
 80016e4:	20000204 	.word	0x20000204
 80016e8:	08006a68 	.word	0x08006a68
 80016ec:	08006a74 	.word	0x08006a74
 80016f0:	08006a7c 	.word	0x08006a7c
 80016f4:	08006a88 	.word	0x08006a88
 80016f8:	46800000 	.word	0x46800000
 80016fc:	08006a94 	.word	0x08006a94
 8001700:	08006a9c 	.word	0x08006a9c
 8001704:	08006aa8 	.word	0x08006aa8

08001708 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fcb6 	bl	8004088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <_Z18SystemClock_Configv+0xe0>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 8001752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <_Z18SystemClock_Configv+0xe4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	2310      	movs	r3, #16
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001774:	2300      	movs	r3, #0
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001778:	2310      	movs	r3, #16
 800177a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800177c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001782:	2304      	movs	r3, #4
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001786:	2304      	movs	r3, #4
 8001788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4618      	mov	r0, r3
 8001790:	f001 fcb8 	bl	8003104 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80017a4:	f000 f824 	bl	80017f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a8:	230f      	movs	r3, #15
 80017aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2102      	movs	r1, #2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 ff15 	bl	80035f4 <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80017da:	f000 f809 	bl	80017f0 <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183a:	2007      	movs	r0, #7
 800183c:	f000 faec 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f9c8 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_kill>:

int _kill(int pid, int sig)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ba:	f002 fbad 	bl	8004018 <__errno>
 80018be:	4603      	mov	r3, r0
 80018c0:	2216      	movs	r2, #22
 80018c2:	601a      	str	r2, [r3, #0]
	return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_exit>:

void _exit (int status)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffe7 	bl	80018b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018e2:	e7fe      	b.n	80018e2 <_exit+0x12>

080018e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e00a      	b.n	800190c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f6:	f3af 8000 	nop.w
 80018fa:	4601      	mov	r1, r0
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf0      	blt.n	80018f6 <_read+0x12>
	}

return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e009      	b.n	8001944 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fab9 	bl	8000eb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf1      	blt.n	8001930 <_write+0x12>
	}
	return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_close>:

int _close(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	605a      	str	r2, [r3, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_isatty>:

int _isatty(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f002 fb12 	bl	8004018 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20020000 	.word	0x20020000
 8001a20:	00004000 	.word	0x00004000
 8001a24:	200001f8 	.word	0x200001f8
 8001a28:	200002c0 	.word	0x200002c0

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SystemInit+0x20>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <SystemInit+0x20>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_USART2_UART_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a88:	f001 ffb0 	bl	80039ec <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a92:	f7ff fead 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000268 	.word	0x20000268
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_UART_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12b      	bne.n	8001b1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_UART_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001afe:	230c      	movs	r3, #12
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_UART_MspInit+0x8c>)
 8001b1a:	f000 f9b1 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5e:	f7ff ff65 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f002 fa5f 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff fd27 	bl	80015b8 <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b78:	08006ebc 	.word	0x08006ebc
  ldr r2, =_sbss
 8001b7c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b80:	200002c0 	.word	0x200002c0

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <HAL_Init+0x40>)
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_Init+0x40>)
 8001b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x40>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f931 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fe1e 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f93b 	bl	8001e66 <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f911 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	200002ac 	.word	0x200002ac

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200002ac 	.word	0x200002ac

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffee 	bl	8001c54 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffde 	bl	8001c54 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff47 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff5c 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffb0 	bl	8001dd4 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e159      	b.n	8002150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8148 	bne.w	800214a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a2 	beq.w	800214a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x202>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1fe>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1fa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1f6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_GPIO_Init+0x300>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1f2>
 800206e:	2304      	movs	r3, #4
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002072:	2307      	movs	r3, #7
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002082:	2300      	movs	r3, #0
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	f67f aea2 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12b      	b.n	8002426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff f9a0 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f001 fbbc 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_I2C_Init+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_I2C_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7d      	ldr	r2, [pc, #500]	; (8002438 <HAL_I2C_Init+0x27c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e7      	b.n	8002426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_I2C_Init+0x280>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_I2C_Init+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_I2C_Init+0x284>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_I2C_Init+0x274>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d819      	bhi.n	80022f8 <HAL_I2C_Init+0x13c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_I2C_Init+0x138>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e59      	subs	r1, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	e051      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e04f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_I2C_Init+0x168>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e012      	b.n	800234a <HAL_I2C_Init+0x18e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x196>
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_I2C_Init+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e58      	subs	r0, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	fbb0 f3f3 	udiv	r3, r0, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6809      	ldr	r1, [r1, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6911      	ldr	r1, [r2, #16]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	431bde83 	.word	0x431bde83
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff fbfc 	bl	8001c54 <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	f040 80e0 	bne.w	800262c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	4970      	ldr	r1, [pc, #448]	; (8002638 <HAL_I2C_Master_Transmit+0x1f4>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fc66 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	e0d3      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Transmit+0x50>
 8002490:	2302      	movs	r3, #2
 8002492:	e0cc      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d007      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2210      	movs	r2, #16
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_I2C_Master_Transmit+0x1f8>)
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fad0 	bl	8002aa8 <I2C_MasterRequestWrite>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e08d      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002528:	e066      	b.n	80025f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fce0 	bl	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b04      	cmp	r3, #4
 8002592:	d11b      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x188>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	6a39      	ldr	r1, [r7, #32]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fcd0 	bl	8002f76 <I2C_WaitOnBTFFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e01a      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d194      	bne.n	800252a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	00100002 	.word	0x00100002
 800263c:	ffff0000 	.word	0xffff0000

08002640 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
 8002650:	4613      	mov	r3, r2
 8002652:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff fafe 	bl	8001c54 <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	f040 820b 	bne.w	8002a7e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2319      	movs	r3, #25
 800266e:	2201      	movs	r2, #1
 8002670:	497c      	ldr	r1, [pc, #496]	; (8002864 <HAL_I2C_Master_Receive+0x224>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fb68 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	e1fe      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_I2C_Master_Receive+0x50>
 800268c:	2302      	movs	r3, #2
 800268e:	e1f7      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d007      	beq.n	80026b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2222      	movs	r2, #34	; 0x22
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2210      	movs	r2, #16
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_I2C_Master_Receive+0x228>)
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f8:	8979      	ldrh	r1, [r7, #10]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa54 	bl	8002bac <I2C_MasterRequestRead>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e1b8      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e18c      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b01      	cmp	r3, #1
 8002744:	d11b      	bne.n	800277e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e16c      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b02      	cmp	r3, #2
 8002784:	d11b      	bne.n	80027be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	e14c      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027e4:	e138      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	f200 80f1 	bhi.w	80029d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d123      	bne.n	8002840 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fbfb 	bl	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e139      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800283e:	e10b      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b02      	cmp	r3, #2
 8002846:	d14e      	bne.n	80028e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	2200      	movs	r2, #0
 8002850:	4906      	ldr	r1, [pc, #24]	; (800286c <HAL_I2C_Master_Receive+0x22c>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa78 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e10e      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
 8002862:	bf00      	nop
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000
 800286c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e4:	e0b8      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	2200      	movs	r2, #0
 80028ee:	4966      	ldr	r1, [pc, #408]	; (8002a88 <HAL_I2C_Master_Receive+0x448>)
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa29 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0bf      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2200      	movs	r2, #0
 800294a:	494f      	ldr	r1, [pc, #316]	; (8002a88 <HAL_I2C_Master_Receive+0x448>)
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f9fb 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e091      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d0:	e042      	b.n	8002a58 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fb0e 	bl	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e04c      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d118      	bne.n	8002a58 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f aec2 	bne.w	80027e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00010004 	.word	0x00010004

08002a8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d006      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <I2C_MasterRequestWrite+0x2a>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad0:	d108      	bne.n	8002ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e00b      	b.n	8002afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d107      	bne.n	8002afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f91d 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d103      	bne.n	8002b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e035      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b38:	d108      	bne.n	8002b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	e01b      	b.n	8002b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	11db      	asrs	r3, r3, #7
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0306 	and.w	r3, r3, #6
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f063 030f 	orn	r3, r3, #15
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <I2C_MasterRequestWrite+0xfc>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f943 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e010      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <I2C_MasterRequestWrite+0x100>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f933 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010008 	.word	0x00010008
 8002ba8:	00010002 	.word	0x00010002

08002bac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d006      	beq.n	8002be6 <I2C_MasterRequestRead+0x3a>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d003      	beq.n	8002be6 <I2C_MasterRequestRead+0x3a>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be4:	d108      	bne.n	8002bf8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e00b      	b.n	8002c10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d107      	bne.n	8002c10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f893 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c36:	d103      	bne.n	8002c40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e079      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c4c:	d108      	bne.n	8002c60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	e05f      	b.n	8002d20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c60:	897b      	ldrh	r3, [r7, #10]
 8002c62:	11db      	asrs	r3, r3, #7
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0306 	and.w	r3, r3, #6
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f063 030f 	orn	r3, r3, #15
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4930      	ldr	r1, [pc, #192]	; (8002d40 <I2C_MasterRequestRead+0x194>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f8b9 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e054      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4929      	ldr	r1, [pc, #164]	; (8002d44 <I2C_MasterRequestRead+0x198>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8a9 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e044      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f831 	bl	8002d48 <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d103      	bne.n	8002d04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e017      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030e 	orn	r3, r3, #14
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <I2C_MasterRequestRead+0x198>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f865 	bl	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010008 	.word	0x00010008
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	e025      	b.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d021      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe ff77 	bl	8001c54 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e023      	b.n	8002dee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10d      	bne.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	e00c      	b.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d0b6      	beq.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e04:	e051      	b.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	d123      	bne.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0204 	orr.w	r2, r3, #4
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e046      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fef5 	bl	8001c54 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e020      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10c      	bne.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e00b      	b.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf14      	ite	ne
 8002ee0:	2301      	movne	r3, #1
 8002ee2:	2300      	moveq	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d18d      	bne.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f00:	e02d      	b.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8ce 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02d      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d021      	beq.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fe9b 	bl	8001c54 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d1ca      	bne.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f82:	e02d      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f88d 	bl	80030a4 <I2C_IsAcknowledgeFailed>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e02d      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d021      	beq.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fe fe5a 	bl	8001c54 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e007      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d1ca      	bne.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003004:	e042      	b.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d119      	bne.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0210 	mvn.w	r2, #16
 800301c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e029      	b.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe fe04 	bl	8001c54 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e007      	b.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d1b5      	bne.n	8003006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d11b      	bne.n	80030f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e264      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003122:	4ba3      	ldr	r3, [pc, #652]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00c      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4ba0      	ldr	r3, [pc, #640]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b9d      	ldr	r3, [pc, #628]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b99      	ldr	r3, [pc, #612]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e23f      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x74>
 800316a:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a90      	ldr	r2, [pc, #576]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a8a      	ldr	r2, [pc, #552]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a80      	ldr	r2, [pc, #512]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fd4a 	bl	8001c54 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fd46 	bl	8001c54 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e204      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fd36 	bl	8001c54 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fd32 	bl	8001c54 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1f0      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1c4      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4952      	ldr	r1, [pc, #328]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e03a      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCC_OscConfig+0x2b0>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fceb 	bl	8001c54 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003282:	f7fe fce7 	bl	8001c54 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1a5      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4940      	ldr	r1, [pc, #256]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_OscConfig+0x2b0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fcca 	bl	8001c54 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fe fcc6 	bl	8001c54 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e184      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d030      	beq.n	8003350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCC_OscConfig+0x2b4>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fcaa 	bl	8001c54 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fca6 	bl	8001c54 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e164      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x200>
 8003322:	e015      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x2b4>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fe fc93 	bl	8001c54 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fc8f 	bl	8001c54 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e14d      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a0 	beq.w	800349e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_RCC_OscConfig+0x2b8>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fc55 	bl	8001c54 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e011      	b.n	80033d2 <HAL_RCC_OscConfig+0x2ce>
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470000 	.word	0x42470000
 80033b8:	42470e80 	.word	0x42470e80
 80033bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fc48 	bl	8001c54 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e106      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x4e4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2f0>
 80033e6:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x32a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x312>
 80033fc:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	4b78      	ldr	r3, [pc, #480]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a77      	ldr	r2, [pc, #476]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x32a>
 8003416:	4b75      	ldr	r3, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a74      	ldr	r2, [pc, #464]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a71      	ldr	r2, [pc, #452]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fc0d 	bl	8001c54 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fc09 	bl	8001c54 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0c5      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x33a>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fe fbf7 	bl	8001c54 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fbf3 	bl	8001c54 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0af      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 809b 	beq.w	80035de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d05c      	beq.n	800356e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d141      	bne.n	8003540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fbc7 	bl	8001c54 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fbc3 	bl	8001c54 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e081      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3b01      	subs	r3, #1
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fb9c 	bl	8001c54 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fb98 	bl	8001c54 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e056      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x41c>
 800353e:	e04e      	b.n	80035de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fb85 	bl	8001c54 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fb81 	bl	8001c54 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e03f      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x44a>
 800356c:	e037      	b.n	80035de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e032      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCC_OscConfig+0x4e8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d028      	beq.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d121      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d11a      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d111      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40007000 	.word	0x40007000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470060 	.word	0x42470060

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cc      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90c      	bls.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a52      	ldr	r2, [pc, #328]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e067      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4934      	ldr	r1, [pc, #208]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fab6 	bl	8001c54 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe fab2 	bl	8001c54 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d20c      	bcs.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f821 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fa16 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08006ab4 	.word	0x08006ab4
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d8:	4b67      	ldr	r3, [pc, #412]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d00d      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	f200 80bd 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x3a>
 80037f2:	e0b7      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037f6:	60bb      	str	r3, [r7, #8]
       break;
 80037f8:	e0b7      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b61      	ldr	r3, [pc, #388]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037fc:	60bb      	str	r3, [r7, #8]
      break;
 80037fe:	e0b4      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003800:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d04d      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	461a      	mov	r2, r3
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	ea02 0800 	and.w	r8, r2, r0
 800382e:	ea03 0901 	and.w	r9, r3, r1
 8003832:	4640      	mov	r0, r8
 8003834:	4649      	mov	r1, r9
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	014b      	lsls	r3, r1, #5
 8003840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003844:	0142      	lsls	r2, r0, #5
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	ebb0 0008 	subs.w	r0, r0, r8
 800384e:	eb61 0109 	sbc.w	r1, r1, r9
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	018b      	lsls	r3, r1, #6
 800385c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003860:	0182      	lsls	r2, r0, #6
 8003862:	1a12      	subs	r2, r2, r0
 8003864:	eb63 0301 	sbc.w	r3, r3, r1
 8003868:	f04f 0000 	mov.w	r0, #0
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	00d9      	lsls	r1, r3, #3
 8003872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003876:	00d0      	lsls	r0, r2, #3
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	eb12 0208 	adds.w	r2, r2, r8
 8003880:	eb43 0309 	adc.w	r3, r3, r9
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	0259      	lsls	r1, r3, #9
 800388e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003892:	0250      	lsls	r0, r2, #9
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f7fd f988 	bl	8000bb8 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e04a      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	461a      	mov	r2, r3
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	ea02 0400 	and.w	r4, r2, r0
 80038ca:	ea03 0501 	and.w	r5, r3, r1
 80038ce:	4620      	mov	r0, r4
 80038d0:	4629      	mov	r1, r5
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	014b      	lsls	r3, r1, #5
 80038dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038e0:	0142      	lsls	r2, r0, #5
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	1b00      	subs	r0, r0, r4
 80038e8:	eb61 0105 	sbc.w	r1, r1, r5
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	018b      	lsls	r3, r1, #6
 80038f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038fa:	0182      	lsls	r2, r0, #6
 80038fc:	1a12      	subs	r2, r2, r0
 80038fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	00d9      	lsls	r1, r3, #3
 800390c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003910:	00d0      	lsls	r0, r2, #3
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	1912      	adds	r2, r2, r4
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	f04f 0000 	mov.w	r0, #0
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	0299      	lsls	r1, r3, #10
 8003926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800392a:	0290      	lsls	r0, r2, #10
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	461a      	mov	r2, r3
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fd f93c 	bl	8000bb8 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	60bb      	str	r3, [r7, #8]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003966:	60bb      	str	r3, [r7, #8]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	68bb      	ldr	r3, [r7, #8]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08006ac4 	.word	0x08006ac4

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08006ac4 	.word	0x08006ac4

080039ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e03f      	b.n	8003a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe f846 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f929 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d17c      	bne.n	8003ba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit+0x2c>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e075      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Transmit+0x3e>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e06e      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	; 0x21
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fe f8bb 	bl	8001c54 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b18:	e02a      	b.n	8003b70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f840 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e036      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cf      	bne.n	8003b1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f810 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b090      	sub	sp, #64	; 0x40
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	e050      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d04c      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	f7fe f843 	bl	8001c54 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d241      	bcs.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfa:	637a      	str	r2, [r7, #52]	; 0x34
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2e:	623a      	str	r2, [r7, #32]
 8003c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69f9      	ldr	r1, [r7, #28]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d09f      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3740      	adds	r7, #64	; 0x40
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	b09f      	sub	sp, #124	; 0x7c
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	68d9      	ldr	r1, [r3, #12]
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	ea40 0301 	orr.w	r3, r0, r1
 8003ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ccc:	f021 010c 	bic.w	r1, r1, #12
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	6999      	ldr	r1, [r3, #24]
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	ea40 0301 	orr.w	r3, r0, r1
 8003cf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4bc5      	ldr	r3, [pc, #788]	; (800400c <UART_SetConfig+0x384>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d004      	beq.n	8003d06 <UART_SetConfig+0x7e>
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4bc3      	ldr	r3, [pc, #780]	; (8004010 <UART_SetConfig+0x388>)
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d06:	f7ff fe5d 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8003d0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003d0c:	e002      	b.n	8003d14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7ff fe45 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8003d12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	f040 80b6 	bne.w	8003e8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d22:	461c      	mov	r4, r3
 8003d24:	f04f 0500 	mov.w	r5, #0
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d30:	415b      	adcs	r3, r3
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d38:	1912      	adds	r2, r2, r4
 8003d3a:	eb45 0303 	adc.w	r3, r5, r3
 8003d3e:	f04f 0000 	mov.w	r0, #0
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	00d9      	lsls	r1, r3, #3
 8003d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d4c:	00d0      	lsls	r0, r2, #3
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	1911      	adds	r1, r2, r4
 8003d54:	6639      	str	r1, [r7, #96]	; 0x60
 8003d56:	416b      	adcs	r3, r5
 8003d58:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d74:	f7fc ff20 	bl	8000bb8 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4ba5      	ldr	r3, [pc, #660]	; (8004014 <UART_SetConfig+0x38c>)
 8003d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	011e      	lsls	r6, r3, #4
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	461c      	mov	r4, r3
 8003d8a:	f04f 0500 	mov.w	r5, #0
 8003d8e:	4622      	mov	r2, r4
 8003d90:	462b      	mov	r3, r5
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6339      	str	r1, [r7, #48]	; 0x30
 8003d96:	415b      	adcs	r3, r3
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d9e:	1912      	adds	r2, r2, r4
 8003da0:	eb45 0303 	adc.w	r3, r5, r3
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	00d9      	lsls	r1, r3, #3
 8003dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db2:	00d0      	lsls	r0, r2, #3
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	1911      	adds	r1, r2, r4
 8003dba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dbc:	416b      	adcs	r3, r5
 8003dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dda:	f7fc feed 	bl	8000bb8 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b8c      	ldr	r3, [pc, #560]	; (8004014 <UART_SetConfig+0x38c>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a87      	ldr	r2, [pc, #540]	; (8004014 <UART_SetConfig+0x38c>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e04:	441e      	add	r6, r3
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	1894      	adds	r4, r2, r2
 8003e14:	623c      	str	r4, [r7, #32]
 8003e16:	415b      	adcs	r3, r3
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1e:	1812      	adds	r2, r2, r0
 8003e20:	eb41 0303 	adc.w	r3, r1, r3
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	f04f 0500 	mov.w	r5, #0
 8003e2c:	00dd      	lsls	r5, r3, #3
 8003e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e32:	00d4      	lsls	r4, r2, #3
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	1814      	adds	r4, r2, r0
 8003e3a:	653c      	str	r4, [r7, #80]	; 0x50
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	61b9      	str	r1, [r7, #24]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e5a:	f7fc fead 	bl	8000bb8 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <UART_SetConfig+0x38c>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a67      	ldr	r2, [pc, #412]	; (8004014 <UART_SetConfig+0x38c>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 0207 	and.w	r2, r3, #7
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4432      	add	r2, r6
 8003e88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e8a:	e0b9      	b.n	8004000 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8e:	461c      	mov	r4, r3
 8003e90:	f04f 0500 	mov.w	r5, #0
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	6139      	str	r1, [r7, #16]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ea4:	1912      	adds	r2, r2, r4
 8003ea6:	eb45 0303 	adc.w	r3, r5, r3
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	00d9      	lsls	r1, r3, #3
 8003eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb8:	00d0      	lsls	r0, r2, #3
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	eb12 0804 	adds.w	r8, r2, r4
 8003ec2:	eb43 0905 	adc.w	r9, r3, r5
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	008b      	lsls	r3, r1, #2
 8003eda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ede:	0082      	lsls	r2, r0, #2
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f7fc fe68 	bl	8000bb8 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b49      	ldr	r3, [pc, #292]	; (8004014 <UART_SetConfig+0x38c>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	011e      	lsls	r6, r3, #4
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	1894      	adds	r4, r2, r2
 8003f04:	60bc      	str	r4, [r7, #8]
 8003f06:	415b      	adcs	r3, r3
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0e:	1812      	adds	r2, r2, r0
 8003f10:	eb41 0303 	adc.w	r3, r1, r3
 8003f14:	f04f 0400 	mov.w	r4, #0
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	00dd      	lsls	r5, r3, #3
 8003f1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f22:	00d4      	lsls	r4, r2, #3
 8003f24:	4622      	mov	r2, r4
 8003f26:	462b      	mov	r3, r5
 8003f28:	1814      	adds	r4, r2, r0
 8003f2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f48:	0082      	lsls	r2, r0, #2
 8003f4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f4e:	f7fc fe33 	bl	8000bb8 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <UART_SetConfig+0x38c>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	; 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	3332      	adds	r3, #50	; 0x32
 8003f6a:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <UART_SetConfig+0x38c>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	441e      	add	r6, r3
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	1894      	adds	r4, r2, r2
 8003f86:	603c      	str	r4, [r7, #0]
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f90:	1812      	adds	r2, r2, r0
 8003f92:	eb41 0303 	adc.w	r3, r1, r3
 8003f96:	f04f 0400 	mov.w	r4, #0
 8003f9a:	f04f 0500 	mov.w	r5, #0
 8003f9e:	00dd      	lsls	r5, r3, #3
 8003fa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fa4:	00d4      	lsls	r4, r2, #3
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	eb12 0a00 	adds.w	sl, r2, r0
 8003fae:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fca:	0082      	lsls	r2, r0, #2
 8003fcc:	4650      	mov	r0, sl
 8003fce:	4659      	mov	r1, fp
 8003fd0:	f7fc fdf2 	bl	8000bb8 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <UART_SetConfig+0x38c>)
 8003fda:	fba3 1302 	umull	r1, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2164      	movs	r1, #100	; 0x64
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <UART_SetConfig+0x38c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4432      	add	r2, r6
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	377c      	adds	r7, #124	; 0x7c
 8004004:	46bd      	mov	sp, r7
 8004006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400a:	bf00      	nop
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f002 fd0a 	bl	8006a50 <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08006eb4 	.word	0x08006eb4
 8004060:	08006eb4 	.word	0x08006eb4
 8004064:	08006eb4 	.word	0x08006eb4
 8004068:	08006eb8 	.word	0x08006eb8

0800406c <memcpy>:
 800406c:	440a      	add	r2, r1
 800406e:	4291      	cmp	r1, r2
 8004070:	f100 33ff 	add.w	r3, r0, #4294967295
 8004074:	d100      	bne.n	8004078 <memcpy+0xc>
 8004076:	4770      	bx	lr
 8004078:	b510      	push	{r4, lr}
 800407a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800407e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004082:	4291      	cmp	r1, r2
 8004084:	d1f9      	bne.n	800407a <memcpy+0xe>
 8004086:	bd10      	pop	{r4, pc}

08004088 <memset>:
 8004088:	4402      	add	r2, r0
 800408a:	4603      	mov	r3, r0
 800408c:	4293      	cmp	r3, r2
 800408e:	d100      	bne.n	8004092 <memset+0xa>
 8004090:	4770      	bx	lr
 8004092:	f803 1b01 	strb.w	r1, [r3], #1
 8004096:	e7f9      	b.n	800408c <memset+0x4>

08004098 <__cvt>:
 8004098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	ec55 4b10 	vmov	r4, r5, d0
 80040a0:	2d00      	cmp	r5, #0
 80040a2:	460e      	mov	r6, r1
 80040a4:	4619      	mov	r1, r3
 80040a6:	462b      	mov	r3, r5
 80040a8:	bfbb      	ittet	lt
 80040aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040ae:	461d      	movlt	r5, r3
 80040b0:	2300      	movge	r3, #0
 80040b2:	232d      	movlt	r3, #45	; 0x2d
 80040b4:	700b      	strb	r3, [r1, #0]
 80040b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040bc:	4691      	mov	r9, r2
 80040be:	f023 0820 	bic.w	r8, r3, #32
 80040c2:	bfbc      	itt	lt
 80040c4:	4622      	movlt	r2, r4
 80040c6:	4614      	movlt	r4, r2
 80040c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040cc:	d005      	beq.n	80040da <__cvt+0x42>
 80040ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040d2:	d100      	bne.n	80040d6 <__cvt+0x3e>
 80040d4:	3601      	adds	r6, #1
 80040d6:	2102      	movs	r1, #2
 80040d8:	e000      	b.n	80040dc <__cvt+0x44>
 80040da:	2103      	movs	r1, #3
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	ab02      	add	r3, sp, #8
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	ec45 4b10 	vmov	d0, r4, r5
 80040e8:	4653      	mov	r3, sl
 80040ea:	4632      	mov	r2, r6
 80040ec:	f000 fce4 	bl	8004ab8 <_dtoa_r>
 80040f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040f4:	4607      	mov	r7, r0
 80040f6:	d102      	bne.n	80040fe <__cvt+0x66>
 80040f8:	f019 0f01 	tst.w	r9, #1
 80040fc:	d022      	beq.n	8004144 <__cvt+0xac>
 80040fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004102:	eb07 0906 	add.w	r9, r7, r6
 8004106:	d110      	bne.n	800412a <__cvt+0x92>
 8004108:	783b      	ldrb	r3, [r7, #0]
 800410a:	2b30      	cmp	r3, #48	; 0x30
 800410c:	d10a      	bne.n	8004124 <__cvt+0x8c>
 800410e:	2200      	movs	r2, #0
 8004110:	2300      	movs	r3, #0
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800411a:	b918      	cbnz	r0, 8004124 <__cvt+0x8c>
 800411c:	f1c6 0601 	rsb	r6, r6, #1
 8004120:	f8ca 6000 	str.w	r6, [sl]
 8004124:	f8da 3000 	ldr.w	r3, [sl]
 8004128:	4499      	add	r9, r3
 800412a:	2200      	movs	r2, #0
 800412c:	2300      	movs	r3, #0
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004136:	b108      	cbz	r0, 800413c <__cvt+0xa4>
 8004138:	f8cd 900c 	str.w	r9, [sp, #12]
 800413c:	2230      	movs	r2, #48	; 0x30
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	454b      	cmp	r3, r9
 8004142:	d307      	bcc.n	8004154 <__cvt+0xbc>
 8004144:	9b03      	ldr	r3, [sp, #12]
 8004146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004148:	1bdb      	subs	r3, r3, r7
 800414a:	4638      	mov	r0, r7
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	b004      	add	sp, #16
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	9103      	str	r1, [sp, #12]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e7f0      	b.n	800413e <__cvt+0xa6>

0800415c <__exponent>:
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	4603      	mov	r3, r0
 8004160:	2900      	cmp	r1, #0
 8004162:	bfb8      	it	lt
 8004164:	4249      	neglt	r1, r1
 8004166:	f803 2b02 	strb.w	r2, [r3], #2
 800416a:	bfb4      	ite	lt
 800416c:	222d      	movlt	r2, #45	; 0x2d
 800416e:	222b      	movge	r2, #43	; 0x2b
 8004170:	2909      	cmp	r1, #9
 8004172:	7042      	strb	r2, [r0, #1]
 8004174:	dd2a      	ble.n	80041cc <__exponent+0x70>
 8004176:	f10d 0407 	add.w	r4, sp, #7
 800417a:	46a4      	mov	ip, r4
 800417c:	270a      	movs	r7, #10
 800417e:	46a6      	mov	lr, r4
 8004180:	460a      	mov	r2, r1
 8004182:	fb91 f6f7 	sdiv	r6, r1, r7
 8004186:	fb07 1516 	mls	r5, r7, r6, r1
 800418a:	3530      	adds	r5, #48	; 0x30
 800418c:	2a63      	cmp	r2, #99	; 0x63
 800418e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004196:	4631      	mov	r1, r6
 8004198:	dcf1      	bgt.n	800417e <__exponent+0x22>
 800419a:	3130      	adds	r1, #48	; 0x30
 800419c:	f1ae 0502 	sub.w	r5, lr, #2
 80041a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041a4:	1c44      	adds	r4, r0, #1
 80041a6:	4629      	mov	r1, r5
 80041a8:	4561      	cmp	r1, ip
 80041aa:	d30a      	bcc.n	80041c2 <__exponent+0x66>
 80041ac:	f10d 0209 	add.w	r2, sp, #9
 80041b0:	eba2 020e 	sub.w	r2, r2, lr
 80041b4:	4565      	cmp	r5, ip
 80041b6:	bf88      	it	hi
 80041b8:	2200      	movhi	r2, #0
 80041ba:	4413      	add	r3, r2
 80041bc:	1a18      	subs	r0, r3, r0
 80041be:	b003      	add	sp, #12
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041ca:	e7ed      	b.n	80041a8 <__exponent+0x4c>
 80041cc:	2330      	movs	r3, #48	; 0x30
 80041ce:	3130      	adds	r1, #48	; 0x30
 80041d0:	7083      	strb	r3, [r0, #2]
 80041d2:	70c1      	strb	r1, [r0, #3]
 80041d4:	1d03      	adds	r3, r0, #4
 80041d6:	e7f1      	b.n	80041bc <__exponent+0x60>

080041d8 <_printf_float>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	ed2d 8b02 	vpush	{d8}
 80041e0:	b08d      	sub	sp, #52	; 0x34
 80041e2:	460c      	mov	r4, r1
 80041e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041e8:	4616      	mov	r6, r2
 80041ea:	461f      	mov	r7, r3
 80041ec:	4605      	mov	r5, r0
 80041ee:	f001 fb45 	bl	800587c <_localeconv_r>
 80041f2:	f8d0 a000 	ldr.w	sl, [r0]
 80041f6:	4650      	mov	r0, sl
 80041f8:	f7fb fff2 	bl	80001e0 <strlen>
 80041fc:	2300      	movs	r3, #0
 80041fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f8d8 3000 	ldr.w	r3, [r8]
 8004208:	f894 b018 	ldrb.w	fp, [r4, #24]
 800420c:	3307      	adds	r3, #7
 800420e:	f023 0307 	bic.w	r3, r3, #7
 8004212:	f103 0208 	add.w	r2, r3, #8
 8004216:	f8c8 2000 	str.w	r2, [r8]
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004222:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800422a:	9307      	str	r3, [sp, #28]
 800422c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004230:	ee08 0a10 	vmov	s16, r0
 8004234:	4b9f      	ldr	r3, [pc, #636]	; (80044b4 <_printf_float+0x2dc>)
 8004236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	f7fc fc7d 	bl	8000b3c <__aeabi_dcmpun>
 8004242:	bb88      	cbnz	r0, 80042a8 <_printf_float+0xd0>
 8004244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004248:	4b9a      	ldr	r3, [pc, #616]	; (80044b4 <_printf_float+0x2dc>)
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	f7fc fc57 	bl	8000b00 <__aeabi_dcmple>
 8004252:	bb48      	cbnz	r0, 80042a8 <_printf_float+0xd0>
 8004254:	2200      	movs	r2, #0
 8004256:	2300      	movs	r3, #0
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	f7fc fc46 	bl	8000aec <__aeabi_dcmplt>
 8004260:	b110      	cbz	r0, 8004268 <_printf_float+0x90>
 8004262:	232d      	movs	r3, #45	; 0x2d
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004268:	4b93      	ldr	r3, [pc, #588]	; (80044b8 <_printf_float+0x2e0>)
 800426a:	4894      	ldr	r0, [pc, #592]	; (80044bc <_printf_float+0x2e4>)
 800426c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004270:	bf94      	ite	ls
 8004272:	4698      	movls	r8, r3
 8004274:	4680      	movhi	r8, r0
 8004276:	2303      	movs	r3, #3
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	9b05      	ldr	r3, [sp, #20]
 800427c:	f023 0204 	bic.w	r2, r3, #4
 8004280:	6022      	str	r2, [r4, #0]
 8004282:	f04f 0900 	mov.w	r9, #0
 8004286:	9700      	str	r7, [sp, #0]
 8004288:	4633      	mov	r3, r6
 800428a:	aa0b      	add	r2, sp, #44	; 0x2c
 800428c:	4621      	mov	r1, r4
 800428e:	4628      	mov	r0, r5
 8004290:	f000 f9d8 	bl	8004644 <_printf_common>
 8004294:	3001      	adds	r0, #1
 8004296:	f040 8090 	bne.w	80043ba <_printf_float+0x1e2>
 800429a:	f04f 30ff 	mov.w	r0, #4294967295
 800429e:	b00d      	add	sp, #52	; 0x34
 80042a0:	ecbd 8b02 	vpop	{d8}
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	4640      	mov	r0, r8
 80042ae:	4649      	mov	r1, r9
 80042b0:	f7fc fc44 	bl	8000b3c <__aeabi_dcmpun>
 80042b4:	b140      	cbz	r0, 80042c8 <_printf_float+0xf0>
 80042b6:	464b      	mov	r3, r9
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bfbc      	itt	lt
 80042bc:	232d      	movlt	r3, #45	; 0x2d
 80042be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042c2:	487f      	ldr	r0, [pc, #508]	; (80044c0 <_printf_float+0x2e8>)
 80042c4:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <_printf_float+0x2ec>)
 80042c6:	e7d1      	b.n	800426c <_printf_float+0x94>
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042ce:	9206      	str	r2, [sp, #24]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	d13f      	bne.n	8004354 <_printf_float+0x17c>
 80042d4:	2306      	movs	r3, #6
 80042d6:	6063      	str	r3, [r4, #4]
 80042d8:	9b05      	ldr	r3, [sp, #20]
 80042da:	6861      	ldr	r1, [r4, #4]
 80042dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042e0:	2300      	movs	r3, #0
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	ab0a      	add	r3, sp, #40	; 0x28
 80042e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042ea:	ab09      	add	r3, sp, #36	; 0x24
 80042ec:	ec49 8b10 	vmov	d0, r8, r9
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042f8:	4628      	mov	r0, r5
 80042fa:	f7ff fecd 	bl	8004098 <__cvt>
 80042fe:	9b06      	ldr	r3, [sp, #24]
 8004300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004302:	2b47      	cmp	r3, #71	; 0x47
 8004304:	4680      	mov	r8, r0
 8004306:	d108      	bne.n	800431a <_printf_float+0x142>
 8004308:	1cc8      	adds	r0, r1, #3
 800430a:	db02      	blt.n	8004312 <_printf_float+0x13a>
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	4299      	cmp	r1, r3
 8004310:	dd41      	ble.n	8004396 <_printf_float+0x1be>
 8004312:	f1ab 0b02 	sub.w	fp, fp, #2
 8004316:	fa5f fb8b 	uxtb.w	fp, fp
 800431a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800431e:	d820      	bhi.n	8004362 <_printf_float+0x18a>
 8004320:	3901      	subs	r1, #1
 8004322:	465a      	mov	r2, fp
 8004324:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004328:	9109      	str	r1, [sp, #36]	; 0x24
 800432a:	f7ff ff17 	bl	800415c <__exponent>
 800432e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004330:	1813      	adds	r3, r2, r0
 8004332:	2a01      	cmp	r2, #1
 8004334:	4681      	mov	r9, r0
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	dc02      	bgt.n	8004340 <_printf_float+0x168>
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	07d2      	lsls	r2, r2, #31
 800433e:	d501      	bpl.n	8004344 <_printf_float+0x16c>
 8004340:	3301      	adds	r3, #1
 8004342:	6123      	str	r3, [r4, #16]
 8004344:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004348:	2b00      	cmp	r3, #0
 800434a:	d09c      	beq.n	8004286 <_printf_float+0xae>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004352:	e798      	b.n	8004286 <_printf_float+0xae>
 8004354:	9a06      	ldr	r2, [sp, #24]
 8004356:	2a47      	cmp	r2, #71	; 0x47
 8004358:	d1be      	bne.n	80042d8 <_printf_float+0x100>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1bc      	bne.n	80042d8 <_printf_float+0x100>
 800435e:	2301      	movs	r3, #1
 8004360:	e7b9      	b.n	80042d6 <_printf_float+0xfe>
 8004362:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004366:	d118      	bne.n	800439a <_printf_float+0x1c2>
 8004368:	2900      	cmp	r1, #0
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	dd0b      	ble.n	8004386 <_printf_float+0x1ae>
 800436e:	6121      	str	r1, [r4, #16]
 8004370:	b913      	cbnz	r3, 8004378 <_printf_float+0x1a0>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	07d0      	lsls	r0, r2, #31
 8004376:	d502      	bpl.n	800437e <_printf_float+0x1a6>
 8004378:	3301      	adds	r3, #1
 800437a:	440b      	add	r3, r1
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004380:	f04f 0900 	mov.w	r9, #0
 8004384:	e7de      	b.n	8004344 <_printf_float+0x16c>
 8004386:	b913      	cbnz	r3, 800438e <_printf_float+0x1b6>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	07d2      	lsls	r2, r2, #31
 800438c:	d501      	bpl.n	8004392 <_printf_float+0x1ba>
 800438e:	3302      	adds	r3, #2
 8004390:	e7f4      	b.n	800437c <_printf_float+0x1a4>
 8004392:	2301      	movs	r3, #1
 8004394:	e7f2      	b.n	800437c <_printf_float+0x1a4>
 8004396:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800439a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800439c:	4299      	cmp	r1, r3
 800439e:	db05      	blt.n	80043ac <_printf_float+0x1d4>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	6121      	str	r1, [r4, #16]
 80043a4:	07d8      	lsls	r0, r3, #31
 80043a6:	d5ea      	bpl.n	800437e <_printf_float+0x1a6>
 80043a8:	1c4b      	adds	r3, r1, #1
 80043aa:	e7e7      	b.n	800437c <_printf_float+0x1a4>
 80043ac:	2900      	cmp	r1, #0
 80043ae:	bfd4      	ite	le
 80043b0:	f1c1 0202 	rsble	r2, r1, #2
 80043b4:	2201      	movgt	r2, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	e7e0      	b.n	800437c <_printf_float+0x1a4>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	055a      	lsls	r2, r3, #21
 80043be:	d407      	bmi.n	80043d0 <_printf_float+0x1f8>
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	4642      	mov	r2, r8
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	d12c      	bne.n	8004428 <_printf_float+0x250>
 80043ce:	e764      	b.n	800429a <_printf_float+0xc2>
 80043d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043d4:	f240 80e0 	bls.w	8004598 <_printf_float+0x3c0>
 80043d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	f7fc fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d034      	beq.n	8004452 <_printf_float+0x27a>
 80043e8:	4a37      	ldr	r2, [pc, #220]	; (80044c8 <_printf_float+0x2f0>)
 80043ea:	2301      	movs	r3, #1
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	f43f af51 	beq.w	800429a <_printf_float+0xc2>
 80043f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043fc:	429a      	cmp	r2, r3
 80043fe:	db02      	blt.n	8004406 <_printf_float+0x22e>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07d8      	lsls	r0, r3, #31
 8004404:	d510      	bpl.n	8004428 <_printf_float+0x250>
 8004406:	ee18 3a10 	vmov	r3, s16
 800440a:	4652      	mov	r2, sl
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f af41 	beq.w	800429a <_printf_float+0xc2>
 8004418:	f04f 0800 	mov.w	r8, #0
 800441c:	f104 091a 	add.w	r9, r4, #26
 8004420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	4543      	cmp	r3, r8
 8004426:	dc09      	bgt.n	800443c <_printf_float+0x264>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	079b      	lsls	r3, r3, #30
 800442c:	f100 8105 	bmi.w	800463a <_printf_float+0x462>
 8004430:	68e0      	ldr	r0, [r4, #12]
 8004432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004434:	4298      	cmp	r0, r3
 8004436:	bfb8      	it	lt
 8004438:	4618      	movlt	r0, r3
 800443a:	e730      	b.n	800429e <_printf_float+0xc6>
 800443c:	2301      	movs	r3, #1
 800443e:	464a      	mov	r2, r9
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	47b8      	blx	r7
 8004446:	3001      	adds	r0, #1
 8004448:	f43f af27 	beq.w	800429a <_printf_float+0xc2>
 800444c:	f108 0801 	add.w	r8, r8, #1
 8004450:	e7e6      	b.n	8004420 <_printf_float+0x248>
 8004452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	dc39      	bgt.n	80044cc <_printf_float+0x2f4>
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <_printf_float+0x2f0>)
 800445a:	2301      	movs	r3, #1
 800445c:	4631      	mov	r1, r6
 800445e:	4628      	mov	r0, r5
 8004460:	47b8      	blx	r7
 8004462:	3001      	adds	r0, #1
 8004464:	f43f af19 	beq.w	800429a <_printf_float+0xc2>
 8004468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800446c:	4313      	orrs	r3, r2
 800446e:	d102      	bne.n	8004476 <_printf_float+0x29e>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	07d9      	lsls	r1, r3, #31
 8004474:	d5d8      	bpl.n	8004428 <_printf_float+0x250>
 8004476:	ee18 3a10 	vmov	r3, s16
 800447a:	4652      	mov	r2, sl
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	f43f af09 	beq.w	800429a <_printf_float+0xc2>
 8004488:	f04f 0900 	mov.w	r9, #0
 800448c:	f104 0a1a 	add.w	sl, r4, #26
 8004490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004492:	425b      	negs	r3, r3
 8004494:	454b      	cmp	r3, r9
 8004496:	dc01      	bgt.n	800449c <_printf_float+0x2c4>
 8004498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800449a:	e792      	b.n	80043c2 <_printf_float+0x1ea>
 800449c:	2301      	movs	r3, #1
 800449e:	4652      	mov	r2, sl
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f aef7 	beq.w	800429a <_printf_float+0xc2>
 80044ac:	f109 0901 	add.w	r9, r9, #1
 80044b0:	e7ee      	b.n	8004490 <_printf_float+0x2b8>
 80044b2:	bf00      	nop
 80044b4:	7fefffff 	.word	0x7fefffff
 80044b8:	08006ad0 	.word	0x08006ad0
 80044bc:	08006ad4 	.word	0x08006ad4
 80044c0:	08006adc 	.word	0x08006adc
 80044c4:	08006ad8 	.word	0x08006ad8
 80044c8:	08006ae0 	.word	0x08006ae0
 80044cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bfa8      	it	ge
 80044d4:	461a      	movge	r2, r3
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	4691      	mov	r9, r2
 80044da:	dc37      	bgt.n	800454c <_printf_float+0x374>
 80044dc:	f04f 0b00 	mov.w	fp, #0
 80044e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044e4:	f104 021a 	add.w	r2, r4, #26
 80044e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ea:	9305      	str	r3, [sp, #20]
 80044ec:	eba3 0309 	sub.w	r3, r3, r9
 80044f0:	455b      	cmp	r3, fp
 80044f2:	dc33      	bgt.n	800455c <_printf_float+0x384>
 80044f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f8:	429a      	cmp	r2, r3
 80044fa:	db3b      	blt.n	8004574 <_printf_float+0x39c>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	07da      	lsls	r2, r3, #31
 8004500:	d438      	bmi.n	8004574 <_printf_float+0x39c>
 8004502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004504:	9b05      	ldr	r3, [sp, #20]
 8004506:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	eba2 0901 	sub.w	r9, r2, r1
 800450e:	4599      	cmp	r9, r3
 8004510:	bfa8      	it	ge
 8004512:	4699      	movge	r9, r3
 8004514:	f1b9 0f00 	cmp.w	r9, #0
 8004518:	dc35      	bgt.n	8004586 <_printf_float+0x3ae>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004522:	f104 0a1a 	add.w	sl, r4, #26
 8004526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	eba3 0309 	sub.w	r3, r3, r9
 8004530:	4543      	cmp	r3, r8
 8004532:	f77f af79 	ble.w	8004428 <_printf_float+0x250>
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f aeaa 	beq.w	800429a <_printf_float+0xc2>
 8004546:	f108 0801 	add.w	r8, r8, #1
 800454a:	e7ec      	b.n	8004526 <_printf_float+0x34e>
 800454c:	4613      	mov	r3, r2
 800454e:	4631      	mov	r1, r6
 8004550:	4642      	mov	r2, r8
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	d1c0      	bne.n	80044dc <_printf_float+0x304>
 800455a:	e69e      	b.n	800429a <_printf_float+0xc2>
 800455c:	2301      	movs	r3, #1
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	9205      	str	r2, [sp, #20]
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	f43f ae97 	beq.w	800429a <_printf_float+0xc2>
 800456c:	9a05      	ldr	r2, [sp, #20]
 800456e:	f10b 0b01 	add.w	fp, fp, #1
 8004572:	e7b9      	b.n	80044e8 <_printf_float+0x310>
 8004574:	ee18 3a10 	vmov	r3, s16
 8004578:	4652      	mov	r2, sl
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	47b8      	blx	r7
 8004580:	3001      	adds	r0, #1
 8004582:	d1be      	bne.n	8004502 <_printf_float+0x32a>
 8004584:	e689      	b.n	800429a <_printf_float+0xc2>
 8004586:	9a05      	ldr	r2, [sp, #20]
 8004588:	464b      	mov	r3, r9
 800458a:	4442      	add	r2, r8
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	d1c1      	bne.n	800451a <_printf_float+0x342>
 8004596:	e680      	b.n	800429a <_printf_float+0xc2>
 8004598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800459a:	2a01      	cmp	r2, #1
 800459c:	dc01      	bgt.n	80045a2 <_printf_float+0x3ca>
 800459e:	07db      	lsls	r3, r3, #31
 80045a0:	d538      	bpl.n	8004614 <_printf_float+0x43c>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4642      	mov	r2, r8
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f ae74 	beq.w	800429a <_printf_float+0xc2>
 80045b2:	ee18 3a10 	vmov	r3, s16
 80045b6:	4652      	mov	r2, sl
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f ae6b 	beq.w	800429a <_printf_float+0xc2>
 80045c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045c8:	2200      	movs	r2, #0
 80045ca:	2300      	movs	r3, #0
 80045cc:	f7fc fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80045d0:	b9d8      	cbnz	r0, 800460a <_printf_float+0x432>
 80045d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d4:	f108 0201 	add.w	r2, r8, #1
 80045d8:	3b01      	subs	r3, #1
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	d10e      	bne.n	8004602 <_printf_float+0x42a>
 80045e4:	e659      	b.n	800429a <_printf_float+0xc2>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	f43f ae52 	beq.w	800429a <_printf_float+0xc2>
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	4543      	cmp	r3, r8
 8004600:	dcf1      	bgt.n	80045e6 <_printf_float+0x40e>
 8004602:	464b      	mov	r3, r9
 8004604:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004608:	e6dc      	b.n	80043c4 <_printf_float+0x1ec>
 800460a:	f04f 0800 	mov.w	r8, #0
 800460e:	f104 0a1a 	add.w	sl, r4, #26
 8004612:	e7f2      	b.n	80045fa <_printf_float+0x422>
 8004614:	2301      	movs	r3, #1
 8004616:	4642      	mov	r2, r8
 8004618:	e7df      	b.n	80045da <_printf_float+0x402>
 800461a:	2301      	movs	r3, #1
 800461c:	464a      	mov	r2, r9
 800461e:	4631      	mov	r1, r6
 8004620:	4628      	mov	r0, r5
 8004622:	47b8      	blx	r7
 8004624:	3001      	adds	r0, #1
 8004626:	f43f ae38 	beq.w	800429a <_printf_float+0xc2>
 800462a:	f108 0801 	add.w	r8, r8, #1
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004632:	1a5b      	subs	r3, r3, r1
 8004634:	4543      	cmp	r3, r8
 8004636:	dcf0      	bgt.n	800461a <_printf_float+0x442>
 8004638:	e6fa      	b.n	8004430 <_printf_float+0x258>
 800463a:	f04f 0800 	mov.w	r8, #0
 800463e:	f104 0919 	add.w	r9, r4, #25
 8004642:	e7f4      	b.n	800462e <_printf_float+0x456>

08004644 <_printf_common>:
 8004644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	4616      	mov	r6, r2
 800464a:	4699      	mov	r9, r3
 800464c:	688a      	ldr	r2, [r1, #8]
 800464e:	690b      	ldr	r3, [r1, #16]
 8004650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004654:	4293      	cmp	r3, r2
 8004656:	bfb8      	it	lt
 8004658:	4613      	movlt	r3, r2
 800465a:	6033      	str	r3, [r6, #0]
 800465c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004660:	4607      	mov	r7, r0
 8004662:	460c      	mov	r4, r1
 8004664:	b10a      	cbz	r2, 800466a <_printf_common+0x26>
 8004666:	3301      	adds	r3, #1
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	0699      	lsls	r1, r3, #26
 800466e:	bf42      	ittt	mi
 8004670:	6833      	ldrmi	r3, [r6, #0]
 8004672:	3302      	addmi	r3, #2
 8004674:	6033      	strmi	r3, [r6, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	f015 0506 	ands.w	r5, r5, #6
 800467c:	d106      	bne.n	800468c <_printf_common+0x48>
 800467e:	f104 0a19 	add.w	sl, r4, #25
 8004682:	68e3      	ldr	r3, [r4, #12]
 8004684:	6832      	ldr	r2, [r6, #0]
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	42ab      	cmp	r3, r5
 800468a:	dc26      	bgt.n	80046da <_printf_common+0x96>
 800468c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004690:	1e13      	subs	r3, r2, #0
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	bf18      	it	ne
 8004696:	2301      	movne	r3, #1
 8004698:	0692      	lsls	r2, r2, #26
 800469a:	d42b      	bmi.n	80046f4 <_printf_common+0xb0>
 800469c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a0:	4649      	mov	r1, r9
 80046a2:	4638      	mov	r0, r7
 80046a4:	47c0      	blx	r8
 80046a6:	3001      	adds	r0, #1
 80046a8:	d01e      	beq.n	80046e8 <_printf_common+0xa4>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	68e5      	ldr	r5, [r4, #12]
 80046ae:	6832      	ldr	r2, [r6, #0]
 80046b0:	f003 0306 	and.w	r3, r3, #6
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	bf08      	it	eq
 80046b8:	1aad      	subeq	r5, r5, r2
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	bf0c      	ite	eq
 80046c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046c4:	2500      	movne	r5, #0
 80046c6:	4293      	cmp	r3, r2
 80046c8:	bfc4      	itt	gt
 80046ca:	1a9b      	subgt	r3, r3, r2
 80046cc:	18ed      	addgt	r5, r5, r3
 80046ce:	2600      	movs	r6, #0
 80046d0:	341a      	adds	r4, #26
 80046d2:	42b5      	cmp	r5, r6
 80046d4:	d11a      	bne.n	800470c <_printf_common+0xc8>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e008      	b.n	80046ec <_printf_common+0xa8>
 80046da:	2301      	movs	r3, #1
 80046dc:	4652      	mov	r2, sl
 80046de:	4649      	mov	r1, r9
 80046e0:	4638      	mov	r0, r7
 80046e2:	47c0      	blx	r8
 80046e4:	3001      	adds	r0, #1
 80046e6:	d103      	bne.n	80046f0 <_printf_common+0xac>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f0:	3501      	adds	r5, #1
 80046f2:	e7c6      	b.n	8004682 <_printf_common+0x3e>
 80046f4:	18e1      	adds	r1, r4, r3
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	2030      	movs	r0, #48	; 0x30
 80046fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046fe:	4422      	add	r2, r4
 8004700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004708:	3302      	adds	r3, #2
 800470a:	e7c7      	b.n	800469c <_printf_common+0x58>
 800470c:	2301      	movs	r3, #1
 800470e:	4622      	mov	r2, r4
 8004710:	4649      	mov	r1, r9
 8004712:	4638      	mov	r0, r7
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d0e6      	beq.n	80046e8 <_printf_common+0xa4>
 800471a:	3601      	adds	r6, #1
 800471c:	e7d9      	b.n	80046d2 <_printf_common+0x8e>
	...

08004720 <_printf_i>:
 8004720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	460c      	mov	r4, r1
 8004726:	4691      	mov	r9, r2
 8004728:	7e27      	ldrb	r7, [r4, #24]
 800472a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800472c:	2f78      	cmp	r7, #120	; 0x78
 800472e:	4680      	mov	r8, r0
 8004730:	469a      	mov	sl, r3
 8004732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004736:	d807      	bhi.n	8004748 <_printf_i+0x28>
 8004738:	2f62      	cmp	r7, #98	; 0x62
 800473a:	d80a      	bhi.n	8004752 <_printf_i+0x32>
 800473c:	2f00      	cmp	r7, #0
 800473e:	f000 80d8 	beq.w	80048f2 <_printf_i+0x1d2>
 8004742:	2f58      	cmp	r7, #88	; 0x58
 8004744:	f000 80a3 	beq.w	800488e <_printf_i+0x16e>
 8004748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800474c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004750:	e03a      	b.n	80047c8 <_printf_i+0xa8>
 8004752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004756:	2b15      	cmp	r3, #21
 8004758:	d8f6      	bhi.n	8004748 <_printf_i+0x28>
 800475a:	a001      	add	r0, pc, #4	; (adr r0, 8004760 <_printf_i+0x40>)
 800475c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047cd 	.word	0x080047cd
 8004768:	08004749 	.word	0x08004749
 800476c:	08004749 	.word	0x08004749
 8004770:	08004749 	.word	0x08004749
 8004774:	08004749 	.word	0x08004749
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004749 	.word	0x08004749
 8004780:	08004749 	.word	0x08004749
 8004784:	08004749 	.word	0x08004749
 8004788:	08004749 	.word	0x08004749
 800478c:	080048d9 	.word	0x080048d9
 8004790:	080047fd 	.word	0x080047fd
 8004794:	080048bb 	.word	0x080048bb
 8004798:	08004749 	.word	0x08004749
 800479c:	08004749 	.word	0x08004749
 80047a0:	080048fb 	.word	0x080048fb
 80047a4:	08004749 	.word	0x08004749
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004749 	.word	0x08004749
 80047b0:	08004749 	.word	0x08004749
 80047b4:	080048c3 	.word	0x080048c3
 80047b8:	680b      	ldr	r3, [r1, #0]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	600a      	str	r2, [r1, #0]
 80047c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0a3      	b.n	8004914 <_printf_i+0x1f4>
 80047cc:	6825      	ldr	r5, [r4, #0]
 80047ce:	6808      	ldr	r0, [r1, #0]
 80047d0:	062e      	lsls	r6, r5, #24
 80047d2:	f100 0304 	add.w	r3, r0, #4
 80047d6:	d50a      	bpl.n	80047ee <_printf_i+0xce>
 80047d8:	6805      	ldr	r5, [r0, #0]
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	2d00      	cmp	r5, #0
 80047de:	da03      	bge.n	80047e8 <_printf_i+0xc8>
 80047e0:	232d      	movs	r3, #45	; 0x2d
 80047e2:	426d      	negs	r5, r5
 80047e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e8:	485e      	ldr	r0, [pc, #376]	; (8004964 <_printf_i+0x244>)
 80047ea:	230a      	movs	r3, #10
 80047ec:	e019      	b.n	8004822 <_printf_i+0x102>
 80047ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047f2:	6805      	ldr	r5, [r0, #0]
 80047f4:	600b      	str	r3, [r1, #0]
 80047f6:	bf18      	it	ne
 80047f8:	b22d      	sxthne	r5, r5
 80047fa:	e7ef      	b.n	80047dc <_printf_i+0xbc>
 80047fc:	680b      	ldr	r3, [r1, #0]
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	1d18      	adds	r0, r3, #4
 8004802:	6008      	str	r0, [r1, #0]
 8004804:	0628      	lsls	r0, r5, #24
 8004806:	d501      	bpl.n	800480c <_printf_i+0xec>
 8004808:	681d      	ldr	r5, [r3, #0]
 800480a:	e002      	b.n	8004812 <_printf_i+0xf2>
 800480c:	0669      	lsls	r1, r5, #25
 800480e:	d5fb      	bpl.n	8004808 <_printf_i+0xe8>
 8004810:	881d      	ldrh	r5, [r3, #0]
 8004812:	4854      	ldr	r0, [pc, #336]	; (8004964 <_printf_i+0x244>)
 8004814:	2f6f      	cmp	r7, #111	; 0x6f
 8004816:	bf0c      	ite	eq
 8004818:	2308      	moveq	r3, #8
 800481a:	230a      	movne	r3, #10
 800481c:	2100      	movs	r1, #0
 800481e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004822:	6866      	ldr	r6, [r4, #4]
 8004824:	60a6      	str	r6, [r4, #8]
 8004826:	2e00      	cmp	r6, #0
 8004828:	bfa2      	ittt	ge
 800482a:	6821      	ldrge	r1, [r4, #0]
 800482c:	f021 0104 	bicge.w	r1, r1, #4
 8004830:	6021      	strge	r1, [r4, #0]
 8004832:	b90d      	cbnz	r5, 8004838 <_printf_i+0x118>
 8004834:	2e00      	cmp	r6, #0
 8004836:	d04d      	beq.n	80048d4 <_printf_i+0x1b4>
 8004838:	4616      	mov	r6, r2
 800483a:	fbb5 f1f3 	udiv	r1, r5, r3
 800483e:	fb03 5711 	mls	r7, r3, r1, r5
 8004842:	5dc7      	ldrb	r7, [r0, r7]
 8004844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004848:	462f      	mov	r7, r5
 800484a:	42bb      	cmp	r3, r7
 800484c:	460d      	mov	r5, r1
 800484e:	d9f4      	bls.n	800483a <_printf_i+0x11a>
 8004850:	2b08      	cmp	r3, #8
 8004852:	d10b      	bne.n	800486c <_printf_i+0x14c>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	07df      	lsls	r7, r3, #31
 8004858:	d508      	bpl.n	800486c <_printf_i+0x14c>
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	6861      	ldr	r1, [r4, #4]
 800485e:	4299      	cmp	r1, r3
 8004860:	bfde      	ittt	le
 8004862:	2330      	movle	r3, #48	; 0x30
 8004864:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800486c:	1b92      	subs	r2, r2, r6
 800486e:	6122      	str	r2, [r4, #16]
 8004870:	f8cd a000 	str.w	sl, [sp]
 8004874:	464b      	mov	r3, r9
 8004876:	aa03      	add	r2, sp, #12
 8004878:	4621      	mov	r1, r4
 800487a:	4640      	mov	r0, r8
 800487c:	f7ff fee2 	bl	8004644 <_printf_common>
 8004880:	3001      	adds	r0, #1
 8004882:	d14c      	bne.n	800491e <_printf_i+0x1fe>
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	b004      	add	sp, #16
 800488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488e:	4835      	ldr	r0, [pc, #212]	; (8004964 <_printf_i+0x244>)
 8004890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	680e      	ldr	r6, [r1, #0]
 8004898:	061f      	lsls	r7, r3, #24
 800489a:	f856 5b04 	ldr.w	r5, [r6], #4
 800489e:	600e      	str	r6, [r1, #0]
 80048a0:	d514      	bpl.n	80048cc <_printf_i+0x1ac>
 80048a2:	07d9      	lsls	r1, r3, #31
 80048a4:	bf44      	itt	mi
 80048a6:	f043 0320 	orrmi.w	r3, r3, #32
 80048aa:	6023      	strmi	r3, [r4, #0]
 80048ac:	b91d      	cbnz	r5, 80048b6 <_printf_i+0x196>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f023 0320 	bic.w	r3, r3, #32
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	2310      	movs	r3, #16
 80048b8:	e7b0      	b.n	800481c <_printf_i+0xfc>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	2378      	movs	r3, #120	; 0x78
 80048c4:	4828      	ldr	r0, [pc, #160]	; (8004968 <_printf_i+0x248>)
 80048c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ca:	e7e3      	b.n	8004894 <_printf_i+0x174>
 80048cc:	065e      	lsls	r6, r3, #25
 80048ce:	bf48      	it	mi
 80048d0:	b2ad      	uxthmi	r5, r5
 80048d2:	e7e6      	b.n	80048a2 <_printf_i+0x182>
 80048d4:	4616      	mov	r6, r2
 80048d6:	e7bb      	b.n	8004850 <_printf_i+0x130>
 80048d8:	680b      	ldr	r3, [r1, #0]
 80048da:	6826      	ldr	r6, [r4, #0]
 80048dc:	6960      	ldr	r0, [r4, #20]
 80048de:	1d1d      	adds	r5, r3, #4
 80048e0:	600d      	str	r5, [r1, #0]
 80048e2:	0635      	lsls	r5, r6, #24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	d501      	bpl.n	80048ec <_printf_i+0x1cc>
 80048e8:	6018      	str	r0, [r3, #0]
 80048ea:	e002      	b.n	80048f2 <_printf_i+0x1d2>
 80048ec:	0671      	lsls	r1, r6, #25
 80048ee:	d5fb      	bpl.n	80048e8 <_printf_i+0x1c8>
 80048f0:	8018      	strh	r0, [r3, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	4616      	mov	r6, r2
 80048f8:	e7ba      	b.n	8004870 <_printf_i+0x150>
 80048fa:	680b      	ldr	r3, [r1, #0]
 80048fc:	1d1a      	adds	r2, r3, #4
 80048fe:	600a      	str	r2, [r1, #0]
 8004900:	681e      	ldr	r6, [r3, #0]
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	2100      	movs	r1, #0
 8004906:	4630      	mov	r0, r6
 8004908:	f7fb fc72 	bl	80001f0 <memchr>
 800490c:	b108      	cbz	r0, 8004912 <_printf_i+0x1f2>
 800490e:	1b80      	subs	r0, r0, r6
 8004910:	6060      	str	r0, [r4, #4]
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	2300      	movs	r3, #0
 8004918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491c:	e7a8      	b.n	8004870 <_printf_i+0x150>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	4632      	mov	r2, r6
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	47d0      	blx	sl
 8004928:	3001      	adds	r0, #1
 800492a:	d0ab      	beq.n	8004884 <_printf_i+0x164>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	079b      	lsls	r3, r3, #30
 8004930:	d413      	bmi.n	800495a <_printf_i+0x23a>
 8004932:	68e0      	ldr	r0, [r4, #12]
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	4298      	cmp	r0, r3
 8004938:	bfb8      	it	lt
 800493a:	4618      	movlt	r0, r3
 800493c:	e7a4      	b.n	8004888 <_printf_i+0x168>
 800493e:	2301      	movs	r3, #1
 8004940:	4632      	mov	r2, r6
 8004942:	4649      	mov	r1, r9
 8004944:	4640      	mov	r0, r8
 8004946:	47d0      	blx	sl
 8004948:	3001      	adds	r0, #1
 800494a:	d09b      	beq.n	8004884 <_printf_i+0x164>
 800494c:	3501      	adds	r5, #1
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	9903      	ldr	r1, [sp, #12]
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	42ab      	cmp	r3, r5
 8004956:	dcf2      	bgt.n	800493e <_printf_i+0x21e>
 8004958:	e7eb      	b.n	8004932 <_printf_i+0x212>
 800495a:	2500      	movs	r5, #0
 800495c:	f104 0619 	add.w	r6, r4, #25
 8004960:	e7f5      	b.n	800494e <_printf_i+0x22e>
 8004962:	bf00      	nop
 8004964:	08006ae2 	.word	0x08006ae2
 8004968:	08006af3 	.word	0x08006af3

0800496c <iprintf>:
 800496c:	b40f      	push	{r0, r1, r2, r3}
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <iprintf+0x2c>)
 8004970:	b513      	push	{r0, r1, r4, lr}
 8004972:	681c      	ldr	r4, [r3, #0]
 8004974:	b124      	cbz	r4, 8004980 <iprintf+0x14>
 8004976:	69a3      	ldr	r3, [r4, #24]
 8004978:	b913      	cbnz	r3, 8004980 <iprintf+0x14>
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fee0 	bl	8005740 <__sinit>
 8004980:	ab05      	add	r3, sp, #20
 8004982:	9a04      	ldr	r2, [sp, #16]
 8004984:	68a1      	ldr	r1, [r4, #8]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	4620      	mov	r0, r4
 800498a:	f001 fbe9 	bl	8006160 <_vfiprintf_r>
 800498e:	b002      	add	sp, #8
 8004990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004994:	b004      	add	sp, #16
 8004996:	4770      	bx	lr
 8004998:	2000000c 	.word	0x2000000c

0800499c <quorem>:
 800499c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a0:	6903      	ldr	r3, [r0, #16]
 80049a2:	690c      	ldr	r4, [r1, #16]
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	4607      	mov	r7, r0
 80049a8:	f2c0 8081 	blt.w	8004aae <quorem+0x112>
 80049ac:	3c01      	subs	r4, #1
 80049ae:	f101 0814 	add.w	r8, r1, #20
 80049b2:	f100 0514 	add.w	r5, r0, #20
 80049b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049c4:	3301      	adds	r3, #1
 80049c6:	429a      	cmp	r2, r3
 80049c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80049d4:	d331      	bcc.n	8004a3a <quorem+0x9e>
 80049d6:	f04f 0e00 	mov.w	lr, #0
 80049da:	4640      	mov	r0, r8
 80049dc:	46ac      	mov	ip, r5
 80049de:	46f2      	mov	sl, lr
 80049e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049e4:	b293      	uxth	r3, r2
 80049e6:	fb06 e303 	mla	r3, r6, r3, lr
 80049ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ebaa 0303 	sub.w	r3, sl, r3
 80049f4:	0c12      	lsrs	r2, r2, #16
 80049f6:	f8dc a000 	ldr.w	sl, [ip]
 80049fa:	fb06 e202 	mla	r2, r6, r2, lr
 80049fe:	fa13 f38a 	uxtah	r3, r3, sl
 8004a02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a06:	fa1f fa82 	uxth.w	sl, r2
 8004a0a:	f8dc 2000 	ldr.w	r2, [ip]
 8004a0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a1c:	4581      	cmp	r9, r0
 8004a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8004a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a26:	d2db      	bcs.n	80049e0 <quorem+0x44>
 8004a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a2c:	b92b      	cbnz	r3, 8004a3a <quorem+0x9e>
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	3b04      	subs	r3, #4
 8004a32:	429d      	cmp	r5, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	d32e      	bcc.n	8004a96 <quorem+0xfa>
 8004a38:	613c      	str	r4, [r7, #16]
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f001 f9ac 	bl	8005d98 <__mcmp>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	db24      	blt.n	8004a8e <quorem+0xf2>
 8004a44:	3601      	adds	r6, #1
 8004a46:	4628      	mov	r0, r5
 8004a48:	f04f 0c00 	mov.w	ip, #0
 8004a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a50:	f8d0 e000 	ldr.w	lr, [r0]
 8004a54:	b293      	uxth	r3, r2
 8004a56:	ebac 0303 	sub.w	r3, ip, r3
 8004a5a:	0c12      	lsrs	r2, r2, #16
 8004a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8004a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a6e:	45c1      	cmp	r9, r8
 8004a70:	f840 3b04 	str.w	r3, [r0], #4
 8004a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a78:	d2e8      	bcs.n	8004a4c <quorem+0xb0>
 8004a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a82:	b922      	cbnz	r2, 8004a8e <quorem+0xf2>
 8004a84:	3b04      	subs	r3, #4
 8004a86:	429d      	cmp	r5, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	d30a      	bcc.n	8004aa2 <quorem+0x106>
 8004a8c:	613c      	str	r4, [r7, #16]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	b003      	add	sp, #12
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d1cc      	bne.n	8004a38 <quorem+0x9c>
 8004a9e:	3c01      	subs	r4, #1
 8004aa0:	e7c7      	b.n	8004a32 <quorem+0x96>
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	3b04      	subs	r3, #4
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d1f0      	bne.n	8004a8c <quorem+0xf0>
 8004aaa:	3c01      	subs	r4, #1
 8004aac:	e7eb      	b.n	8004a86 <quorem+0xea>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e7ee      	b.n	8004a90 <quorem+0xf4>
 8004ab2:	0000      	movs	r0, r0
 8004ab4:	0000      	movs	r0, r0
	...

08004ab8 <_dtoa_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	ed2d 8b02 	vpush	{d8}
 8004ac0:	ec57 6b10 	vmov	r6, r7, d0
 8004ac4:	b095      	sub	sp, #84	; 0x54
 8004ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004acc:	9105      	str	r1, [sp, #20]
 8004ace:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ad8:	b975      	cbnz	r5, 8004af8 <_dtoa_r+0x40>
 8004ada:	2010      	movs	r0, #16
 8004adc:	f000 fed6 	bl	800588c <malloc>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8004ae4:	b920      	cbnz	r0, 8004af0 <_dtoa_r+0x38>
 8004ae6:	4bb2      	ldr	r3, [pc, #712]	; (8004db0 <_dtoa_r+0x2f8>)
 8004ae8:	21ea      	movs	r1, #234	; 0xea
 8004aea:	48b2      	ldr	r0, [pc, #712]	; (8004db4 <_dtoa_r+0x2fc>)
 8004aec:	f001 fd8e 	bl	800660c <__assert_func>
 8004af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004af4:	6005      	str	r5, [r0, #0]
 8004af6:	60c5      	str	r5, [r0, #12]
 8004af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	b151      	cbz	r1, 8004b14 <_dtoa_r+0x5c>
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	604a      	str	r2, [r1, #4]
 8004b02:	2301      	movs	r3, #1
 8004b04:	4093      	lsls	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 ff07 	bl	800591c <_Bfree>
 8004b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	1e3b      	subs	r3, r7, #0
 8004b16:	bfb9      	ittee	lt
 8004b18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b1c:	9303      	strlt	r3, [sp, #12]
 8004b1e:	2300      	movge	r3, #0
 8004b20:	f8c8 3000 	strge.w	r3, [r8]
 8004b24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004b28:	4ba3      	ldr	r3, [pc, #652]	; (8004db8 <_dtoa_r+0x300>)
 8004b2a:	bfbc      	itt	lt
 8004b2c:	2201      	movlt	r2, #1
 8004b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b32:	ea33 0309 	bics.w	r3, r3, r9
 8004b36:	d11b      	bne.n	8004b70 <_dtoa_r+0xb8>
 8004b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b44:	4333      	orrs	r3, r6
 8004b46:	f000 857a 	beq.w	800563e <_dtoa_r+0xb86>
 8004b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b4c:	b963      	cbnz	r3, 8004b68 <_dtoa_r+0xb0>
 8004b4e:	4b9b      	ldr	r3, [pc, #620]	; (8004dbc <_dtoa_r+0x304>)
 8004b50:	e024      	b.n	8004b9c <_dtoa_r+0xe4>
 8004b52:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <_dtoa_r+0x308>)
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	9800      	ldr	r0, [sp, #0]
 8004b5e:	b015      	add	sp, #84	; 0x54
 8004b60:	ecbd 8b02 	vpop	{d8}
 8004b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b68:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <_dtoa_r+0x304>)
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	3303      	adds	r3, #3
 8004b6e:	e7f3      	b.n	8004b58 <_dtoa_r+0xa0>
 8004b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	ec51 0b17 	vmov	r0, r1, d7
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b80:	f7fb ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b84:	4680      	mov	r8, r0
 8004b86:	b158      	cbz	r0, 8004ba0 <_dtoa_r+0xe8>
 8004b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8551 	beq.w	8005638 <_dtoa_r+0xb80>
 8004b96:	488b      	ldr	r0, [pc, #556]	; (8004dc4 <_dtoa_r+0x30c>)
 8004b98:	6018      	str	r0, [r3, #0]
 8004b9a:	1e43      	subs	r3, r0, #1
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	e7dd      	b.n	8004b5c <_dtoa_r+0xa4>
 8004ba0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004ba4:	aa12      	add	r2, sp, #72	; 0x48
 8004ba6:	a913      	add	r1, sp, #76	; 0x4c
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f001 f999 	bl	8005ee0 <__d2b>
 8004bae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004bb2:	4683      	mov	fp, r0
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	d07c      	beq.n	8004cb2 <_dtoa_r+0x1fa>
 8004bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004bc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004bca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	; (8004dc8 <_dtoa_r+0x310>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb fb5d 	bl	8000298 <__aeabi_dsub>
 8004bde:	a36e      	add	r3, pc, #440	; (adr r3, 8004d98 <_dtoa_r+0x2e0>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f7fb fd10 	bl	8000608 <__aeabi_dmul>
 8004be8:	a36d      	add	r3, pc, #436	; (adr r3, 8004da0 <_dtoa_r+0x2e8>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fb55 	bl	800029c <__adddf3>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	f7fb fc9c 	bl	8000534 <__aeabi_i2d>
 8004bfc:	a36a      	add	r3, pc, #424	; (adr r3, 8004da8 <_dtoa_r+0x2f0>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fd01 	bl	8000608 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb fb45 	bl	800029c <__adddf3>
 8004c12:	4606      	mov	r6, r0
 8004c14:	460f      	mov	r7, r1
 8004c16:	f7fb ffa7 	bl	8000b68 <__aeabi_d2iz>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4630      	mov	r0, r6
 8004c22:	4639      	mov	r1, r7
 8004c24:	f7fb ff62 	bl	8000aec <__aeabi_dcmplt>
 8004c28:	b148      	cbz	r0, 8004c3e <_dtoa_r+0x186>
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f7fb fc82 	bl	8000534 <__aeabi_i2d>
 8004c30:	4632      	mov	r2, r6
 8004c32:	463b      	mov	r3, r7
 8004c34:	f7fb ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c38:	b908      	cbnz	r0, 8004c3e <_dtoa_r+0x186>
 8004c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c3e:	f1ba 0f16 	cmp.w	sl, #22
 8004c42:	d854      	bhi.n	8004cee <_dtoa_r+0x236>
 8004c44:	4b61      	ldr	r3, [pc, #388]	; (8004dcc <_dtoa_r+0x314>)
 8004c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c52:	f7fb ff4b 	bl	8000aec <__aeabi_dcmplt>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d04b      	beq.n	8004cf2 <_dtoa_r+0x23a>
 8004c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c5e:	2300      	movs	r3, #0
 8004c60:	930e      	str	r3, [sp, #56]	; 0x38
 8004c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c64:	1b5d      	subs	r5, r3, r5
 8004c66:	1e6b      	subs	r3, r5, #1
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	bf43      	ittte	mi
 8004c6c:	2300      	movmi	r3, #0
 8004c6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c72:	9304      	strmi	r3, [sp, #16]
 8004c74:	f04f 0800 	movpl.w	r8, #0
 8004c78:	f1ba 0f00 	cmp.w	sl, #0
 8004c7c:	db3b      	blt.n	8004cf6 <_dtoa_r+0x23e>
 8004c7e:	9b04      	ldr	r3, [sp, #16]
 8004c80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c84:	4453      	add	r3, sl
 8004c86:	9304      	str	r3, [sp, #16]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9306      	str	r3, [sp, #24]
 8004c8c:	9b05      	ldr	r3, [sp, #20]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d869      	bhi.n	8004d66 <_dtoa_r+0x2ae>
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	bfc4      	itt	gt
 8004c96:	3b04      	subgt	r3, #4
 8004c98:	9305      	strgt	r3, [sp, #20]
 8004c9a:	9b05      	ldr	r3, [sp, #20]
 8004c9c:	f1a3 0302 	sub.w	r3, r3, #2
 8004ca0:	bfcc      	ite	gt
 8004ca2:	2500      	movgt	r5, #0
 8004ca4:	2501      	movle	r5, #1
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d869      	bhi.n	8004d7e <_dtoa_r+0x2c6>
 8004caa:	e8df f003 	tbb	[pc, r3]
 8004cae:	4e2c      	.short	0x4e2c
 8004cb0:	5a4c      	.short	0x5a4c
 8004cb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004cb6:	441d      	add	r5, r3
 8004cb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	bfc1      	itttt	gt
 8004cc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004cc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ccc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cd0:	bfda      	itte	le
 8004cd2:	f1c3 0320 	rsble	r3, r3, #32
 8004cd6:	fa06 f003 	lslle.w	r0, r6, r3
 8004cda:	4318      	orrgt	r0, r3
 8004cdc:	f7fb fc1a 	bl	8000514 <__aeabi_ui2d>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004ce8:	3d01      	subs	r5, #1
 8004cea:	9310      	str	r3, [sp, #64]	; 0x40
 8004cec:	e771      	b.n	8004bd2 <_dtoa_r+0x11a>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b6      	b.n	8004c60 <_dtoa_r+0x1a8>
 8004cf2:	900e      	str	r0, [sp, #56]	; 0x38
 8004cf4:	e7b5      	b.n	8004c62 <_dtoa_r+0x1aa>
 8004cf6:	f1ca 0300 	rsb	r3, sl, #0
 8004cfa:	9306      	str	r3, [sp, #24]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	eba8 080a 	sub.w	r8, r8, sl
 8004d02:	930d      	str	r3, [sp, #52]	; 0x34
 8004d04:	e7c2      	b.n	8004c8c <_dtoa_r+0x1d4>
 8004d06:	2300      	movs	r3, #0
 8004d08:	9308      	str	r3, [sp, #32]
 8004d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dc39      	bgt.n	8004d84 <_dtoa_r+0x2cc>
 8004d10:	f04f 0901 	mov.w	r9, #1
 8004d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d20:	2200      	movs	r2, #0
 8004d22:	6042      	str	r2, [r0, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	f102 0614 	add.w	r6, r2, #20
 8004d2a:	429e      	cmp	r6, r3
 8004d2c:	6841      	ldr	r1, [r0, #4]
 8004d2e:	d92f      	bls.n	8004d90 <_dtoa_r+0x2d8>
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 fdb3 	bl	800589c <_Balloc>
 8004d36:	9000      	str	r0, [sp, #0]
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d14b      	bne.n	8004dd4 <_dtoa_r+0x31c>
 8004d3c:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <_dtoa_r+0x318>)
 8004d3e:	4602      	mov	r2, r0
 8004d40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d44:	e6d1      	b.n	8004aea <_dtoa_r+0x32>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e7de      	b.n	8004d08 <_dtoa_r+0x250>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	9308      	str	r3, [sp, #32]
 8004d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d50:	eb0a 0903 	add.w	r9, sl, r3
 8004d54:	f109 0301 	add.w	r3, r9, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	bfb8      	it	lt
 8004d5e:	2301      	movlt	r3, #1
 8004d60:	e7dd      	b.n	8004d1e <_dtoa_r+0x266>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e7f2      	b.n	8004d4c <_dtoa_r+0x294>
 8004d66:	2501      	movs	r5, #1
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9305      	str	r3, [sp, #20]
 8004d6c:	9508      	str	r5, [sp, #32]
 8004d6e:	f04f 39ff 	mov.w	r9, #4294967295
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d78:	2312      	movs	r3, #18
 8004d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d7c:	e7cf      	b.n	8004d1e <_dtoa_r+0x266>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	9308      	str	r3, [sp, #32]
 8004d82:	e7f4      	b.n	8004d6e <_dtoa_r+0x2b6>
 8004d84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	e7c6      	b.n	8004d1e <_dtoa_r+0x266>
 8004d90:	3101      	adds	r1, #1
 8004d92:	6041      	str	r1, [r0, #4]
 8004d94:	0052      	lsls	r2, r2, #1
 8004d96:	e7c6      	b.n	8004d26 <_dtoa_r+0x26e>
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	08006b11 	.word	0x08006b11
 8004db4:	08006b28 	.word	0x08006b28
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	08006b0d 	.word	0x08006b0d
 8004dc0:	08006b04 	.word	0x08006b04
 8004dc4:	08006ae1 	.word	0x08006ae1
 8004dc8:	3ff80000 	.word	0x3ff80000
 8004dcc:	08006c80 	.word	0x08006c80
 8004dd0:	08006b87 	.word	0x08006b87
 8004dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd6:	9a00      	ldr	r2, [sp, #0]
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	9b01      	ldr	r3, [sp, #4]
 8004ddc:	2b0e      	cmp	r3, #14
 8004dde:	f200 80ad 	bhi.w	8004f3c <_dtoa_r+0x484>
 8004de2:	2d00      	cmp	r5, #0
 8004de4:	f000 80aa 	beq.w	8004f3c <_dtoa_r+0x484>
 8004de8:	f1ba 0f00 	cmp.w	sl, #0
 8004dec:	dd36      	ble.n	8004e5c <_dtoa_r+0x3a4>
 8004dee:	4ac3      	ldr	r2, [pc, #780]	; (80050fc <_dtoa_r+0x644>)
 8004df0:	f00a 030f 	and.w	r3, sl, #15
 8004df4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004df8:	ed93 7b00 	vldr	d7, [r3]
 8004dfc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004e00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004e04:	eeb0 8a47 	vmov.f32	s16, s14
 8004e08:	eef0 8a67 	vmov.f32	s17, s15
 8004e0c:	d016      	beq.n	8004e3c <_dtoa_r+0x384>
 8004e0e:	4bbc      	ldr	r3, [pc, #752]	; (8005100 <_dtoa_r+0x648>)
 8004e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e18:	f7fb fd20 	bl	800085c <__aeabi_ddiv>
 8004e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e20:	f007 070f 	and.w	r7, r7, #15
 8004e24:	2503      	movs	r5, #3
 8004e26:	4eb6      	ldr	r6, [pc, #728]	; (8005100 <_dtoa_r+0x648>)
 8004e28:	b957      	cbnz	r7, 8004e40 <_dtoa_r+0x388>
 8004e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2e:	ec53 2b18 	vmov	r2, r3, d8
 8004e32:	f7fb fd13 	bl	800085c <__aeabi_ddiv>
 8004e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e3a:	e029      	b.n	8004e90 <_dtoa_r+0x3d8>
 8004e3c:	2502      	movs	r5, #2
 8004e3e:	e7f2      	b.n	8004e26 <_dtoa_r+0x36e>
 8004e40:	07f9      	lsls	r1, r7, #31
 8004e42:	d508      	bpl.n	8004e56 <_dtoa_r+0x39e>
 8004e44:	ec51 0b18 	vmov	r0, r1, d8
 8004e48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e4c:	f7fb fbdc 	bl	8000608 <__aeabi_dmul>
 8004e50:	ec41 0b18 	vmov	d8, r0, r1
 8004e54:	3501      	adds	r5, #1
 8004e56:	107f      	asrs	r7, r7, #1
 8004e58:	3608      	adds	r6, #8
 8004e5a:	e7e5      	b.n	8004e28 <_dtoa_r+0x370>
 8004e5c:	f000 80a6 	beq.w	8004fac <_dtoa_r+0x4f4>
 8004e60:	f1ca 0600 	rsb	r6, sl, #0
 8004e64:	4ba5      	ldr	r3, [pc, #660]	; (80050fc <_dtoa_r+0x644>)
 8004e66:	4fa6      	ldr	r7, [pc, #664]	; (8005100 <_dtoa_r+0x648>)
 8004e68:	f006 020f 	and.w	r2, r6, #15
 8004e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e78:	f7fb fbc6 	bl	8000608 <__aeabi_dmul>
 8004e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e80:	1136      	asrs	r6, r6, #4
 8004e82:	2300      	movs	r3, #0
 8004e84:	2502      	movs	r5, #2
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	f040 8085 	bne.w	8004f96 <_dtoa_r+0x4de>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1d2      	bne.n	8004e36 <_dtoa_r+0x37e>
 8004e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 808c 	beq.w	8004fb0 <_dtoa_r+0x4f8>
 8004e98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e9c:	4b99      	ldr	r3, [pc, #612]	; (8005104 <_dtoa_r+0x64c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb fe22 	bl	8000aec <__aeabi_dcmplt>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f000 8081 	beq.w	8004fb0 <_dtoa_r+0x4f8>
 8004eae:	9b01      	ldr	r3, [sp, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d07d      	beq.n	8004fb0 <_dtoa_r+0x4f8>
 8004eb4:	f1b9 0f00 	cmp.w	r9, #0
 8004eb8:	dd3c      	ble.n	8004f34 <_dtoa_r+0x47c>
 8004eba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ebe:	9307      	str	r3, [sp, #28]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4b91      	ldr	r3, [pc, #580]	; (8005108 <_dtoa_r+0x650>)
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	f7fb fb9e 	bl	8000608 <__aeabi_dmul>
 8004ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004ed6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7fb fb2a 	bl	8000534 <__aeabi_i2d>
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	f7fb fb90 	bl	8000608 <__aeabi_dmul>
 8004ee8:	4b88      	ldr	r3, [pc, #544]	; (800510c <_dtoa_r+0x654>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	f7fb f9d6 	bl	800029c <__adddf3>
 8004ef0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d15c      	bne.n	8004fba <_dtoa_r+0x502>
 8004f00:	4b83      	ldr	r3, [pc, #524]	; (8005110 <_dtoa_r+0x658>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	4630      	mov	r0, r6
 8004f06:	4639      	mov	r1, r7
 8004f08:	f7fb f9c6 	bl	8000298 <__aeabi_dsub>
 8004f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f10:	4606      	mov	r6, r0
 8004f12:	460f      	mov	r7, r1
 8004f14:	f7fb fe08 	bl	8000b28 <__aeabi_dcmpgt>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f040 8296 	bne.w	800544a <_dtoa_r+0x992>
 8004f1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f22:	4630      	mov	r0, r6
 8004f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fddf 	bl	8000aec <__aeabi_dcmplt>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f040 8288 	bne.w	8005444 <_dtoa_r+0x98c>
 8004f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f2c0 8158 	blt.w	80051f4 <_dtoa_r+0x73c>
 8004f44:	f1ba 0f0e 	cmp.w	sl, #14
 8004f48:	f300 8154 	bgt.w	80051f4 <_dtoa_r+0x73c>
 8004f4c:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <_dtoa_r+0x644>)
 8004f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f280 80e3 	bge.w	8005124 <_dtoa_r+0x66c>
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f300 80df 	bgt.w	8005124 <_dtoa_r+0x66c>
 8004f66:	f040 826d 	bne.w	8005444 <_dtoa_r+0x98c>
 8004f6a:	4b69      	ldr	r3, [pc, #420]	; (8005110 <_dtoa_r+0x658>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb fb49 	bl	8000608 <__aeabi_dmul>
 8004f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7a:	f7fb fdcb 	bl	8000b14 <__aeabi_dcmpge>
 8004f7e:	9e01      	ldr	r6, [sp, #4]
 8004f80:	4637      	mov	r7, r6
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f040 8243 	bne.w	800540e <_dtoa_r+0x956>
 8004f88:	9d00      	ldr	r5, [sp, #0]
 8004f8a:	2331      	movs	r3, #49	; 0x31
 8004f8c:	f805 3b01 	strb.w	r3, [r5], #1
 8004f90:	f10a 0a01 	add.w	sl, sl, #1
 8004f94:	e23f      	b.n	8005416 <_dtoa_r+0x95e>
 8004f96:	07f2      	lsls	r2, r6, #31
 8004f98:	d505      	bpl.n	8004fa6 <_dtoa_r+0x4ee>
 8004f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9e:	f7fb fb33 	bl	8000608 <__aeabi_dmul>
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	1076      	asrs	r6, r6, #1
 8004fa8:	3708      	adds	r7, #8
 8004faa:	e76c      	b.n	8004e86 <_dtoa_r+0x3ce>
 8004fac:	2502      	movs	r5, #2
 8004fae:	e76f      	b.n	8004e90 <_dtoa_r+0x3d8>
 8004fb0:	9b01      	ldr	r3, [sp, #4]
 8004fb2:	f8cd a01c 	str.w	sl, [sp, #28]
 8004fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb8:	e78d      	b.n	8004ed6 <_dtoa_r+0x41e>
 8004fba:	9900      	ldr	r1, [sp, #0]
 8004fbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc0:	4b4e      	ldr	r3, [pc, #312]	; (80050fc <_dtoa_r+0x644>)
 8004fc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	9102      	str	r1, [sp, #8]
 8004fca:	9908      	ldr	r1, [sp, #32]
 8004fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8004fd0:	eef0 8a67 	vmov.f32	s17, s15
 8004fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d045      	beq.n	800506c <_dtoa_r+0x5b4>
 8004fe0:	494c      	ldr	r1, [pc, #304]	; (8005114 <_dtoa_r+0x65c>)
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7fb fc3a 	bl	800085c <__aeabi_ddiv>
 8004fe8:	ec53 2b18 	vmov	r2, r3, d8
 8004fec:	f7fb f954 	bl	8000298 <__aeabi_dsub>
 8004ff0:	9d00      	ldr	r5, [sp, #0]
 8004ff2:	ec41 0b18 	vmov	d8, r0, r1
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7fb fdb5 	bl	8000b68 <__aeabi_d2iz>
 8004ffe:	900c      	str	r0, [sp, #48]	; 0x30
 8005000:	f7fb fa98 	bl	8000534 <__aeabi_i2d>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4630      	mov	r0, r6
 800500a:	4639      	mov	r1, r7
 800500c:	f7fb f944 	bl	8000298 <__aeabi_dsub>
 8005010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005012:	3330      	adds	r3, #48	; 0x30
 8005014:	f805 3b01 	strb.w	r3, [r5], #1
 8005018:	ec53 2b18 	vmov	r2, r3, d8
 800501c:	4606      	mov	r6, r0
 800501e:	460f      	mov	r7, r1
 8005020:	f7fb fd64 	bl	8000aec <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	d165      	bne.n	80050f4 <_dtoa_r+0x63c>
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	4935      	ldr	r1, [pc, #212]	; (8005104 <_dtoa_r+0x64c>)
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb f932 	bl	8000298 <__aeabi_dsub>
 8005034:	ec53 2b18 	vmov	r2, r3, d8
 8005038:	f7fb fd58 	bl	8000aec <__aeabi_dcmplt>
 800503c:	2800      	cmp	r0, #0
 800503e:	f040 80b9 	bne.w	80051b4 <_dtoa_r+0x6fc>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	429d      	cmp	r5, r3
 8005046:	f43f af75 	beq.w	8004f34 <_dtoa_r+0x47c>
 800504a:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <_dtoa_r+0x650>)
 800504c:	ec51 0b18 	vmov	r0, r1, d8
 8005050:	2200      	movs	r2, #0
 8005052:	f7fb fad9 	bl	8000608 <__aeabi_dmul>
 8005056:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <_dtoa_r+0x650>)
 8005058:	ec41 0b18 	vmov	d8, r0, r1
 800505c:	2200      	movs	r2, #0
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb fad1 	bl	8000608 <__aeabi_dmul>
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	e7c4      	b.n	8004ff6 <_dtoa_r+0x53e>
 800506c:	ec51 0b17 	vmov	r0, r1, d7
 8005070:	f7fb faca 	bl	8000608 <__aeabi_dmul>
 8005074:	9b02      	ldr	r3, [sp, #8]
 8005076:	9d00      	ldr	r5, [sp, #0]
 8005078:	930c      	str	r3, [sp, #48]	; 0x30
 800507a:	ec41 0b18 	vmov	d8, r0, r1
 800507e:	4639      	mov	r1, r7
 8005080:	4630      	mov	r0, r6
 8005082:	f7fb fd71 	bl	8000b68 <__aeabi_d2iz>
 8005086:	9011      	str	r0, [sp, #68]	; 0x44
 8005088:	f7fb fa54 	bl	8000534 <__aeabi_i2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb f900 	bl	8000298 <__aeabi_dsub>
 8005098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800509a:	3330      	adds	r3, #48	; 0x30
 800509c:	f805 3b01 	strb.w	r3, [r5], #1
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	429d      	cmp	r5, r3
 80050a4:	4606      	mov	r6, r0
 80050a6:	460f      	mov	r7, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	d134      	bne.n	8005118 <_dtoa_r+0x660>
 80050ae:	4b19      	ldr	r3, [pc, #100]	; (8005114 <_dtoa_r+0x65c>)
 80050b0:	ec51 0b18 	vmov	r0, r1, d8
 80050b4:	f7fb f8f2 	bl	800029c <__adddf3>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4630      	mov	r0, r6
 80050be:	4639      	mov	r1, r7
 80050c0:	f7fb fd32 	bl	8000b28 <__aeabi_dcmpgt>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d175      	bne.n	80051b4 <_dtoa_r+0x6fc>
 80050c8:	ec53 2b18 	vmov	r2, r3, d8
 80050cc:	4911      	ldr	r1, [pc, #68]	; (8005114 <_dtoa_r+0x65c>)
 80050ce:	2000      	movs	r0, #0
 80050d0:	f7fb f8e2 	bl	8000298 <__aeabi_dsub>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb fd06 	bl	8000aec <__aeabi_dcmplt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f43f af27 	beq.w	8004f34 <_dtoa_r+0x47c>
 80050e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e8:	1e6b      	subs	r3, r5, #1
 80050ea:	930c      	str	r3, [sp, #48]	; 0x30
 80050ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d0f8      	beq.n	80050e6 <_dtoa_r+0x62e>
 80050f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80050f8:	e04a      	b.n	8005190 <_dtoa_r+0x6d8>
 80050fa:	bf00      	nop
 80050fc:	08006c80 	.word	0x08006c80
 8005100:	08006c58 	.word	0x08006c58
 8005104:	3ff00000 	.word	0x3ff00000
 8005108:	40240000 	.word	0x40240000
 800510c:	401c0000 	.word	0x401c0000
 8005110:	40140000 	.word	0x40140000
 8005114:	3fe00000 	.word	0x3fe00000
 8005118:	4baf      	ldr	r3, [pc, #700]	; (80053d8 <_dtoa_r+0x920>)
 800511a:	f7fb fa75 	bl	8000608 <__aeabi_dmul>
 800511e:	4606      	mov	r6, r0
 8005120:	460f      	mov	r7, r1
 8005122:	e7ac      	b.n	800507e <_dtoa_r+0x5c6>
 8005124:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005128:	9d00      	ldr	r5, [sp, #0]
 800512a:	4642      	mov	r2, r8
 800512c:	464b      	mov	r3, r9
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb fb93 	bl	800085c <__aeabi_ddiv>
 8005136:	f7fb fd17 	bl	8000b68 <__aeabi_d2iz>
 800513a:	9002      	str	r0, [sp, #8]
 800513c:	f7fb f9fa 	bl	8000534 <__aeabi_i2d>
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	f7fb fa60 	bl	8000608 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4630      	mov	r0, r6
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb f8a2 	bl	8000298 <__aeabi_dsub>
 8005154:	9e02      	ldr	r6, [sp, #8]
 8005156:	9f01      	ldr	r7, [sp, #4]
 8005158:	3630      	adds	r6, #48	; 0x30
 800515a:	f805 6b01 	strb.w	r6, [r5], #1
 800515e:	9e00      	ldr	r6, [sp, #0]
 8005160:	1bae      	subs	r6, r5, r6
 8005162:	42b7      	cmp	r7, r6
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	d137      	bne.n	80051da <_dtoa_r+0x722>
 800516a:	f7fb f897 	bl	800029c <__adddf3>
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	f7fb fcd7 	bl	8000b28 <__aeabi_dcmpgt>
 800517a:	b9c8      	cbnz	r0, 80051b0 <_dtoa_r+0x6f8>
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	4630      	mov	r0, r6
 8005182:	4639      	mov	r1, r7
 8005184:	f7fb fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005188:	b110      	cbz	r0, 8005190 <_dtoa_r+0x6d8>
 800518a:	9b02      	ldr	r3, [sp, #8]
 800518c:	07d9      	lsls	r1, r3, #31
 800518e:	d40f      	bmi.n	80051b0 <_dtoa_r+0x6f8>
 8005190:	4620      	mov	r0, r4
 8005192:	4659      	mov	r1, fp
 8005194:	f000 fbc2 	bl	800591c <_Bfree>
 8005198:	2300      	movs	r3, #0
 800519a:	702b      	strb	r3, [r5, #0]
 800519c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800519e:	f10a 0001 	add.w	r0, sl, #1
 80051a2:	6018      	str	r0, [r3, #0]
 80051a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f43f acd8 	beq.w	8004b5c <_dtoa_r+0xa4>
 80051ac:	601d      	str	r5, [r3, #0]
 80051ae:	e4d5      	b.n	8004b5c <_dtoa_r+0xa4>
 80051b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80051b4:	462b      	mov	r3, r5
 80051b6:	461d      	mov	r5, r3
 80051b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051bc:	2a39      	cmp	r2, #57	; 0x39
 80051be:	d108      	bne.n	80051d2 <_dtoa_r+0x71a>
 80051c0:	9a00      	ldr	r2, [sp, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d1f7      	bne.n	80051b6 <_dtoa_r+0x6fe>
 80051c6:	9a07      	ldr	r2, [sp, #28]
 80051c8:	9900      	ldr	r1, [sp, #0]
 80051ca:	3201      	adds	r2, #1
 80051cc:	9207      	str	r2, [sp, #28]
 80051ce:	2230      	movs	r2, #48	; 0x30
 80051d0:	700a      	strb	r2, [r1, #0]
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	3201      	adds	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e78c      	b.n	80050f4 <_dtoa_r+0x63c>
 80051da:	4b7f      	ldr	r3, [pc, #508]	; (80053d8 <_dtoa_r+0x920>)
 80051dc:	2200      	movs	r2, #0
 80051de:	f7fb fa13 	bl	8000608 <__aeabi_dmul>
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	f7fb fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d09b      	beq.n	800512a <_dtoa_r+0x672>
 80051f2:	e7cd      	b.n	8005190 <_dtoa_r+0x6d8>
 80051f4:	9a08      	ldr	r2, [sp, #32]
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	f000 80c4 	beq.w	8005384 <_dtoa_r+0x8cc>
 80051fc:	9a05      	ldr	r2, [sp, #20]
 80051fe:	2a01      	cmp	r2, #1
 8005200:	f300 80a8 	bgt.w	8005354 <_dtoa_r+0x89c>
 8005204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005206:	2a00      	cmp	r2, #0
 8005208:	f000 80a0 	beq.w	800534c <_dtoa_r+0x894>
 800520c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005210:	9e06      	ldr	r6, [sp, #24]
 8005212:	4645      	mov	r5, r8
 8005214:	9a04      	ldr	r2, [sp, #16]
 8005216:	2101      	movs	r1, #1
 8005218:	441a      	add	r2, r3
 800521a:	4620      	mov	r0, r4
 800521c:	4498      	add	r8, r3
 800521e:	9204      	str	r2, [sp, #16]
 8005220:	f000 fc38 	bl	8005a94 <__i2b>
 8005224:	4607      	mov	r7, r0
 8005226:	2d00      	cmp	r5, #0
 8005228:	dd0b      	ble.n	8005242 <_dtoa_r+0x78a>
 800522a:	9b04      	ldr	r3, [sp, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dd08      	ble.n	8005242 <_dtoa_r+0x78a>
 8005230:	42ab      	cmp	r3, r5
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	bfa8      	it	ge
 8005236:	462b      	movge	r3, r5
 8005238:	eba8 0803 	sub.w	r8, r8, r3
 800523c:	1aed      	subs	r5, r5, r3
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	b1fb      	cbz	r3, 8005286 <_dtoa_r+0x7ce>
 8005246:	9b08      	ldr	r3, [sp, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 809f 	beq.w	800538c <_dtoa_r+0x8d4>
 800524e:	2e00      	cmp	r6, #0
 8005250:	dd11      	ble.n	8005276 <_dtoa_r+0x7be>
 8005252:	4639      	mov	r1, r7
 8005254:	4632      	mov	r2, r6
 8005256:	4620      	mov	r0, r4
 8005258:	f000 fcd8 	bl	8005c0c <__pow5mult>
 800525c:	465a      	mov	r2, fp
 800525e:	4601      	mov	r1, r0
 8005260:	4607      	mov	r7, r0
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fc2c 	bl	8005ac0 <__multiply>
 8005268:	4659      	mov	r1, fp
 800526a:	9007      	str	r0, [sp, #28]
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fb55 	bl	800591c <_Bfree>
 8005272:	9b07      	ldr	r3, [sp, #28]
 8005274:	469b      	mov	fp, r3
 8005276:	9b06      	ldr	r3, [sp, #24]
 8005278:	1b9a      	subs	r2, r3, r6
 800527a:	d004      	beq.n	8005286 <_dtoa_r+0x7ce>
 800527c:	4659      	mov	r1, fp
 800527e:	4620      	mov	r0, r4
 8005280:	f000 fcc4 	bl	8005c0c <__pow5mult>
 8005284:	4683      	mov	fp, r0
 8005286:	2101      	movs	r1, #1
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fc03 	bl	8005a94 <__i2b>
 800528e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005290:	2b00      	cmp	r3, #0
 8005292:	4606      	mov	r6, r0
 8005294:	dd7c      	ble.n	8005390 <_dtoa_r+0x8d8>
 8005296:	461a      	mov	r2, r3
 8005298:	4601      	mov	r1, r0
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fcb6 	bl	8005c0c <__pow5mult>
 80052a0:	9b05      	ldr	r3, [sp, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	4606      	mov	r6, r0
 80052a6:	dd76      	ble.n	8005396 <_dtoa_r+0x8de>
 80052a8:	2300      	movs	r3, #0
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	6933      	ldr	r3, [r6, #16]
 80052ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052b2:	6918      	ldr	r0, [r3, #16]
 80052b4:	f000 fb9e 	bl	80059f4 <__hi0bits>
 80052b8:	f1c0 0020 	rsb	r0, r0, #32
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	4418      	add	r0, r3
 80052c0:	f010 001f 	ands.w	r0, r0, #31
 80052c4:	f000 8086 	beq.w	80053d4 <_dtoa_r+0x91c>
 80052c8:	f1c0 0320 	rsb	r3, r0, #32
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	dd7f      	ble.n	80053d0 <_dtoa_r+0x918>
 80052d0:	f1c0 001c 	rsb	r0, r0, #28
 80052d4:	9b04      	ldr	r3, [sp, #16]
 80052d6:	4403      	add	r3, r0
 80052d8:	4480      	add	r8, r0
 80052da:	4405      	add	r5, r0
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	f1b8 0f00 	cmp.w	r8, #0
 80052e2:	dd05      	ble.n	80052f0 <_dtoa_r+0x838>
 80052e4:	4659      	mov	r1, fp
 80052e6:	4642      	mov	r2, r8
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fce9 	bl	8005cc0 <__lshift>
 80052ee:	4683      	mov	fp, r0
 80052f0:	9b04      	ldr	r3, [sp, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dd05      	ble.n	8005302 <_dtoa_r+0x84a>
 80052f6:	4631      	mov	r1, r6
 80052f8:	461a      	mov	r2, r3
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fce0 	bl	8005cc0 <__lshift>
 8005300:	4606      	mov	r6, r0
 8005302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d069      	beq.n	80053dc <_dtoa_r+0x924>
 8005308:	4631      	mov	r1, r6
 800530a:	4658      	mov	r0, fp
 800530c:	f000 fd44 	bl	8005d98 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	da63      	bge.n	80053dc <_dtoa_r+0x924>
 8005314:	2300      	movs	r3, #0
 8005316:	4659      	mov	r1, fp
 8005318:	220a      	movs	r2, #10
 800531a:	4620      	mov	r0, r4
 800531c:	f000 fb20 	bl	8005960 <__multadd>
 8005320:	9b08      	ldr	r3, [sp, #32]
 8005322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005326:	4683      	mov	fp, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 818f 	beq.w	800564c <_dtoa_r+0xb94>
 800532e:	4639      	mov	r1, r7
 8005330:	2300      	movs	r3, #0
 8005332:	220a      	movs	r2, #10
 8005334:	4620      	mov	r0, r4
 8005336:	f000 fb13 	bl	8005960 <__multadd>
 800533a:	f1b9 0f00 	cmp.w	r9, #0
 800533e:	4607      	mov	r7, r0
 8005340:	f300 808e 	bgt.w	8005460 <_dtoa_r+0x9a8>
 8005344:	9b05      	ldr	r3, [sp, #20]
 8005346:	2b02      	cmp	r3, #2
 8005348:	dc50      	bgt.n	80053ec <_dtoa_r+0x934>
 800534a:	e089      	b.n	8005460 <_dtoa_r+0x9a8>
 800534c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800534e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005352:	e75d      	b.n	8005210 <_dtoa_r+0x758>
 8005354:	9b01      	ldr	r3, [sp, #4]
 8005356:	1e5e      	subs	r6, r3, #1
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	42b3      	cmp	r3, r6
 800535c:	bfbf      	itttt	lt
 800535e:	9b06      	ldrlt	r3, [sp, #24]
 8005360:	9606      	strlt	r6, [sp, #24]
 8005362:	1af2      	sublt	r2, r6, r3
 8005364:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005366:	bfb6      	itet	lt
 8005368:	189b      	addlt	r3, r3, r2
 800536a:	1b9e      	subge	r6, r3, r6
 800536c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	bfb8      	it	lt
 8005372:	2600      	movlt	r6, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	bfb5      	itete	lt
 8005378:	eba8 0503 	sublt.w	r5, r8, r3
 800537c:	9b01      	ldrge	r3, [sp, #4]
 800537e:	2300      	movlt	r3, #0
 8005380:	4645      	movge	r5, r8
 8005382:	e747      	b.n	8005214 <_dtoa_r+0x75c>
 8005384:	9e06      	ldr	r6, [sp, #24]
 8005386:	9f08      	ldr	r7, [sp, #32]
 8005388:	4645      	mov	r5, r8
 800538a:	e74c      	b.n	8005226 <_dtoa_r+0x76e>
 800538c:	9a06      	ldr	r2, [sp, #24]
 800538e:	e775      	b.n	800527c <_dtoa_r+0x7c4>
 8005390:	9b05      	ldr	r3, [sp, #20]
 8005392:	2b01      	cmp	r3, #1
 8005394:	dc18      	bgt.n	80053c8 <_dtoa_r+0x910>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	b9b3      	cbnz	r3, 80053c8 <_dtoa_r+0x910>
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a0:	b9a3      	cbnz	r3, 80053cc <_dtoa_r+0x914>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	0d1b      	lsrs	r3, r3, #20
 80053aa:	051b      	lsls	r3, r3, #20
 80053ac:	b12b      	cbz	r3, 80053ba <_dtoa_r+0x902>
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	3301      	adds	r3, #1
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	f108 0801 	add.w	r8, r8, #1
 80053b8:	2301      	movs	r3, #1
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f47f af74 	bne.w	80052ac <_dtoa_r+0x7f4>
 80053c4:	2001      	movs	r0, #1
 80053c6:	e779      	b.n	80052bc <_dtoa_r+0x804>
 80053c8:	2300      	movs	r3, #0
 80053ca:	e7f6      	b.n	80053ba <_dtoa_r+0x902>
 80053cc:	9b02      	ldr	r3, [sp, #8]
 80053ce:	e7f4      	b.n	80053ba <_dtoa_r+0x902>
 80053d0:	d085      	beq.n	80052de <_dtoa_r+0x826>
 80053d2:	4618      	mov	r0, r3
 80053d4:	301c      	adds	r0, #28
 80053d6:	e77d      	b.n	80052d4 <_dtoa_r+0x81c>
 80053d8:	40240000 	.word	0x40240000
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dc38      	bgt.n	8005454 <_dtoa_r+0x99c>
 80053e2:	9b05      	ldr	r3, [sp, #20]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	dd35      	ble.n	8005454 <_dtoa_r+0x99c>
 80053e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	d10d      	bne.n	800540e <_dtoa_r+0x956>
 80053f2:	4631      	mov	r1, r6
 80053f4:	464b      	mov	r3, r9
 80053f6:	2205      	movs	r2, #5
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fab1 	bl	8005960 <__multadd>
 80053fe:	4601      	mov	r1, r0
 8005400:	4606      	mov	r6, r0
 8005402:	4658      	mov	r0, fp
 8005404:	f000 fcc8 	bl	8005d98 <__mcmp>
 8005408:	2800      	cmp	r0, #0
 800540a:	f73f adbd 	bgt.w	8004f88 <_dtoa_r+0x4d0>
 800540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005410:	9d00      	ldr	r5, [sp, #0]
 8005412:	ea6f 0a03 	mvn.w	sl, r3
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	4631      	mov	r1, r6
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fa7d 	bl	800591c <_Bfree>
 8005422:	2f00      	cmp	r7, #0
 8005424:	f43f aeb4 	beq.w	8005190 <_dtoa_r+0x6d8>
 8005428:	f1b8 0f00 	cmp.w	r8, #0
 800542c:	d005      	beq.n	800543a <_dtoa_r+0x982>
 800542e:	45b8      	cmp	r8, r7
 8005430:	d003      	beq.n	800543a <_dtoa_r+0x982>
 8005432:	4641      	mov	r1, r8
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fa71 	bl	800591c <_Bfree>
 800543a:	4639      	mov	r1, r7
 800543c:	4620      	mov	r0, r4
 800543e:	f000 fa6d 	bl	800591c <_Bfree>
 8005442:	e6a5      	b.n	8005190 <_dtoa_r+0x6d8>
 8005444:	2600      	movs	r6, #0
 8005446:	4637      	mov	r7, r6
 8005448:	e7e1      	b.n	800540e <_dtoa_r+0x956>
 800544a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800544c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005450:	4637      	mov	r7, r6
 8005452:	e599      	b.n	8004f88 <_dtoa_r+0x4d0>
 8005454:	9b08      	ldr	r3, [sp, #32]
 8005456:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80fd 	beq.w	800565a <_dtoa_r+0xba2>
 8005460:	2d00      	cmp	r5, #0
 8005462:	dd05      	ble.n	8005470 <_dtoa_r+0x9b8>
 8005464:	4639      	mov	r1, r7
 8005466:	462a      	mov	r2, r5
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fc29 	bl	8005cc0 <__lshift>
 800546e:	4607      	mov	r7, r0
 8005470:	9b06      	ldr	r3, [sp, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d05c      	beq.n	8005530 <_dtoa_r+0xa78>
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fa0f 	bl	800589c <_Balloc>
 800547e:	4605      	mov	r5, r0
 8005480:	b928      	cbnz	r0, 800548e <_dtoa_r+0x9d6>
 8005482:	4b80      	ldr	r3, [pc, #512]	; (8005684 <_dtoa_r+0xbcc>)
 8005484:	4602      	mov	r2, r0
 8005486:	f240 21ea 	movw	r1, #746	; 0x2ea
 800548a:	f7ff bb2e 	b.w	8004aea <_dtoa_r+0x32>
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	3202      	adds	r2, #2
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	f107 010c 	add.w	r1, r7, #12
 8005498:	300c      	adds	r0, #12
 800549a:	f7fe fde7 	bl	800406c <memcpy>
 800549e:	2201      	movs	r2, #1
 80054a0:	4629      	mov	r1, r5
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 fc0c 	bl	8005cc0 <__lshift>
 80054a8:	9b00      	ldr	r3, [sp, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	444b      	add	r3, r9
 80054b2:	9307      	str	r3, [sp, #28]
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	46b8      	mov	r8, r7
 80054bc:	9306      	str	r3, [sp, #24]
 80054be:	4607      	mov	r7, r0
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	4631      	mov	r1, r6
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4658      	mov	r0, fp
 80054c8:	9302      	str	r3, [sp, #8]
 80054ca:	f7ff fa67 	bl	800499c <quorem>
 80054ce:	4603      	mov	r3, r0
 80054d0:	3330      	adds	r3, #48	; 0x30
 80054d2:	9004      	str	r0, [sp, #16]
 80054d4:	4641      	mov	r1, r8
 80054d6:	4658      	mov	r0, fp
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	f000 fc5d 	bl	8005d98 <__mcmp>
 80054de:	463a      	mov	r2, r7
 80054e0:	4681      	mov	r9, r0
 80054e2:	4631      	mov	r1, r6
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fc73 	bl	8005dd0 <__mdiff>
 80054ea:	68c2      	ldr	r2, [r0, #12]
 80054ec:	9b08      	ldr	r3, [sp, #32]
 80054ee:	4605      	mov	r5, r0
 80054f0:	bb02      	cbnz	r2, 8005534 <_dtoa_r+0xa7c>
 80054f2:	4601      	mov	r1, r0
 80054f4:	4658      	mov	r0, fp
 80054f6:	f000 fc4f 	bl	8005d98 <__mcmp>
 80054fa:	9b08      	ldr	r3, [sp, #32]
 80054fc:	4602      	mov	r2, r0
 80054fe:	4629      	mov	r1, r5
 8005500:	4620      	mov	r0, r4
 8005502:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005506:	f000 fa09 	bl	800591c <_Bfree>
 800550a:	9b05      	ldr	r3, [sp, #20]
 800550c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550e:	9d01      	ldr	r5, [sp, #4]
 8005510:	ea43 0102 	orr.w	r1, r3, r2
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	430b      	orrs	r3, r1
 8005518:	9b08      	ldr	r3, [sp, #32]
 800551a:	d10d      	bne.n	8005538 <_dtoa_r+0xa80>
 800551c:	2b39      	cmp	r3, #57	; 0x39
 800551e:	d029      	beq.n	8005574 <_dtoa_r+0xabc>
 8005520:	f1b9 0f00 	cmp.w	r9, #0
 8005524:	dd01      	ble.n	800552a <_dtoa_r+0xa72>
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	3331      	adds	r3, #49	; 0x31
 800552a:	9a02      	ldr	r2, [sp, #8]
 800552c:	7013      	strb	r3, [r2, #0]
 800552e:	e774      	b.n	800541a <_dtoa_r+0x962>
 8005530:	4638      	mov	r0, r7
 8005532:	e7b9      	b.n	80054a8 <_dtoa_r+0x9f0>
 8005534:	2201      	movs	r2, #1
 8005536:	e7e2      	b.n	80054fe <_dtoa_r+0xa46>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	db06      	blt.n	800554c <_dtoa_r+0xa94>
 800553e:	9905      	ldr	r1, [sp, #20]
 8005540:	ea41 0909 	orr.w	r9, r1, r9
 8005544:	9906      	ldr	r1, [sp, #24]
 8005546:	ea59 0101 	orrs.w	r1, r9, r1
 800554a:	d120      	bne.n	800558e <_dtoa_r+0xad6>
 800554c:	2a00      	cmp	r2, #0
 800554e:	ddec      	ble.n	800552a <_dtoa_r+0xa72>
 8005550:	4659      	mov	r1, fp
 8005552:	2201      	movs	r2, #1
 8005554:	4620      	mov	r0, r4
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	f000 fbb2 	bl	8005cc0 <__lshift>
 800555c:	4631      	mov	r1, r6
 800555e:	4683      	mov	fp, r0
 8005560:	f000 fc1a 	bl	8005d98 <__mcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	9b01      	ldr	r3, [sp, #4]
 8005568:	dc02      	bgt.n	8005570 <_dtoa_r+0xab8>
 800556a:	d1de      	bne.n	800552a <_dtoa_r+0xa72>
 800556c:	07da      	lsls	r2, r3, #31
 800556e:	d5dc      	bpl.n	800552a <_dtoa_r+0xa72>
 8005570:	2b39      	cmp	r3, #57	; 0x39
 8005572:	d1d8      	bne.n	8005526 <_dtoa_r+0xa6e>
 8005574:	9a02      	ldr	r2, [sp, #8]
 8005576:	2339      	movs	r3, #57	; 0x39
 8005578:	7013      	strb	r3, [r2, #0]
 800557a:	462b      	mov	r3, r5
 800557c:	461d      	mov	r5, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005584:	2a39      	cmp	r2, #57	; 0x39
 8005586:	d050      	beq.n	800562a <_dtoa_r+0xb72>
 8005588:	3201      	adds	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e745      	b.n	800541a <_dtoa_r+0x962>
 800558e:	2a00      	cmp	r2, #0
 8005590:	dd03      	ble.n	800559a <_dtoa_r+0xae2>
 8005592:	2b39      	cmp	r3, #57	; 0x39
 8005594:	d0ee      	beq.n	8005574 <_dtoa_r+0xabc>
 8005596:	3301      	adds	r3, #1
 8005598:	e7c7      	b.n	800552a <_dtoa_r+0xa72>
 800559a:	9a01      	ldr	r2, [sp, #4]
 800559c:	9907      	ldr	r1, [sp, #28]
 800559e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055a2:	428a      	cmp	r2, r1
 80055a4:	d02a      	beq.n	80055fc <_dtoa_r+0xb44>
 80055a6:	4659      	mov	r1, fp
 80055a8:	2300      	movs	r3, #0
 80055aa:	220a      	movs	r2, #10
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f9d7 	bl	8005960 <__multadd>
 80055b2:	45b8      	cmp	r8, r7
 80055b4:	4683      	mov	fp, r0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	f04f 020a 	mov.w	r2, #10
 80055be:	4641      	mov	r1, r8
 80055c0:	4620      	mov	r0, r4
 80055c2:	d107      	bne.n	80055d4 <_dtoa_r+0xb1c>
 80055c4:	f000 f9cc 	bl	8005960 <__multadd>
 80055c8:	4680      	mov	r8, r0
 80055ca:	4607      	mov	r7, r0
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	3301      	adds	r3, #1
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	e775      	b.n	80054c0 <_dtoa_r+0xa08>
 80055d4:	f000 f9c4 	bl	8005960 <__multadd>
 80055d8:	4639      	mov	r1, r7
 80055da:	4680      	mov	r8, r0
 80055dc:	2300      	movs	r3, #0
 80055de:	220a      	movs	r2, #10
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 f9bd 	bl	8005960 <__multadd>
 80055e6:	4607      	mov	r7, r0
 80055e8:	e7f0      	b.n	80055cc <_dtoa_r+0xb14>
 80055ea:	f1b9 0f00 	cmp.w	r9, #0
 80055ee:	9a00      	ldr	r2, [sp, #0]
 80055f0:	bfcc      	ite	gt
 80055f2:	464d      	movgt	r5, r9
 80055f4:	2501      	movle	r5, #1
 80055f6:	4415      	add	r5, r2
 80055f8:	f04f 0800 	mov.w	r8, #0
 80055fc:	4659      	mov	r1, fp
 80055fe:	2201      	movs	r2, #1
 8005600:	4620      	mov	r0, r4
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	f000 fb5c 	bl	8005cc0 <__lshift>
 8005608:	4631      	mov	r1, r6
 800560a:	4683      	mov	fp, r0
 800560c:	f000 fbc4 	bl	8005d98 <__mcmp>
 8005610:	2800      	cmp	r0, #0
 8005612:	dcb2      	bgt.n	800557a <_dtoa_r+0xac2>
 8005614:	d102      	bne.n	800561c <_dtoa_r+0xb64>
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	07db      	lsls	r3, r3, #31
 800561a:	d4ae      	bmi.n	800557a <_dtoa_r+0xac2>
 800561c:	462b      	mov	r3, r5
 800561e:	461d      	mov	r5, r3
 8005620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005624:	2a30      	cmp	r2, #48	; 0x30
 8005626:	d0fa      	beq.n	800561e <_dtoa_r+0xb66>
 8005628:	e6f7      	b.n	800541a <_dtoa_r+0x962>
 800562a:	9a00      	ldr	r2, [sp, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d1a5      	bne.n	800557c <_dtoa_r+0xac4>
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	2331      	movs	r3, #49	; 0x31
 8005636:	e779      	b.n	800552c <_dtoa_r+0xa74>
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <_dtoa_r+0xbd0>)
 800563a:	f7ff baaf 	b.w	8004b9c <_dtoa_r+0xe4>
 800563e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005640:	2b00      	cmp	r3, #0
 8005642:	f47f aa86 	bne.w	8004b52 <_dtoa_r+0x9a>
 8005646:	4b11      	ldr	r3, [pc, #68]	; (800568c <_dtoa_r+0xbd4>)
 8005648:	f7ff baa8 	b.w	8004b9c <_dtoa_r+0xe4>
 800564c:	f1b9 0f00 	cmp.w	r9, #0
 8005650:	dc03      	bgt.n	800565a <_dtoa_r+0xba2>
 8005652:	9b05      	ldr	r3, [sp, #20]
 8005654:	2b02      	cmp	r3, #2
 8005656:	f73f aec9 	bgt.w	80053ec <_dtoa_r+0x934>
 800565a:	9d00      	ldr	r5, [sp, #0]
 800565c:	4631      	mov	r1, r6
 800565e:	4658      	mov	r0, fp
 8005660:	f7ff f99c 	bl	800499c <quorem>
 8005664:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005668:	f805 3b01 	strb.w	r3, [r5], #1
 800566c:	9a00      	ldr	r2, [sp, #0]
 800566e:	1aaa      	subs	r2, r5, r2
 8005670:	4591      	cmp	r9, r2
 8005672:	ddba      	ble.n	80055ea <_dtoa_r+0xb32>
 8005674:	4659      	mov	r1, fp
 8005676:	2300      	movs	r3, #0
 8005678:	220a      	movs	r2, #10
 800567a:	4620      	mov	r0, r4
 800567c:	f000 f970 	bl	8005960 <__multadd>
 8005680:	4683      	mov	fp, r0
 8005682:	e7eb      	b.n	800565c <_dtoa_r+0xba4>
 8005684:	08006b87 	.word	0x08006b87
 8005688:	08006ae0 	.word	0x08006ae0
 800568c:	08006b04 	.word	0x08006b04

08005690 <std>:
 8005690:	2300      	movs	r3, #0
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	e9c0 3300 	strd	r3, r3, [r0]
 800569a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569e:	6083      	str	r3, [r0, #8]
 80056a0:	8181      	strh	r1, [r0, #12]
 80056a2:	6643      	str	r3, [r0, #100]	; 0x64
 80056a4:	81c2      	strh	r2, [r0, #14]
 80056a6:	6183      	str	r3, [r0, #24]
 80056a8:	4619      	mov	r1, r3
 80056aa:	2208      	movs	r2, #8
 80056ac:	305c      	adds	r0, #92	; 0x5c
 80056ae:	f7fe fceb 	bl	8004088 <memset>
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <std+0x38>)
 80056b4:	6263      	str	r3, [r4, #36]	; 0x24
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <std+0x3c>)
 80056b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ba:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <std+0x40>)
 80056bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <std+0x44>)
 80056c0:	6224      	str	r4, [r4, #32]
 80056c2:	6323      	str	r3, [r4, #48]	; 0x30
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	bf00      	nop
 80056c8:	080063e1 	.word	0x080063e1
 80056cc:	08006403 	.word	0x08006403
 80056d0:	0800643b 	.word	0x0800643b
 80056d4:	0800645f 	.word	0x0800645f

080056d8 <_cleanup_r>:
 80056d8:	4901      	ldr	r1, [pc, #4]	; (80056e0 <_cleanup_r+0x8>)
 80056da:	f000 b8af 	b.w	800583c <_fwalk_reent>
 80056de:	bf00      	nop
 80056e0:	08006775 	.word	0x08006775

080056e4 <__sfmoreglue>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	1e4a      	subs	r2, r1, #1
 80056e8:	2568      	movs	r5, #104	; 0x68
 80056ea:	4355      	muls	r5, r2
 80056ec:	460e      	mov	r6, r1
 80056ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f2:	f000 fcb1 	bl	8006058 <_malloc_r>
 80056f6:	4604      	mov	r4, r0
 80056f8:	b140      	cbz	r0, 800570c <__sfmoreglue+0x28>
 80056fa:	2100      	movs	r1, #0
 80056fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005700:	300c      	adds	r0, #12
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005708:	f7fe fcbe 	bl	8004088 <memset>
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__sfp_lock_acquire>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__sfp_lock_acquire+0x8>)
 8005712:	f000 b8b8 	b.w	8005886 <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	200002b8 	.word	0x200002b8

0800571c <__sfp_lock_release>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__sfp_lock_release+0x8>)
 800571e:	f000 b8b3 	b.w	8005888 <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	200002b8 	.word	0x200002b8

08005728 <__sinit_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sinit_lock_acquire+0x8>)
 800572a:	f000 b8ac 	b.w	8005886 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	200002b3 	.word	0x200002b3

08005734 <__sinit_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sinit_lock_release+0x8>)
 8005736:	f000 b8a7 	b.w	8005888 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	200002b3 	.word	0x200002b3

08005740 <__sinit>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	f7ff fff0 	bl	8005728 <__sinit_lock_acquire>
 8005748:	69a3      	ldr	r3, [r4, #24]
 800574a:	b11b      	cbz	r3, 8005754 <__sinit+0x14>
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f7ff bff0 	b.w	8005734 <__sinit_lock_release>
 8005754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005758:	6523      	str	r3, [r4, #80]	; 0x50
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <__sinit+0x68>)
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <__sinit+0x6c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	62a2      	str	r2, [r4, #40]	; 0x28
 8005762:	42a3      	cmp	r3, r4
 8005764:	bf04      	itt	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	61a3      	streq	r3, [r4, #24]
 800576a:	4620      	mov	r0, r4
 800576c:	f000 f820 	bl	80057b0 <__sfp>
 8005770:	6060      	str	r0, [r4, #4]
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f81c 	bl	80057b0 <__sfp>
 8005778:	60a0      	str	r0, [r4, #8]
 800577a:	4620      	mov	r0, r4
 800577c:	f000 f818 	bl	80057b0 <__sfp>
 8005780:	2200      	movs	r2, #0
 8005782:	60e0      	str	r0, [r4, #12]
 8005784:	2104      	movs	r1, #4
 8005786:	6860      	ldr	r0, [r4, #4]
 8005788:	f7ff ff82 	bl	8005690 <std>
 800578c:	68a0      	ldr	r0, [r4, #8]
 800578e:	2201      	movs	r2, #1
 8005790:	2109      	movs	r1, #9
 8005792:	f7ff ff7d 	bl	8005690 <std>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	2202      	movs	r2, #2
 800579a:	2112      	movs	r1, #18
 800579c:	f7ff ff78 	bl	8005690 <std>
 80057a0:	2301      	movs	r3, #1
 80057a2:	61a3      	str	r3, [r4, #24]
 80057a4:	e7d2      	b.n	800574c <__sinit+0xc>
 80057a6:	bf00      	nop
 80057a8:	08006acc 	.word	0x08006acc
 80057ac:	080056d9 	.word	0x080056d9

080057b0 <__sfp>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	4607      	mov	r7, r0
 80057b4:	f7ff ffac 	bl	8005710 <__sfp_lock_acquire>
 80057b8:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <__sfp+0x84>)
 80057ba:	681e      	ldr	r6, [r3, #0]
 80057bc:	69b3      	ldr	r3, [r6, #24]
 80057be:	b913      	cbnz	r3, 80057c6 <__sfp+0x16>
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff ffbd 	bl	8005740 <__sinit>
 80057c6:	3648      	adds	r6, #72	; 0x48
 80057c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	d503      	bpl.n	80057d8 <__sfp+0x28>
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	b30b      	cbz	r3, 8005818 <__sfp+0x68>
 80057d4:	6836      	ldr	r6, [r6, #0]
 80057d6:	e7f7      	b.n	80057c8 <__sfp+0x18>
 80057d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057dc:	b9d5      	cbnz	r5, 8005814 <__sfp+0x64>
 80057de:	4b16      	ldr	r3, [pc, #88]	; (8005838 <__sfp+0x88>)
 80057e0:	60e3      	str	r3, [r4, #12]
 80057e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e6:	6665      	str	r5, [r4, #100]	; 0x64
 80057e8:	f000 f84c 	bl	8005884 <__retarget_lock_init_recursive>
 80057ec:	f7ff ff96 	bl	800571c <__sfp_lock_release>
 80057f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f8:	6025      	str	r5, [r4, #0]
 80057fa:	61a5      	str	r5, [r4, #24]
 80057fc:	2208      	movs	r2, #8
 80057fe:	4629      	mov	r1, r5
 8005800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005804:	f7fe fc40 	bl	8004088 <memset>
 8005808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800580c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005810:	4620      	mov	r0, r4
 8005812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005814:	3468      	adds	r4, #104	; 0x68
 8005816:	e7d9      	b.n	80057cc <__sfp+0x1c>
 8005818:	2104      	movs	r1, #4
 800581a:	4638      	mov	r0, r7
 800581c:	f7ff ff62 	bl	80056e4 <__sfmoreglue>
 8005820:	4604      	mov	r4, r0
 8005822:	6030      	str	r0, [r6, #0]
 8005824:	2800      	cmp	r0, #0
 8005826:	d1d5      	bne.n	80057d4 <__sfp+0x24>
 8005828:	f7ff ff78 	bl	800571c <__sfp_lock_release>
 800582c:	230c      	movs	r3, #12
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	e7ee      	b.n	8005810 <__sfp+0x60>
 8005832:	bf00      	nop
 8005834:	08006acc 	.word	0x08006acc
 8005838:	ffff0001 	.word	0xffff0001

0800583c <_fwalk_reent>:
 800583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005840:	4606      	mov	r6, r0
 8005842:	4688      	mov	r8, r1
 8005844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005848:	2700      	movs	r7, #0
 800584a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800584e:	f1b9 0901 	subs.w	r9, r9, #1
 8005852:	d505      	bpl.n	8005860 <_fwalk_reent+0x24>
 8005854:	6824      	ldr	r4, [r4, #0]
 8005856:	2c00      	cmp	r4, #0
 8005858:	d1f7      	bne.n	800584a <_fwalk_reent+0xe>
 800585a:	4638      	mov	r0, r7
 800585c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005860:	89ab      	ldrh	r3, [r5, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d907      	bls.n	8005876 <_fwalk_reent+0x3a>
 8005866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800586a:	3301      	adds	r3, #1
 800586c:	d003      	beq.n	8005876 <_fwalk_reent+0x3a>
 800586e:	4629      	mov	r1, r5
 8005870:	4630      	mov	r0, r6
 8005872:	47c0      	blx	r8
 8005874:	4307      	orrs	r7, r0
 8005876:	3568      	adds	r5, #104	; 0x68
 8005878:	e7e9      	b.n	800584e <_fwalk_reent+0x12>
	...

0800587c <_localeconv_r>:
 800587c:	4800      	ldr	r0, [pc, #0]	; (8005880 <_localeconv_r+0x4>)
 800587e:	4770      	bx	lr
 8005880:	20000160 	.word	0x20000160

08005884 <__retarget_lock_init_recursive>:
 8005884:	4770      	bx	lr

08005886 <__retarget_lock_acquire_recursive>:
 8005886:	4770      	bx	lr

08005888 <__retarget_lock_release_recursive>:
 8005888:	4770      	bx	lr
	...

0800588c <malloc>:
 800588c:	4b02      	ldr	r3, [pc, #8]	; (8005898 <malloc+0xc>)
 800588e:	4601      	mov	r1, r0
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	f000 bbe1 	b.w	8006058 <_malloc_r>
 8005896:	bf00      	nop
 8005898:	2000000c 	.word	0x2000000c

0800589c <_Balloc>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058a0:	4604      	mov	r4, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	b976      	cbnz	r6, 80058c4 <_Balloc+0x28>
 80058a6:	2010      	movs	r0, #16
 80058a8:	f7ff fff0 	bl	800588c <malloc>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6260      	str	r0, [r4, #36]	; 0x24
 80058b0:	b920      	cbnz	r0, 80058bc <_Balloc+0x20>
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <_Balloc+0x78>)
 80058b4:	4818      	ldr	r0, [pc, #96]	; (8005918 <_Balloc+0x7c>)
 80058b6:	2166      	movs	r1, #102	; 0x66
 80058b8:	f000 fea8 	bl	800660c <__assert_func>
 80058bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058c0:	6006      	str	r6, [r0, #0]
 80058c2:	60c6      	str	r6, [r0, #12]
 80058c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058c6:	68f3      	ldr	r3, [r6, #12]
 80058c8:	b183      	cbz	r3, 80058ec <_Balloc+0x50>
 80058ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058d2:	b9b8      	cbnz	r0, 8005904 <_Balloc+0x68>
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f605 	lsl.w	r6, r1, r5
 80058da:	1d72      	adds	r2, r6, #5
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 fb5a 	bl	8005f98 <_calloc_r>
 80058e4:	b160      	cbz	r0, 8005900 <_Balloc+0x64>
 80058e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ea:	e00e      	b.n	800590a <_Balloc+0x6e>
 80058ec:	2221      	movs	r2, #33	; 0x21
 80058ee:	2104      	movs	r1, #4
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fb51 	bl	8005f98 <_calloc_r>
 80058f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f8:	60f0      	str	r0, [r6, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e4      	bne.n	80058ca <_Balloc+0x2e>
 8005900:	2000      	movs	r0, #0
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	6802      	ldr	r2, [r0, #0]
 8005906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800590a:	2300      	movs	r3, #0
 800590c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005910:	e7f7      	b.n	8005902 <_Balloc+0x66>
 8005912:	bf00      	nop
 8005914:	08006b11 	.word	0x08006b11
 8005918:	08006bf8 	.word	0x08006bf8

0800591c <_Bfree>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005920:	4605      	mov	r5, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b976      	cbnz	r6, 8005944 <_Bfree+0x28>
 8005926:	2010      	movs	r0, #16
 8005928:	f7ff ffb0 	bl	800588c <malloc>
 800592c:	4602      	mov	r2, r0
 800592e:	6268      	str	r0, [r5, #36]	; 0x24
 8005930:	b920      	cbnz	r0, 800593c <_Bfree+0x20>
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <_Bfree+0x3c>)
 8005934:	4809      	ldr	r0, [pc, #36]	; (800595c <_Bfree+0x40>)
 8005936:	218a      	movs	r1, #138	; 0x8a
 8005938:	f000 fe68 	bl	800660c <__assert_func>
 800593c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005940:	6006      	str	r6, [r0, #0]
 8005942:	60c6      	str	r6, [r0, #12]
 8005944:	b13c      	cbz	r4, 8005956 <_Bfree+0x3a>
 8005946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005948:	6862      	ldr	r2, [r4, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005950:	6021      	str	r1, [r4, #0]
 8005952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	08006b11 	.word	0x08006b11
 800595c:	08006bf8 	.word	0x08006bf8

08005960 <__multadd>:
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	690e      	ldr	r6, [r1, #16]
 8005966:	4607      	mov	r7, r0
 8005968:	4698      	mov	r8, r3
 800596a:	460c      	mov	r4, r1
 800596c:	f101 0014 	add.w	r0, r1, #20
 8005970:	2300      	movs	r3, #0
 8005972:	6805      	ldr	r5, [r0, #0]
 8005974:	b2a9      	uxth	r1, r5
 8005976:	fb02 8101 	mla	r1, r2, r1, r8
 800597a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800597e:	0c2d      	lsrs	r5, r5, #16
 8005980:	fb02 c505 	mla	r5, r2, r5, ip
 8005984:	b289      	uxth	r1, r1
 8005986:	3301      	adds	r3, #1
 8005988:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800598c:	429e      	cmp	r6, r3
 800598e:	f840 1b04 	str.w	r1, [r0], #4
 8005992:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005996:	dcec      	bgt.n	8005972 <__multadd+0x12>
 8005998:	f1b8 0f00 	cmp.w	r8, #0
 800599c:	d022      	beq.n	80059e4 <__multadd+0x84>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	42b3      	cmp	r3, r6
 80059a2:	dc19      	bgt.n	80059d8 <__multadd+0x78>
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4638      	mov	r0, r7
 80059a8:	3101      	adds	r1, #1
 80059aa:	f7ff ff77 	bl	800589c <_Balloc>
 80059ae:	4605      	mov	r5, r0
 80059b0:	b928      	cbnz	r0, 80059be <__multadd+0x5e>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <__multadd+0x8c>)
 80059b6:	480e      	ldr	r0, [pc, #56]	; (80059f0 <__multadd+0x90>)
 80059b8:	21b5      	movs	r1, #181	; 0xb5
 80059ba:	f000 fe27 	bl	800660c <__assert_func>
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	3202      	adds	r2, #2
 80059c2:	f104 010c 	add.w	r1, r4, #12
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	300c      	adds	r0, #12
 80059ca:	f7fe fb4f 	bl	800406c <memcpy>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff ffa3 	bl	800591c <_Bfree>
 80059d6:	462c      	mov	r4, r5
 80059d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80059dc:	3601      	adds	r6, #1
 80059de:	f8c3 8014 	str.w	r8, [r3, #20]
 80059e2:	6126      	str	r6, [r4, #16]
 80059e4:	4620      	mov	r0, r4
 80059e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ea:	bf00      	nop
 80059ec:	08006b87 	.word	0x08006b87
 80059f0:	08006bf8 	.word	0x08006bf8

080059f4 <__hi0bits>:
 80059f4:	0c03      	lsrs	r3, r0, #16
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	b9d3      	cbnz	r3, 8005a30 <__hi0bits+0x3c>
 80059fa:	0400      	lsls	r0, r0, #16
 80059fc:	2310      	movs	r3, #16
 80059fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a02:	bf04      	itt	eq
 8005a04:	0200      	lsleq	r0, r0, #8
 8005a06:	3308      	addeq	r3, #8
 8005a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a0c:	bf04      	itt	eq
 8005a0e:	0100      	lsleq	r0, r0, #4
 8005a10:	3304      	addeq	r3, #4
 8005a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a16:	bf04      	itt	eq
 8005a18:	0080      	lsleq	r0, r0, #2
 8005a1a:	3302      	addeq	r3, #2
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	db05      	blt.n	8005a2c <__hi0bits+0x38>
 8005a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a24:	f103 0301 	add.w	r3, r3, #1
 8005a28:	bf08      	it	eq
 8005a2a:	2320      	moveq	r3, #32
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	4770      	bx	lr
 8005a30:	2300      	movs	r3, #0
 8005a32:	e7e4      	b.n	80059fe <__hi0bits+0xa>

08005a34 <__lo0bits>:
 8005a34:	6803      	ldr	r3, [r0, #0]
 8005a36:	f013 0207 	ands.w	r2, r3, #7
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	d00b      	beq.n	8005a56 <__lo0bits+0x22>
 8005a3e:	07da      	lsls	r2, r3, #31
 8005a40:	d424      	bmi.n	8005a8c <__lo0bits+0x58>
 8005a42:	0798      	lsls	r0, r3, #30
 8005a44:	bf49      	itett	mi
 8005a46:	085b      	lsrmi	r3, r3, #1
 8005a48:	089b      	lsrpl	r3, r3, #2
 8005a4a:	2001      	movmi	r0, #1
 8005a4c:	600b      	strmi	r3, [r1, #0]
 8005a4e:	bf5c      	itt	pl
 8005a50:	600b      	strpl	r3, [r1, #0]
 8005a52:	2002      	movpl	r0, #2
 8005a54:	4770      	bx	lr
 8005a56:	b298      	uxth	r0, r3
 8005a58:	b9b0      	cbnz	r0, 8005a88 <__lo0bits+0x54>
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	2010      	movs	r0, #16
 8005a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a62:	bf04      	itt	eq
 8005a64:	0a1b      	lsreq	r3, r3, #8
 8005a66:	3008      	addeq	r0, #8
 8005a68:	071a      	lsls	r2, r3, #28
 8005a6a:	bf04      	itt	eq
 8005a6c:	091b      	lsreq	r3, r3, #4
 8005a6e:	3004      	addeq	r0, #4
 8005a70:	079a      	lsls	r2, r3, #30
 8005a72:	bf04      	itt	eq
 8005a74:	089b      	lsreq	r3, r3, #2
 8005a76:	3002      	addeq	r0, #2
 8005a78:	07da      	lsls	r2, r3, #31
 8005a7a:	d403      	bmi.n	8005a84 <__lo0bits+0x50>
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	f100 0001 	add.w	r0, r0, #1
 8005a82:	d005      	beq.n	8005a90 <__lo0bits+0x5c>
 8005a84:	600b      	str	r3, [r1, #0]
 8005a86:	4770      	bx	lr
 8005a88:	4610      	mov	r0, r2
 8005a8a:	e7e8      	b.n	8005a5e <__lo0bits+0x2a>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	4770      	bx	lr
 8005a90:	2020      	movs	r0, #32
 8005a92:	4770      	bx	lr

08005a94 <__i2b>:
 8005a94:	b510      	push	{r4, lr}
 8005a96:	460c      	mov	r4, r1
 8005a98:	2101      	movs	r1, #1
 8005a9a:	f7ff feff 	bl	800589c <_Balloc>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	b928      	cbnz	r0, 8005aae <__i2b+0x1a>
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <__i2b+0x24>)
 8005aa4:	4805      	ldr	r0, [pc, #20]	; (8005abc <__i2b+0x28>)
 8005aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005aaa:	f000 fdaf 	bl	800660c <__assert_func>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	6144      	str	r4, [r0, #20]
 8005ab2:	6103      	str	r3, [r0, #16]
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08006b87 	.word	0x08006b87
 8005abc:	08006bf8 	.word	0x08006bf8

08005ac0 <__multiply>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	690a      	ldr	r2, [r1, #16]
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bfb8      	it	lt
 8005ace:	460b      	movlt	r3, r1
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	bfbc      	itt	lt
 8005ad4:	4625      	movlt	r5, r4
 8005ad6:	461c      	movlt	r4, r3
 8005ad8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005adc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ae0:	68ab      	ldr	r3, [r5, #8]
 8005ae2:	6869      	ldr	r1, [r5, #4]
 8005ae4:	eb0a 0709 	add.w	r7, sl, r9
 8005ae8:	42bb      	cmp	r3, r7
 8005aea:	b085      	sub	sp, #20
 8005aec:	bfb8      	it	lt
 8005aee:	3101      	addlt	r1, #1
 8005af0:	f7ff fed4 	bl	800589c <_Balloc>
 8005af4:	b930      	cbnz	r0, 8005b04 <__multiply+0x44>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b42      	ldr	r3, [pc, #264]	; (8005c04 <__multiply+0x144>)
 8005afa:	4843      	ldr	r0, [pc, #268]	; (8005c08 <__multiply+0x148>)
 8005afc:	f240 115d 	movw	r1, #349	; 0x15d
 8005b00:	f000 fd84 	bl	800660c <__assert_func>
 8005b04:	f100 0614 	add.w	r6, r0, #20
 8005b08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005b0c:	4633      	mov	r3, r6
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4543      	cmp	r3, r8
 8005b12:	d31e      	bcc.n	8005b52 <__multiply+0x92>
 8005b14:	f105 0c14 	add.w	ip, r5, #20
 8005b18:	f104 0314 	add.w	r3, r4, #20
 8005b1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005b20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005b24:	9202      	str	r2, [sp, #8]
 8005b26:	ebac 0205 	sub.w	r2, ip, r5
 8005b2a:	3a15      	subs	r2, #21
 8005b2c:	f022 0203 	bic.w	r2, r2, #3
 8005b30:	3204      	adds	r2, #4
 8005b32:	f105 0115 	add.w	r1, r5, #21
 8005b36:	458c      	cmp	ip, r1
 8005b38:	bf38      	it	cc
 8005b3a:	2204      	movcc	r2, #4
 8005b3c:	9201      	str	r2, [sp, #4]
 8005b3e:	9a02      	ldr	r2, [sp, #8]
 8005b40:	9303      	str	r3, [sp, #12]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d808      	bhi.n	8005b58 <__multiply+0x98>
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	dc55      	bgt.n	8005bf6 <__multiply+0x136>
 8005b4a:	6107      	str	r7, [r0, #16]
 8005b4c:	b005      	add	sp, #20
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	f843 2b04 	str.w	r2, [r3], #4
 8005b56:	e7db      	b.n	8005b10 <__multiply+0x50>
 8005b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b5c:	f1ba 0f00 	cmp.w	sl, #0
 8005b60:	d020      	beq.n	8005ba4 <__multiply+0xe4>
 8005b62:	f105 0e14 	add.w	lr, r5, #20
 8005b66:	46b1      	mov	r9, r6
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b6e:	f8d9 b000 	ldr.w	fp, [r9]
 8005b72:	b2a1      	uxth	r1, r4
 8005b74:	fa1f fb8b 	uxth.w	fp, fp
 8005b78:	fb0a b101 	mla	r1, sl, r1, fp
 8005b7c:	4411      	add	r1, r2
 8005b7e:	f8d9 2000 	ldr.w	r2, [r9]
 8005b82:	0c24      	lsrs	r4, r4, #16
 8005b84:	0c12      	lsrs	r2, r2, #16
 8005b86:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b8e:	b289      	uxth	r1, r1
 8005b90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b94:	45f4      	cmp	ip, lr
 8005b96:	f849 1b04 	str.w	r1, [r9], #4
 8005b9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b9e:	d8e4      	bhi.n	8005b6a <__multiply+0xaa>
 8005ba0:	9901      	ldr	r1, [sp, #4]
 8005ba2:	5072      	str	r2, [r6, r1]
 8005ba4:	9a03      	ldr	r2, [sp, #12]
 8005ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005baa:	3304      	adds	r3, #4
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	d01f      	beq.n	8005bf2 <__multiply+0x132>
 8005bb2:	6834      	ldr	r4, [r6, #0]
 8005bb4:	f105 0114 	add.w	r1, r5, #20
 8005bb8:	46b6      	mov	lr, r6
 8005bba:	f04f 0a00 	mov.w	sl, #0
 8005bbe:	880a      	ldrh	r2, [r1, #0]
 8005bc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005bc4:	fb09 b202 	mla	r2, r9, r2, fp
 8005bc8:	4492      	add	sl, r2
 8005bca:	b2a4      	uxth	r4, r4
 8005bcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005bd0:	f84e 4b04 	str.w	r4, [lr], #4
 8005bd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8005bd8:	f8be 2000 	ldrh.w	r2, [lr]
 8005bdc:	0c24      	lsrs	r4, r4, #16
 8005bde:	fb09 2404 	mla	r4, r9, r4, r2
 8005be2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005be6:	458c      	cmp	ip, r1
 8005be8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bec:	d8e7      	bhi.n	8005bbe <__multiply+0xfe>
 8005bee:	9a01      	ldr	r2, [sp, #4]
 8005bf0:	50b4      	str	r4, [r6, r2]
 8005bf2:	3604      	adds	r6, #4
 8005bf4:	e7a3      	b.n	8005b3e <__multiply+0x7e>
 8005bf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1a5      	bne.n	8005b4a <__multiply+0x8a>
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	e7a1      	b.n	8005b46 <__multiply+0x86>
 8005c02:	bf00      	nop
 8005c04:	08006b87 	.word	0x08006b87
 8005c08:	08006bf8 	.word	0x08006bf8

08005c0c <__pow5mult>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	4615      	mov	r5, r2
 8005c12:	f012 0203 	ands.w	r2, r2, #3
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	d007      	beq.n	8005c2c <__pow5mult+0x20>
 8005c1c:	4c25      	ldr	r4, [pc, #148]	; (8005cb4 <__pow5mult+0xa8>)
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	2300      	movs	r3, #0
 8005c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c26:	f7ff fe9b 	bl	8005960 <__multadd>
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	10ad      	asrs	r5, r5, #2
 8005c2e:	d03d      	beq.n	8005cac <__pow5mult+0xa0>
 8005c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c32:	b97c      	cbnz	r4, 8005c54 <__pow5mult+0x48>
 8005c34:	2010      	movs	r0, #16
 8005c36:	f7ff fe29 	bl	800588c <malloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8005c3e:	b928      	cbnz	r0, 8005c4c <__pow5mult+0x40>
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <__pow5mult+0xac>)
 8005c42:	481e      	ldr	r0, [pc, #120]	; (8005cbc <__pow5mult+0xb0>)
 8005c44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c48:	f000 fce0 	bl	800660c <__assert_func>
 8005c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c50:	6004      	str	r4, [r0, #0]
 8005c52:	60c4      	str	r4, [r0, #12]
 8005c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c5c:	b94c      	cbnz	r4, 8005c72 <__pow5mult+0x66>
 8005c5e:	f240 2171 	movw	r1, #625	; 0x271
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff ff16 	bl	8005a94 <__i2b>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c6e:	4604      	mov	r4, r0
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	f04f 0900 	mov.w	r9, #0
 8005c76:	07eb      	lsls	r3, r5, #31
 8005c78:	d50a      	bpl.n	8005c90 <__pow5mult+0x84>
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff ff1e 	bl	8005ac0 <__multiply>
 8005c84:	4639      	mov	r1, r7
 8005c86:	4680      	mov	r8, r0
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff fe47 	bl	800591c <_Bfree>
 8005c8e:	4647      	mov	r7, r8
 8005c90:	106d      	asrs	r5, r5, #1
 8005c92:	d00b      	beq.n	8005cac <__pow5mult+0xa0>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	b938      	cbnz	r0, 8005ca8 <__pow5mult+0x9c>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ff0f 	bl	8005ac0 <__multiply>
 8005ca2:	6020      	str	r0, [r4, #0]
 8005ca4:	f8c0 9000 	str.w	r9, [r0]
 8005ca8:	4604      	mov	r4, r0
 8005caa:	e7e4      	b.n	8005c76 <__pow5mult+0x6a>
 8005cac:	4638      	mov	r0, r7
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08006d48 	.word	0x08006d48
 8005cb8:	08006b11 	.word	0x08006b11
 8005cbc:	08006bf8 	.word	0x08006bf8

08005cc0 <__lshift>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	6849      	ldr	r1, [r1, #4]
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cce:	68a3      	ldr	r3, [r4, #8]
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cd8:	f108 0601 	add.w	r6, r8, #1
 8005cdc:	42b3      	cmp	r3, r6
 8005cde:	db0b      	blt.n	8005cf8 <__lshift+0x38>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff fddb 	bl	800589c <_Balloc>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	b948      	cbnz	r0, 8005cfe <__lshift+0x3e>
 8005cea:	4602      	mov	r2, r0
 8005cec:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <__lshift+0xd0>)
 8005cee:	4829      	ldr	r0, [pc, #164]	; (8005d94 <__lshift+0xd4>)
 8005cf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cf4:	f000 fc8a 	bl	800660c <__assert_func>
 8005cf8:	3101      	adds	r1, #1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	e7ee      	b.n	8005cdc <__lshift+0x1c>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f100 0114 	add.w	r1, r0, #20
 8005d04:	f100 0210 	add.w	r2, r0, #16
 8005d08:	4618      	mov	r0, r3
 8005d0a:	4553      	cmp	r3, sl
 8005d0c:	db33      	blt.n	8005d76 <__lshift+0xb6>
 8005d0e:	6920      	ldr	r0, [r4, #16]
 8005d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d14:	f104 0314 	add.w	r3, r4, #20
 8005d18:	f019 091f 	ands.w	r9, r9, #31
 8005d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d24:	d02b      	beq.n	8005d7e <__lshift+0xbe>
 8005d26:	f1c9 0e20 	rsb	lr, r9, #32
 8005d2a:	468a      	mov	sl, r1
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	fa00 f009 	lsl.w	r0, r0, r9
 8005d34:	4302      	orrs	r2, r0
 8005d36:	f84a 2b04 	str.w	r2, [sl], #4
 8005d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3e:	459c      	cmp	ip, r3
 8005d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d44:	d8f3      	bhi.n	8005d2e <__lshift+0x6e>
 8005d46:	ebac 0304 	sub.w	r3, ip, r4
 8005d4a:	3b15      	subs	r3, #21
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	3304      	adds	r3, #4
 8005d52:	f104 0015 	add.w	r0, r4, #21
 8005d56:	4584      	cmp	ip, r0
 8005d58:	bf38      	it	cc
 8005d5a:	2304      	movcc	r3, #4
 8005d5c:	50ca      	str	r2, [r1, r3]
 8005d5e:	b10a      	cbz	r2, 8005d64 <__lshift+0xa4>
 8005d60:	f108 0602 	add.w	r6, r8, #2
 8005d64:	3e01      	subs	r6, #1
 8005d66:	4638      	mov	r0, r7
 8005d68:	612e      	str	r6, [r5, #16]
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	f7ff fdd6 	bl	800591c <_Bfree>
 8005d70:	4628      	mov	r0, r5
 8005d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	e7c5      	b.n	8005d0a <__lshift+0x4a>
 8005d7e:	3904      	subs	r1, #4
 8005d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d88:	459c      	cmp	ip, r3
 8005d8a:	d8f9      	bhi.n	8005d80 <__lshift+0xc0>
 8005d8c:	e7ea      	b.n	8005d64 <__lshift+0xa4>
 8005d8e:	bf00      	nop
 8005d90:	08006b87 	.word	0x08006b87
 8005d94:	08006bf8 	.word	0x08006bf8

08005d98 <__mcmp>:
 8005d98:	b530      	push	{r4, r5, lr}
 8005d9a:	6902      	ldr	r2, [r0, #16]
 8005d9c:	690c      	ldr	r4, [r1, #16]
 8005d9e:	1b12      	subs	r2, r2, r4
 8005da0:	d10e      	bne.n	8005dc0 <__mcmp+0x28>
 8005da2:	f100 0314 	add.w	r3, r0, #20
 8005da6:	3114      	adds	r1, #20
 8005da8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005dac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005db0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005db4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005db8:	42a5      	cmp	r5, r4
 8005dba:	d003      	beq.n	8005dc4 <__mcmp+0x2c>
 8005dbc:	d305      	bcc.n	8005dca <__mcmp+0x32>
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	d3f3      	bcc.n	8005db0 <__mcmp+0x18>
 8005dc8:	e7fa      	b.n	8005dc0 <__mcmp+0x28>
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	e7f7      	b.n	8005dc0 <__mcmp+0x28>

08005dd0 <__mdiff>:
 8005dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4617      	mov	r7, r2
 8005dde:	f7ff ffdb 	bl	8005d98 <__mcmp>
 8005de2:	1e05      	subs	r5, r0, #0
 8005de4:	d110      	bne.n	8005e08 <__mdiff+0x38>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff fd57 	bl	800589c <_Balloc>
 8005dee:	b930      	cbnz	r0, 8005dfe <__mdiff+0x2e>
 8005df0:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <__mdiff+0x108>)
 8005df2:	4602      	mov	r2, r0
 8005df4:	f240 2132 	movw	r1, #562	; 0x232
 8005df8:	4838      	ldr	r0, [pc, #224]	; (8005edc <__mdiff+0x10c>)
 8005dfa:	f000 fc07 	bl	800660c <__assert_func>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	bfa4      	itt	ge
 8005e0a:	463b      	movge	r3, r7
 8005e0c:	4627      	movge	r7, r4
 8005e0e:	4630      	mov	r0, r6
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	bfa6      	itte	ge
 8005e14:	461c      	movge	r4, r3
 8005e16:	2500      	movge	r5, #0
 8005e18:	2501      	movlt	r5, #1
 8005e1a:	f7ff fd3f 	bl	800589c <_Balloc>
 8005e1e:	b920      	cbnz	r0, 8005e2a <__mdiff+0x5a>
 8005e20:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <__mdiff+0x108>)
 8005e22:	4602      	mov	r2, r0
 8005e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e28:	e7e6      	b.n	8005df8 <__mdiff+0x28>
 8005e2a:	693e      	ldr	r6, [r7, #16]
 8005e2c:	60c5      	str	r5, [r0, #12]
 8005e2e:	6925      	ldr	r5, [r4, #16]
 8005e30:	f107 0114 	add.w	r1, r7, #20
 8005e34:	f104 0914 	add.w	r9, r4, #20
 8005e38:	f100 0e14 	add.w	lr, r0, #20
 8005e3c:	f107 0210 	add.w	r2, r7, #16
 8005e40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005e44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005e48:	46f2      	mov	sl, lr
 8005e4a:	2700      	movs	r7, #0
 8005e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e54:	fa1f f883 	uxth.w	r8, r3
 8005e58:	fa17 f78b 	uxtah	r7, r7, fp
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	eba7 0808 	sub.w	r8, r7, r8
 8005e62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e6a:	fa1f f888 	uxth.w	r8, r8
 8005e6e:	141f      	asrs	r7, r3, #16
 8005e70:	454d      	cmp	r5, r9
 8005e72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e76:	f84a 3b04 	str.w	r3, [sl], #4
 8005e7a:	d8e7      	bhi.n	8005e4c <__mdiff+0x7c>
 8005e7c:	1b2b      	subs	r3, r5, r4
 8005e7e:	3b15      	subs	r3, #21
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	3304      	adds	r3, #4
 8005e86:	3415      	adds	r4, #21
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	bf38      	it	cc
 8005e8c:	2304      	movcc	r3, #4
 8005e8e:	4419      	add	r1, r3
 8005e90:	4473      	add	r3, lr
 8005e92:	469e      	mov	lr, r3
 8005e94:	460d      	mov	r5, r1
 8005e96:	4565      	cmp	r5, ip
 8005e98:	d30e      	bcc.n	8005eb8 <__mdiff+0xe8>
 8005e9a:	f10c 0203 	add.w	r2, ip, #3
 8005e9e:	1a52      	subs	r2, r2, r1
 8005ea0:	f022 0203 	bic.w	r2, r2, #3
 8005ea4:	3903      	subs	r1, #3
 8005ea6:	458c      	cmp	ip, r1
 8005ea8:	bf38      	it	cc
 8005eaa:	2200      	movcc	r2, #0
 8005eac:	441a      	add	r2, r3
 8005eae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005eb2:	b17b      	cbz	r3, 8005ed4 <__mdiff+0x104>
 8005eb4:	6106      	str	r6, [r0, #16]
 8005eb6:	e7a5      	b.n	8005e04 <__mdiff+0x34>
 8005eb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ebc:	fa17 f488 	uxtah	r4, r7, r8
 8005ec0:	1422      	asrs	r2, r4, #16
 8005ec2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005ec6:	b2a4      	uxth	r4, r4
 8005ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ecc:	f84e 4b04 	str.w	r4, [lr], #4
 8005ed0:	1417      	asrs	r7, r2, #16
 8005ed2:	e7e0      	b.n	8005e96 <__mdiff+0xc6>
 8005ed4:	3e01      	subs	r6, #1
 8005ed6:	e7ea      	b.n	8005eae <__mdiff+0xde>
 8005ed8:	08006b87 	.word	0x08006b87
 8005edc:	08006bf8 	.word	0x08006bf8

08005ee0 <__d2b>:
 8005ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	ec57 6b10 	vmov	r6, r7, d0
 8005eec:	4690      	mov	r8, r2
 8005eee:	f7ff fcd5 	bl	800589c <_Balloc>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	b930      	cbnz	r0, 8005f04 <__d2b+0x24>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <__d2b+0xb0>)
 8005efa:	4826      	ldr	r0, [pc, #152]	; (8005f94 <__d2b+0xb4>)
 8005efc:	f240 310a 	movw	r1, #778	; 0x30a
 8005f00:	f000 fb84 	bl	800660c <__assert_func>
 8005f04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f0c:	bb35      	cbnz	r5, 8005f5c <__d2b+0x7c>
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	d028      	beq.n	8005f66 <__d2b+0x86>
 8005f14:	4668      	mov	r0, sp
 8005f16:	9600      	str	r6, [sp, #0]
 8005f18:	f7ff fd8c 	bl	8005a34 <__lo0bits>
 8005f1c:	9900      	ldr	r1, [sp, #0]
 8005f1e:	b300      	cbz	r0, 8005f62 <__d2b+0x82>
 8005f20:	9a01      	ldr	r2, [sp, #4]
 8005f22:	f1c0 0320 	rsb	r3, r0, #32
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	40c2      	lsrs	r2, r0
 8005f2e:	6163      	str	r3, [r4, #20]
 8005f30:	9201      	str	r2, [sp, #4]
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf14      	ite	ne
 8005f3a:	2202      	movne	r2, #2
 8005f3c:	2201      	moveq	r2, #1
 8005f3e:	6122      	str	r2, [r4, #16]
 8005f40:	b1d5      	cbz	r5, 8005f78 <__d2b+0x98>
 8005f42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f46:	4405      	add	r5, r0
 8005f48:	f8c9 5000 	str.w	r5, [r9]
 8005f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f50:	f8c8 0000 	str.w	r0, [r8]
 8005f54:	4620      	mov	r0, r4
 8005f56:	b003      	add	sp, #12
 8005f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f60:	e7d5      	b.n	8005f0e <__d2b+0x2e>
 8005f62:	6161      	str	r1, [r4, #20]
 8005f64:	e7e5      	b.n	8005f32 <__d2b+0x52>
 8005f66:	a801      	add	r0, sp, #4
 8005f68:	f7ff fd64 	bl	8005a34 <__lo0bits>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	6163      	str	r3, [r4, #20]
 8005f70:	2201      	movs	r2, #1
 8005f72:	6122      	str	r2, [r4, #16]
 8005f74:	3020      	adds	r0, #32
 8005f76:	e7e3      	b.n	8005f40 <__d2b+0x60>
 8005f78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f80:	f8c9 0000 	str.w	r0, [r9]
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	f7ff fd35 	bl	80059f4 <__hi0bits>
 8005f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f8e:	e7df      	b.n	8005f50 <__d2b+0x70>
 8005f90:	08006b87 	.word	0x08006b87
 8005f94:	08006bf8 	.word	0x08006bf8

08005f98 <_calloc_r>:
 8005f98:	b513      	push	{r0, r1, r4, lr}
 8005f9a:	434a      	muls	r2, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	f000 f85a 	bl	8006058 <_malloc_r>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	b118      	cbz	r0, 8005fb0 <_calloc_r+0x18>
 8005fa8:	9a01      	ldr	r2, [sp, #4]
 8005faa:	2100      	movs	r1, #0
 8005fac:	f7fe f86c 	bl	8004088 <memset>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd10      	pop	{r4, pc}
	...

08005fb8 <_free_r>:
 8005fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d048      	beq.n	8006050 <_free_r+0x98>
 8005fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc2:	9001      	str	r0, [sp, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005fca:	bfb8      	it	lt
 8005fcc:	18e4      	addlt	r4, r4, r3
 8005fce:	f000 fca7 	bl	8006920 <__malloc_lock>
 8005fd2:	4a20      	ldr	r2, [pc, #128]	; (8006054 <_free_r+0x9c>)
 8005fd4:	9801      	ldr	r0, [sp, #4]
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	4615      	mov	r5, r2
 8005fda:	b933      	cbnz	r3, 8005fea <_free_r+0x32>
 8005fdc:	6063      	str	r3, [r4, #4]
 8005fde:	6014      	str	r4, [r2, #0]
 8005fe0:	b003      	add	sp, #12
 8005fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fe6:	f000 bca1 	b.w	800692c <__malloc_unlock>
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	d90b      	bls.n	8006006 <_free_r+0x4e>
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	1862      	adds	r2, r4, r1
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bf04      	itt	eq
 8005ff6:	681a      	ldreq	r2, [r3, #0]
 8005ff8:	685b      	ldreq	r3, [r3, #4]
 8005ffa:	6063      	str	r3, [r4, #4]
 8005ffc:	bf04      	itt	eq
 8005ffe:	1852      	addeq	r2, r2, r1
 8006000:	6022      	streq	r2, [r4, #0]
 8006002:	602c      	str	r4, [r5, #0]
 8006004:	e7ec      	b.n	8005fe0 <_free_r+0x28>
 8006006:	461a      	mov	r2, r3
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b10b      	cbz	r3, 8006010 <_free_r+0x58>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d9fa      	bls.n	8006006 <_free_r+0x4e>
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	1855      	adds	r5, r2, r1
 8006014:	42a5      	cmp	r5, r4
 8006016:	d10b      	bne.n	8006030 <_free_r+0x78>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	4421      	add	r1, r4
 800601c:	1854      	adds	r4, r2, r1
 800601e:	42a3      	cmp	r3, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	d1dd      	bne.n	8005fe0 <_free_r+0x28>
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6053      	str	r3, [r2, #4]
 800602a:	4421      	add	r1, r4
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	e7d7      	b.n	8005fe0 <_free_r+0x28>
 8006030:	d902      	bls.n	8006038 <_free_r+0x80>
 8006032:	230c      	movs	r3, #12
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	e7d3      	b.n	8005fe0 <_free_r+0x28>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf04      	itt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	bf04      	itt	eq
 8006048:	1949      	addeq	r1, r1, r5
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7c7      	b.n	8005fe0 <_free_r+0x28>
 8006050:	b003      	add	sp, #12
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	200001fc 	.word	0x200001fc

08006058 <_malloc_r>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	1ccd      	adds	r5, r1, #3
 800605c:	f025 0503 	bic.w	r5, r5, #3
 8006060:	3508      	adds	r5, #8
 8006062:	2d0c      	cmp	r5, #12
 8006064:	bf38      	it	cc
 8006066:	250c      	movcc	r5, #12
 8006068:	2d00      	cmp	r5, #0
 800606a:	4606      	mov	r6, r0
 800606c:	db01      	blt.n	8006072 <_malloc_r+0x1a>
 800606e:	42a9      	cmp	r1, r5
 8006070:	d903      	bls.n	800607a <_malloc_r+0x22>
 8006072:	230c      	movs	r3, #12
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	2000      	movs	r0, #0
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607a:	f000 fc51 	bl	8006920 <__malloc_lock>
 800607e:	4921      	ldr	r1, [pc, #132]	; (8006104 <_malloc_r+0xac>)
 8006080:	680a      	ldr	r2, [r1, #0]
 8006082:	4614      	mov	r4, r2
 8006084:	b99c      	cbnz	r4, 80060ae <_malloc_r+0x56>
 8006086:	4f20      	ldr	r7, [pc, #128]	; (8006108 <_malloc_r+0xb0>)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	b923      	cbnz	r3, 8006096 <_malloc_r+0x3e>
 800608c:	4621      	mov	r1, r4
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f996 	bl	80063c0 <_sbrk_r>
 8006094:	6038      	str	r0, [r7, #0]
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f991 	bl	80063c0 <_sbrk_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d123      	bne.n	80060ea <_malloc_r+0x92>
 80060a2:	230c      	movs	r3, #12
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	4630      	mov	r0, r6
 80060a8:	f000 fc40 	bl	800692c <__malloc_unlock>
 80060ac:	e7e3      	b.n	8006076 <_malloc_r+0x1e>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	1b5b      	subs	r3, r3, r5
 80060b2:	d417      	bmi.n	80060e4 <_malloc_r+0x8c>
 80060b4:	2b0b      	cmp	r3, #11
 80060b6:	d903      	bls.n	80060c0 <_malloc_r+0x68>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	441c      	add	r4, r3
 80060bc:	6025      	str	r5, [r4, #0]
 80060be:	e004      	b.n	80060ca <_malloc_r+0x72>
 80060c0:	6863      	ldr	r3, [r4, #4]
 80060c2:	42a2      	cmp	r2, r4
 80060c4:	bf0c      	ite	eq
 80060c6:	600b      	streq	r3, [r1, #0]
 80060c8:	6053      	strne	r3, [r2, #4]
 80060ca:	4630      	mov	r0, r6
 80060cc:	f000 fc2e 	bl	800692c <__malloc_unlock>
 80060d0:	f104 000b 	add.w	r0, r4, #11
 80060d4:	1d23      	adds	r3, r4, #4
 80060d6:	f020 0007 	bic.w	r0, r0, #7
 80060da:	1ac2      	subs	r2, r0, r3
 80060dc:	d0cc      	beq.n	8006078 <_malloc_r+0x20>
 80060de:	1a1b      	subs	r3, r3, r0
 80060e0:	50a3      	str	r3, [r4, r2]
 80060e2:	e7c9      	b.n	8006078 <_malloc_r+0x20>
 80060e4:	4622      	mov	r2, r4
 80060e6:	6864      	ldr	r4, [r4, #4]
 80060e8:	e7cc      	b.n	8006084 <_malloc_r+0x2c>
 80060ea:	1cc4      	adds	r4, r0, #3
 80060ec:	f024 0403 	bic.w	r4, r4, #3
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d0e3      	beq.n	80060bc <_malloc_r+0x64>
 80060f4:	1a21      	subs	r1, r4, r0
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f962 	bl	80063c0 <_sbrk_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1dd      	bne.n	80060bc <_malloc_r+0x64>
 8006100:	e7cf      	b.n	80060a2 <_malloc_r+0x4a>
 8006102:	bf00      	nop
 8006104:	200001fc 	.word	0x200001fc
 8006108:	20000200 	.word	0x20000200

0800610c <__sfputc_r>:
 800610c:	6893      	ldr	r3, [r2, #8]
 800610e:	3b01      	subs	r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	b410      	push	{r4}
 8006114:	6093      	str	r3, [r2, #8]
 8006116:	da08      	bge.n	800612a <__sfputc_r+0x1e>
 8006118:	6994      	ldr	r4, [r2, #24]
 800611a:	42a3      	cmp	r3, r4
 800611c:	db01      	blt.n	8006122 <__sfputc_r+0x16>
 800611e:	290a      	cmp	r1, #10
 8006120:	d103      	bne.n	800612a <__sfputc_r+0x1e>
 8006122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006126:	f000 b99f 	b.w	8006468 <__swbuf_r>
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	1c58      	adds	r0, r3, #1
 800612e:	6010      	str	r0, [r2, #0]
 8006130:	7019      	strb	r1, [r3, #0]
 8006132:	4608      	mov	r0, r1
 8006134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006138:	4770      	bx	lr

0800613a <__sfputs_r>:
 800613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	4614      	mov	r4, r2
 8006142:	18d5      	adds	r5, r2, r3
 8006144:	42ac      	cmp	r4, r5
 8006146:	d101      	bne.n	800614c <__sfputs_r+0x12>
 8006148:	2000      	movs	r0, #0
 800614a:	e007      	b.n	800615c <__sfputs_r+0x22>
 800614c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006150:	463a      	mov	r2, r7
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ffda 	bl	800610c <__sfputc_r>
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	d1f3      	bne.n	8006144 <__sfputs_r+0xa>
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006160 <_vfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	460d      	mov	r5, r1
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4614      	mov	r4, r2
 800616a:	4698      	mov	r8, r3
 800616c:	4606      	mov	r6, r0
 800616e:	b118      	cbz	r0, 8006178 <_vfiprintf_r+0x18>
 8006170:	6983      	ldr	r3, [r0, #24]
 8006172:	b90b      	cbnz	r3, 8006178 <_vfiprintf_r+0x18>
 8006174:	f7ff fae4 	bl	8005740 <__sinit>
 8006178:	4b89      	ldr	r3, [pc, #548]	; (80063a0 <_vfiprintf_r+0x240>)
 800617a:	429d      	cmp	r5, r3
 800617c:	d11b      	bne.n	80061b6 <_vfiprintf_r+0x56>
 800617e:	6875      	ldr	r5, [r6, #4]
 8006180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006182:	07d9      	lsls	r1, r3, #31
 8006184:	d405      	bmi.n	8006192 <_vfiprintf_r+0x32>
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	059a      	lsls	r2, r3, #22
 800618a:	d402      	bmi.n	8006192 <_vfiprintf_r+0x32>
 800618c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800618e:	f7ff fb7a 	bl	8005886 <__retarget_lock_acquire_recursive>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	071b      	lsls	r3, r3, #28
 8006196:	d501      	bpl.n	800619c <_vfiprintf_r+0x3c>
 8006198:	692b      	ldr	r3, [r5, #16]
 800619a:	b9eb      	cbnz	r3, 80061d8 <_vfiprintf_r+0x78>
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 f9c6 	bl	8006530 <__swsetup_r>
 80061a4:	b1c0      	cbz	r0, 80061d8 <_vfiprintf_r+0x78>
 80061a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a8:	07dc      	lsls	r4, r3, #31
 80061aa:	d50e      	bpl.n	80061ca <_vfiprintf_r+0x6a>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	b01d      	add	sp, #116	; 0x74
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <_vfiprintf_r+0x244>)
 80061b8:	429d      	cmp	r5, r3
 80061ba:	d101      	bne.n	80061c0 <_vfiprintf_r+0x60>
 80061bc:	68b5      	ldr	r5, [r6, #8]
 80061be:	e7df      	b.n	8006180 <_vfiprintf_r+0x20>
 80061c0:	4b79      	ldr	r3, [pc, #484]	; (80063a8 <_vfiprintf_r+0x248>)
 80061c2:	429d      	cmp	r5, r3
 80061c4:	bf08      	it	eq
 80061c6:	68f5      	ldreq	r5, [r6, #12]
 80061c8:	e7da      	b.n	8006180 <_vfiprintf_r+0x20>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	0598      	lsls	r0, r3, #22
 80061ce:	d4ed      	bmi.n	80061ac <_vfiprintf_r+0x4c>
 80061d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d2:	f7ff fb59 	bl	8005888 <__retarget_lock_release_recursive>
 80061d6:	e7e9      	b.n	80061ac <_vfiprintf_r+0x4c>
 80061d8:	2300      	movs	r3, #0
 80061da:	9309      	str	r3, [sp, #36]	; 0x24
 80061dc:	2320      	movs	r3, #32
 80061de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e6:	2330      	movs	r3, #48	; 0x30
 80061e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063ac <_vfiprintf_r+0x24c>
 80061ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f0:	f04f 0901 	mov.w	r9, #1
 80061f4:	4623      	mov	r3, r4
 80061f6:	469a      	mov	sl, r3
 80061f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fc:	b10a      	cbz	r2, 8006202 <_vfiprintf_r+0xa2>
 80061fe:	2a25      	cmp	r2, #37	; 0x25
 8006200:	d1f9      	bne.n	80061f6 <_vfiprintf_r+0x96>
 8006202:	ebba 0b04 	subs.w	fp, sl, r4
 8006206:	d00b      	beq.n	8006220 <_vfiprintf_r+0xc0>
 8006208:	465b      	mov	r3, fp
 800620a:	4622      	mov	r2, r4
 800620c:	4629      	mov	r1, r5
 800620e:	4630      	mov	r0, r6
 8006210:	f7ff ff93 	bl	800613a <__sfputs_r>
 8006214:	3001      	adds	r0, #1
 8006216:	f000 80aa 	beq.w	800636e <_vfiprintf_r+0x20e>
 800621a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621c:	445a      	add	r2, fp
 800621e:	9209      	str	r2, [sp, #36]	; 0x24
 8006220:	f89a 3000 	ldrb.w	r3, [sl]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80a2 	beq.w	800636e <_vfiprintf_r+0x20e>
 800622a:	2300      	movs	r3, #0
 800622c:	f04f 32ff 	mov.w	r2, #4294967295
 8006230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006234:	f10a 0a01 	add.w	sl, sl, #1
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	9307      	str	r3, [sp, #28]
 800623c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006240:	931a      	str	r3, [sp, #104]	; 0x68
 8006242:	4654      	mov	r4, sl
 8006244:	2205      	movs	r2, #5
 8006246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624a:	4858      	ldr	r0, [pc, #352]	; (80063ac <_vfiprintf_r+0x24c>)
 800624c:	f7f9 ffd0 	bl	80001f0 <memchr>
 8006250:	9a04      	ldr	r2, [sp, #16]
 8006252:	b9d8      	cbnz	r0, 800628c <_vfiprintf_r+0x12c>
 8006254:	06d1      	lsls	r1, r2, #27
 8006256:	bf44      	itt	mi
 8006258:	2320      	movmi	r3, #32
 800625a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625e:	0713      	lsls	r3, r2, #28
 8006260:	bf44      	itt	mi
 8006262:	232b      	movmi	r3, #43	; 0x2b
 8006264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006268:	f89a 3000 	ldrb.w	r3, [sl]
 800626c:	2b2a      	cmp	r3, #42	; 0x2a
 800626e:	d015      	beq.n	800629c <_vfiprintf_r+0x13c>
 8006270:	9a07      	ldr	r2, [sp, #28]
 8006272:	4654      	mov	r4, sl
 8006274:	2000      	movs	r0, #0
 8006276:	f04f 0c0a 	mov.w	ip, #10
 800627a:	4621      	mov	r1, r4
 800627c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006280:	3b30      	subs	r3, #48	; 0x30
 8006282:	2b09      	cmp	r3, #9
 8006284:	d94e      	bls.n	8006324 <_vfiprintf_r+0x1c4>
 8006286:	b1b0      	cbz	r0, 80062b6 <_vfiprintf_r+0x156>
 8006288:	9207      	str	r2, [sp, #28]
 800628a:	e014      	b.n	80062b6 <_vfiprintf_r+0x156>
 800628c:	eba0 0308 	sub.w	r3, r0, r8
 8006290:	fa09 f303 	lsl.w	r3, r9, r3
 8006294:	4313      	orrs	r3, r2
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	46a2      	mov	sl, r4
 800629a:	e7d2      	b.n	8006242 <_vfiprintf_r+0xe2>
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	1d19      	adds	r1, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9103      	str	r1, [sp, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfbb      	ittet	lt
 80062a8:	425b      	neglt	r3, r3
 80062aa:	f042 0202 	orrlt.w	r2, r2, #2
 80062ae:	9307      	strge	r3, [sp, #28]
 80062b0:	9307      	strlt	r3, [sp, #28]
 80062b2:	bfb8      	it	lt
 80062b4:	9204      	strlt	r2, [sp, #16]
 80062b6:	7823      	ldrb	r3, [r4, #0]
 80062b8:	2b2e      	cmp	r3, #46	; 0x2e
 80062ba:	d10c      	bne.n	80062d6 <_vfiprintf_r+0x176>
 80062bc:	7863      	ldrb	r3, [r4, #1]
 80062be:	2b2a      	cmp	r3, #42	; 0x2a
 80062c0:	d135      	bne.n	800632e <_vfiprintf_r+0x1ce>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	1d1a      	adds	r2, r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	9203      	str	r2, [sp, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bfb8      	it	lt
 80062ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d2:	3402      	adds	r4, #2
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063bc <_vfiprintf_r+0x25c>
 80062da:	7821      	ldrb	r1, [r4, #0]
 80062dc:	2203      	movs	r2, #3
 80062de:	4650      	mov	r0, sl
 80062e0:	f7f9 ff86 	bl	80001f0 <memchr>
 80062e4:	b140      	cbz	r0, 80062f8 <_vfiprintf_r+0x198>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	eba0 000a 	sub.w	r0, r0, sl
 80062ec:	fa03 f000 	lsl.w	r0, r3, r0
 80062f0:	9b04      	ldr	r3, [sp, #16]
 80062f2:	4303      	orrs	r3, r0
 80062f4:	3401      	adds	r4, #1
 80062f6:	9304      	str	r3, [sp, #16]
 80062f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fc:	482c      	ldr	r0, [pc, #176]	; (80063b0 <_vfiprintf_r+0x250>)
 80062fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006302:	2206      	movs	r2, #6
 8006304:	f7f9 ff74 	bl	80001f0 <memchr>
 8006308:	2800      	cmp	r0, #0
 800630a:	d03f      	beq.n	800638c <_vfiprintf_r+0x22c>
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <_vfiprintf_r+0x254>)
 800630e:	bb1b      	cbnz	r3, 8006358 <_vfiprintf_r+0x1f8>
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	3307      	adds	r3, #7
 8006314:	f023 0307 	bic.w	r3, r3, #7
 8006318:	3308      	adds	r3, #8
 800631a:	9303      	str	r3, [sp, #12]
 800631c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631e:	443b      	add	r3, r7
 8006320:	9309      	str	r3, [sp, #36]	; 0x24
 8006322:	e767      	b.n	80061f4 <_vfiprintf_r+0x94>
 8006324:	fb0c 3202 	mla	r2, ip, r2, r3
 8006328:	460c      	mov	r4, r1
 800632a:	2001      	movs	r0, #1
 800632c:	e7a5      	b.n	800627a <_vfiprintf_r+0x11a>
 800632e:	2300      	movs	r3, #0
 8006330:	3401      	adds	r4, #1
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	4619      	mov	r1, r3
 8006336:	f04f 0c0a 	mov.w	ip, #10
 800633a:	4620      	mov	r0, r4
 800633c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006340:	3a30      	subs	r2, #48	; 0x30
 8006342:	2a09      	cmp	r2, #9
 8006344:	d903      	bls.n	800634e <_vfiprintf_r+0x1ee>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0c5      	beq.n	80062d6 <_vfiprintf_r+0x176>
 800634a:	9105      	str	r1, [sp, #20]
 800634c:	e7c3      	b.n	80062d6 <_vfiprintf_r+0x176>
 800634e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006352:	4604      	mov	r4, r0
 8006354:	2301      	movs	r3, #1
 8006356:	e7f0      	b.n	800633a <_vfiprintf_r+0x1da>
 8006358:	ab03      	add	r3, sp, #12
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	462a      	mov	r2, r5
 800635e:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <_vfiprintf_r+0x258>)
 8006360:	a904      	add	r1, sp, #16
 8006362:	4630      	mov	r0, r6
 8006364:	f7fd ff38 	bl	80041d8 <_printf_float>
 8006368:	4607      	mov	r7, r0
 800636a:	1c78      	adds	r0, r7, #1
 800636c:	d1d6      	bne.n	800631c <_vfiprintf_r+0x1bc>
 800636e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	d405      	bmi.n	8006380 <_vfiprintf_r+0x220>
 8006374:	89ab      	ldrh	r3, [r5, #12]
 8006376:	059a      	lsls	r2, r3, #22
 8006378:	d402      	bmi.n	8006380 <_vfiprintf_r+0x220>
 800637a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800637c:	f7ff fa84 	bl	8005888 <__retarget_lock_release_recursive>
 8006380:	89ab      	ldrh	r3, [r5, #12]
 8006382:	065b      	lsls	r3, r3, #25
 8006384:	f53f af12 	bmi.w	80061ac <_vfiprintf_r+0x4c>
 8006388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800638a:	e711      	b.n	80061b0 <_vfiprintf_r+0x50>
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	462a      	mov	r2, r5
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <_vfiprintf_r+0x258>)
 8006394:	a904      	add	r1, sp, #16
 8006396:	4630      	mov	r0, r6
 8006398:	f7fe f9c2 	bl	8004720 <_printf_i>
 800639c:	e7e4      	b.n	8006368 <_vfiprintf_r+0x208>
 800639e:	bf00      	nop
 80063a0:	08006bb8 	.word	0x08006bb8
 80063a4:	08006bd8 	.word	0x08006bd8
 80063a8:	08006b98 	.word	0x08006b98
 80063ac:	08006d54 	.word	0x08006d54
 80063b0:	08006d5e 	.word	0x08006d5e
 80063b4:	080041d9 	.word	0x080041d9
 80063b8:	0800613b 	.word	0x0800613b
 80063bc:	08006d5a 	.word	0x08006d5a

080063c0 <_sbrk_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_sbrk_r+0x1c>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	f7fb faf8 	bl	80019c0 <_sbrk>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d102      	bne.n	80063da <_sbrk_r+0x1a>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	b103      	cbz	r3, 80063da <_sbrk_r+0x1a>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	bd38      	pop	{r3, r4, r5, pc}
 80063dc:	200002bc 	.word	0x200002bc

080063e0 <__sread>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	460c      	mov	r4, r1
 80063e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e8:	f000 faa6 	bl	8006938 <_read_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	bfab      	itete	ge
 80063f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063f2:	89a3      	ldrhlt	r3, [r4, #12]
 80063f4:	181b      	addge	r3, r3, r0
 80063f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063fa:	bfac      	ite	ge
 80063fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063fe:	81a3      	strhlt	r3, [r4, #12]
 8006400:	bd10      	pop	{r4, pc}

08006402 <__swrite>:
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	461f      	mov	r7, r3
 8006408:	898b      	ldrh	r3, [r1, #12]
 800640a:	05db      	lsls	r3, r3, #23
 800640c:	4605      	mov	r5, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4616      	mov	r6, r2
 8006412:	d505      	bpl.n	8006420 <__swrite+0x1e>
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f000 f9f8 	bl	8006810 <_lseek_r>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	f000 b869 	b.w	800650c <_write_r>

0800643a <__sseek>:
 800643a:	b510      	push	{r4, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 f9e5 	bl	8006810 <_lseek_r>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	bf15      	itete	ne
 800644c:	6560      	strne	r0, [r4, #84]	; 0x54
 800644e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strheq	r3, [r4, #12]
 8006458:	bf18      	it	ne
 800645a:	81a3      	strhne	r3, [r4, #12]
 800645c:	bd10      	pop	{r4, pc}

0800645e <__sclose>:
 800645e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006462:	f000 b8f1 	b.w	8006648 <_close_r>
	...

08006468 <__swbuf_r>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	460e      	mov	r6, r1
 800646c:	4614      	mov	r4, r2
 800646e:	4605      	mov	r5, r0
 8006470:	b118      	cbz	r0, 800647a <__swbuf_r+0x12>
 8006472:	6983      	ldr	r3, [r0, #24]
 8006474:	b90b      	cbnz	r3, 800647a <__swbuf_r+0x12>
 8006476:	f7ff f963 	bl	8005740 <__sinit>
 800647a:	4b21      	ldr	r3, [pc, #132]	; (8006500 <__swbuf_r+0x98>)
 800647c:	429c      	cmp	r4, r3
 800647e:	d12b      	bne.n	80064d8 <__swbuf_r+0x70>
 8006480:	686c      	ldr	r4, [r5, #4]
 8006482:	69a3      	ldr	r3, [r4, #24]
 8006484:	60a3      	str	r3, [r4, #8]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	071a      	lsls	r2, r3, #28
 800648a:	d52f      	bpl.n	80064ec <__swbuf_r+0x84>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	b36b      	cbz	r3, 80064ec <__swbuf_r+0x84>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	6963      	ldr	r3, [r4, #20]
 8006498:	b2f6      	uxtb	r6, r6
 800649a:	4283      	cmp	r3, r0
 800649c:	4637      	mov	r7, r6
 800649e:	dc04      	bgt.n	80064aa <__swbuf_r+0x42>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 f966 	bl	8006774 <_fflush_r>
 80064a8:	bb30      	cbnz	r0, 80064f8 <__swbuf_r+0x90>
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	60a3      	str	r3, [r4, #8]
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	701e      	strb	r6, [r3, #0]
 80064b8:	6963      	ldr	r3, [r4, #20]
 80064ba:	3001      	adds	r0, #1
 80064bc:	4283      	cmp	r3, r0
 80064be:	d004      	beq.n	80064ca <__swbuf_r+0x62>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	07db      	lsls	r3, r3, #31
 80064c4:	d506      	bpl.n	80064d4 <__swbuf_r+0x6c>
 80064c6:	2e0a      	cmp	r6, #10
 80064c8:	d104      	bne.n	80064d4 <__swbuf_r+0x6c>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 f951 	bl	8006774 <_fflush_r>
 80064d2:	b988      	cbnz	r0, 80064f8 <__swbuf_r+0x90>
 80064d4:	4638      	mov	r0, r7
 80064d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <__swbuf_r+0x9c>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	d101      	bne.n	80064e2 <__swbuf_r+0x7a>
 80064de:	68ac      	ldr	r4, [r5, #8]
 80064e0:	e7cf      	b.n	8006482 <__swbuf_r+0x1a>
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <__swbuf_r+0xa0>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	bf08      	it	eq
 80064e8:	68ec      	ldreq	r4, [r5, #12]
 80064ea:	e7ca      	b.n	8006482 <__swbuf_r+0x1a>
 80064ec:	4621      	mov	r1, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f81e 	bl	8006530 <__swsetup_r>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0cb      	beq.n	8006490 <__swbuf_r+0x28>
 80064f8:	f04f 37ff 	mov.w	r7, #4294967295
 80064fc:	e7ea      	b.n	80064d4 <__swbuf_r+0x6c>
 80064fe:	bf00      	nop
 8006500:	08006bb8 	.word	0x08006bb8
 8006504:	08006bd8 	.word	0x08006bd8
 8006508:	08006b98 	.word	0x08006b98

0800650c <_write_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_write_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fb f9ff 	bl	800191e <_write>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_write_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_write_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	200002bc 	.word	0x200002bc

08006530 <__swsetup_r>:
 8006530:	4b32      	ldr	r3, [pc, #200]	; (80065fc <__swsetup_r+0xcc>)
 8006532:	b570      	push	{r4, r5, r6, lr}
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	4606      	mov	r6, r0
 8006538:	460c      	mov	r4, r1
 800653a:	b125      	cbz	r5, 8006546 <__swsetup_r+0x16>
 800653c:	69ab      	ldr	r3, [r5, #24]
 800653e:	b913      	cbnz	r3, 8006546 <__swsetup_r+0x16>
 8006540:	4628      	mov	r0, r5
 8006542:	f7ff f8fd 	bl	8005740 <__sinit>
 8006546:	4b2e      	ldr	r3, [pc, #184]	; (8006600 <__swsetup_r+0xd0>)
 8006548:	429c      	cmp	r4, r3
 800654a:	d10f      	bne.n	800656c <__swsetup_r+0x3c>
 800654c:	686c      	ldr	r4, [r5, #4]
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006554:	0719      	lsls	r1, r3, #28
 8006556:	d42c      	bmi.n	80065b2 <__swsetup_r+0x82>
 8006558:	06dd      	lsls	r5, r3, #27
 800655a:	d411      	bmi.n	8006580 <__swsetup_r+0x50>
 800655c:	2309      	movs	r3, #9
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	e03e      	b.n	80065ea <__swsetup_r+0xba>
 800656c:	4b25      	ldr	r3, [pc, #148]	; (8006604 <__swsetup_r+0xd4>)
 800656e:	429c      	cmp	r4, r3
 8006570:	d101      	bne.n	8006576 <__swsetup_r+0x46>
 8006572:	68ac      	ldr	r4, [r5, #8]
 8006574:	e7eb      	b.n	800654e <__swsetup_r+0x1e>
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <__swsetup_r+0xd8>)
 8006578:	429c      	cmp	r4, r3
 800657a:	bf08      	it	eq
 800657c:	68ec      	ldreq	r4, [r5, #12]
 800657e:	e7e6      	b.n	800654e <__swsetup_r+0x1e>
 8006580:	0758      	lsls	r0, r3, #29
 8006582:	d512      	bpl.n	80065aa <__swsetup_r+0x7a>
 8006584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006586:	b141      	cbz	r1, 800659a <__swsetup_r+0x6a>
 8006588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800658c:	4299      	cmp	r1, r3
 800658e:	d002      	beq.n	8006596 <__swsetup_r+0x66>
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff fd11 	bl	8005fb8 <_free_r>
 8006596:	2300      	movs	r3, #0
 8006598:	6363      	str	r3, [r4, #52]	; 0x34
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	2300      	movs	r3, #0
 80065a4:	6063      	str	r3, [r4, #4]
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	f043 0308 	orr.w	r3, r3, #8
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	b94b      	cbnz	r3, 80065ca <__swsetup_r+0x9a>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c0:	d003      	beq.n	80065ca <__swsetup_r+0x9a>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4630      	mov	r0, r6
 80065c6:	f000 f959 	bl	800687c <__smakebuf_r>
 80065ca:	89a0      	ldrh	r0, [r4, #12]
 80065cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065d0:	f010 0301 	ands.w	r3, r0, #1
 80065d4:	d00a      	beq.n	80065ec <__swsetup_r+0xbc>
 80065d6:	2300      	movs	r3, #0
 80065d8:	60a3      	str	r3, [r4, #8]
 80065da:	6963      	ldr	r3, [r4, #20]
 80065dc:	425b      	negs	r3, r3
 80065de:	61a3      	str	r3, [r4, #24]
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	b943      	cbnz	r3, 80065f6 <__swsetup_r+0xc6>
 80065e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065e8:	d1ba      	bne.n	8006560 <__swsetup_r+0x30>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	0781      	lsls	r1, r0, #30
 80065ee:	bf58      	it	pl
 80065f0:	6963      	ldrpl	r3, [r4, #20]
 80065f2:	60a3      	str	r3, [r4, #8]
 80065f4:	e7f4      	b.n	80065e0 <__swsetup_r+0xb0>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e7f7      	b.n	80065ea <__swsetup_r+0xba>
 80065fa:	bf00      	nop
 80065fc:	2000000c 	.word	0x2000000c
 8006600:	08006bb8 	.word	0x08006bb8
 8006604:	08006bd8 	.word	0x08006bd8
 8006608:	08006b98 	.word	0x08006b98

0800660c <__assert_func>:
 800660c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800660e:	4614      	mov	r4, r2
 8006610:	461a      	mov	r2, r3
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <__assert_func+0x2c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4605      	mov	r5, r0
 8006618:	68d8      	ldr	r0, [r3, #12]
 800661a:	b14c      	cbz	r4, 8006630 <__assert_func+0x24>
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <__assert_func+0x30>)
 800661e:	9100      	str	r1, [sp, #0]
 8006620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006624:	4906      	ldr	r1, [pc, #24]	; (8006640 <__assert_func+0x34>)
 8006626:	462b      	mov	r3, r5
 8006628:	f000 f8e0 	bl	80067ec <fiprintf>
 800662c:	f000 f9a3 	bl	8006976 <abort>
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <__assert_func+0x38>)
 8006632:	461c      	mov	r4, r3
 8006634:	e7f3      	b.n	800661e <__assert_func+0x12>
 8006636:	bf00      	nop
 8006638:	2000000c 	.word	0x2000000c
 800663c:	08006d65 	.word	0x08006d65
 8006640:	08006d72 	.word	0x08006d72
 8006644:	08006da0 	.word	0x08006da0

08006648 <_close_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_close_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fb f97f 	bl	8001956 <_close>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_close_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_close_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200002bc 	.word	0x200002bc

08006668 <__sflush_r>:
 8006668:	898a      	ldrh	r2, [r1, #12]
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	4605      	mov	r5, r0
 8006670:	0710      	lsls	r0, r2, #28
 8006672:	460c      	mov	r4, r1
 8006674:	d458      	bmi.n	8006728 <__sflush_r+0xc0>
 8006676:	684b      	ldr	r3, [r1, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	dc05      	bgt.n	8006688 <__sflush_r+0x20>
 800667c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	dc02      	bgt.n	8006688 <__sflush_r+0x20>
 8006682:	2000      	movs	r0, #0
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800668a:	2e00      	cmp	r6, #0
 800668c:	d0f9      	beq.n	8006682 <__sflush_r+0x1a>
 800668e:	2300      	movs	r3, #0
 8006690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006694:	682f      	ldr	r7, [r5, #0]
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	d032      	beq.n	8006700 <__sflush_r+0x98>
 800669a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	075a      	lsls	r2, r3, #29
 80066a0:	d505      	bpl.n	80066ae <__sflush_r+0x46>
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	1ac0      	subs	r0, r0, r3
 80066a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066a8:	b10b      	cbz	r3, 80066ae <__sflush_r+0x46>
 80066aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ac:	1ac0      	subs	r0, r0, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	4602      	mov	r2, r0
 80066b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b4:	6a21      	ldr	r1, [r4, #32]
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b0      	blx	r6
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	d106      	bne.n	80066ce <__sflush_r+0x66>
 80066c0:	6829      	ldr	r1, [r5, #0]
 80066c2:	291d      	cmp	r1, #29
 80066c4:	d82c      	bhi.n	8006720 <__sflush_r+0xb8>
 80066c6:	4a2a      	ldr	r2, [pc, #168]	; (8006770 <__sflush_r+0x108>)
 80066c8:	40ca      	lsrs	r2, r1
 80066ca:	07d6      	lsls	r6, r2, #31
 80066cc:	d528      	bpl.n	8006720 <__sflush_r+0xb8>
 80066ce:	2200      	movs	r2, #0
 80066d0:	6062      	str	r2, [r4, #4]
 80066d2:	04d9      	lsls	r1, r3, #19
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	d504      	bpl.n	80066e4 <__sflush_r+0x7c>
 80066da:	1c42      	adds	r2, r0, #1
 80066dc:	d101      	bne.n	80066e2 <__sflush_r+0x7a>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	b903      	cbnz	r3, 80066e4 <__sflush_r+0x7c>
 80066e2:	6560      	str	r0, [r4, #84]	; 0x54
 80066e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e6:	602f      	str	r7, [r5, #0]
 80066e8:	2900      	cmp	r1, #0
 80066ea:	d0ca      	beq.n	8006682 <__sflush_r+0x1a>
 80066ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f0:	4299      	cmp	r1, r3
 80066f2:	d002      	beq.n	80066fa <__sflush_r+0x92>
 80066f4:	4628      	mov	r0, r5
 80066f6:	f7ff fc5f 	bl	8005fb8 <_free_r>
 80066fa:	2000      	movs	r0, #0
 80066fc:	6360      	str	r0, [r4, #52]	; 0x34
 80066fe:	e7c1      	b.n	8006684 <__sflush_r+0x1c>
 8006700:	6a21      	ldr	r1, [r4, #32]
 8006702:	2301      	movs	r3, #1
 8006704:	4628      	mov	r0, r5
 8006706:	47b0      	blx	r6
 8006708:	1c41      	adds	r1, r0, #1
 800670a:	d1c7      	bne.n	800669c <__sflush_r+0x34>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0c4      	beq.n	800669c <__sflush_r+0x34>
 8006712:	2b1d      	cmp	r3, #29
 8006714:	d001      	beq.n	800671a <__sflush_r+0xb2>
 8006716:	2b16      	cmp	r3, #22
 8006718:	d101      	bne.n	800671e <__sflush_r+0xb6>
 800671a:	602f      	str	r7, [r5, #0]
 800671c:	e7b1      	b.n	8006682 <__sflush_r+0x1a>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	e7ad      	b.n	8006684 <__sflush_r+0x1c>
 8006728:	690f      	ldr	r7, [r1, #16]
 800672a:	2f00      	cmp	r7, #0
 800672c:	d0a9      	beq.n	8006682 <__sflush_r+0x1a>
 800672e:	0793      	lsls	r3, r2, #30
 8006730:	680e      	ldr	r6, [r1, #0]
 8006732:	bf08      	it	eq
 8006734:	694b      	ldreq	r3, [r1, #20]
 8006736:	600f      	str	r7, [r1, #0]
 8006738:	bf18      	it	ne
 800673a:	2300      	movne	r3, #0
 800673c:	eba6 0807 	sub.w	r8, r6, r7
 8006740:	608b      	str	r3, [r1, #8]
 8006742:	f1b8 0f00 	cmp.w	r8, #0
 8006746:	dd9c      	ble.n	8006682 <__sflush_r+0x1a>
 8006748:	6a21      	ldr	r1, [r4, #32]
 800674a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800674c:	4643      	mov	r3, r8
 800674e:	463a      	mov	r2, r7
 8006750:	4628      	mov	r0, r5
 8006752:	47b0      	blx	r6
 8006754:	2800      	cmp	r0, #0
 8006756:	dc06      	bgt.n	8006766 <__sflush_r+0xfe>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	f04f 30ff 	mov.w	r0, #4294967295
 8006764:	e78e      	b.n	8006684 <__sflush_r+0x1c>
 8006766:	4407      	add	r7, r0
 8006768:	eba8 0800 	sub.w	r8, r8, r0
 800676c:	e7e9      	b.n	8006742 <__sflush_r+0xda>
 800676e:	bf00      	nop
 8006770:	20400001 	.word	0x20400001

08006774 <_fflush_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	690b      	ldr	r3, [r1, #16]
 8006778:	4605      	mov	r5, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b913      	cbnz	r3, 8006784 <_fflush_r+0x10>
 800677e:	2500      	movs	r5, #0
 8006780:	4628      	mov	r0, r5
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	b118      	cbz	r0, 800678e <_fflush_r+0x1a>
 8006786:	6983      	ldr	r3, [r0, #24]
 8006788:	b90b      	cbnz	r3, 800678e <_fflush_r+0x1a>
 800678a:	f7fe ffd9 	bl	8005740 <__sinit>
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <_fflush_r+0x6c>)
 8006790:	429c      	cmp	r4, r3
 8006792:	d11b      	bne.n	80067cc <_fflush_r+0x58>
 8006794:	686c      	ldr	r4, [r5, #4]
 8006796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ef      	beq.n	800677e <_fflush_r+0xa>
 800679e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067a0:	07d0      	lsls	r0, r2, #31
 80067a2:	d404      	bmi.n	80067ae <_fflush_r+0x3a>
 80067a4:	0599      	lsls	r1, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_fflush_r+0x3a>
 80067a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067aa:	f7ff f86c 	bl	8005886 <__retarget_lock_acquire_recursive>
 80067ae:	4628      	mov	r0, r5
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7ff ff59 	bl	8006668 <__sflush_r>
 80067b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b8:	07da      	lsls	r2, r3, #31
 80067ba:	4605      	mov	r5, r0
 80067bc:	d4e0      	bmi.n	8006780 <_fflush_r+0xc>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	059b      	lsls	r3, r3, #22
 80067c2:	d4dd      	bmi.n	8006780 <_fflush_r+0xc>
 80067c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c6:	f7ff f85f 	bl	8005888 <__retarget_lock_release_recursive>
 80067ca:	e7d9      	b.n	8006780 <_fflush_r+0xc>
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <_fflush_r+0x70>)
 80067ce:	429c      	cmp	r4, r3
 80067d0:	d101      	bne.n	80067d6 <_fflush_r+0x62>
 80067d2:	68ac      	ldr	r4, [r5, #8]
 80067d4:	e7df      	b.n	8006796 <_fflush_r+0x22>
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <_fflush_r+0x74>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	bf08      	it	eq
 80067dc:	68ec      	ldreq	r4, [r5, #12]
 80067de:	e7da      	b.n	8006796 <_fflush_r+0x22>
 80067e0:	08006bb8 	.word	0x08006bb8
 80067e4:	08006bd8 	.word	0x08006bd8
 80067e8:	08006b98 	.word	0x08006b98

080067ec <fiprintf>:
 80067ec:	b40e      	push	{r1, r2, r3}
 80067ee:	b503      	push	{r0, r1, lr}
 80067f0:	4601      	mov	r1, r0
 80067f2:	ab03      	add	r3, sp, #12
 80067f4:	4805      	ldr	r0, [pc, #20]	; (800680c <fiprintf+0x20>)
 80067f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fa:	6800      	ldr	r0, [r0, #0]
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	f7ff fcaf 	bl	8006160 <_vfiprintf_r>
 8006802:	b002      	add	sp, #8
 8006804:	f85d eb04 	ldr.w	lr, [sp], #4
 8006808:	b003      	add	sp, #12
 800680a:	4770      	bx	lr
 800680c:	2000000c 	.word	0x2000000c

08006810 <_lseek_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	; (8006830 <_lseek_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7fb f8c0 	bl	80019a4 <_lseek>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_lseek_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_lseek_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200002bc 	.word	0x200002bc

08006834 <__swhatbuf_r>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	460e      	mov	r6, r1
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	2900      	cmp	r1, #0
 800683e:	b096      	sub	sp, #88	; 0x58
 8006840:	4614      	mov	r4, r2
 8006842:	461d      	mov	r5, r3
 8006844:	da07      	bge.n	8006856 <__swhatbuf_r+0x22>
 8006846:	2300      	movs	r3, #0
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	89b3      	ldrh	r3, [r6, #12]
 800684c:	061a      	lsls	r2, r3, #24
 800684e:	d410      	bmi.n	8006872 <__swhatbuf_r+0x3e>
 8006850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006854:	e00e      	b.n	8006874 <__swhatbuf_r+0x40>
 8006856:	466a      	mov	r2, sp
 8006858:	f000 f894 	bl	8006984 <_fstat_r>
 800685c:	2800      	cmp	r0, #0
 800685e:	dbf2      	blt.n	8006846 <__swhatbuf_r+0x12>
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006866:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800686a:	425a      	negs	r2, r3
 800686c:	415a      	adcs	r2, r3
 800686e:	602a      	str	r2, [r5, #0]
 8006870:	e7ee      	b.n	8006850 <__swhatbuf_r+0x1c>
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	2000      	movs	r0, #0
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	b016      	add	sp, #88	; 0x58
 800687a:	bd70      	pop	{r4, r5, r6, pc}

0800687c <__smakebuf_r>:
 800687c:	898b      	ldrh	r3, [r1, #12]
 800687e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006880:	079d      	lsls	r5, r3, #30
 8006882:	4606      	mov	r6, r0
 8006884:	460c      	mov	r4, r1
 8006886:	d507      	bpl.n	8006898 <__smakebuf_r+0x1c>
 8006888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	2301      	movs	r3, #1
 8006892:	6163      	str	r3, [r4, #20]
 8006894:	b002      	add	sp, #8
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	ab01      	add	r3, sp, #4
 800689a:	466a      	mov	r2, sp
 800689c:	f7ff ffca 	bl	8006834 <__swhatbuf_r>
 80068a0:	9900      	ldr	r1, [sp, #0]
 80068a2:	4605      	mov	r5, r0
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff fbd7 	bl	8006058 <_malloc_r>
 80068aa:	b948      	cbnz	r0, 80068c0 <__smakebuf_r+0x44>
 80068ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b0:	059a      	lsls	r2, r3, #22
 80068b2:	d4ef      	bmi.n	8006894 <__smakebuf_r+0x18>
 80068b4:	f023 0303 	bic.w	r3, r3, #3
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	e7e3      	b.n	8006888 <__smakebuf_r+0xc>
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <__smakebuf_r+0x7c>)
 80068c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	6020      	str	r0, [r4, #0]
 80068c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	6163      	str	r3, [r4, #20]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	6120      	str	r0, [r4, #16]
 80068d6:	b15b      	cbz	r3, 80068f0 <__smakebuf_r+0x74>
 80068d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f863 	bl	80069a8 <_isatty_r>
 80068e2:	b128      	cbz	r0, 80068f0 <__smakebuf_r+0x74>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	89a0      	ldrh	r0, [r4, #12]
 80068f2:	4305      	orrs	r5, r0
 80068f4:	81a5      	strh	r5, [r4, #12]
 80068f6:	e7cd      	b.n	8006894 <__smakebuf_r+0x18>
 80068f8:	080056d9 	.word	0x080056d9

080068fc <__ascii_mbtowc>:
 80068fc:	b082      	sub	sp, #8
 80068fe:	b901      	cbnz	r1, 8006902 <__ascii_mbtowc+0x6>
 8006900:	a901      	add	r1, sp, #4
 8006902:	b142      	cbz	r2, 8006916 <__ascii_mbtowc+0x1a>
 8006904:	b14b      	cbz	r3, 800691a <__ascii_mbtowc+0x1e>
 8006906:	7813      	ldrb	r3, [r2, #0]
 8006908:	600b      	str	r3, [r1, #0]
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	1e10      	subs	r0, r2, #0
 800690e:	bf18      	it	ne
 8006910:	2001      	movne	r0, #1
 8006912:	b002      	add	sp, #8
 8006914:	4770      	bx	lr
 8006916:	4610      	mov	r0, r2
 8006918:	e7fb      	b.n	8006912 <__ascii_mbtowc+0x16>
 800691a:	f06f 0001 	mvn.w	r0, #1
 800691e:	e7f8      	b.n	8006912 <__ascii_mbtowc+0x16>

08006920 <__malloc_lock>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__malloc_lock+0x8>)
 8006922:	f7fe bfb0 	b.w	8005886 <__retarget_lock_acquire_recursive>
 8006926:	bf00      	nop
 8006928:	200002b4 	.word	0x200002b4

0800692c <__malloc_unlock>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__malloc_unlock+0x8>)
 800692e:	f7fe bfab 	b.w	8005888 <__retarget_lock_release_recursive>
 8006932:	bf00      	nop
 8006934:	200002b4 	.word	0x200002b4

08006938 <_read_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_read_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fa ffcc 	bl	80018e4 <_read>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_read_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_read_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200002bc 	.word	0x200002bc

0800695c <__ascii_wctomb>:
 800695c:	b149      	cbz	r1, 8006972 <__ascii_wctomb+0x16>
 800695e:	2aff      	cmp	r2, #255	; 0xff
 8006960:	bf85      	ittet	hi
 8006962:	238a      	movhi	r3, #138	; 0x8a
 8006964:	6003      	strhi	r3, [r0, #0]
 8006966:	700a      	strbls	r2, [r1, #0]
 8006968:	f04f 30ff 	movhi.w	r0, #4294967295
 800696c:	bf98      	it	ls
 800696e:	2001      	movls	r0, #1
 8006970:	4770      	bx	lr
 8006972:	4608      	mov	r0, r1
 8006974:	4770      	bx	lr

08006976 <abort>:
 8006976:	b508      	push	{r3, lr}
 8006978:	2006      	movs	r0, #6
 800697a:	f000 f84d 	bl	8006a18 <raise>
 800697e:	2001      	movs	r0, #1
 8006980:	f7fa ffa6 	bl	80018d0 <_exit>

08006984 <_fstat_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d07      	ldr	r5, [pc, #28]	; (80069a4 <_fstat_r+0x20>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	f7fa ffec 	bl	800196e <_fstat>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d102      	bne.n	80069a0 <_fstat_r+0x1c>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	b103      	cbz	r3, 80069a0 <_fstat_r+0x1c>
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	bf00      	nop
 80069a4:	200002bc 	.word	0x200002bc

080069a8 <_isatty_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d06      	ldr	r5, [pc, #24]	; (80069c4 <_isatty_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fa ffeb 	bl	800198e <_isatty>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_isatty_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_isatty_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	200002bc 	.word	0x200002bc

080069c8 <_raise_r>:
 80069c8:	291f      	cmp	r1, #31
 80069ca:	b538      	push	{r3, r4, r5, lr}
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	d904      	bls.n	80069dc <_raise_r+0x14>
 80069d2:	2316      	movs	r3, #22
 80069d4:	6003      	str	r3, [r0, #0]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069de:	b112      	cbz	r2, 80069e6 <_raise_r+0x1e>
 80069e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069e4:	b94b      	cbnz	r3, 80069fa <_raise_r+0x32>
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 f830 	bl	8006a4c <_getpid_r>
 80069ec:	462a      	mov	r2, r5
 80069ee:	4601      	mov	r1, r0
 80069f0:	4620      	mov	r0, r4
 80069f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f6:	f000 b817 	b.w	8006a28 <_kill_r>
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d00a      	beq.n	8006a14 <_raise_r+0x4c>
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	d103      	bne.n	8006a0a <_raise_r+0x42>
 8006a02:	2316      	movs	r3, #22
 8006a04:	6003      	str	r3, [r0, #0]
 8006a06:	2001      	movs	r0, #1
 8006a08:	e7e7      	b.n	80069da <_raise_r+0x12>
 8006a0a:	2400      	movs	r4, #0
 8006a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a10:	4628      	mov	r0, r5
 8006a12:	4798      	blx	r3
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7e0      	b.n	80069da <_raise_r+0x12>

08006a18 <raise>:
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <raise+0xc>)
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f7ff bfd3 	b.w	80069c8 <_raise_r>
 8006a22:	bf00      	nop
 8006a24:	2000000c 	.word	0x2000000c

08006a28 <_kill_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	; (8006a48 <_kill_r+0x20>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f7fa ff3b 	bl	80018b0 <_kill>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d102      	bne.n	8006a44 <_kill_r+0x1c>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b103      	cbz	r3, 8006a44 <_kill_r+0x1c>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	200002bc 	.word	0x200002bc

08006a4c <_getpid_r>:
 8006a4c:	f7fa bf28 	b.w	80018a0 <_getpid>

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

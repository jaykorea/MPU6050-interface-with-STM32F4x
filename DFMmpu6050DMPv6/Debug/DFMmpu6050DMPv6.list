
DFMmpu6050DMPv6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  080085a8  080085a8  000185a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be4  08008be4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bec  08008bec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001dc  08008dd0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08008dd0  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017179  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002762  00000000  00000000  00037385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00039ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0003a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b209  00000000  00000000  0003ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ae  00000000  00000000  00056081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d80f  00000000  00000000  0006552f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e1c  00000000  00000000  000f2d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800858c 	.word	0x0800858c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800858c 	.word	0x0800858c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000f58:	1d39      	adds	r1, r7, #4
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <__io_putchar+0x20>)
 8000f62:	f002 ff22 	bl	8003daa <HAL_UART_Transmit>

    return ch;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002d4 	.word	0x200002d4

08000f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a2c      	ldr	r2, [pc, #176]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a25      	ldr	r2, [pc, #148]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_GPIO_Init+0xd0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <MX_GPIO_Init+0xd4>)
 8001000:	f001 fa62 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_GPIO_Init+0xd8>)
 800101c:	f001 f8d0 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001020:	2320      	movs	r3, #32
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_GPIO_Init+0xd4>)
 8001038:	f001 f8c2 	bl	80021c0 <HAL_GPIO_Init>

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020800 	.word	0x40020800

08001050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_I2C1_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C1_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_I2C1_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C1_Init+0x50>)
 800108e:	f001 fa35 	bl	80024fc <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 fd32 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000280 	.word	0x20000280
 80010a4:	40005400 	.word	0x40005400
 80010a8:	00061a80 	.word	0x00061a80

080010ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_I2C_MspInit+0x8c>)
 8001106:	f001 f85b 	bl	80021c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005400 	.word	0x40005400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	ed87 0a01 	vstr	s0, [r7, #4]
 8001146:	ed97 0a01 	vldr	s0, [r7, #4]
 800114a:	f003 f981 	bl	8004450 <asinf>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0000      	movs	r0, r0
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001164:	b089      	sub	sp, #36	; 0x24
 8001166:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 feae 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 fae8 	bl	8001740 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff ff00 	bl	8000f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001174:	f000 fe0c 	bl	8001d90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001178:	f7ff ff6a 	bl	8001050 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800117c:	f000 fb54 	bl	8001828 <_Z12MPU6050_Initv>
  calibirate_MPU6050(3000);
 8001180:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001184:	f000 fc28 	bl	80019d8 <_Z18calibirate_MPU6050i>

  _millis = HAL_GetTick();
 8001188:	f000 ff04 	bl	8001f94 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4ac8      	ldr	r2, [pc, #800]	; (80014b0 <main+0x350>)
 8001190:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_MPU6050();
 8001192:	f000 fba3 	bl	80018dc <_Z12read_MPU6050v>
	     gyx -= offset_gyx;
 8001196:	4bc7      	ldr	r3, [pc, #796]	; (80014b4 <main+0x354>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	b29a      	uxth	r2, r3
 800119e:	4bc6      	ldr	r3, [pc, #792]	; (80014b8 <main+0x358>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4bc1      	ldr	r3, [pc, #772]	; (80014b4 <main+0x354>)
 80011ae:	801a      	strh	r2, [r3, #0]
	     gyy -= offset_gyy;
 80011b0:	4bc2      	ldr	r3, [pc, #776]	; (80014bc <main+0x35c>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4bc1      	ldr	r3, [pc, #772]	; (80014c0 <main+0x360>)
 80011ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4bbd      	ldr	r3, [pc, #756]	; (80014bc <main+0x35c>)
 80011c8:	801a      	strh	r2, [r3, #0]
	     gyz -= offset_gyz;
 80011ca:	4bbe      	ldr	r3, [pc, #760]	; (80014c4 <main+0x364>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4bbd      	ldr	r3, [pc, #756]	; (80014c8 <main+0x368>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4bb8      	ldr	r3, [pc, #736]	; (80014c4 <main+0x364>)
 80011e2:	801a      	strh	r2, [r3, #0]

	     degrees_pitch += gyy * 0.0000610687;
 80011e4:	4bb9      	ldr	r3, [pc, #740]	; (80014cc <main+0x36c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9b5 	bl	8000558 <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	4bb2      	ldr	r3, [pc, #712]	; (80014bc <main+0x35c>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f99b 	bl	8000534 <__aeabi_i2d>
 80011fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8001480 <main+0x320>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa00 	bl	8000608 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f844 	bl	800029c <__adddf3>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fccc 	bl	8000bb8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4aaa      	ldr	r2, [pc, #680]	; (80014cc <main+0x36c>)
 8001224:	6013      	str	r3, [r2, #0]
	     degrees_roll  += gyx * 0.0000610687;
 8001226:	4baa      	ldr	r3, [pc, #680]	; (80014d0 <main+0x370>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f994 	bl	8000558 <__aeabi_f2d>
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
 8001234:	4b9f      	ldr	r3, [pc, #636]	; (80014b4 <main+0x354>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f97a 	bl	8000534 <__aeabi_i2d>
 8001240:	a38f      	add	r3, pc, #572	; (adr r3, 8001480 <main+0x320>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f9df 	bl	8000608 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f823 	bl	800029c <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fcab 	bl	8000bb8 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	4a9a      	ldr	r2, [pc, #616]	; (80014d0 <main+0x370>)
 8001266:	6013      	str	r3, [r2, #0]

	     degrees_pitch += degrees_roll * sin(gyz * 0.000001066);
 8001268:	4b98      	ldr	r3, [pc, #608]	; (80014cc <main+0x36c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f973 	bl	8000558 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <main+0x370>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f96c 	bl	8000558 <__aeabi_f2d>
 8001280:	4680      	mov	r8, r0
 8001282:	4689      	mov	r9, r1
 8001284:	4b8f      	ldr	r3, [pc, #572]	; (80014c4 <main+0x364>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f952 	bl	8000534 <__aeabi_i2d>
 8001290:	a37d      	add	r3, pc, #500	; (adr r3, 8001488 <main+0x328>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9b7 	bl	8000608 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ec43 2b17 	vmov	d7, r2, r3
 80012a2:	eeb0 0a47 	vmov.f32	s0, s14
 80012a6:	eef0 0a67 	vmov.f32	s1, s15
 80012aa:	f003 f849 	bl	8004340 <sin>
 80012ae:	ec53 2b10 	vmov	r2, r3, d0
 80012b2:	4640      	mov	r0, r8
 80012b4:	4649      	mov	r1, r9
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7fe ffeb 	bl	800029c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc73 	bl	8000bb8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a7d      	ldr	r2, [pc, #500]	; (80014cc <main+0x36c>)
 80012d6:	6013      	str	r3, [r2, #0]
	     degrees_roll  -= degrees_pitch * sin(gyz * 0.000001066);
 80012d8:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <main+0x370>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f93b 	bl	8000558 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4b79      	ldr	r3, [pc, #484]	; (80014cc <main+0x36c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f934 	bl	8000558 <__aeabi_f2d>
 80012f0:	4680      	mov	r8, r0
 80012f2:	4689      	mov	r9, r1
 80012f4:	4b73      	ldr	r3, [pc, #460]	; (80014c4 <main+0x364>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f91a 	bl	8000534 <__aeabi_i2d>
 8001300:	a361      	add	r3, pc, #388	; (adr r3, 8001488 <main+0x328>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f97f 	bl	8000608 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	ec43 2b17 	vmov	d7, r2, r3
 8001312:	eeb0 0a47 	vmov.f32	s0, s14
 8001316:	eef0 0a67 	vmov.f32	s1, s15
 800131a:	f003 f811 	bl	8004340 <sin>
 800131e:	ec53 2b10 	vmov	r2, r3, d0
 8001322:	4640      	mov	r0, r8
 8001324:	4649      	mov	r1, r9
 8001326:	f7ff f96f 	bl	8000608 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffb1 	bl	8000298 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc3b 	bl	8000bb8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a62      	ldr	r2, [pc, #392]	; (80014d0 <main+0x370>)
 8001346:	6013      	str	r3, [r2, #0]

	     acc_vector = sqrt((acx * acx) + (acy * acy) + (acz * acz));
 8001348:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <main+0x374>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	461a      	mov	r2, r3
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <main+0x374>)
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	fb03 f202 	mul.w	r2, r3, r2
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <main+0x378>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001360:	4619      	mov	r1, r3
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <main+0x378>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	fb03 f301 	mul.w	r3, r3, r1
 800136c:	441a      	add	r2, r3
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <main+0x37c>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	4619      	mov	r1, r3
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <main+0x37c>)
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	fb03 f301 	mul.w	r3, r3, r1
 8001380:	4413      	add	r3, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fbc1 	bl	8001b0a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fc12 	bl	8000bb8 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <main+0x380>)
 8001398:	6013      	str	r3, [r2, #0]
	     degrees_pitch_acc = asin((float) acy/acc_vector) * 57.2957795;
 800139a:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <main+0x378>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <main+0x380>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013b2:	eeb0 0a66 	vmov.f32	s0, s13
 80013b6:	f7ff fec1 	bl	800113c <_ZSt4asinf>
 80013ba:	ee10 3a10 	vmov	r3, s0
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	a332      	add	r3, pc, #200	; (adr r3, 8001490 <main+0x330>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f91d 	bl	8000608 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbef 	bl	8000bb8 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <main+0x384>)
 80013de:	6013      	str	r3, [r2, #0]
	     degrees_roll_acc  = asin((float) acx/acc_vector) * -57.2957795;
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <main+0x374>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <main+0x380>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013f8:	eeb0 0a66 	vmov.f32	s0, s13
 80013fc:	f7ff fe9e 	bl	800113c <_ZSt4asinf>
 8001400:	ee10 3a10 	vmov	r3, s0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	a323      	add	r3, pc, #140	; (adr r3, 8001498 <main+0x338>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f8fa 	bl	8000608 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fbcc 	bl	8000bb8 <__aeabi_d2f>
 8001420:	4603      	mov	r3, r0
 8001422:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <main+0x388>)
 8001424:	6013      	str	r3, [r2, #0]

	     degrees_pitch = degrees_pitch * 0.97 + degrees_pitch_acc * 0.03;
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <main+0x36c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f894 	bl	8000558 <__aeabi_f2d>
 8001430:	a31b      	add	r3, pc, #108	; (adr r3, 80014a0 <main+0x340>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8e7 	bl	8000608 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <main+0x384>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f886 	bl	8000558 <__aeabi_f2d>
 800144c:	a316      	add	r3, pc, #88	; (adr r3, 80014a8 <main+0x348>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f8d9 	bl	8000608 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7fe ff1d 	bl	800029c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fba5 	bl	8000bb8 <__aeabi_d2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4a16      	ldr	r2, [pc, #88]	; (80014cc <main+0x36c>)
 8001472:	6013      	str	r3, [r2, #0]
	     degrees_roll  = degrees_roll * 0.97 + degrees_roll_acc * 0.03;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <main+0x370>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f86d 	bl	8000558 <__aeabi_f2d>
 800147e:	e035      	b.n	80014ec <main+0x38c>
 8001480:	46f9000a 	.word	0x46f9000a
 8001484:	3f100240 	.word	0x3f100240
 8001488:	652c6e62 	.word	0x652c6e62
 800148c:	3eb1e26f 	.word	0x3eb1e26f
 8001490:	1a47a9e3 	.word	0x1a47a9e3
 8001494:	404ca5dc 	.word	0x404ca5dc
 8001498:	1a47a9e3 	.word	0x1a47a9e3
 800149c:	c04ca5dc 	.word	0xc04ca5dc
 80014a0:	70a3d70a 	.word	0x70a3d70a
 80014a4:	3fef0a3d 	.word	0x3fef0a3d
 80014a8:	eb851eb8 	.word	0xeb851eb8
 80014ac:	3f9eb851 	.word	0x3f9eb851
 80014b0:	20000220 	.word	0x20000220
 80014b4:	20000200 	.word	0x20000200
 80014b8:	20000206 	.word	0x20000206
 80014bc:	20000202 	.word	0x20000202
 80014c0:	20000208 	.word	0x20000208
 80014c4:	20000204 	.word	0x20000204
 80014c8:	2000020a 	.word	0x2000020a
 80014cc:	20000218 	.word	0x20000218
 80014d0:	2000021c 	.word	0x2000021c
 80014d4:	200001f8 	.word	0x200001f8
 80014d8:	200001fa 	.word	0x200001fa
 80014dc:	200001fc 	.word	0x200001fc
 80014e0:	20000214 	.word	0x20000214
 80014e4:	2000020c 	.word	0x2000020c
 80014e8:	20000210 	.word	0x20000210
 80014ec:	a392      	add	r3, pc, #584	; (adr r3, 8001738 <main+0x5d8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f889 	bl	8000608 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4614      	mov	r4, r2
 80014fc:	461d      	mov	r5, r3
 80014fe:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <main+0x598>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f828 	bl	8000558 <__aeabi_f2d>
 8001508:	a377      	add	r3, pc, #476	; (adr r3, 80016e8 <main+0x588>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f87b 	bl	8000608 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe febf 	bl	800029c <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb47 	bl	8000bb8 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4a73      	ldr	r2, [pc, #460]	; (80016fc <main+0x59c>)
 800152e:	6013      	str	r3, [r2, #0]

	     float temp = (tmp / 340.00 + 36.53) * 100;
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <main+0x5a0>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fffc 	bl	8000534 <__aeabi_i2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <main+0x5a4>)
 8001542:	f7ff f98b 	bl	800085c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	a368      	add	r3, pc, #416	; (adr r3, 80016f0 <main+0x590>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fea2 	bl	800029c <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <main+0x5a8>)
 8001566:	f7ff f84f 	bl	8000608 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb21 	bl	8000bb8 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	60fb      	str	r3, [r7, #12]
	     float formatted_pitch = degrees_pitch * 100;
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <main+0x5ac>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001710 <main+0x5b0>
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	edc7 7a02 	vstr	s15, [r7, #8]
	     float formatted_roll = degrees_roll * 100;
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <main+0x59c>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001710 <main+0x5b0>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	edc7 7a01 	vstr	s15, [r7, #4]

	     sprintf(
	       (char *)serialBuffer, "Pitch: %d.%02u, Roll: %d.%02u, Temp: %d.%02u\r\n",
	       (int)formatted_pitch / 100,
 800159e:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	ee17 1a90 	vmov	r1, s15
	     sprintf(
 80015aa:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <main+0x5b4>)
 80015ac:	fb83 2301 	smull	r2, r3, r3, r1
 80015b0:	115a      	asrs	r2, r3, #5
 80015b2:	17cb      	asrs	r3, r1, #31
 80015b4:	1ad5      	subs	r5, r2, r3
	       (unsigned int)formatted_pitch % 100,
 80015b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015be:	ee17 2a90 	vmov	r2, s15
	     sprintf(
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <main+0x5b4>)
 80015c4:	fba3 1302 	umull	r1, r3, r3, r2
 80015c8:	0959      	lsrs	r1, r3, #5
 80015ca:	2364      	movs	r3, #100	; 0x64
 80015cc:	fb03 f301 	mul.w	r3, r3, r1
 80015d0:	1ad1      	subs	r1, r2, r3
	       (int)formatted_roll / 100,
 80015d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015da:	ee17 0a90 	vmov	r0, s15
	     sprintf(
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <main+0x5b4>)
 80015e0:	fb83 2300 	smull	r2, r3, r3, r0
 80015e4:	115a      	asrs	r2, r3, #5
 80015e6:	17c3      	asrs	r3, r0, #31
 80015e8:	1ad0      	subs	r0, r2, r3
	       (unsigned int)formatted_roll % 100,
 80015ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f2:	ee17 2a90 	vmov	r2, s15
	     sprintf(
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <main+0x5b4>)
 80015f8:	fba3 4302 	umull	r4, r3, r3, r2
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	2464      	movs	r4, #100	; 0x64
 8001600:	fb04 f303 	mul.w	r3, r4, r3
 8001604:	1ad3      	subs	r3, r2, r3
	       (int)temp / 100,
 8001606:	edd7 7a03 	vldr	s15, [r7, #12]
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 6a90 	vmov	r6, s15
	     sprintf(
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <main+0x5b4>)
 8001614:	fb82 4206 	smull	r4, r2, r2, r6
 8001618:	1154      	asrs	r4, r2, #5
 800161a:	17f2      	asrs	r2, r6, #31
 800161c:	1aa4      	subs	r4, r4, r2
	       (unsigned int)temp % 100
 800161e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001626:	ee17 6a90 	vmov	r6, s15
	     sprintf(
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <main+0x5b4>)
 800162c:	fba2 c206 	umull	ip, r2, r2, r6
 8001630:	0952      	lsrs	r2, r2, #5
 8001632:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8001636:	fb0c f202 	mul.w	r2, ip, r2
 800163a:	1ab2      	subs	r2, r6, r2
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	9402      	str	r4, [sp, #8]
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	9000      	str	r0, [sp, #0]
 8001644:	460b      	mov	r3, r1
 8001646:	462a      	mov	r2, r5
 8001648:	4933      	ldr	r1, [pc, #204]	; (8001718 <main+0x5b8>)
 800164a:	4834      	ldr	r0, [pc, #208]	; (800171c <main+0x5bc>)
 800164c:	f004 fd74 	bl	8006138 <siprintf>
	     );
	     printf("%f\r\n", acx / (float)4096);
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <main+0x5c0>)
 8001652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001724 <main+0x5c4>
 8001662:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001666:	ee16 0a90 	vmov	r0, s13
 800166a:	f7fe ff75 	bl	8000558 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	482d      	ldr	r0, [pc, #180]	; (8001728 <main+0x5c8>)
 8001674:	f004 fd48 	bl	8006108 <iprintf>
	     printf("%f\r\n", acy / (float)4096);
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <main+0x5cc>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001724 <main+0x5c4>
 800168a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800168e:	ee16 0a90 	vmov	r0, s13
 8001692:	f7fe ff61 	bl	8000558 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <main+0x5c8>)
 800169c:	f004 fd34 	bl	8006108 <iprintf>
	     printf("%f\r\n", acz / (float)4096);
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <main+0x5d0>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001724 <main+0x5c4>
 80016b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016b6:	ee16 0a90 	vmov	r0, s13
 80016ba:	f7fe ff4d 	bl	8000558 <__aeabi_f2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <main+0x5c8>)
 80016c4:	f004 fd20 	bl	8006108 <iprintf>

	     HAL_UART_Transmit(&huart2, serialBuffer, strlen((char *)serialBuffer), 10);
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <main+0x5bc>)
 80016ca:	f7fe fd89 	bl	80001e0 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	230a      	movs	r3, #10
 80016d4:	4911      	ldr	r1, [pc, #68]	; (800171c <main+0x5bc>)
 80016d6:	4817      	ldr	r0, [pc, #92]	; (8001734 <main+0x5d4>)
 80016d8:	f002 fb67 	bl	8003daa <HAL_UART_Transmit>
//	     while ((HAL_GetTick() - _millis) < 4);
	     HAL_Delay(500);
 80016dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e0:	f000 fc64 	bl	8001fac <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80016e4:	e555      	b.n	8001192 <main+0x32>
 80016e6:	bf00      	nop
 80016e8:	eb851eb8 	.word	0xeb851eb8
 80016ec:	3f9eb851 	.word	0x3f9eb851
 80016f0:	0a3d70a4 	.word	0x0a3d70a4
 80016f4:	404243d7 	.word	0x404243d7
 80016f8:	20000210 	.word	0x20000210
 80016fc:	2000021c 	.word	0x2000021c
 8001700:	200001fe 	.word	0x200001fe
 8001704:	40754000 	.word	0x40754000
 8001708:	40590000 	.word	0x40590000
 800170c:	20000218 	.word	0x20000218
 8001710:	42c80000 	.word	0x42c80000
 8001714:	51eb851f 	.word	0x51eb851f
 8001718:	080085a8 	.word	0x080085a8
 800171c:	20000224 	.word	0x20000224
 8001720:	200001f8 	.word	0x200001f8
 8001724:	45800000 	.word	0x45800000
 8001728:	080085d8 	.word	0x080085d8
 800172c:	200001fa 	.word	0x200001fa
 8001730:	200001fc 	.word	0x200001fc
 8001734:	200002d4 	.word	0x200002d4
 8001738:	70a3d70a 	.word	0x70a3d70a
 800173c:	3fef0a3d 	.word	0x3fef0a3d

08001740 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f004 f868 	bl	8005824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <_Z18SystemClock_Configv+0xe0>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 800178a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <_Z18SystemClock_Configv+0xe4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179c:	2302      	movs	r3, #2
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2310      	movs	r3, #16
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	2302      	movs	r3, #2
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017b0:	2310      	movs	r3, #16
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017be:	2304      	movs	r3, #4
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fe2e 	bl	8003428 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80017dc:	f000 f990 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e0:	230f      	movs	r3, #15
 80017e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2102      	movs	r1, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 f88b 	bl	8003918 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf14      	ite	ne
 8001808:	2301      	movne	r3, #1
 800180a:	2300      	moveq	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001812:	f000 f975 	bl	8001b00 <Error_Handler>
  }
}
 8001816:	bf00      	nop
 8001818:	3750      	adds	r7, #80	; 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <_Z12MPU6050_Initv>:

/* USER CODE BEGIN 4 */
void MPU6050_Init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af02      	add	r7, sp, #8
  uint8_t PWR_MGMT_1[2] = {0x6B, 0x00};
 800182e:	236b      	movs	r3, #107	; 0x6b
 8001830:	81bb      	strh	r3, [r7, #12]
  while (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 2, 10) != HAL_OK);
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	230a      	movs	r3, #10
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	21d0      	movs	r1, #208	; 0xd0
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <_Z12MPU6050_Initv+0xb0>)
 8001840:	f000 ffa0 	bl	8002784 <HAL_I2C_Master_Transmit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d000      	beq.n	8001856 <_Z12MPU6050_Initv+0x2e>
 8001854:	e7ed      	b.n	8001832 <_Z12MPU6050_Initv+0xa>

  uint8_t GYR_CONFIG[2] = {0x1B, 0x08};
 8001856:	f640 031b 	movw	r3, #2075	; 0x81b
 800185a:	813b      	strh	r3, [r7, #8]
  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, GYR_CONFIG, 2, 10) != HAL_OK);
 800185c:	f107 0208 	add.w	r2, r7, #8
 8001860:	230a      	movs	r3, #10
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2302      	movs	r3, #2
 8001866:	21d0      	movs	r1, #208	; 0xd0
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <_Z12MPU6050_Initv+0xb0>)
 800186a:	f000 ff8b 	bl	8002784 <HAL_I2C_Master_Transmit>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d000      	beq.n	8001880 <_Z12MPU6050_Initv+0x58>
 800187e:	e7ed      	b.n	800185c <_Z12MPU6050_Initv+0x34>

  uint8_t ACC_CONFIG[2] = {0x1C, 0x10};
 8001880:	f241 031c 	movw	r3, #4124	; 0x101c
 8001884:	80bb      	strh	r3, [r7, #4]
  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, ACC_CONFIG, 2, 10) != HAL_OK);
 8001886:	1d3a      	adds	r2, r7, #4
 8001888:	230a      	movs	r3, #10
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2302      	movs	r3, #2
 800188e:	21d0      	movs	r1, #208	; 0xd0
 8001890:	4811      	ldr	r0, [pc, #68]	; (80018d8 <_Z12MPU6050_Initv+0xb0>)
 8001892:	f000 ff77 	bl	8002784 <HAL_I2C_Master_Transmit>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d000      	beq.n	80018a8 <_Z12MPU6050_Initv+0x80>
 80018a6:	e7ee      	b.n	8001886 <_Z12MPU6050_Initv+0x5e>

  uint8_t LPF_CONFIG[2] = {0x1A, 0x03};
 80018a8:	f240 331a 	movw	r3, #794	; 0x31a
 80018ac:	803b      	strh	r3, [r7, #0]
  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, LPF_CONFIG, 2, 10) != HAL_OK);
 80018ae:	463a      	mov	r2, r7
 80018b0:	230a      	movs	r3, #10
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2302      	movs	r3, #2
 80018b6:	21d0      	movs	r1, #208	; 0xd0
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <_Z12MPU6050_Initv+0xb0>)
 80018ba:	f000 ff63 	bl	8002784 <HAL_I2C_Master_Transmit>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d000      	beq.n	80018d0 <_Z12MPU6050_Initv+0xa8>
 80018ce:	e7ee      	b.n	80018ae <_Z12MPU6050_Initv+0x86>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000280 	.word	0x20000280

080018dc <_Z12read_MPU6050v>:

/* MPU6050 read data function ------------------------------------------------*/
void read_MPU6050(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af02      	add	r7, sp, #8
  uint8_t data[14];
  uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80018e2:	233b      	movs	r3, #59	; 0x3b
 80018e4:	71fb      	strb	r3, [r7, #7]

  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &reg, 1, 1000) != HAL_OK);
 80018e6:	1dfa      	adds	r2, r7, #7
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	21d0      	movs	r1, #208	; 0xd0
 80018f2:	4831      	ldr	r0, [pc, #196]	; (80019b8 <_Z12read_MPU6050v+0xdc>)
 80018f4:	f000 ff46 	bl	8002784 <HAL_I2C_Master_Transmit>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d000      	beq.n	800190a <_Z12read_MPU6050v+0x2e>
 8001908:	e7ed      	b.n	80018e6 <_Z12read_MPU6050v+0xa>
  while(HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, data, 14, 1000) != HAL_OK);
 800190a:	f107 0208 	add.w	r2, r7, #8
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	230e      	movs	r3, #14
 8001916:	21d0      	movs	r1, #208	; 0xd0
 8001918:	4827      	ldr	r0, [pc, #156]	; (80019b8 <_Z12read_MPU6050v+0xdc>)
 800191a:	f001 f831 	bl	8002980 <HAL_I2C_Master_Receive>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d000      	beq.n	8001930 <_Z12read_MPU6050v+0x54>
 800192e:	e7ec      	b.n	800190a <_Z12read_MPU6050v+0x2e>

  /* Formatted accelerometer data */
  acx = (int16_t)(data[0] << 8 | data[1]);
 8001930:	7a3b      	ldrb	r3, [r7, #8]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	7a7b      	ldrb	r3, [r7, #9]
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <_Z12read_MPU6050v+0xe0>)
 8001940:	801a      	strh	r2, [r3, #0]
  acy = (int16_t)(data[2] << 8 | data[3]);
 8001942:	7abb      	ldrb	r3, [r7, #10]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21a      	sxth	r2, r3
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <_Z12read_MPU6050v+0xe4>)
 8001952:	801a      	strh	r2, [r3, #0]
  acz = (int16_t)(data[4] << 8 | data[5]);
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	7b7b      	ldrb	r3, [r7, #13]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <_Z12read_MPU6050v+0xe8>)
 8001964:	801a      	strh	r2, [r3, #0]

  /* Formatted temperature */
  tmp = (data[6] << 8 | data[7]);
 8001966:	7bbb      	ldrb	r3, [r7, #14]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21a      	sxth	r2, r3
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <_Z12read_MPU6050v+0xec>)
 8001976:	801a      	strh	r2, [r3, #0]

  /* Formatted gyroscope data */
  gyx = (int16_t)(data[8] << 8 | data[9]);
 8001978:	7c3b      	ldrb	r3, [r7, #16]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b21a      	sxth	r2, r3
 800197e:	7c7b      	ldrb	r3, [r7, #17]
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21a      	sxth	r2, r3
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_Z12read_MPU6050v+0xf0>)
 8001988:	801a      	strh	r2, [r3, #0]
  gyy = (int16_t)(data[10] << 8 | data[11]);
 800198a:	7cbb      	ldrb	r3, [r7, #18]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21a      	sxth	r2, r3
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <_Z12read_MPU6050v+0xf4>)
 800199a:	801a      	strh	r2, [r3, #0]
  gyz = (int16_t)(data[12] << 8 | data[13]);
 800199c:	7d3b      	ldrb	r3, [r7, #20]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	7d7b      	ldrb	r3, [r7, #21]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <_Z12read_MPU6050v+0xf8>)
 80019ac:	801a      	strh	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000280 	.word	0x20000280
 80019bc:	200001f8 	.word	0x200001f8
 80019c0:	200001fa 	.word	0x200001fa
 80019c4:	200001fc 	.word	0x200001fc
 80019c8:	200001fe 	.word	0x200001fe
 80019cc:	20000200 	.word	0x20000200
 80019d0:	20000202 	.word	0x20000202
 80019d4:	20000204 	.word	0x20000204

080019d8 <_Z18calibirate_MPU6050i>:

/* MPU6050 calibrate function ------------------------------------------------*/
void calibirate_MPU6050(int num_iterations) {
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  strcpy((char *)serialBuffer, "Calibrating MPU6050..\r\n");
 80019e0:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <_Z18calibirate_MPU6050i+0x104>)
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019f0:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, serialBuffer, strlen((char *)serialBuffer), 10);
 80019f4:	4838      	ldr	r0, [pc, #224]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 80019f6:	f7fe fbf3 	bl	80001e0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	230a      	movs	r3, #10
 8001a00:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 8001a02:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <_Z18calibirate_MPU6050i+0x108>)
 8001a04:	f002 f9d1 	bl	8003daa <HAL_UART_Transmit>
  for (int i = 0; i < num_iterations; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da2c      	bge.n	8001a6e <_Z18calibirate_MPU6050i+0x96>
    read_MPU6050();
 8001a14:	f7ff ff62 	bl	80018dc <_Z12read_MPU6050v>
    offset_gyx += gyx;
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <_Z18calibirate_MPU6050i+0x10c>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <_Z18calibirate_MPU6050i+0x110>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <_Z18calibirate_MPU6050i+0x10c>)
 8001a30:	801a      	strh	r2, [r3, #0]
    offset_gyy += gyy;
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <_Z18calibirate_MPU6050i+0x114>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <_Z18calibirate_MPU6050i+0x118>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <_Z18calibirate_MPU6050i+0x114>)
 8001a4a:	801a      	strh	r2, [r3, #0]
    offset_gyz += gyz;
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <_Z18calibirate_MPU6050i+0x11c>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <_Z18calibirate_MPU6050i+0x120>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <_Z18calibirate_MPU6050i+0x11c>)
 8001a64:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num_iterations; i++) {
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e7ce      	b.n	8001a0c <_Z18calibirate_MPU6050i+0x34>
  }

  offset_gyx /= num_iterations;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <_Z18calibirate_MPU6050i+0x10c>)
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <_Z18calibirate_MPU6050i+0x10c>)
 8001a80:	801a      	strh	r2, [r3, #0]
  offset_gyy /= num_iterations;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <_Z18calibirate_MPU6050i+0x114>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <_Z18calibirate_MPU6050i+0x114>)
 8001a94:	801a      	strh	r2, [r3, #0]
  offset_gyz /= num_iterations;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <_Z18calibirate_MPU6050i+0x11c>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_Z18calibirate_MPU6050i+0x11c>)
 8001aa8:	801a      	strh	r2, [r3, #0]

  strcpy((char *)serialBuffer, "Done calibrating!\r\n");
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_Z18calibirate_MPU6050i+0x124>)
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, serialBuffer, strlen((char *)serialBuffer), 10);
 8001aba:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 8001abc:	f7fe fb90 	bl	80001e0 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	4904      	ldr	r1, [pc, #16]	; (8001ad8 <_Z18calibirate_MPU6050i+0x100>)
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <_Z18calibirate_MPU6050i+0x108>)
 8001aca:	f002 f96e 	bl	8003daa <HAL_UART_Transmit>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000224 	.word	0x20000224
 8001adc:	080085e0 	.word	0x080085e0
 8001ae0:	200002d4 	.word	0x200002d4
 8001ae4:	20000206 	.word	0x20000206
 8001ae8:	20000200 	.word	0x20000200
 8001aec:	20000208 	.word	0x20000208
 8001af0:	20000202 	.word	0x20000202
 8001af4:	2000020a 	.word	0x2000020a
 8001af8:	20000204 	.word	0x20000204
 8001afc:	080085f8 	.word	0x080085f8

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>

08001b0a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe fd0e 	bl	8000534 <__aeabi_i2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ec43 2b10 	vmov	d0, r2, r3
 8001b20:	f002 fc62 	bl	80043e8 <sqrt>
 8001b24:	eeb0 7a40 	vmov.f32	s14, s0
 8001b28:	eef0 7a60 	vmov.f32	s15, s1
 8001b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b30:	eef0 0a67 	vmov.f32	s1, s15
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b7a:	2007      	movs	r0, #7
 8001b7c:	f000 faec 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f9c8 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_kill>:

int _kill(int pid, int sig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bfa:	f003 fde9 	bl	80057d0 <__errno>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2216      	movs	r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
	return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_exit>:

void _exit (int status)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe7 	bl	8001bf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c22:	e7fe      	b.n	8001c22 <_exit+0x12>

08001c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e00a      	b.n	8001c4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c36:	f3af 8000 	nop.w
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf0      	blt.n	8001c36 <_read+0x12>
	}

return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f969 	bl	8000f50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf1      	blt.n	8001c70 <_write+0x12>
	}
	return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_close>:

int _close(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_isatty>:

int _isatty(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f003 fd4e 	bl	80057d0 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20020000 	.word	0x20020000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000274 	.word	0x20000274
 8001d68:	20000330 	.word	0x20000330

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_USART2_UART_Init+0x50>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f001 ffa2 	bl	8003d10 <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dd2:	f7ff fe95 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002d4 	.word	0x200002d4
 8001de0:	40004400 	.word	0x40004400

08001de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_UART_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_UART_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3e:	230c      	movs	r3, #12
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <HAL_UART_MspInit+0x8c>)
 8001e5a:	f000 f9b1 	bl	80021c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e7a:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e7c:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e90:	4c0b      	ldr	r4, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e9e:	f7ff ff65 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea2:	f003 fc9b 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea6:	f7ff f95b 	bl	8001160 <main>
  bx  lr    
 8001eaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001eb8:	08008bf4 	.word	0x08008bf4
  ldr r2, =_sbss
 8001ebc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ec0:	2000032c 	.word	0x2000032c

08001ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_Init+0x40>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_Init+0x40>)
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_Init+0x40>)
 8001eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 f931 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f000 f808 	bl	8001f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efc:	f7ff fe1e 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x54>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x58>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f93b 	bl	80021a6 <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 f911 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <HAL_InitTick+0x5c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000318 	.word	0x20000318

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000318 	.word	0x20000318

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff47 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff5c 	bl	800203c <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffb0 	bl	8002114 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e159      	b.n	8002490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8148 	bne.w	800248a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a2 	beq.w	800248a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_GPIO_Init+0x2e8>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b54      	ldr	r3, [pc, #336]	; (80024a8 <HAL_GPIO_Init+0x2e8>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_GPIO_Init+0x2ec>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a49      	ldr	r2, [pc, #292]	; (80024b0 <HAL_GPIO_Init+0x2f0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x202>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2f4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x1fe>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a47      	ldr	r2, [pc, #284]	; (80024b8 <HAL_GPIO_Init+0x2f8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x1fa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a46      	ldr	r2, [pc, #280]	; (80024bc <HAL_GPIO_Init+0x2fc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x1f6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a45      	ldr	r2, [pc, #276]	; (80024c0 <HAL_GPIO_Init+0x300>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x1f2>
 80023ae:	2304      	movs	r3, #4
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x204>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x2ec>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x304>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_GPIO_Init+0x304>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x304>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f aea2 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e12b      	b.n	8002766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fdc2 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002560:	f001 fbae 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a81      	ldr	r2, [pc, #516]	; (8002770 <HAL_I2C_Init+0x274>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d807      	bhi.n	8002580 <HAL_I2C_Init+0x84>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_I2C_Init+0x278>)
 8002574:	4293      	cmp	r3, r2
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e006      	b.n	800258e <HAL_I2C_Init+0x92>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a7d      	ldr	r2, [pc, #500]	; (8002778 <HAL_I2C_Init+0x27c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0e7      	b.n	8002766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a78      	ldr	r2, [pc, #480]	; (800277c <HAL_I2C_Init+0x280>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_I2C_Init+0x274>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d802      	bhi.n	80025d0 <HAL_I2C_Init+0xd4>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3301      	adds	r3, #1
 80025ce:	e009      	b.n	80025e4 <HAL_I2C_Init+0xe8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_I2C_Init+0x284>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	495c      	ldr	r1, [pc, #368]	; (8002770 <HAL_I2C_Init+0x274>)
 8002600:	428b      	cmp	r3, r1
 8002602:	d819      	bhi.n	8002638 <HAL_I2C_Init+0x13c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e59      	subs	r1, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002618:	400b      	ands	r3, r1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_I2C_Init+0x138>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e59      	subs	r1, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fbb1 f3f3 	udiv	r3, r1, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	e051      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002634:	2304      	movs	r3, #4
 8002636:	e04f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d111      	bne.n	8002664 <HAL_I2C_Init+0x168>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e012      	b.n	800268a <HAL_I2C_Init+0x18e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x196>
 800268e:	2301      	movs	r3, #1
 8002690:	e022      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <HAL_I2C_Init+0x1bc>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e58      	subs	r0, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	440b      	add	r3, r1
 80026a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	e00f      	b.n	80026d8 <HAL_I2C_Init+0x1dc>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	0099      	lsls	r1, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6911      	ldr	r1, [r2, #16]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	430b      	orrs	r3, r1
 800271a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	000186a0 	.word	0x000186a0
 8002774:	001e847f 	.word	0x001e847f
 8002778:	003d08ff 	.word	0x003d08ff
 800277c:	431bde83 	.word	0x431bde83
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	460b      	mov	r3, r1
 8002792:	817b      	strh	r3, [r7, #10]
 8002794:	4613      	mov	r3, r2
 8002796:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff fbfc 	bl	8001f94 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	f040 80e0 	bne.w	800296c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2319      	movs	r3, #25
 80027b2:	2201      	movs	r2, #1
 80027b4:	4970      	ldr	r1, [pc, #448]	; (8002978 <HAL_I2C_Master_Transmit+0x1f4>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fc58 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	e0d3      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x50>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0cc      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d007      	beq.n	80027fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002808:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2221      	movs	r2, #33	; 0x21
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2210      	movs	r2, #16
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	893a      	ldrh	r2, [r7, #8]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_I2C_Master_Transmit+0x1f8>)
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fac2 	bl	8002dcc <I2C_MasterRequestWrite>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e08d      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002868:	e066      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	6a39      	ldr	r1, [r7, #32]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fcd2 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b04      	cmp	r3, #4
 8002880:	d107      	bne.n	8002892 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06b      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d11b      	bne.n	800290c <HAL_I2C_Master_Transmit+0x188>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fcc2 	bl	800329a <I2C_WaitOnBTFFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b04      	cmp	r3, #4
 8002922:	d107      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e01a      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d194      	bne.n	800286a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	00100002 	.word	0x00100002
 800297c:	ffff0000 	.word	0xffff0000

08002980 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
 8002990:	4613      	mov	r3, r2
 8002992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff fafe 	bl	8001f94 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 820b 	bne.w	8002dbe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	497c      	ldr	r1, [pc, #496]	; (8002ba4 <HAL_I2C_Master_Receive+0x224>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fb5a 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e1fe      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_Master_Receive+0x50>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e1f7      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2222      	movs	r2, #34	; 0x22
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a5c      	ldr	r2, [pc, #368]	; (8002ba8 <HAL_I2C_Master_Receive+0x228>)
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa46 	bl	8002ed0 <I2C_MasterRequestRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1b8      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e18c      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11b      	bne.n	8002abe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e16c      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d11b      	bne.n	8002afe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	e14c      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b24:	e138      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	f200 80f1 	bhi.w	8002d12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d123      	bne.n	8002b80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fbed 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e139      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b7e:	e10b      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d14e      	bne.n	8002c26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4906      	ldr	r1, [pc, #24]	; (8002bac <HAL_I2C_Master_Receive+0x22c>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fa6a 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e10e      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
 8002ba2:	bf00      	nop
 8002ba4:	00100002 	.word	0x00100002
 8002ba8:	ffff0000 	.word	0xffff0000
 8002bac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c24:	e0b8      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4966      	ldr	r1, [pc, #408]	; (8002dc8 <HAL_I2C_Master_Receive+0x448>)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fa1b 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0bf      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	2200      	movs	r2, #0
 8002c8a:	494f      	ldr	r1, [pc, #316]	; (8002dc8 <HAL_I2C_Master_Receive+0x448>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f9ed 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e091      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d10:	e042      	b.n	8002d98 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fb00 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e04c      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d118      	bne.n	8002d98 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f aec2 	bne.w	8002b26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00010004 	.word	0x00010004

08002dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d006      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d003      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d108      	bne.n	8002e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e00b      	b.n	8002e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	2b12      	cmp	r3, #18
 8002e0e:	d107      	bne.n	8002e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f91d 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d103      	bne.n	8002e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e035      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	e01b      	b.n	8002ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	11db      	asrs	r3, r3, #7
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f063 030f 	orn	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <I2C_MasterRequestWrite+0xfc>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f943 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e010      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <I2C_MasterRequestWrite+0x100>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f933 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010008 	.word	0x00010008
 8002ecc:	00010002 	.word	0x00010002

08002ed0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	460b      	mov	r3, r1
 8002ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d006      	beq.n	8002f0a <I2C_MasterRequestRead+0x3a>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d003      	beq.n	8002f0a <I2C_MasterRequestRead+0x3a>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f08:	d108      	bne.n	8002f1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e00b      	b.n	8002f34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b11      	cmp	r3, #17
 8002f22:	d107      	bne.n	8002f34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f893 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5a:	d103      	bne.n	8002f64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e079      	b.n	800305c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]
 8002f82:	e05f      	b.n	8003044 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f84:	897b      	ldrh	r3, [r7, #10]
 8002f86:	11db      	asrs	r3, r3, #7
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0306 	and.w	r3, r3, #6
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f063 030f 	orn	r3, r3, #15
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4930      	ldr	r1, [pc, #192]	; (8003064 <I2C_MasterRequestRead+0x194>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8b9 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e054      	b.n	800305c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4929      	ldr	r1, [pc, #164]	; (8003068 <I2C_MasterRequestRead+0x198>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8a9 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e044      	b.n	800305c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f831 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d103      	bne.n	8003028 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e017      	b.n	800305c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	11db      	asrs	r3, r3, #7
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 0306 	and.w	r3, r3, #6
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f063 030e 	orn	r3, r3, #14
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4907      	ldr	r1, [pc, #28]	; (8003068 <I2C_MasterRequestRead+0x198>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f865 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	00010008 	.word	0x00010008
 8003068:	00010002 	.word	0x00010002

0800306c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800307c:	e025      	b.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d021      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe ff85 	bl	8001f94 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e023      	b.n	8003112 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10d      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	e00c      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0b6      	beq.n	800307e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	e051      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003138:	d123      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003152:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0204 	orr.w	r2, r3, #4
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e046      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d021      	beq.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe ff03 	bl	8001f94 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e020      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10c      	bne.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e00b      	b.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d18d      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003224:	e02d      	b.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8ce 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e02d      	b.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d021      	beq.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe fea9 	bl	8001f94 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d1ca      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a6:	e02d      	b.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f88d 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e02d      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d021      	beq.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fe fe68 	bl	8001f94 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d1ca      	bne.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003328:	e042      	b.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b10      	cmp	r3, #16
 8003336:	d119      	bne.n	800336c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0210 	mvn.w	r2, #16
 8003340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e029      	b.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fe12 	bl	8001f94 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d1b5      	bne.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d11b      	bne.n	8003418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e264      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d075      	beq.n	8003532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003446:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d00c      	beq.n	800346c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003452:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345a:	2b08      	cmp	r3, #8
 800345c:	d112      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b99      	ldr	r3, [pc, #612]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05b      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d157      	bne.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e23f      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x74>
 800348e:	4b91      	ldr	r3, [pc, #580]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fd58 	bl	8001f94 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe fd54 	bl	8001f94 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e204      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fd44 	bl	8001f94 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe fd40 	bl	8001f94 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e1f0      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d063      	beq.n	8003606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1c4      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4952      	ldr	r1, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fe fcf9 	bl	8001f94 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fe fcf5 	bl	8001f94 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1a5      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4940      	ldr	r1, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fcd8 	bl	8001f94 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fe fcd4 	bl	8001f94 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e184      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe fcb8 	bl	8001f94 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fcb4 	bl	8001f94 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e164      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x200>
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fca1 	bl	8001f94 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fc9d 	bl	8001f94 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e14d      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a0 	beq.w	80037c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fc63 	bl	8001f94 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e011      	b.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
 80036e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fe fc56 	bl	8001f94 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e106      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b85      	ldr	r3, [pc, #532]	; (800390c <HAL_RCC_OscConfig+0x4e4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x2f0>
 800370a:	4b81      	ldr	r3, [pc, #516]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a80      	ldr	r2, [pc, #512]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e01c      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 8003720:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a7a      	ldr	r2, [pc, #488]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a77      	ldr	r2, [pc, #476]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 800373a:	4b75      	ldr	r3, [pc, #468]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a74      	ldr	r2, [pc, #464]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b72      	ldr	r3, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a71      	ldr	r2, [pc, #452]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d015      	beq.n	8003786 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe fc1b 	bl	8001f94 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe fc17 	bl	8001f94 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0c5      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b65      	ldr	r3, [pc, #404]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCC_OscConfig+0x33a>
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe fc05 	bl	8001f94 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe fc01 	bl	8001f94 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0af      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	4b5a      	ldr	r3, [pc, #360]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 809b 	beq.w	8003902 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d05c      	beq.n	8003892 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d141      	bne.n	8003864 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fbd5 	bl	8001f94 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fbd1 	bl	8001f94 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e081      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	019b      	lsls	r3, r3, #6
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	4937      	ldr	r1, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fbaa 	bl	8001f94 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fba6 	bl	8001f94 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e056      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x41c>
 8003862:	e04e      	b.n	8003902 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fe fb93 	bl	8001f94 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe fb8f 	bl	8001f94 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03f      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
 8003890:	e037      	b.n	8003902 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e032      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d028      	beq.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d121      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d11a      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d111      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40007000 	.word	0x40007000
 8003910:	40023800 	.word	0x40023800
 8003914:	42470060 	.word	0x42470060

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0cc      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d90c      	bls.n	8003954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d044      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e067      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0203 	bic.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4934      	ldr	r1, [pc, #208]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a08:	f7fe fac4 	bl	8001f94 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fe fac0 	bl	8001f94 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e04f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 020c 	and.w	r2, r3, #12
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1eb      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d20c      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fa24 	bl	8001f0c <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	0800860c 	.word	0x0800860c
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	2300      	movs	r3, #0
 8003af6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003afc:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d00d      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x40>
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	f200 80bd 	bhi.w	8003c88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x34>
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b16:	e0b7      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b1a:	60bb      	str	r3, [r7, #8]
       break;
 8003b1c:	e0b7      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1e:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b20:	60bb      	str	r3, [r7, #8]
      break;
 8003b22:	e0b4      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b24:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2e:	4b5b      	ldr	r3, [pc, #364]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04d      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3a:	4b58      	ldr	r3, [pc, #352]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	461a      	mov	r2, r3
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	ea02 0800 	and.w	r8, r2, r0
 8003b52:	ea03 0901 	and.w	r9, r3, r1
 8003b56:	4640      	mov	r0, r8
 8003b58:	4649      	mov	r1, r9
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	014b      	lsls	r3, r1, #5
 8003b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b68:	0142      	lsls	r2, r0, #5
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	ebb0 0008 	subs.w	r0, r0, r8
 8003b72:	eb61 0109 	sbc.w	r1, r1, r9
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	018b      	lsls	r3, r1, #6
 8003b80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b84:	0182      	lsls	r2, r0, #6
 8003b86:	1a12      	subs	r2, r2, r0
 8003b88:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8c:	f04f 0000 	mov.w	r0, #0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	00d9      	lsls	r1, r3, #3
 8003b96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b9a:	00d0      	lsls	r0, r2, #3
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	eb12 0208 	adds.w	r2, r2, r8
 8003ba4:	eb43 0309 	adc.w	r3, r3, r9
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	0259      	lsls	r1, r3, #9
 8003bb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bb6:	0250      	lsls	r0, r2, #9
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	f7fd f846 	bl	8000c58 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e04a      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	ea02 0400 	and.w	r4, r2, r0
 8003bee:	ea03 0501 	and.w	r5, r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	014b      	lsls	r3, r1, #5
 8003c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c04:	0142      	lsls	r2, r0, #5
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	1b00      	subs	r0, r0, r4
 8003c0c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	018b      	lsls	r3, r1, #6
 8003c1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c1e:	0182      	lsls	r2, r0, #6
 8003c20:	1a12      	subs	r2, r2, r0
 8003c22:	eb63 0301 	sbc.w	r3, r3, r1
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	00d9      	lsls	r1, r3, #3
 8003c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c34:	00d0      	lsls	r0, r2, #3
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	1912      	adds	r2, r2, r4
 8003c3c:	eb45 0303 	adc.w	r3, r5, r3
 8003c40:	f04f 0000 	mov.w	r0, #0
 8003c44:	f04f 0100 	mov.w	r1, #0
 8003c48:	0299      	lsls	r1, r3, #10
 8003c4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c4e:	0290      	lsls	r0, r2, #10
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	f7fc fffa 	bl	8000c58 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	3301      	adds	r3, #1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	60bb      	str	r3, [r7, #8]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c8a:	60bb      	str	r3, [r7, #8]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	0800861c 	.word	0x0800861c

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cec:	f7ff ffdc 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	0800861c 	.word	0x0800861c

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e03f      	b.n	8003da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe f854 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f929 	bl	8003fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08a      	sub	sp, #40	; 0x28
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d17c      	bne.n	8003ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Transmit+0x2c>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e075      	b.n	8003ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x3e>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e06e      	b.n	8003ec6 <HAL_UART_Transmit+0x11c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2221      	movs	r2, #33	; 0x21
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fe f8c9 	bl	8001f94 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d108      	bne.n	8003e2c <HAL_UART_Transmit+0x82>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e003      	b.n	8003e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e3c:	e02a      	b.n	8003e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f840 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e036      	b.n	8003ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	3302      	adds	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e007      	b.n	8003e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1cf      	bne.n	8003e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f810 	bl	8003ece <UART_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b090      	sub	sp, #64	; 0x40
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ede:	e050      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d04c      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x30>
 8003eee:	f7fe f851 	bl	8001f94 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d241      	bcs.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	613b      	str	r3, [r7, #16]
   return(result);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f52:	623a      	str	r2, [r7, #32]
 8003f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e00f      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d09f      	beq.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3740      	adds	r7, #64	; 0x40
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	b09f      	sub	sp, #124	; 0x7c
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	68d9      	ldr	r1, [r3, #12]
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	ea40 0301 	orr.w	r3, r0, r1
 8003fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ff0:	f021 010c 	bic.w	r1, r1, #12
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	6999      	ldr	r1, [r3, #24]
 800400c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	ea40 0301 	orr.w	r3, r0, r1
 8004014:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4bc5      	ldr	r3, [pc, #788]	; (8004330 <UART_SetConfig+0x384>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d004      	beq.n	800402a <UART_SetConfig+0x7e>
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4bc3      	ldr	r3, [pc, #780]	; (8004334 <UART_SetConfig+0x388>)
 8004026:	429a      	cmp	r2, r3
 8004028:	d103      	bne.n	8004032 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800402a:	f7ff fe5d 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 800402e:	6778      	str	r0, [r7, #116]	; 0x74
 8004030:	e002      	b.n	8004038 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004032:	f7ff fe45 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8004036:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 80b6 	bne.w	80041b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004046:	461c      	mov	r4, r3
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	1891      	adds	r1, r2, r2
 8004052:	6439      	str	r1, [r7, #64]	; 0x40
 8004054:	415b      	adcs	r3, r3
 8004056:	647b      	str	r3, [r7, #68]	; 0x44
 8004058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800405c:	1912      	adds	r2, r2, r4
 800405e:	eb45 0303 	adc.w	r3, r5, r3
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	00d9      	lsls	r1, r3, #3
 800406c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004070:	00d0      	lsls	r0, r2, #3
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	1911      	adds	r1, r2, r4
 8004078:	6639      	str	r1, [r7, #96]	; 0x60
 800407a:	416b      	adcs	r3, r5
 800407c:	667b      	str	r3, [r7, #100]	; 0x64
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	1891      	adds	r1, r2, r2
 800408a:	63b9      	str	r1, [r7, #56]	; 0x38
 800408c:	415b      	adcs	r3, r3
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004094:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004098:	f7fc fdde 	bl	8000c58 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <UART_SetConfig+0x38c>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011e      	lsls	r6, r3, #4
 80040aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ac:	461c      	mov	r4, r3
 80040ae:	f04f 0500 	mov.w	r5, #0
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	6339      	str	r1, [r7, #48]	; 0x30
 80040ba:	415b      	adcs	r3, r3
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040c2:	1912      	adds	r2, r2, r4
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	00d9      	lsls	r1, r3, #3
 80040d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d6:	00d0      	lsls	r0, r2, #3
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	1911      	adds	r1, r2, r4
 80040de:	65b9      	str	r1, [r7, #88]	; 0x58
 80040e0:	416b      	adcs	r3, r5
 80040e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80040f2:	415b      	adcs	r3, r3
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040fe:	f7fc fdab 	bl	8000c58 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <UART_SetConfig+0x38c>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a87      	ldr	r2, [pc, #540]	; (8004338 <UART_SetConfig+0x38c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004128:	441e      	add	r6, r3
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	4618      	mov	r0, r3
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	1894      	adds	r4, r2, r2
 8004138:	623c      	str	r4, [r7, #32]
 800413a:	415b      	adcs	r3, r3
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004142:	1812      	adds	r2, r2, r0
 8004144:	eb41 0303 	adc.w	r3, r1, r3
 8004148:	f04f 0400 	mov.w	r4, #0
 800414c:	f04f 0500 	mov.w	r5, #0
 8004150:	00dd      	lsls	r5, r3, #3
 8004152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004156:	00d4      	lsls	r4, r2, #3
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	1814      	adds	r4, r2, r0
 800415e:	653c      	str	r4, [r7, #80]	; 0x50
 8004160:	414b      	adcs	r3, r1
 8004162:	657b      	str	r3, [r7, #84]	; 0x54
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	1891      	adds	r1, r2, r2
 8004170:	61b9      	str	r1, [r7, #24]
 8004172:	415b      	adcs	r3, r3
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800417e:	f7fc fd6b 	bl	8000c58 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b6c      	ldr	r3, [pc, #432]	; (8004338 <UART_SetConfig+0x38c>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <UART_SetConfig+0x38c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4432      	add	r2, r6
 80041ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041ae:	e0b9      	b.n	8004324 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b2:	461c      	mov	r4, r3
 80041b4:	f04f 0500 	mov.w	r5, #0
 80041b8:	4622      	mov	r2, r4
 80041ba:	462b      	mov	r3, r5
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	6139      	str	r1, [r7, #16]
 80041c0:	415b      	adcs	r3, r3
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c8:	1912      	adds	r2, r2, r4
 80041ca:	eb45 0303 	adc.w	r3, r5, r3
 80041ce:	f04f 0000 	mov.w	r0, #0
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	00d9      	lsls	r1, r3, #3
 80041d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041dc:	00d0      	lsls	r0, r2, #3
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	eb12 0804 	adds.w	r8, r2, r4
 80041e6:	eb43 0905 	adc.w	r9, r3, r5
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	008b      	lsls	r3, r1, #2
 80041fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004202:	0082      	lsls	r2, r0, #2
 8004204:	4640      	mov	r0, r8
 8004206:	4649      	mov	r1, r9
 8004208:	f7fc fd26 	bl	8000c58 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <UART_SetConfig+0x38c>)
 8004212:	fba3 2302 	umull	r2, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	011e      	lsls	r6, r3, #4
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	4618      	mov	r0, r3
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	1894      	adds	r4, r2, r2
 8004228:	60bc      	str	r4, [r7, #8]
 800422a:	415b      	adcs	r3, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004232:	1812      	adds	r2, r2, r0
 8004234:	eb41 0303 	adc.w	r3, r1, r3
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	f04f 0500 	mov.w	r5, #0
 8004240:	00dd      	lsls	r5, r3, #3
 8004242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004246:	00d4      	lsls	r4, r2, #3
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	1814      	adds	r4, r2, r0
 800424e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004250:	414b      	adcs	r3, r1
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	008b      	lsls	r3, r1, #2
 8004268:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800426c:	0082      	lsls	r2, r0, #2
 800426e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004272:	f7fc fcf1 	bl	8000c58 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <UART_SetConfig+0x38c>)
 800427c:	fba3 1302 	umull	r1, r3, r3, r2
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	2164      	movs	r1, #100	; 0x64
 8004284:	fb01 f303 	mul.w	r3, r1, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	3332      	adds	r3, #50	; 0x32
 800428e:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <UART_SetConfig+0x38c>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429a:	441e      	add	r6, r3
 800429c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429e:	4618      	mov	r0, r3
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	1894      	adds	r4, r2, r2
 80042aa:	603c      	str	r4, [r7, #0]
 80042ac:	415b      	adcs	r3, r3
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b4:	1812      	adds	r2, r2, r0
 80042b6:	eb41 0303 	adc.w	r3, r1, r3
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	f04f 0500 	mov.w	r5, #0
 80042c2:	00dd      	lsls	r5, r3, #3
 80042c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042c8:	00d4      	lsls	r4, r2, #3
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb12 0a00 	adds.w	sl, r2, r0
 80042d2:	eb43 0b01 	adc.w	fp, r3, r1
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4618      	mov	r0, r3
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	008b      	lsls	r3, r1, #2
 80042ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ee:	0082      	lsls	r2, r0, #2
 80042f0:	4650      	mov	r0, sl
 80042f2:	4659      	mov	r1, fp
 80042f4:	f7fc fcb0 	bl	8000c58 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <UART_SetConfig+0x38c>)
 80042fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2164      	movs	r1, #100	; 0x64
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	; 0x32
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <UART_SetConfig+0x38c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4432      	add	r2, r6
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	377c      	adds	r7, #124	; 0x7c
 8004328:	46bd      	mov	sp, r7
 800432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432e:	bf00      	nop
 8004330:	40011000 	.word	0x40011000
 8004334:	40011400 	.word	0x40011400
 8004338:	51eb851f 	.word	0x51eb851f
 800433c:	00000000 	.word	0x00000000

08004340 <sin>:
 8004340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004342:	ec53 2b10 	vmov	r2, r3, d0
 8004346:	4826      	ldr	r0, [pc, #152]	; (80043e0 <sin+0xa0>)
 8004348:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800434c:	4281      	cmp	r1, r0
 800434e:	dc07      	bgt.n	8004360 <sin+0x20>
 8004350:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80043d8 <sin+0x98>
 8004354:	2000      	movs	r0, #0
 8004356:	f001 f85f 	bl	8005418 <__kernel_sin>
 800435a:	ec51 0b10 	vmov	r0, r1, d0
 800435e:	e007      	b.n	8004370 <sin+0x30>
 8004360:	4820      	ldr	r0, [pc, #128]	; (80043e4 <sin+0xa4>)
 8004362:	4281      	cmp	r1, r0
 8004364:	dd09      	ble.n	800437a <sin+0x3a>
 8004366:	ee10 0a10 	vmov	r0, s0
 800436a:	4619      	mov	r1, r3
 800436c:	f7fb ff94 	bl	8000298 <__aeabi_dsub>
 8004370:	ec41 0b10 	vmov	d0, r0, r1
 8004374:	b005      	add	sp, #20
 8004376:	f85d fb04 	ldr.w	pc, [sp], #4
 800437a:	4668      	mov	r0, sp
 800437c:	f000 f89c 	bl	80044b8 <__ieee754_rem_pio2>
 8004380:	f000 0003 	and.w	r0, r0, #3
 8004384:	2801      	cmp	r0, #1
 8004386:	d008      	beq.n	800439a <sin+0x5a>
 8004388:	2802      	cmp	r0, #2
 800438a:	d00d      	beq.n	80043a8 <sin+0x68>
 800438c:	b9d0      	cbnz	r0, 80043c4 <sin+0x84>
 800438e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004392:	ed9d 0b00 	vldr	d0, [sp]
 8004396:	2001      	movs	r0, #1
 8004398:	e7dd      	b.n	8004356 <sin+0x16>
 800439a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800439e:	ed9d 0b00 	vldr	d0, [sp]
 80043a2:	f000 fc31 	bl	8004c08 <__kernel_cos>
 80043a6:	e7d8      	b.n	800435a <sin+0x1a>
 80043a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80043ac:	ed9d 0b00 	vldr	d0, [sp]
 80043b0:	2001      	movs	r0, #1
 80043b2:	f001 f831 	bl	8005418 <__kernel_sin>
 80043b6:	ec53 2b10 	vmov	r2, r3, d0
 80043ba:	ee10 0a10 	vmov	r0, s0
 80043be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80043c2:	e7d5      	b.n	8004370 <sin+0x30>
 80043c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80043c8:	ed9d 0b00 	vldr	d0, [sp]
 80043cc:	f000 fc1c 	bl	8004c08 <__kernel_cos>
 80043d0:	e7f1      	b.n	80043b6 <sin+0x76>
 80043d2:	bf00      	nop
 80043d4:	f3af 8000 	nop.w
	...
 80043e0:	3fe921fb 	.word	0x3fe921fb
 80043e4:	7fefffff 	.word	0x7fefffff

080043e8 <sqrt>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	ed2d 8b02 	vpush	{d8}
 80043ee:	ec55 4b10 	vmov	r4, r5, d0
 80043f2:	f000 fa6b 	bl	80048cc <__ieee754_sqrt>
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <sqrt+0x64>)
 80043f8:	eeb0 8a40 	vmov.f32	s16, s0
 80043fc:	eef0 8a60 	vmov.f32	s17, s1
 8004400:	f993 3000 	ldrsb.w	r3, [r3]
 8004404:	3301      	adds	r3, #1
 8004406:	d019      	beq.n	800443c <sqrt+0x54>
 8004408:	4622      	mov	r2, r4
 800440a:	462b      	mov	r3, r5
 800440c:	4620      	mov	r0, r4
 800440e:	4629      	mov	r1, r5
 8004410:	f7fc fb94 	bl	8000b3c <__aeabi_dcmpun>
 8004414:	b990      	cbnz	r0, 800443c <sqrt+0x54>
 8004416:	2200      	movs	r2, #0
 8004418:	2300      	movs	r3, #0
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	f7fc fb65 	bl	8000aec <__aeabi_dcmplt>
 8004422:	b158      	cbz	r0, 800443c <sqrt+0x54>
 8004424:	f001 f9d4 	bl	80057d0 <__errno>
 8004428:	2321      	movs	r3, #33	; 0x21
 800442a:	6003      	str	r3, [r0, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	f7fc fa12 	bl	800085c <__aeabi_ddiv>
 8004438:	ec41 0b18 	vmov	d8, r0, r1
 800443c:	eeb0 0a48 	vmov.f32	s0, s16
 8004440:	eef0 0a68 	vmov.f32	s1, s17
 8004444:	ecbd 8b02 	vpop	{d8}
 8004448:	bd38      	pop	{r3, r4, r5, pc}
 800444a:	bf00      	nop
 800444c:	20000009 	.word	0x20000009

08004450 <asinf>:
 8004450:	b508      	push	{r3, lr}
 8004452:	ed2d 8b02 	vpush	{d8}
 8004456:	eeb0 8a40 	vmov.f32	s16, s0
 800445a:	f000 faeb 	bl	8004a34 <__ieee754_asinf>
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <asinf+0x5c>)
 8004460:	f993 3000 	ldrsb.w	r3, [r3]
 8004464:	3301      	adds	r3, #1
 8004466:	eef0 8a40 	vmov.f32	s17, s0
 800446a:	d01a      	beq.n	80044a2 <asinf+0x52>
 800446c:	eeb4 8a48 	vcmp.f32	s16, s16
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	d615      	bvs.n	80044a2 <asinf+0x52>
 8004476:	eeb0 0a48 	vmov.f32	s0, s16
 800447a:	f001 f99b 	bl	80057b4 <fabsf>
 800447e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004482:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	dd0a      	ble.n	80044a2 <asinf+0x52>
 800448c:	f001 f9a0 	bl	80057d0 <__errno>
 8004490:	ecbd 8b02 	vpop	{d8}
 8004494:	2321      	movs	r3, #33	; 0x21
 8004496:	6003      	str	r3, [r0, #0]
 8004498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800449c:	4804      	ldr	r0, [pc, #16]	; (80044b0 <asinf+0x60>)
 800449e:	f001 b991 	b.w	80057c4 <nanf>
 80044a2:	eeb0 0a68 	vmov.f32	s0, s17
 80044a6:	ecbd 8b02 	vpop	{d8}
 80044aa:	bd08      	pop	{r3, pc}
 80044ac:	20000009 	.word	0x20000009
 80044b0:	08008ad8 	.word	0x08008ad8
 80044b4:	00000000 	.word	0x00000000

080044b8 <__ieee754_rem_pio2>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	ed2d 8b02 	vpush	{d8}
 80044c0:	ec55 4b10 	vmov	r4, r5, d0
 80044c4:	4bca      	ldr	r3, [pc, #808]	; (80047f0 <__ieee754_rem_pio2+0x338>)
 80044c6:	b08b      	sub	sp, #44	; 0x2c
 80044c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80044cc:	4598      	cmp	r8, r3
 80044ce:	4682      	mov	sl, r0
 80044d0:	9502      	str	r5, [sp, #8]
 80044d2:	dc08      	bgt.n	80044e6 <__ieee754_rem_pio2+0x2e>
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	ed80 0b00 	vstr	d0, [r0]
 80044dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80044e0:	f04f 0b00 	mov.w	fp, #0
 80044e4:	e028      	b.n	8004538 <__ieee754_rem_pio2+0x80>
 80044e6:	4bc3      	ldr	r3, [pc, #780]	; (80047f4 <__ieee754_rem_pio2+0x33c>)
 80044e8:	4598      	cmp	r8, r3
 80044ea:	dc78      	bgt.n	80045de <__ieee754_rem_pio2+0x126>
 80044ec:	9b02      	ldr	r3, [sp, #8]
 80044ee:	4ec2      	ldr	r6, [pc, #776]	; (80047f8 <__ieee754_rem_pio2+0x340>)
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	ee10 0a10 	vmov	r0, s0
 80044f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x300>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	4629      	mov	r1, r5
 80044fe:	dd39      	ble.n	8004574 <__ieee754_rem_pio2+0xbc>
 8004500:	f7fb feca 	bl	8000298 <__aeabi_dsub>
 8004504:	45b0      	cmp	r8, r6
 8004506:	4604      	mov	r4, r0
 8004508:	460d      	mov	r5, r1
 800450a:	d01b      	beq.n	8004544 <__ieee754_rem_pio2+0x8c>
 800450c:	a3ac      	add	r3, pc, #688	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x308>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f7fb fec1 	bl	8000298 <__aeabi_dsub>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9ca 2300 	strd	r2, r3, [sl]
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fb feb9 	bl	8000298 <__aeabi_dsub>
 8004526:	a3a6      	add	r3, pc, #664	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x308>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fb feb4 	bl	8000298 <__aeabi_dsub>
 8004530:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004534:	f04f 0b01 	mov.w	fp, #1
 8004538:	4658      	mov	r0, fp
 800453a:	b00b      	add	sp, #44	; 0x2c
 800453c:	ecbd 8b02 	vpop	{d8}
 8004540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004544:	a3a0      	add	r3, pc, #640	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x310>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fea5 	bl	8000298 <__aeabi_dsub>
 800454e:	a3a0      	add	r3, pc, #640	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x318>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	f7fb fe9e 	bl	8000298 <__aeabi_dsub>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	e9ca 2300 	strd	r2, r3, [sl]
 8004564:	4620      	mov	r0, r4
 8004566:	4629      	mov	r1, r5
 8004568:	f7fb fe96 	bl	8000298 <__aeabi_dsub>
 800456c:	a398      	add	r3, pc, #608	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x318>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	e7db      	b.n	800452c <__ieee754_rem_pio2+0x74>
 8004574:	f7fb fe92 	bl	800029c <__adddf3>
 8004578:	45b0      	cmp	r8, r6
 800457a:	4604      	mov	r4, r0
 800457c:	460d      	mov	r5, r1
 800457e:	d016      	beq.n	80045ae <__ieee754_rem_pio2+0xf6>
 8004580:	a38f      	add	r3, pc, #572	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x308>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fb fe89 	bl	800029c <__adddf3>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9ca 2300 	strd	r2, r3, [sl]
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f7fb fe7f 	bl	8000298 <__aeabi_dsub>
 800459a:	a389      	add	r3, pc, #548	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x308>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fb fe7c 	bl	800029c <__adddf3>
 80045a4:	f04f 3bff 	mov.w	fp, #4294967295
 80045a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045ac:	e7c4      	b.n	8004538 <__ieee754_rem_pio2+0x80>
 80045ae:	a386      	add	r3, pc, #536	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x310>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb fe72 	bl	800029c <__adddf3>
 80045b8:	a385      	add	r3, pc, #532	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x318>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	f7fb fe6b 	bl	800029c <__adddf3>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	e9ca 2300 	strd	r2, r3, [sl]
 80045ce:	4620      	mov	r0, r4
 80045d0:	4629      	mov	r1, r5
 80045d2:	f7fb fe61 	bl	8000298 <__aeabi_dsub>
 80045d6:	a37e      	add	r3, pc, #504	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x318>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	e7e0      	b.n	80045a0 <__ieee754_rem_pio2+0xe8>
 80045de:	4b87      	ldr	r3, [pc, #540]	; (80047fc <__ieee754_rem_pio2+0x344>)
 80045e0:	4598      	cmp	r8, r3
 80045e2:	f300 80d9 	bgt.w	8004798 <__ieee754_rem_pio2+0x2e0>
 80045e6:	f000 ffd5 	bl	8005594 <fabs>
 80045ea:	ec55 4b10 	vmov	r4, r5, d0
 80045ee:	ee10 0a10 	vmov	r0, s0
 80045f2:	a379      	add	r3, pc, #484	; (adr r3, 80047d8 <__ieee754_rem_pio2+0x320>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fc f805 	bl	8000608 <__aeabi_dmul>
 80045fe:	4b80      	ldr	r3, [pc, #512]	; (8004800 <__ieee754_rem_pio2+0x348>)
 8004600:	2200      	movs	r2, #0
 8004602:	f7fb fe4b 	bl	800029c <__adddf3>
 8004606:	f7fc faaf 	bl	8000b68 <__aeabi_d2iz>
 800460a:	4683      	mov	fp, r0
 800460c:	f7fb ff92 	bl	8000534 <__aeabi_i2d>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	ec43 2b18 	vmov	d8, r2, r3
 8004618:	a367      	add	r3, pc, #412	; (adr r3, 80047b8 <__ieee754_rem_pio2+0x300>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f7fb fff3 	bl	8000608 <__aeabi_dmul>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fb fe35 	bl	8000298 <__aeabi_dsub>
 800462e:	a364      	add	r3, pc, #400	; (adr r3, 80047c0 <__ieee754_rem_pio2+0x308>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	4606      	mov	r6, r0
 8004636:	460f      	mov	r7, r1
 8004638:	ec51 0b18 	vmov	r0, r1, d8
 800463c:	f7fb ffe4 	bl	8000608 <__aeabi_dmul>
 8004640:	f1bb 0f1f 	cmp.w	fp, #31
 8004644:	4604      	mov	r4, r0
 8004646:	460d      	mov	r5, r1
 8004648:	dc0d      	bgt.n	8004666 <__ieee754_rem_pio2+0x1ae>
 800464a:	4b6e      	ldr	r3, [pc, #440]	; (8004804 <__ieee754_rem_pio2+0x34c>)
 800464c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004654:	4543      	cmp	r3, r8
 8004656:	d006      	beq.n	8004666 <__ieee754_rem_pio2+0x1ae>
 8004658:	4622      	mov	r2, r4
 800465a:	462b      	mov	r3, r5
 800465c:	4630      	mov	r0, r6
 800465e:	4639      	mov	r1, r7
 8004660:	f7fb fe1a 	bl	8000298 <__aeabi_dsub>
 8004664:	e00f      	b.n	8004686 <__ieee754_rem_pio2+0x1ce>
 8004666:	462b      	mov	r3, r5
 8004668:	4622      	mov	r2, r4
 800466a:	4630      	mov	r0, r6
 800466c:	4639      	mov	r1, r7
 800466e:	f7fb fe13 	bl	8000298 <__aeabi_dsub>
 8004672:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004676:	9303      	str	r3, [sp, #12]
 8004678:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800467c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004680:	f1b8 0f10 	cmp.w	r8, #16
 8004684:	dc02      	bgt.n	800468c <__ieee754_rem_pio2+0x1d4>
 8004686:	e9ca 0100 	strd	r0, r1, [sl]
 800468a:	e039      	b.n	8004700 <__ieee754_rem_pio2+0x248>
 800468c:	a34e      	add	r3, pc, #312	; (adr r3, 80047c8 <__ieee754_rem_pio2+0x310>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	ec51 0b18 	vmov	r0, r1, d8
 8004696:	f7fb ffb7 	bl	8000608 <__aeabi_dmul>
 800469a:	4604      	mov	r4, r0
 800469c:	460d      	mov	r5, r1
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4630      	mov	r0, r6
 80046a4:	4639      	mov	r1, r7
 80046a6:	f7fb fdf7 	bl	8000298 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4680      	mov	r8, r0
 80046b0:	4689      	mov	r9, r1
 80046b2:	4630      	mov	r0, r6
 80046b4:	4639      	mov	r1, r7
 80046b6:	f7fb fdef 	bl	8000298 <__aeabi_dsub>
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	f7fb fdeb 	bl	8000298 <__aeabi_dsub>
 80046c2:	a343      	add	r3, pc, #268	; (adr r3, 80047d0 <__ieee754_rem_pio2+0x318>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	4604      	mov	r4, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	ec51 0b18 	vmov	r0, r1, d8
 80046d0:	f7fb ff9a 	bl	8000608 <__aeabi_dmul>
 80046d4:	4622      	mov	r2, r4
 80046d6:	462b      	mov	r3, r5
 80046d8:	f7fb fdde 	bl	8000298 <__aeabi_dsub>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4604      	mov	r4, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	4640      	mov	r0, r8
 80046e6:	4649      	mov	r1, r9
 80046e8:	f7fb fdd6 	bl	8000298 <__aeabi_dsub>
 80046ec:	9a03      	ldr	r2, [sp, #12]
 80046ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b31      	cmp	r3, #49	; 0x31
 80046f6:	dc24      	bgt.n	8004742 <__ieee754_rem_pio2+0x28a>
 80046f8:	e9ca 0100 	strd	r0, r1, [sl]
 80046fc:	4646      	mov	r6, r8
 80046fe:	464f      	mov	r7, r9
 8004700:	e9da 8900 	ldrd	r8, r9, [sl]
 8004704:	4630      	mov	r0, r6
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	4639      	mov	r1, r7
 800470c:	f7fb fdc4 	bl	8000298 <__aeabi_dsub>
 8004710:	462b      	mov	r3, r5
 8004712:	4622      	mov	r2, r4
 8004714:	f7fb fdc0 	bl	8000298 <__aeabi_dsub>
 8004718:	9b02      	ldr	r3, [sp, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004720:	f6bf af0a 	bge.w	8004538 <__ieee754_rem_pio2+0x80>
 8004724:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004728:	f8ca 3004 	str.w	r3, [sl, #4]
 800472c:	f8ca 8000 	str.w	r8, [sl]
 8004730:	f8ca 0008 	str.w	r0, [sl, #8]
 8004734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004738:	f8ca 300c 	str.w	r3, [sl, #12]
 800473c:	f1cb 0b00 	rsb	fp, fp, #0
 8004740:	e6fa      	b.n	8004538 <__ieee754_rem_pio2+0x80>
 8004742:	a327      	add	r3, pc, #156	; (adr r3, 80047e0 <__ieee754_rem_pio2+0x328>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	ec51 0b18 	vmov	r0, r1, d8
 800474c:	f7fb ff5c 	bl	8000608 <__aeabi_dmul>
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb fd9c 	bl	8000298 <__aeabi_dsub>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4606      	mov	r6, r0
 8004766:	460f      	mov	r7, r1
 8004768:	4640      	mov	r0, r8
 800476a:	4649      	mov	r1, r9
 800476c:	f7fb fd94 	bl	8000298 <__aeabi_dsub>
 8004770:	4622      	mov	r2, r4
 8004772:	462b      	mov	r3, r5
 8004774:	f7fb fd90 	bl	8000298 <__aeabi_dsub>
 8004778:	a31b      	add	r3, pc, #108	; (adr r3, 80047e8 <__ieee754_rem_pio2+0x330>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	4604      	mov	r4, r0
 8004780:	460d      	mov	r5, r1
 8004782:	ec51 0b18 	vmov	r0, r1, d8
 8004786:	f7fb ff3f 	bl	8000608 <__aeabi_dmul>
 800478a:	4622      	mov	r2, r4
 800478c:	462b      	mov	r3, r5
 800478e:	f7fb fd83 	bl	8000298 <__aeabi_dsub>
 8004792:	4604      	mov	r4, r0
 8004794:	460d      	mov	r5, r1
 8004796:	e75f      	b.n	8004658 <__ieee754_rem_pio2+0x1a0>
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <__ieee754_rem_pio2+0x350>)
 800479a:	4598      	cmp	r8, r3
 800479c:	dd36      	ble.n	800480c <__ieee754_rem_pio2+0x354>
 800479e:	ee10 2a10 	vmov	r2, s0
 80047a2:	462b      	mov	r3, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7fb fd76 	bl	8000298 <__aeabi_dsub>
 80047ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047b0:	e9ca 0100 	strd	r0, r1, [sl]
 80047b4:	e694      	b.n	80044e0 <__ieee754_rem_pio2+0x28>
 80047b6:	bf00      	nop
 80047b8:	54400000 	.word	0x54400000
 80047bc:	3ff921fb 	.word	0x3ff921fb
 80047c0:	1a626331 	.word	0x1a626331
 80047c4:	3dd0b461 	.word	0x3dd0b461
 80047c8:	1a600000 	.word	0x1a600000
 80047cc:	3dd0b461 	.word	0x3dd0b461
 80047d0:	2e037073 	.word	0x2e037073
 80047d4:	3ba3198a 	.word	0x3ba3198a
 80047d8:	6dc9c883 	.word	0x6dc9c883
 80047dc:	3fe45f30 	.word	0x3fe45f30
 80047e0:	2e000000 	.word	0x2e000000
 80047e4:	3ba3198a 	.word	0x3ba3198a
 80047e8:	252049c1 	.word	0x252049c1
 80047ec:	397b839a 	.word	0x397b839a
 80047f0:	3fe921fb 	.word	0x3fe921fb
 80047f4:	4002d97b 	.word	0x4002d97b
 80047f8:	3ff921fb 	.word	0x3ff921fb
 80047fc:	413921fb 	.word	0x413921fb
 8004800:	3fe00000 	.word	0x3fe00000
 8004804:	08008624 	.word	0x08008624
 8004808:	7fefffff 	.word	0x7fefffff
 800480c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004810:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004814:	ee10 0a10 	vmov	r0, s0
 8004818:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800481c:	ee10 6a10 	vmov	r6, s0
 8004820:	460f      	mov	r7, r1
 8004822:	f7fc f9a1 	bl	8000b68 <__aeabi_d2iz>
 8004826:	f7fb fe85 	bl	8000534 <__aeabi_i2d>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4630      	mov	r0, r6
 8004830:	4639      	mov	r1, r7
 8004832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004836:	f7fb fd2f 	bl	8000298 <__aeabi_dsub>
 800483a:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <__ieee754_rem_pio2+0x40c>)
 800483c:	2200      	movs	r2, #0
 800483e:	f7fb fee3 	bl	8000608 <__aeabi_dmul>
 8004842:	460f      	mov	r7, r1
 8004844:	4606      	mov	r6, r0
 8004846:	f7fc f98f 	bl	8000b68 <__aeabi_d2iz>
 800484a:	f7fb fe73 	bl	8000534 <__aeabi_i2d>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4630      	mov	r0, r6
 8004854:	4639      	mov	r1, r7
 8004856:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800485a:	f7fb fd1d 	bl	8000298 <__aeabi_dsub>
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <__ieee754_rem_pio2+0x40c>)
 8004860:	2200      	movs	r2, #0
 8004862:	f7fb fed1 	bl	8000608 <__aeabi_dmul>
 8004866:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800486a:	ad04      	add	r5, sp, #16
 800486c:	f04f 0803 	mov.w	r8, #3
 8004870:	46a9      	mov	r9, r5
 8004872:	2600      	movs	r6, #0
 8004874:	2700      	movs	r7, #0
 8004876:	4632      	mov	r2, r6
 8004878:	463b      	mov	r3, r7
 800487a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800487e:	46c3      	mov	fp, r8
 8004880:	3d08      	subs	r5, #8
 8004882:	f108 38ff 	add.w	r8, r8, #4294967295
 8004886:	f7fc f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800488a:	2800      	cmp	r0, #0
 800488c:	d1f3      	bne.n	8004876 <__ieee754_rem_pio2+0x3be>
 800488e:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <__ieee754_rem_pio2+0x410>)
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	2302      	movs	r3, #2
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4622      	mov	r2, r4
 8004898:	465b      	mov	r3, fp
 800489a:	4651      	mov	r1, sl
 800489c:	4648      	mov	r0, r9
 800489e:	f000 fa7b 	bl	8004d98 <__kernel_rem_pio2>
 80048a2:	9b02      	ldr	r3, [sp, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	4683      	mov	fp, r0
 80048a8:	f6bf ae46 	bge.w	8004538 <__ieee754_rem_pio2+0x80>
 80048ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80048b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80048b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80048bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80048c0:	e73a      	b.n	8004738 <__ieee754_rem_pio2+0x280>
 80048c2:	bf00      	nop
 80048c4:	41700000 	.word	0x41700000
 80048c8:	080086a4 	.word	0x080086a4

080048cc <__ieee754_sqrt>:
 80048cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	ec55 4b10 	vmov	r4, r5, d0
 80048d4:	4e56      	ldr	r6, [pc, #344]	; (8004a30 <__ieee754_sqrt+0x164>)
 80048d6:	43ae      	bics	r6, r5
 80048d8:	ee10 0a10 	vmov	r0, s0
 80048dc:	ee10 3a10 	vmov	r3, s0
 80048e0:	4629      	mov	r1, r5
 80048e2:	462a      	mov	r2, r5
 80048e4:	d110      	bne.n	8004908 <__ieee754_sqrt+0x3c>
 80048e6:	ee10 2a10 	vmov	r2, s0
 80048ea:	462b      	mov	r3, r5
 80048ec:	f7fb fe8c 	bl	8000608 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fb fcd0 	bl	800029c <__adddf3>
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	ec45 4b10 	vmov	d0, r4, r5
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	2d00      	cmp	r5, #0
 800490a:	dc10      	bgt.n	800492e <__ieee754_sqrt+0x62>
 800490c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004910:	4330      	orrs	r0, r6
 8004912:	d0f5      	beq.n	8004900 <__ieee754_sqrt+0x34>
 8004914:	b15d      	cbz	r5, 800492e <__ieee754_sqrt+0x62>
 8004916:	ee10 2a10 	vmov	r2, s0
 800491a:	462b      	mov	r3, r5
 800491c:	ee10 0a10 	vmov	r0, s0
 8004920:	f7fb fcba 	bl	8000298 <__aeabi_dsub>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	f7fb ff98 	bl	800085c <__aeabi_ddiv>
 800492c:	e7e6      	b.n	80048fc <__ieee754_sqrt+0x30>
 800492e:	1509      	asrs	r1, r1, #20
 8004930:	d076      	beq.n	8004a20 <__ieee754_sqrt+0x154>
 8004932:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004936:	07ce      	lsls	r6, r1, #31
 8004938:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800493c:	bf5e      	ittt	pl
 800493e:	0fda      	lsrpl	r2, r3, #31
 8004940:	005b      	lslpl	r3, r3, #1
 8004942:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8004946:	0fda      	lsrs	r2, r3, #31
 8004948:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800494c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004950:	2000      	movs	r0, #0
 8004952:	106d      	asrs	r5, r5, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	f04f 0e16 	mov.w	lr, #22
 800495a:	4684      	mov	ip, r0
 800495c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004960:	eb0c 0401 	add.w	r4, ip, r1
 8004964:	4294      	cmp	r4, r2
 8004966:	bfde      	ittt	le
 8004968:	1b12      	suble	r2, r2, r4
 800496a:	eb04 0c01 	addle.w	ip, r4, r1
 800496e:	1840      	addle	r0, r0, r1
 8004970:	0052      	lsls	r2, r2, #1
 8004972:	f1be 0e01 	subs.w	lr, lr, #1
 8004976:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800497a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800497e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004982:	d1ed      	bne.n	8004960 <__ieee754_sqrt+0x94>
 8004984:	4671      	mov	r1, lr
 8004986:	2720      	movs	r7, #32
 8004988:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800498c:	4562      	cmp	r2, ip
 800498e:	eb04 060e 	add.w	r6, r4, lr
 8004992:	dc02      	bgt.n	800499a <__ieee754_sqrt+0xce>
 8004994:	d113      	bne.n	80049be <__ieee754_sqrt+0xf2>
 8004996:	429e      	cmp	r6, r3
 8004998:	d811      	bhi.n	80049be <__ieee754_sqrt+0xf2>
 800499a:	2e00      	cmp	r6, #0
 800499c:	eb06 0e04 	add.w	lr, r6, r4
 80049a0:	da43      	bge.n	8004a2a <__ieee754_sqrt+0x15e>
 80049a2:	f1be 0f00 	cmp.w	lr, #0
 80049a6:	db40      	blt.n	8004a2a <__ieee754_sqrt+0x15e>
 80049a8:	f10c 0801 	add.w	r8, ip, #1
 80049ac:	eba2 020c 	sub.w	r2, r2, ip
 80049b0:	429e      	cmp	r6, r3
 80049b2:	bf88      	it	hi
 80049b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	4421      	add	r1, r4
 80049bc:	46c4      	mov	ip, r8
 80049be:	0052      	lsls	r2, r2, #1
 80049c0:	3f01      	subs	r7, #1
 80049c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80049c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80049ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80049ce:	d1dd      	bne.n	800498c <__ieee754_sqrt+0xc0>
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d006      	beq.n	80049e2 <__ieee754_sqrt+0x116>
 80049d4:	1c4c      	adds	r4, r1, #1
 80049d6:	bf13      	iteet	ne
 80049d8:	3101      	addne	r1, #1
 80049da:	3001      	addeq	r0, #1
 80049dc:	4639      	moveq	r1, r7
 80049de:	f021 0101 	bicne.w	r1, r1, #1
 80049e2:	1043      	asrs	r3, r0, #1
 80049e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80049e8:	0849      	lsrs	r1, r1, #1
 80049ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80049ee:	07c2      	lsls	r2, r0, #31
 80049f0:	bf48      	it	mi
 80049f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80049f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80049fa:	460c      	mov	r4, r1
 80049fc:	463d      	mov	r5, r7
 80049fe:	e77f      	b.n	8004900 <__ieee754_sqrt+0x34>
 8004a00:	0ada      	lsrs	r2, r3, #11
 8004a02:	3815      	subs	r0, #21
 8004a04:	055b      	lsls	r3, r3, #21
 8004a06:	2a00      	cmp	r2, #0
 8004a08:	d0fa      	beq.n	8004a00 <__ieee754_sqrt+0x134>
 8004a0a:	02d7      	lsls	r7, r2, #11
 8004a0c:	d50a      	bpl.n	8004a24 <__ieee754_sqrt+0x158>
 8004a0e:	f1c1 0420 	rsb	r4, r1, #32
 8004a12:	fa23 f404 	lsr.w	r4, r3, r4
 8004a16:	1e4d      	subs	r5, r1, #1
 8004a18:	408b      	lsls	r3, r1
 8004a1a:	4322      	orrs	r2, r4
 8004a1c:	1b41      	subs	r1, r0, r5
 8004a1e:	e788      	b.n	8004932 <__ieee754_sqrt+0x66>
 8004a20:	4608      	mov	r0, r1
 8004a22:	e7f0      	b.n	8004a06 <__ieee754_sqrt+0x13a>
 8004a24:	0052      	lsls	r2, r2, #1
 8004a26:	3101      	adds	r1, #1
 8004a28:	e7ef      	b.n	8004a0a <__ieee754_sqrt+0x13e>
 8004a2a:	46e0      	mov	r8, ip
 8004a2c:	e7be      	b.n	80049ac <__ieee754_sqrt+0xe0>
 8004a2e:	bf00      	nop
 8004a30:	7ff00000 	.word	0x7ff00000

08004a34 <__ieee754_asinf>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	ee10 5a10 	vmov	r5, s0
 8004a3a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8004a3e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004a42:	ed2d 8b04 	vpush	{d8-d9}
 8004a46:	d10c      	bne.n	8004a62 <__ieee754_asinf+0x2e>
 8004a48:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8004bc0 <__ieee754_asinf+0x18c>
 8004a4c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004bc4 <__ieee754_asinf+0x190>
 8004a50:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004a54:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004a58:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5c:	ecbd 8b04 	vpop	{d8-d9}
 8004a60:	bd38      	pop	{r3, r4, r5, pc}
 8004a62:	dd04      	ble.n	8004a6e <__ieee754_asinf+0x3a>
 8004a64:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004a68:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004a6c:	e7f6      	b.n	8004a5c <__ieee754_asinf+0x28>
 8004a6e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004a72:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004a76:	da0b      	bge.n	8004a90 <__ieee754_asinf+0x5c>
 8004a78:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004a7c:	da52      	bge.n	8004b24 <__ieee754_asinf+0xf0>
 8004a7e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8004bc8 <__ieee754_asinf+0x194>
 8004a82:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004a86:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	dce5      	bgt.n	8004a5c <__ieee754_asinf+0x28>
 8004a90:	f000 fe90 	bl	80057b4 <fabsf>
 8004a94:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8004a98:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8004a9c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8004aa0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004bcc <__ieee754_asinf+0x198>
 8004aa4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004bd0 <__ieee754_asinf+0x19c>
 8004aa8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8004bd4 <__ieee754_asinf+0x1a0>
 8004aac:	eea8 7a27 	vfma.f32	s14, s16, s15
 8004ab0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8004bd8 <__ieee754_asinf+0x1a4>
 8004ab4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004ab8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004bdc <__ieee754_asinf+0x1a8>
 8004abc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004ac0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004be0 <__ieee754_asinf+0x1ac>
 8004ac4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004ac8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004be4 <__ieee754_asinf+0x1b0>
 8004acc:	eea7 9a88 	vfma.f32	s18, s15, s16
 8004ad0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8004be8 <__ieee754_asinf+0x1b4>
 8004ad4:	eee8 7a07 	vfma.f32	s15, s16, s14
 8004ad8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004bec <__ieee754_asinf+0x1b8>
 8004adc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004ae0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004bf0 <__ieee754_asinf+0x1bc>
 8004ae4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004ae8:	eeb0 0a48 	vmov.f32	s0, s16
 8004aec:	eee7 8a88 	vfma.f32	s17, s15, s16
 8004af0:	f000 f886 	bl	8004c00 <__ieee754_sqrtf>
 8004af4:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <__ieee754_asinf+0x1c0>)
 8004af6:	ee29 9a08 	vmul.f32	s18, s18, s16
 8004afa:	429c      	cmp	r4, r3
 8004afc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8004b00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b04:	dd3d      	ble.n	8004b82 <__ieee754_asinf+0x14e>
 8004b06:	eea0 0a06 	vfma.f32	s0, s0, s12
 8004b0a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004bf8 <__ieee754_asinf+0x1c4>
 8004b0e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8004b12:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004bc4 <__ieee754_asinf+0x190>
 8004b16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	bfd8      	it	le
 8004b1e:	eeb1 0a40 	vnegle.f32	s0, s0
 8004b22:	e79b      	b.n	8004a5c <__ieee754_asinf+0x28>
 8004b24:	ee60 7a00 	vmul.f32	s15, s0, s0
 8004b28:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004bcc <__ieee754_asinf+0x198>
 8004b2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004bd0 <__ieee754_asinf+0x19c>
 8004b30:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004be4 <__ieee754_asinf+0x1b0>
 8004b34:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004b38:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004bd8 <__ieee754_asinf+0x1a4>
 8004b3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004b40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004bdc <__ieee754_asinf+0x1a8>
 8004b44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b48:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004be0 <__ieee754_asinf+0x1ac>
 8004b4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004b50:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004bd4 <__ieee754_asinf+0x1a0>
 8004b54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b58:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004be8 <__ieee754_asinf+0x1b4>
 8004b5c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8004b60:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8004bec <__ieee754_asinf+0x1b8>
 8004b64:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8004b68:	eddf 6a21 	vldr	s13, [pc, #132]	; 8004bf0 <__ieee754_asinf+0x1bc>
 8004b6c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b74:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8004b78:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004b7c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8004b80:	e76c      	b.n	8004a5c <__ieee754_asinf+0x28>
 8004b82:	ee10 3a10 	vmov	r3, s0
 8004b86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b8a:	f023 030f 	bic.w	r3, r3, #15
 8004b8e:	ee07 3a10 	vmov	s14, r3
 8004b92:	eea7 8a47 	vfms.f32	s16, s14, s14
 8004b96:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004b9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004b9e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8004ba2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004bc0 <__ieee754_asinf+0x18c>
 8004ba6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8004baa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8004bae:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004bfc <__ieee754_asinf+0x1c8>
 8004bb2:	eeb0 6a40 	vmov.f32	s12, s0
 8004bb6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004bba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004bbe:	e7aa      	b.n	8004b16 <__ieee754_asinf+0xe2>
 8004bc0:	b33bbd2e 	.word	0xb33bbd2e
 8004bc4:	3fc90fdb 	.word	0x3fc90fdb
 8004bc8:	7149f2ca 	.word	0x7149f2ca
 8004bcc:	3811ef08 	.word	0x3811ef08
 8004bd0:	3a4f7f04 	.word	0x3a4f7f04
 8004bd4:	3e2aaaab 	.word	0x3e2aaaab
 8004bd8:	bd241146 	.word	0xbd241146
 8004bdc:	3e4e0aa8 	.word	0x3e4e0aa8
 8004be0:	bea6b090 	.word	0xbea6b090
 8004be4:	3d9dc62e 	.word	0x3d9dc62e
 8004be8:	bf303361 	.word	0xbf303361
 8004bec:	4001572d 	.word	0x4001572d
 8004bf0:	c019d139 	.word	0xc019d139
 8004bf4:	3f799999 	.word	0x3f799999
 8004bf8:	333bbd2e 	.word	0x333bbd2e
 8004bfc:	3f490fdb 	.word	0x3f490fdb

08004c00 <__ieee754_sqrtf>:
 8004c00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004c04:	4770      	bx	lr
	...

08004c08 <__kernel_cos>:
 8004c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	ec57 6b10 	vmov	r6, r7, d0
 8004c10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004c18:	ed8d 1b00 	vstr	d1, [sp]
 8004c1c:	da07      	bge.n	8004c2e <__kernel_cos+0x26>
 8004c1e:	ee10 0a10 	vmov	r0, s0
 8004c22:	4639      	mov	r1, r7
 8004c24:	f7fb ffa0 	bl	8000b68 <__aeabi_d2iz>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8088 	beq.w	8004d3e <__kernel_cos+0x136>
 8004c2e:	4632      	mov	r2, r6
 8004c30:	463b      	mov	r3, r7
 8004c32:	4630      	mov	r0, r6
 8004c34:	4639      	mov	r1, r7
 8004c36:	f7fb fce7 	bl	8000608 <__aeabi_dmul>
 8004c3a:	4b51      	ldr	r3, [pc, #324]	; (8004d80 <__kernel_cos+0x178>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f7fb fce1 	bl	8000608 <__aeabi_dmul>
 8004c46:	a340      	add	r3, pc, #256	; (adr r3, 8004d48 <__kernel_cos+0x140>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	4682      	mov	sl, r0
 8004c4e:	468b      	mov	fp, r1
 8004c50:	4620      	mov	r0, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	f7fb fcd8 	bl	8000608 <__aeabi_dmul>
 8004c58:	a33d      	add	r3, pc, #244	; (adr r3, 8004d50 <__kernel_cos+0x148>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fb1d 	bl	800029c <__adddf3>
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f7fb fccf 	bl	8000608 <__aeabi_dmul>
 8004c6a:	a33b      	add	r3, pc, #236	; (adr r3, 8004d58 <__kernel_cos+0x150>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fb12 	bl	8000298 <__aeabi_dsub>
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	f7fb fcc6 	bl	8000608 <__aeabi_dmul>
 8004c7c:	a338      	add	r3, pc, #224	; (adr r3, 8004d60 <__kernel_cos+0x158>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fb0b 	bl	800029c <__adddf3>
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fcbd 	bl	8000608 <__aeabi_dmul>
 8004c8e:	a336      	add	r3, pc, #216	; (adr r3, 8004d68 <__kernel_cos+0x160>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fb00 	bl	8000298 <__aeabi_dsub>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	f7fb fcb4 	bl	8000608 <__aeabi_dmul>
 8004ca0:	a333      	add	r3, pc, #204	; (adr r3, 8004d70 <__kernel_cos+0x168>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb faf9 	bl	800029c <__adddf3>
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	f7fb fcab 	bl	8000608 <__aeabi_dmul>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f7fb fca7 	bl	8000608 <__aeabi_dmul>
 8004cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	f7fb fc9f 	bl	8000608 <__aeabi_dmul>
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7fb fae1 	bl	8000298 <__aeabi_dsub>
 8004cd6:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <__kernel_cos+0x17c>)
 8004cd8:	4598      	cmp	r8, r3
 8004cda:	4606      	mov	r6, r0
 8004cdc:	460f      	mov	r7, r1
 8004cde:	dc10      	bgt.n	8004d02 <__kernel_cos+0xfa>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4650      	mov	r0, sl
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	f7fb fad6 	bl	8000298 <__aeabi_dsub>
 8004cec:	460b      	mov	r3, r1
 8004cee:	4926      	ldr	r1, [pc, #152]	; (8004d88 <__kernel_cos+0x180>)
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fb fad0 	bl	8000298 <__aeabi_dsub>
 8004cf8:	ec41 0b10 	vmov	d0, r0, r1
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d02:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <__kernel_cos+0x184>)
 8004d04:	4920      	ldr	r1, [pc, #128]	; (8004d88 <__kernel_cos+0x180>)
 8004d06:	4598      	cmp	r8, r3
 8004d08:	bfcc      	ite	gt
 8004d0a:	4d21      	ldrgt	r5, [pc, #132]	; (8004d90 <__kernel_cos+0x188>)
 8004d0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004d10:	2400      	movs	r4, #0
 8004d12:	4622      	mov	r2, r4
 8004d14:	462b      	mov	r3, r5
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fb fabe 	bl	8000298 <__aeabi_dsub>
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	4680      	mov	r8, r0
 8004d20:	4689      	mov	r9, r1
 8004d22:	462b      	mov	r3, r5
 8004d24:	4650      	mov	r0, sl
 8004d26:	4659      	mov	r1, fp
 8004d28:	f7fb fab6 	bl	8000298 <__aeabi_dsub>
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	463b      	mov	r3, r7
 8004d30:	f7fb fab2 	bl	8000298 <__aeabi_dsub>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	e7da      	b.n	8004cf4 <__kernel_cos+0xec>
 8004d3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004d78 <__kernel_cos+0x170>
 8004d42:	e7db      	b.n	8004cfc <__kernel_cos+0xf4>
 8004d44:	f3af 8000 	nop.w
 8004d48:	be8838d4 	.word	0xbe8838d4
 8004d4c:	bda8fae9 	.word	0xbda8fae9
 8004d50:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d54:	3e21ee9e 	.word	0x3e21ee9e
 8004d58:	809c52ad 	.word	0x809c52ad
 8004d5c:	3e927e4f 	.word	0x3e927e4f
 8004d60:	19cb1590 	.word	0x19cb1590
 8004d64:	3efa01a0 	.word	0x3efa01a0
 8004d68:	16c15177 	.word	0x16c15177
 8004d6c:	3f56c16c 	.word	0x3f56c16c
 8004d70:	5555554c 	.word	0x5555554c
 8004d74:	3fa55555 	.word	0x3fa55555
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	3ff00000 	.word	0x3ff00000
 8004d80:	3fe00000 	.word	0x3fe00000
 8004d84:	3fd33332 	.word	0x3fd33332
 8004d88:	3ff00000 	.word	0x3ff00000
 8004d8c:	3fe90000 	.word	0x3fe90000
 8004d90:	3fd20000 	.word	0x3fd20000
 8004d94:	00000000 	.word	0x00000000

08004d98 <__kernel_rem_pio2>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	ed2d 8b02 	vpush	{d8}
 8004da0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004da4:	f112 0f14 	cmn.w	r2, #20
 8004da8:	9308      	str	r3, [sp, #32]
 8004daa:	9101      	str	r1, [sp, #4]
 8004dac:	4bc6      	ldr	r3, [pc, #792]	; (80050c8 <__kernel_rem_pio2+0x330>)
 8004dae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004db0:	9009      	str	r0, [sp, #36]	; 0x24
 8004db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	9b08      	ldr	r3, [sp, #32]
 8004dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dbe:	bfa8      	it	ge
 8004dc0:	1ed4      	subge	r4, r2, #3
 8004dc2:	9306      	str	r3, [sp, #24]
 8004dc4:	bfb2      	itee	lt
 8004dc6:	2400      	movlt	r4, #0
 8004dc8:	2318      	movge	r3, #24
 8004dca:	fb94 f4f3 	sdivge	r4, r4, r3
 8004dce:	f06f 0317 	mvn.w	r3, #23
 8004dd2:	fb04 3303 	mla	r3, r4, r3, r3
 8004dd6:	eb03 0a02 	add.w	sl, r3, r2
 8004dda:	9b04      	ldr	r3, [sp, #16]
 8004ddc:	9a06      	ldr	r2, [sp, #24]
 8004dde:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80050b8 <__kernel_rem_pio2+0x320>
 8004de2:	eb03 0802 	add.w	r8, r3, r2
 8004de6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004de8:	1aa7      	subs	r7, r4, r2
 8004dea:	ae20      	add	r6, sp, #128	; 0x80
 8004dec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004df0:	2500      	movs	r5, #0
 8004df2:	4545      	cmp	r5, r8
 8004df4:	dd18      	ble.n	8004e28 <__kernel_rem_pio2+0x90>
 8004df6:	9b08      	ldr	r3, [sp, #32]
 8004df8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004dfc:	aa20      	add	r2, sp, #128	; 0x80
 8004dfe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80050b8 <__kernel_rem_pio2+0x320>
 8004e02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e06:	f1c3 0301 	rsb	r3, r3, #1
 8004e0a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	9b07      	ldr	r3, [sp, #28]
 8004e12:	9a04      	ldr	r2, [sp, #16]
 8004e14:	4443      	add	r3, r8
 8004e16:	429a      	cmp	r2, r3
 8004e18:	db2f      	blt.n	8004e7a <__kernel_rem_pio2+0xe2>
 8004e1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004e1e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e22:	462f      	mov	r7, r5
 8004e24:	2600      	movs	r6, #0
 8004e26:	e01b      	b.n	8004e60 <__kernel_rem_pio2+0xc8>
 8004e28:	42ef      	cmn	r7, r5
 8004e2a:	d407      	bmi.n	8004e3c <__kernel_rem_pio2+0xa4>
 8004e2c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e30:	f7fb fb80 	bl	8000534 <__aeabi_i2d>
 8004e34:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e38:	3501      	adds	r5, #1
 8004e3a:	e7da      	b.n	8004df2 <__kernel_rem_pio2+0x5a>
 8004e3c:	ec51 0b18 	vmov	r0, r1, d8
 8004e40:	e7f8      	b.n	8004e34 <__kernel_rem_pio2+0x9c>
 8004e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e46:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e4a:	f7fb fbdd 	bl	8000608 <__aeabi_dmul>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e56:	f7fb fa21 	bl	800029c <__adddf3>
 8004e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e5e:	3601      	adds	r6, #1
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	429e      	cmp	r6, r3
 8004e64:	f1a7 0708 	sub.w	r7, r7, #8
 8004e68:	ddeb      	ble.n	8004e42 <__kernel_rem_pio2+0xaa>
 8004e6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e6e:	3508      	adds	r5, #8
 8004e70:	ecab 7b02 	vstmia	fp!, {d7}
 8004e74:	f108 0801 	add.w	r8, r8, #1
 8004e78:	e7ca      	b.n	8004e10 <__kernel_rem_pio2+0x78>
 8004e7a:	9b04      	ldr	r3, [sp, #16]
 8004e7c:	aa0c      	add	r2, sp, #48	; 0x30
 8004e7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e84:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004e86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e8a:	9c04      	ldr	r4, [sp, #16]
 8004e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8e:	ab98      	add	r3, sp, #608	; 0x260
 8004e90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e94:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004e98:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004e9c:	f8cd b008 	str.w	fp, [sp, #8]
 8004ea0:	4625      	mov	r5, r4
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	dc78      	bgt.n	8004f98 <__kernel_rem_pio2+0x200>
 8004ea6:	ec47 6b10 	vmov	d0, r6, r7
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f000 fbfc 	bl	80056a8 <scalbn>
 8004eb0:	ec57 6b10 	vmov	r6, r7, d0
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004eba:	ee10 0a10 	vmov	r0, s0
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fb fba2 	bl	8000608 <__aeabi_dmul>
 8004ec4:	ec41 0b10 	vmov	d0, r0, r1
 8004ec8:	f000 fb6e 	bl	80055a8 <floor>
 8004ecc:	4b7f      	ldr	r3, [pc, #508]	; (80050cc <__kernel_rem_pio2+0x334>)
 8004ece:	ec51 0b10 	vmov	r0, r1, d0
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f7fb fb98 	bl	8000608 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f7fb f9da 	bl	8000298 <__aeabi_dsub>
 8004ee4:	460f      	mov	r7, r1
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	f7fb fe3e 	bl	8000b68 <__aeabi_d2iz>
 8004eec:	9007      	str	r0, [sp, #28]
 8004eee:	f7fb fb21 	bl	8000534 <__aeabi_i2d>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	f7fb f9cd 	bl	8000298 <__aeabi_dsub>
 8004efe:	f1ba 0f00 	cmp.w	sl, #0
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	dd70      	ble.n	8004fea <__kernel_rem_pio2+0x252>
 8004f08:	1e62      	subs	r2, r4, #1
 8004f0a:	ab0c      	add	r3, sp, #48	; 0x30
 8004f0c:	9d07      	ldr	r5, [sp, #28]
 8004f0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f12:	f1ca 0118 	rsb	r1, sl, #24
 8004f16:	fa40 f301 	asr.w	r3, r0, r1
 8004f1a:	441d      	add	r5, r3
 8004f1c:	408b      	lsls	r3, r1
 8004f1e:	1ac0      	subs	r0, r0, r3
 8004f20:	ab0c      	add	r3, sp, #48	; 0x30
 8004f22:	9507      	str	r5, [sp, #28]
 8004f24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004f28:	f1ca 0317 	rsb	r3, sl, #23
 8004f2c:	fa40 f303 	asr.w	r3, r0, r3
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	9b02      	ldr	r3, [sp, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dd66      	ble.n	8005006 <__kernel_rem_pio2+0x26e>
 8004f38:	9b07      	ldr	r3, [sp, #28]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	4615      	mov	r5, r2
 8004f42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004f46:	4294      	cmp	r4, r2
 8004f48:	f300 8099 	bgt.w	800507e <__kernel_rem_pio2+0x2e6>
 8004f4c:	f1ba 0f00 	cmp.w	sl, #0
 8004f50:	dd07      	ble.n	8004f62 <__kernel_rem_pio2+0x1ca>
 8004f52:	f1ba 0f01 	cmp.w	sl, #1
 8004f56:	f000 80a5 	beq.w	80050a4 <__kernel_rem_pio2+0x30c>
 8004f5a:	f1ba 0f02 	cmp.w	sl, #2
 8004f5e:	f000 80c1 	beq.w	80050e4 <__kernel_rem_pio2+0x34c>
 8004f62:	9b02      	ldr	r3, [sp, #8]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d14e      	bne.n	8005006 <__kernel_rem_pio2+0x26e>
 8004f68:	4632      	mov	r2, r6
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	4958      	ldr	r1, [pc, #352]	; (80050d0 <__kernel_rem_pio2+0x338>)
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fb f992 	bl	8000298 <__aeabi_dsub>
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	d044      	beq.n	8005006 <__kernel_rem_pio2+0x26e>
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80050c0 <__kernel_rem_pio2+0x328>
 8004f82:	f000 fb91 	bl	80056a8 <scalbn>
 8004f86:	4630      	mov	r0, r6
 8004f88:	4639      	mov	r1, r7
 8004f8a:	ec53 2b10 	vmov	r2, r3, d0
 8004f8e:	f7fb f983 	bl	8000298 <__aeabi_dsub>
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	e036      	b.n	8005006 <__kernel_rem_pio2+0x26e>
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <__kernel_rem_pio2+0x33c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb fb32 	bl	8000608 <__aeabi_dmul>
 8004fa4:	f7fb fde0 	bl	8000b68 <__aeabi_d2iz>
 8004fa8:	f7fb fac4 	bl	8000534 <__aeabi_i2d>
 8004fac:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <__kernel_rem_pio2+0x340>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	4689      	mov	r9, r1
 8004fb4:	f7fb fb28 	bl	8000608 <__aeabi_dmul>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	f7fb f96a 	bl	8000298 <__aeabi_dsub>
 8004fc4:	f7fb fdd0 	bl	8000b68 <__aeabi_d2iz>
 8004fc8:	9b02      	ldr	r3, [sp, #8]
 8004fca:	f843 0b04 	str.w	r0, [r3], #4
 8004fce:	3d01      	subs	r5, #1
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	ab70      	add	r3, sp, #448	; 0x1c0
 8004fd4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	4640      	mov	r0, r8
 8004fde:	4649      	mov	r1, r9
 8004fe0:	f7fb f95c 	bl	800029c <__adddf3>
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	e75b      	b.n	8004ea2 <__kernel_rem_pio2+0x10a>
 8004fea:	d105      	bne.n	8004ff8 <__kernel_rem_pio2+0x260>
 8004fec:	1e63      	subs	r3, r4, #1
 8004fee:	aa0c      	add	r2, sp, #48	; 0x30
 8004ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ff4:	15c3      	asrs	r3, r0, #23
 8004ff6:	e79b      	b.n	8004f30 <__kernel_rem_pio2+0x198>
 8004ff8:	4b38      	ldr	r3, [pc, #224]	; (80050dc <__kernel_rem_pio2+0x344>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f7fb fd8a 	bl	8000b14 <__aeabi_dcmpge>
 8005000:	2800      	cmp	r0, #0
 8005002:	d139      	bne.n	8005078 <__kernel_rem_pio2+0x2e0>
 8005004:	9002      	str	r0, [sp, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2300      	movs	r3, #0
 800500a:	4630      	mov	r0, r6
 800500c:	4639      	mov	r1, r7
 800500e:	f7fb fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 8005012:	2800      	cmp	r0, #0
 8005014:	f000 80b4 	beq.w	8005180 <__kernel_rem_pio2+0x3e8>
 8005018:	f104 3bff 	add.w	fp, r4, #4294967295
 800501c:	465b      	mov	r3, fp
 800501e:	2200      	movs	r2, #0
 8005020:	9904      	ldr	r1, [sp, #16]
 8005022:	428b      	cmp	r3, r1
 8005024:	da65      	bge.n	80050f2 <__kernel_rem_pio2+0x35a>
 8005026:	2a00      	cmp	r2, #0
 8005028:	d07b      	beq.n	8005122 <__kernel_rem_pio2+0x38a>
 800502a:	ab0c      	add	r3, sp, #48	; 0x30
 800502c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005030:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80a0 	beq.w	800517a <__kernel_rem_pio2+0x3e2>
 800503a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80050c0 <__kernel_rem_pio2+0x328>
 800503e:	4650      	mov	r0, sl
 8005040:	f000 fb32 	bl	80056a8 <scalbn>
 8005044:	4f23      	ldr	r7, [pc, #140]	; (80050d4 <__kernel_rem_pio2+0x33c>)
 8005046:	ec55 4b10 	vmov	r4, r5, d0
 800504a:	46d8      	mov	r8, fp
 800504c:	2600      	movs	r6, #0
 800504e:	f1b8 0f00 	cmp.w	r8, #0
 8005052:	f280 80cf 	bge.w	80051f4 <__kernel_rem_pio2+0x45c>
 8005056:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80050b8 <__kernel_rem_pio2+0x320>
 800505a:	465f      	mov	r7, fp
 800505c:	f04f 0800 	mov.w	r8, #0
 8005060:	2f00      	cmp	r7, #0
 8005062:	f2c0 80fd 	blt.w	8005260 <__kernel_rem_pio2+0x4c8>
 8005066:	ab70      	add	r3, sp, #448	; 0x1c0
 8005068:	f8df a074 	ldr.w	sl, [pc, #116]	; 80050e0 <__kernel_rem_pio2+0x348>
 800506c:	ec55 4b18 	vmov	r4, r5, d8
 8005070:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005074:	2600      	movs	r6, #0
 8005076:	e0e5      	b.n	8005244 <__kernel_rem_pio2+0x4ac>
 8005078:	2302      	movs	r3, #2
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	e75c      	b.n	8004f38 <__kernel_rem_pio2+0x1a0>
 800507e:	f8db 3000 	ldr.w	r3, [fp]
 8005082:	b955      	cbnz	r5, 800509a <__kernel_rem_pio2+0x302>
 8005084:	b123      	cbz	r3, 8005090 <__kernel_rem_pio2+0x2f8>
 8005086:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800508a:	f8cb 3000 	str.w	r3, [fp]
 800508e:	2301      	movs	r3, #1
 8005090:	3201      	adds	r2, #1
 8005092:	f10b 0b04 	add.w	fp, fp, #4
 8005096:	461d      	mov	r5, r3
 8005098:	e755      	b.n	8004f46 <__kernel_rem_pio2+0x1ae>
 800509a:	1acb      	subs	r3, r1, r3
 800509c:	f8cb 3000 	str.w	r3, [fp]
 80050a0:	462b      	mov	r3, r5
 80050a2:	e7f5      	b.n	8005090 <__kernel_rem_pio2+0x2f8>
 80050a4:	1e62      	subs	r2, r4, #1
 80050a6:	ab0c      	add	r3, sp, #48	; 0x30
 80050a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050b0:	a90c      	add	r1, sp, #48	; 0x30
 80050b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050b6:	e754      	b.n	8004f62 <__kernel_rem_pio2+0x1ca>
	...
 80050c4:	3ff00000 	.word	0x3ff00000
 80050c8:	080087f0 	.word	0x080087f0
 80050cc:	40200000 	.word	0x40200000
 80050d0:	3ff00000 	.word	0x3ff00000
 80050d4:	3e700000 	.word	0x3e700000
 80050d8:	41700000 	.word	0x41700000
 80050dc:	3fe00000 	.word	0x3fe00000
 80050e0:	080087b0 	.word	0x080087b0
 80050e4:	1e62      	subs	r2, r4, #1
 80050e6:	ab0c      	add	r3, sp, #48	; 0x30
 80050e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80050f0:	e7de      	b.n	80050b0 <__kernel_rem_pio2+0x318>
 80050f2:	a90c      	add	r1, sp, #48	; 0x30
 80050f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	430a      	orrs	r2, r1
 80050fc:	e790      	b.n	8005020 <__kernel_rem_pio2+0x288>
 80050fe:	3301      	adds	r3, #1
 8005100:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005104:	2900      	cmp	r1, #0
 8005106:	d0fa      	beq.n	80050fe <__kernel_rem_pio2+0x366>
 8005108:	9a08      	ldr	r2, [sp, #32]
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	18a6      	adds	r6, r4, r2
 800510e:	aa20      	add	r2, sp, #128	; 0x80
 8005110:	1c65      	adds	r5, r4, #1
 8005112:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005116:	9302      	str	r3, [sp, #8]
 8005118:	9b02      	ldr	r3, [sp, #8]
 800511a:	42ab      	cmp	r3, r5
 800511c:	da04      	bge.n	8005128 <__kernel_rem_pio2+0x390>
 800511e:	461c      	mov	r4, r3
 8005120:	e6b5      	b.n	8004e8e <__kernel_rem_pio2+0xf6>
 8005122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005124:	2301      	movs	r3, #1
 8005126:	e7eb      	b.n	8005100 <__kernel_rem_pio2+0x368>
 8005128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800512a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800512e:	f7fb fa01 	bl	8000534 <__aeabi_i2d>
 8005132:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	46b3      	mov	fp, r6
 800513a:	461c      	mov	r4, r3
 800513c:	2700      	movs	r7, #0
 800513e:	f04f 0800 	mov.w	r8, #0
 8005142:	f04f 0900 	mov.w	r9, #0
 8005146:	9b06      	ldr	r3, [sp, #24]
 8005148:	429f      	cmp	r7, r3
 800514a:	dd06      	ble.n	800515a <__kernel_rem_pio2+0x3c2>
 800514c:	ab70      	add	r3, sp, #448	; 0x1c0
 800514e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005152:	e9c3 8900 	strd	r8, r9, [r3]
 8005156:	3501      	adds	r5, #1
 8005158:	e7de      	b.n	8005118 <__kernel_rem_pio2+0x380>
 800515a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800515e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005162:	f7fb fa51 	bl	8000608 <__aeabi_dmul>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f895 	bl	800029c <__adddf3>
 8005172:	3701      	adds	r7, #1
 8005174:	4680      	mov	r8, r0
 8005176:	4689      	mov	r9, r1
 8005178:	e7e5      	b.n	8005146 <__kernel_rem_pio2+0x3ae>
 800517a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800517e:	e754      	b.n	800502a <__kernel_rem_pio2+0x292>
 8005180:	ec47 6b10 	vmov	d0, r6, r7
 8005184:	f1ca 0000 	rsb	r0, sl, #0
 8005188:	f000 fa8e 	bl	80056a8 <scalbn>
 800518c:	ec57 6b10 	vmov	r6, r7, d0
 8005190:	4b9f      	ldr	r3, [pc, #636]	; (8005410 <__kernel_rem_pio2+0x678>)
 8005192:	ee10 0a10 	vmov	r0, s0
 8005196:	2200      	movs	r2, #0
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb fcbb 	bl	8000b14 <__aeabi_dcmpge>
 800519e:	b300      	cbz	r0, 80051e2 <__kernel_rem_pio2+0x44a>
 80051a0:	4b9c      	ldr	r3, [pc, #624]	; (8005414 <__kernel_rem_pio2+0x67c>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb fa2e 	bl	8000608 <__aeabi_dmul>
 80051ac:	f7fb fcdc 	bl	8000b68 <__aeabi_d2iz>
 80051b0:	4605      	mov	r5, r0
 80051b2:	f7fb f9bf 	bl	8000534 <__aeabi_i2d>
 80051b6:	4b96      	ldr	r3, [pc, #600]	; (8005410 <__kernel_rem_pio2+0x678>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	f7fb fa25 	bl	8000608 <__aeabi_dmul>
 80051be:	460b      	mov	r3, r1
 80051c0:	4602      	mov	r2, r0
 80051c2:	4639      	mov	r1, r7
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7fb f867 	bl	8000298 <__aeabi_dsub>
 80051ca:	f7fb fccd 	bl	8000b68 <__aeabi_d2iz>
 80051ce:	f104 0b01 	add.w	fp, r4, #1
 80051d2:	ab0c      	add	r3, sp, #48	; 0x30
 80051d4:	f10a 0a18 	add.w	sl, sl, #24
 80051d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051dc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80051e0:	e72b      	b.n	800503a <__kernel_rem_pio2+0x2a2>
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb fcbf 	bl	8000b68 <__aeabi_d2iz>
 80051ea:	ab0c      	add	r3, sp, #48	; 0x30
 80051ec:	46a3      	mov	fp, r4
 80051ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80051f2:	e722      	b.n	800503a <__kernel_rem_pio2+0x2a2>
 80051f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80051f6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80051fa:	ab0c      	add	r3, sp, #48	; 0x30
 80051fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005200:	f7fb f998 	bl	8000534 <__aeabi_i2d>
 8005204:	4622      	mov	r2, r4
 8005206:	462b      	mov	r3, r5
 8005208:	f7fb f9fe 	bl	8000608 <__aeabi_dmul>
 800520c:	4632      	mov	r2, r6
 800520e:	e9c9 0100 	strd	r0, r1, [r9]
 8005212:	463b      	mov	r3, r7
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb f9f6 	bl	8000608 <__aeabi_dmul>
 800521c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005220:	4604      	mov	r4, r0
 8005222:	460d      	mov	r5, r1
 8005224:	e713      	b.n	800504e <__kernel_rem_pio2+0x2b6>
 8005226:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800522a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800522e:	f7fb f9eb 	bl	8000608 <__aeabi_dmul>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	3601      	adds	r6, #1
 8005240:	4604      	mov	r4, r0
 8005242:	460d      	mov	r5, r1
 8005244:	9b04      	ldr	r3, [sp, #16]
 8005246:	429e      	cmp	r6, r3
 8005248:	dc01      	bgt.n	800524e <__kernel_rem_pio2+0x4b6>
 800524a:	45b0      	cmp	r8, r6
 800524c:	daeb      	bge.n	8005226 <__kernel_rem_pio2+0x48e>
 800524e:	ab48      	add	r3, sp, #288	; 0x120
 8005250:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005254:	e9c3 4500 	strd	r4, r5, [r3]
 8005258:	3f01      	subs	r7, #1
 800525a:	f108 0801 	add.w	r8, r8, #1
 800525e:	e6ff      	b.n	8005060 <__kernel_rem_pio2+0x2c8>
 8005260:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005262:	2b02      	cmp	r3, #2
 8005264:	dc0b      	bgt.n	800527e <__kernel_rem_pio2+0x4e6>
 8005266:	2b00      	cmp	r3, #0
 8005268:	dc6e      	bgt.n	8005348 <__kernel_rem_pio2+0x5b0>
 800526a:	d045      	beq.n	80052f8 <__kernel_rem_pio2+0x560>
 800526c:	9b07      	ldr	r3, [sp, #28]
 800526e:	f003 0007 	and.w	r0, r3, #7
 8005272:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005276:	ecbd 8b02 	vpop	{d8}
 800527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005280:	2b03      	cmp	r3, #3
 8005282:	d1f3      	bne.n	800526c <__kernel_rem_pio2+0x4d4>
 8005284:	ab48      	add	r3, sp, #288	; 0x120
 8005286:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800528a:	46d0      	mov	r8, sl
 800528c:	46d9      	mov	r9, fp
 800528e:	f1b9 0f00 	cmp.w	r9, #0
 8005292:	f1a8 0808 	sub.w	r8, r8, #8
 8005296:	dc64      	bgt.n	8005362 <__kernel_rem_pio2+0x5ca>
 8005298:	465c      	mov	r4, fp
 800529a:	2c01      	cmp	r4, #1
 800529c:	f1aa 0a08 	sub.w	sl, sl, #8
 80052a0:	dc7e      	bgt.n	80053a0 <__kernel_rem_pio2+0x608>
 80052a2:	2000      	movs	r0, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	f1bb 0f01 	cmp.w	fp, #1
 80052aa:	f300 8097 	bgt.w	80053dc <__kernel_rem_pio2+0x644>
 80052ae:	9b02      	ldr	r3, [sp, #8]
 80052b0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80052b4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 8099 	bne.w	80053f0 <__kernel_rem_pio2+0x658>
 80052be:	9b01      	ldr	r3, [sp, #4]
 80052c0:	e9c3 5600 	strd	r5, r6, [r3]
 80052c4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80052c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80052cc:	e7ce      	b.n	800526c <__kernel_rem_pio2+0x4d4>
 80052ce:	ab48      	add	r3, sp, #288	; 0x120
 80052d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fa ffe0 	bl	800029c <__adddf3>
 80052dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052e0:	f1bb 0f00 	cmp.w	fp, #0
 80052e4:	daf3      	bge.n	80052ce <__kernel_rem_pio2+0x536>
 80052e6:	9b02      	ldr	r3, [sp, #8]
 80052e8:	b113      	cbz	r3, 80052f0 <__kernel_rem_pio2+0x558>
 80052ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052ee:	4619      	mov	r1, r3
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	e9c3 0100 	strd	r0, r1, [r3]
 80052f6:	e7b9      	b.n	800526c <__kernel_rem_pio2+0x4d4>
 80052f8:	2000      	movs	r0, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	e7f0      	b.n	80052e0 <__kernel_rem_pio2+0x548>
 80052fe:	ab48      	add	r3, sp, #288	; 0x120
 8005300:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fa ffc8 	bl	800029c <__adddf3>
 800530c:	3c01      	subs	r4, #1
 800530e:	2c00      	cmp	r4, #0
 8005310:	daf5      	bge.n	80052fe <__kernel_rem_pio2+0x566>
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	b1e3      	cbz	r3, 8005350 <__kernel_rem_pio2+0x5b8>
 8005316:	4602      	mov	r2, r0
 8005318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800531c:	9c01      	ldr	r4, [sp, #4]
 800531e:	e9c4 2300 	strd	r2, r3, [r4]
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800532a:	f7fa ffb5 	bl	8000298 <__aeabi_dsub>
 800532e:	ad4a      	add	r5, sp, #296	; 0x128
 8005330:	2401      	movs	r4, #1
 8005332:	45a3      	cmp	fp, r4
 8005334:	da0f      	bge.n	8005356 <__kernel_rem_pio2+0x5be>
 8005336:	9b02      	ldr	r3, [sp, #8]
 8005338:	b113      	cbz	r3, 8005340 <__kernel_rem_pio2+0x5a8>
 800533a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800533e:	4619      	mov	r1, r3
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005346:	e791      	b.n	800526c <__kernel_rem_pio2+0x4d4>
 8005348:	465c      	mov	r4, fp
 800534a:	2000      	movs	r0, #0
 800534c:	2100      	movs	r1, #0
 800534e:	e7de      	b.n	800530e <__kernel_rem_pio2+0x576>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	e7e2      	b.n	800531c <__kernel_rem_pio2+0x584>
 8005356:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800535a:	f7fa ff9f 	bl	800029c <__adddf3>
 800535e:	3401      	adds	r4, #1
 8005360:	e7e7      	b.n	8005332 <__kernel_rem_pio2+0x59a>
 8005362:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005366:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800536a:	4620      	mov	r0, r4
 800536c:	4632      	mov	r2, r6
 800536e:	463b      	mov	r3, r7
 8005370:	4629      	mov	r1, r5
 8005372:	f7fa ff93 	bl	800029c <__adddf3>
 8005376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fa ff89 	bl	8000298 <__aeabi_dsub>
 8005386:	4632      	mov	r2, r6
 8005388:	463b      	mov	r3, r7
 800538a:	f7fa ff87 	bl	800029c <__adddf3>
 800538e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005392:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005396:	ed88 7b00 	vstr	d7, [r8]
 800539a:	f109 39ff 	add.w	r9, r9, #4294967295
 800539e:	e776      	b.n	800528e <__kernel_rem_pio2+0x4f6>
 80053a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80053a4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80053a8:	4640      	mov	r0, r8
 80053aa:	4632      	mov	r2, r6
 80053ac:	463b      	mov	r3, r7
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fa ff74 	bl	800029c <__adddf3>
 80053b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4640      	mov	r0, r8
 80053be:	4649      	mov	r1, r9
 80053c0:	f7fa ff6a 	bl	8000298 <__aeabi_dsub>
 80053c4:	4632      	mov	r2, r6
 80053c6:	463b      	mov	r3, r7
 80053c8:	f7fa ff68 	bl	800029c <__adddf3>
 80053cc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80053d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053d4:	ed8a 7b00 	vstr	d7, [sl]
 80053d8:	3c01      	subs	r4, #1
 80053da:	e75e      	b.n	800529a <__kernel_rem_pio2+0x502>
 80053dc:	ab48      	add	r3, sp, #288	; 0x120
 80053de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fa ff59 	bl	800029c <__adddf3>
 80053ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053ee:	e75a      	b.n	80052a6 <__kernel_rem_pio2+0x50e>
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	9a01      	ldr	r2, [sp, #4]
 80053f4:	601d      	str	r5, [r3, #0]
 80053f6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80053fa:	605c      	str	r4, [r3, #4]
 80053fc:	609f      	str	r7, [r3, #8]
 80053fe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005402:	60d3      	str	r3, [r2, #12]
 8005404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005408:	6110      	str	r0, [r2, #16]
 800540a:	6153      	str	r3, [r2, #20]
 800540c:	e72e      	b.n	800526c <__kernel_rem_pio2+0x4d4>
 800540e:	bf00      	nop
 8005410:	41700000 	.word	0x41700000
 8005414:	3e700000 	.word	0x3e700000

08005418 <__kernel_sin>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	ed2d 8b04 	vpush	{d8-d9}
 8005420:	eeb0 8a41 	vmov.f32	s16, s2
 8005424:	eef0 8a61 	vmov.f32	s17, s3
 8005428:	ec55 4b10 	vmov	r4, r5, d0
 800542c:	b083      	sub	sp, #12
 800542e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005432:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005436:	9001      	str	r0, [sp, #4]
 8005438:	da06      	bge.n	8005448 <__kernel_sin+0x30>
 800543a:	ee10 0a10 	vmov	r0, s0
 800543e:	4629      	mov	r1, r5
 8005440:	f7fb fb92 	bl	8000b68 <__aeabi_d2iz>
 8005444:	2800      	cmp	r0, #0
 8005446:	d051      	beq.n	80054ec <__kernel_sin+0xd4>
 8005448:	4622      	mov	r2, r4
 800544a:	462b      	mov	r3, r5
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb f8da 	bl	8000608 <__aeabi_dmul>
 8005454:	4682      	mov	sl, r0
 8005456:	468b      	mov	fp, r1
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fb f8d2 	bl	8000608 <__aeabi_dmul>
 8005464:	a341      	add	r3, pc, #260	; (adr r3, 800556c <__kernel_sin+0x154>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	4680      	mov	r8, r0
 800546c:	4689      	mov	r9, r1
 800546e:	4650      	mov	r0, sl
 8005470:	4659      	mov	r1, fp
 8005472:	f7fb f8c9 	bl	8000608 <__aeabi_dmul>
 8005476:	a33f      	add	r3, pc, #252	; (adr r3, 8005574 <__kernel_sin+0x15c>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fa ff0c 	bl	8000298 <__aeabi_dsub>
 8005480:	4652      	mov	r2, sl
 8005482:	465b      	mov	r3, fp
 8005484:	f7fb f8c0 	bl	8000608 <__aeabi_dmul>
 8005488:	a33c      	add	r3, pc, #240	; (adr r3, 800557c <__kernel_sin+0x164>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fa ff05 	bl	800029c <__adddf3>
 8005492:	4652      	mov	r2, sl
 8005494:	465b      	mov	r3, fp
 8005496:	f7fb f8b7 	bl	8000608 <__aeabi_dmul>
 800549a:	a33a      	add	r3, pc, #232	; (adr r3, 8005584 <__kernel_sin+0x16c>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f7fa fefa 	bl	8000298 <__aeabi_dsub>
 80054a4:	4652      	mov	r2, sl
 80054a6:	465b      	mov	r3, fp
 80054a8:	f7fb f8ae 	bl	8000608 <__aeabi_dmul>
 80054ac:	a337      	add	r3, pc, #220	; (adr r3, 800558c <__kernel_sin+0x174>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fa fef3 	bl	800029c <__adddf3>
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	4606      	mov	r6, r0
 80054ba:	460f      	mov	r7, r1
 80054bc:	b9eb      	cbnz	r3, 80054fa <__kernel_sin+0xe2>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4650      	mov	r0, sl
 80054c4:	4659      	mov	r1, fp
 80054c6:	f7fb f89f 	bl	8000608 <__aeabi_dmul>
 80054ca:	a325      	add	r3, pc, #148	; (adr r3, 8005560 <__kernel_sin+0x148>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fa fee2 	bl	8000298 <__aeabi_dsub>
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	f7fb f896 	bl	8000608 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4620      	mov	r0, r4
 80054e2:	4629      	mov	r1, r5
 80054e4:	f7fa feda 	bl	800029c <__adddf3>
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	ec45 4b10 	vmov	d0, r4, r5
 80054f0:	b003      	add	sp, #12
 80054f2:	ecbd 8b04 	vpop	{d8-d9}
 80054f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <__kernel_sin+0x150>)
 80054fc:	ec51 0b18 	vmov	r0, r1, d8
 8005500:	2200      	movs	r2, #0
 8005502:	f7fb f881 	bl	8000608 <__aeabi_dmul>
 8005506:	4632      	mov	r2, r6
 8005508:	ec41 0b19 	vmov	d9, r0, r1
 800550c:	463b      	mov	r3, r7
 800550e:	4640      	mov	r0, r8
 8005510:	4649      	mov	r1, r9
 8005512:	f7fb f879 	bl	8000608 <__aeabi_dmul>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	ec51 0b19 	vmov	r0, r1, d9
 800551e:	f7fa febb 	bl	8000298 <__aeabi_dsub>
 8005522:	4652      	mov	r2, sl
 8005524:	465b      	mov	r3, fp
 8005526:	f7fb f86f 	bl	8000608 <__aeabi_dmul>
 800552a:	ec53 2b18 	vmov	r2, r3, d8
 800552e:	f7fa feb3 	bl	8000298 <__aeabi_dsub>
 8005532:	a30b      	add	r3, pc, #44	; (adr r3, 8005560 <__kernel_sin+0x148>)
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fb f862 	bl	8000608 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fa fea6 	bl	800029c <__adddf3>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f7fa fe9e 	bl	8000298 <__aeabi_dsub>
 800555c:	e7c4      	b.n	80054e8 <__kernel_sin+0xd0>
 800555e:	bf00      	nop
 8005560:	55555549 	.word	0x55555549
 8005564:	3fc55555 	.word	0x3fc55555
 8005568:	3fe00000 	.word	0x3fe00000
 800556c:	5acfd57c 	.word	0x5acfd57c
 8005570:	3de5d93a 	.word	0x3de5d93a
 8005574:	8a2b9ceb 	.word	0x8a2b9ceb
 8005578:	3e5ae5e6 	.word	0x3e5ae5e6
 800557c:	57b1fe7d 	.word	0x57b1fe7d
 8005580:	3ec71de3 	.word	0x3ec71de3
 8005584:	19c161d5 	.word	0x19c161d5
 8005588:	3f2a01a0 	.word	0x3f2a01a0
 800558c:	1110f8a6 	.word	0x1110f8a6
 8005590:	3f811111 	.word	0x3f811111

08005594 <fabs>:
 8005594:	ec51 0b10 	vmov	r0, r1, d0
 8005598:	ee10 2a10 	vmov	r2, s0
 800559c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055a0:	ec43 2b10 	vmov	d0, r2, r3
 80055a4:	4770      	bx	lr
	...

080055a8 <floor>:
 80055a8:	ec51 0b10 	vmov	r0, r1, d0
 80055ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80055b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80055b8:	2e13      	cmp	r6, #19
 80055ba:	ee10 5a10 	vmov	r5, s0
 80055be:	ee10 8a10 	vmov	r8, s0
 80055c2:	460c      	mov	r4, r1
 80055c4:	dc32      	bgt.n	800562c <floor+0x84>
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	da14      	bge.n	80055f4 <floor+0x4c>
 80055ca:	a333      	add	r3, pc, #204	; (adr r3, 8005698 <floor+0xf0>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe64 	bl	800029c <__adddf3>
 80055d4:	2200      	movs	r2, #0
 80055d6:	2300      	movs	r3, #0
 80055d8:	f7fb faa6 	bl	8000b28 <__aeabi_dcmpgt>
 80055dc:	b138      	cbz	r0, 80055ee <floor+0x46>
 80055de:	2c00      	cmp	r4, #0
 80055e0:	da57      	bge.n	8005692 <floor+0xea>
 80055e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80055e6:	431d      	orrs	r5, r3
 80055e8:	d001      	beq.n	80055ee <floor+0x46>
 80055ea:	4c2d      	ldr	r4, [pc, #180]	; (80056a0 <floor+0xf8>)
 80055ec:	2500      	movs	r5, #0
 80055ee:	4621      	mov	r1, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	e025      	b.n	8005640 <floor+0x98>
 80055f4:	4f2b      	ldr	r7, [pc, #172]	; (80056a4 <floor+0xfc>)
 80055f6:	4137      	asrs	r7, r6
 80055f8:	ea01 0307 	and.w	r3, r1, r7
 80055fc:	4303      	orrs	r3, r0
 80055fe:	d01f      	beq.n	8005640 <floor+0x98>
 8005600:	a325      	add	r3, pc, #148	; (adr r3, 8005698 <floor+0xf0>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fe49 	bl	800029c <__adddf3>
 800560a:	2200      	movs	r2, #0
 800560c:	2300      	movs	r3, #0
 800560e:	f7fb fa8b 	bl	8000b28 <__aeabi_dcmpgt>
 8005612:	2800      	cmp	r0, #0
 8005614:	d0eb      	beq.n	80055ee <floor+0x46>
 8005616:	2c00      	cmp	r4, #0
 8005618:	bfbe      	ittt	lt
 800561a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800561e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005622:	19a4      	addlt	r4, r4, r6
 8005624:	ea24 0407 	bic.w	r4, r4, r7
 8005628:	2500      	movs	r5, #0
 800562a:	e7e0      	b.n	80055ee <floor+0x46>
 800562c:	2e33      	cmp	r6, #51	; 0x33
 800562e:	dd0b      	ble.n	8005648 <floor+0xa0>
 8005630:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005634:	d104      	bne.n	8005640 <floor+0x98>
 8005636:	ee10 2a10 	vmov	r2, s0
 800563a:	460b      	mov	r3, r1
 800563c:	f7fa fe2e 	bl	800029c <__adddf3>
 8005640:	ec41 0b10 	vmov	d0, r0, r1
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
 8005650:	fa23 f707 	lsr.w	r7, r3, r7
 8005654:	4207      	tst	r7, r0
 8005656:	d0f3      	beq.n	8005640 <floor+0x98>
 8005658:	a30f      	add	r3, pc, #60	; (adr r3, 8005698 <floor+0xf0>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa fe1d 	bl	800029c <__adddf3>
 8005662:	2200      	movs	r2, #0
 8005664:	2300      	movs	r3, #0
 8005666:	f7fb fa5f 	bl	8000b28 <__aeabi_dcmpgt>
 800566a:	2800      	cmp	r0, #0
 800566c:	d0bf      	beq.n	80055ee <floor+0x46>
 800566e:	2c00      	cmp	r4, #0
 8005670:	da02      	bge.n	8005678 <floor+0xd0>
 8005672:	2e14      	cmp	r6, #20
 8005674:	d103      	bne.n	800567e <floor+0xd6>
 8005676:	3401      	adds	r4, #1
 8005678:	ea25 0507 	bic.w	r5, r5, r7
 800567c:	e7b7      	b.n	80055ee <floor+0x46>
 800567e:	2301      	movs	r3, #1
 8005680:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005684:	fa03 f606 	lsl.w	r6, r3, r6
 8005688:	4435      	add	r5, r6
 800568a:	4545      	cmp	r5, r8
 800568c:	bf38      	it	cc
 800568e:	18e4      	addcc	r4, r4, r3
 8005690:	e7f2      	b.n	8005678 <floor+0xd0>
 8005692:	2500      	movs	r5, #0
 8005694:	462c      	mov	r4, r5
 8005696:	e7aa      	b.n	80055ee <floor+0x46>
 8005698:	8800759c 	.word	0x8800759c
 800569c:	7e37e43c 	.word	0x7e37e43c
 80056a0:	bff00000 	.word	0xbff00000
 80056a4:	000fffff 	.word	0x000fffff

080056a8 <scalbn>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	ec55 4b10 	vmov	r4, r5, d0
 80056ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80056b2:	4606      	mov	r6, r0
 80056b4:	462b      	mov	r3, r5
 80056b6:	b99a      	cbnz	r2, 80056e0 <scalbn+0x38>
 80056b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056bc:	4323      	orrs	r3, r4
 80056be:	d036      	beq.n	800572e <scalbn+0x86>
 80056c0:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <scalbn+0x100>)
 80056c2:	4629      	mov	r1, r5
 80056c4:	ee10 0a10 	vmov	r0, s0
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ff9d 	bl	8000608 <__aeabi_dmul>
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <scalbn+0x104>)
 80056d0:	429e      	cmp	r6, r3
 80056d2:	4604      	mov	r4, r0
 80056d4:	460d      	mov	r5, r1
 80056d6:	da10      	bge.n	80056fa <scalbn+0x52>
 80056d8:	a32b      	add	r3, pc, #172	; (adr r3, 8005788 <scalbn+0xe0>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	e03a      	b.n	8005756 <scalbn+0xae>
 80056e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056e4:	428a      	cmp	r2, r1
 80056e6:	d10c      	bne.n	8005702 <scalbn+0x5a>
 80056e8:	ee10 2a10 	vmov	r2, s0
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa fdd4 	bl	800029c <__adddf3>
 80056f4:	4604      	mov	r4, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	e019      	b.n	800572e <scalbn+0x86>
 80056fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056fe:	460b      	mov	r3, r1
 8005700:	3a36      	subs	r2, #54	; 0x36
 8005702:	4432      	add	r2, r6
 8005704:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005708:	428a      	cmp	r2, r1
 800570a:	dd08      	ble.n	800571e <scalbn+0x76>
 800570c:	2d00      	cmp	r5, #0
 800570e:	a120      	add	r1, pc, #128	; (adr r1, 8005790 <scalbn+0xe8>)
 8005710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005714:	da1c      	bge.n	8005750 <scalbn+0xa8>
 8005716:	a120      	add	r1, pc, #128	; (adr r1, 8005798 <scalbn+0xf0>)
 8005718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800571c:	e018      	b.n	8005750 <scalbn+0xa8>
 800571e:	2a00      	cmp	r2, #0
 8005720:	dd08      	ble.n	8005734 <scalbn+0x8c>
 8005722:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800572a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800572e:	ec45 4b10 	vmov	d0, r4, r5
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005738:	da19      	bge.n	800576e <scalbn+0xc6>
 800573a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800573e:	429e      	cmp	r6, r3
 8005740:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005744:	dd0a      	ble.n	800575c <scalbn+0xb4>
 8005746:	a112      	add	r1, pc, #72	; (adr r1, 8005790 <scalbn+0xe8>)
 8005748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e2      	bne.n	8005716 <scalbn+0x6e>
 8005750:	a30f      	add	r3, pc, #60	; (adr r3, 8005790 <scalbn+0xe8>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa ff57 	bl	8000608 <__aeabi_dmul>
 800575a:	e7cb      	b.n	80056f4 <scalbn+0x4c>
 800575c:	a10a      	add	r1, pc, #40	; (adr r1, 8005788 <scalbn+0xe0>)
 800575e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0b8      	beq.n	80056d8 <scalbn+0x30>
 8005766:	a10e      	add	r1, pc, #56	; (adr r1, 80057a0 <scalbn+0xf8>)
 8005768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800576c:	e7b4      	b.n	80056d8 <scalbn+0x30>
 800576e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005772:	3236      	adds	r2, #54	; 0x36
 8005774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005778:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800577c:	4620      	mov	r0, r4
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <scalbn+0x108>)
 8005780:	2200      	movs	r2, #0
 8005782:	e7e8      	b.n	8005756 <scalbn+0xae>
 8005784:	f3af 8000 	nop.w
 8005788:	c2f8f359 	.word	0xc2f8f359
 800578c:	01a56e1f 	.word	0x01a56e1f
 8005790:	8800759c 	.word	0x8800759c
 8005794:	7e37e43c 	.word	0x7e37e43c
 8005798:	8800759c 	.word	0x8800759c
 800579c:	fe37e43c 	.word	0xfe37e43c
 80057a0:	c2f8f359 	.word	0xc2f8f359
 80057a4:	81a56e1f 	.word	0x81a56e1f
 80057a8:	43500000 	.word	0x43500000
 80057ac:	ffff3cb0 	.word	0xffff3cb0
 80057b0:	3c900000 	.word	0x3c900000

080057b4 <fabsf>:
 80057b4:	ee10 3a10 	vmov	r3, s0
 80057b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	ee00 3a10 	vmov	s0, r3
 80057c0:	4770      	bx	lr
	...

080057c4 <nanf>:
 80057c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80057cc <nanf+0x8>
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	7fc00000 	.word	0x7fc00000

080057d0 <__errno>:
 80057d0:	4b01      	ldr	r3, [pc, #4]	; (80057d8 <__errno+0x8>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4d0d      	ldr	r5, [pc, #52]	; (8005814 <__libc_init_array+0x38>)
 80057e0:	4c0d      	ldr	r4, [pc, #52]	; (8005818 <__libc_init_array+0x3c>)
 80057e2:	1b64      	subs	r4, r4, r5
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	2600      	movs	r6, #0
 80057e8:	42a6      	cmp	r6, r4
 80057ea:	d109      	bne.n	8005800 <__libc_init_array+0x24>
 80057ec:	4d0b      	ldr	r5, [pc, #44]	; (800581c <__libc_init_array+0x40>)
 80057ee:	4c0c      	ldr	r4, [pc, #48]	; (8005820 <__libc_init_array+0x44>)
 80057f0:	f002 fecc 	bl	800858c <_init>
 80057f4:	1b64      	subs	r4, r4, r5
 80057f6:	10a4      	asrs	r4, r4, #2
 80057f8:	2600      	movs	r6, #0
 80057fa:	42a6      	cmp	r6, r4
 80057fc:	d105      	bne.n	800580a <__libc_init_array+0x2e>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	f855 3b04 	ldr.w	r3, [r5], #4
 8005804:	4798      	blx	r3
 8005806:	3601      	adds	r6, #1
 8005808:	e7ee      	b.n	80057e8 <__libc_init_array+0xc>
 800580a:	f855 3b04 	ldr.w	r3, [r5], #4
 800580e:	4798      	blx	r3
 8005810:	3601      	adds	r6, #1
 8005812:	e7f2      	b.n	80057fa <__libc_init_array+0x1e>
 8005814:	08008bec 	.word	0x08008bec
 8005818:	08008bec 	.word	0x08008bec
 800581c:	08008bec 	.word	0x08008bec
 8005820:	08008bf0 	.word	0x08008bf0

08005824 <memset>:
 8005824:	4402      	add	r2, r0
 8005826:	4603      	mov	r3, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	d100      	bne.n	800582e <memset+0xa>
 800582c:	4770      	bx	lr
 800582e:	f803 1b01 	strb.w	r1, [r3], #1
 8005832:	e7f9      	b.n	8005828 <memset+0x4>

08005834 <__cvt>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	ec55 4b10 	vmov	r4, r5, d0
 800583c:	2d00      	cmp	r5, #0
 800583e:	460e      	mov	r6, r1
 8005840:	4619      	mov	r1, r3
 8005842:	462b      	mov	r3, r5
 8005844:	bfbb      	ittet	lt
 8005846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800584a:	461d      	movlt	r5, r3
 800584c:	2300      	movge	r3, #0
 800584e:	232d      	movlt	r3, #45	; 0x2d
 8005850:	700b      	strb	r3, [r1, #0]
 8005852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005854:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005858:	4691      	mov	r9, r2
 800585a:	f023 0820 	bic.w	r8, r3, #32
 800585e:	bfbc      	itt	lt
 8005860:	4622      	movlt	r2, r4
 8005862:	4614      	movlt	r4, r2
 8005864:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005868:	d005      	beq.n	8005876 <__cvt+0x42>
 800586a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800586e:	d100      	bne.n	8005872 <__cvt+0x3e>
 8005870:	3601      	adds	r6, #1
 8005872:	2102      	movs	r1, #2
 8005874:	e000      	b.n	8005878 <__cvt+0x44>
 8005876:	2103      	movs	r1, #3
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	ab02      	add	r3, sp, #8
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	ec45 4b10 	vmov	d0, r4, r5
 8005884:	4653      	mov	r3, sl
 8005886:	4632      	mov	r2, r6
 8005888:	f000 fd02 	bl	8006290 <_dtoa_r>
 800588c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005890:	4607      	mov	r7, r0
 8005892:	d102      	bne.n	800589a <__cvt+0x66>
 8005894:	f019 0f01 	tst.w	r9, #1
 8005898:	d022      	beq.n	80058e0 <__cvt+0xac>
 800589a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800589e:	eb07 0906 	add.w	r9, r7, r6
 80058a2:	d110      	bne.n	80058c6 <__cvt+0x92>
 80058a4:	783b      	ldrb	r3, [r7, #0]
 80058a6:	2b30      	cmp	r3, #48	; 0x30
 80058a8:	d10a      	bne.n	80058c0 <__cvt+0x8c>
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b6:	b918      	cbnz	r0, 80058c0 <__cvt+0x8c>
 80058b8:	f1c6 0601 	rsb	r6, r6, #1
 80058bc:	f8ca 6000 	str.w	r6, [sl]
 80058c0:	f8da 3000 	ldr.w	r3, [sl]
 80058c4:	4499      	add	r9, r3
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fb f903 	bl	8000ad8 <__aeabi_dcmpeq>
 80058d2:	b108      	cbz	r0, 80058d8 <__cvt+0xa4>
 80058d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058d8:	2230      	movs	r2, #48	; 0x30
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	454b      	cmp	r3, r9
 80058de:	d307      	bcc.n	80058f0 <__cvt+0xbc>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e4:	1bdb      	subs	r3, r3, r7
 80058e6:	4638      	mov	r0, r7
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	b004      	add	sp, #16
 80058ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	9103      	str	r1, [sp, #12]
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e7f0      	b.n	80058da <__cvt+0xa6>

080058f8 <__exponent>:
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	4603      	mov	r3, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	bfb8      	it	lt
 8005900:	4249      	neglt	r1, r1
 8005902:	f803 2b02 	strb.w	r2, [r3], #2
 8005906:	bfb4      	ite	lt
 8005908:	222d      	movlt	r2, #45	; 0x2d
 800590a:	222b      	movge	r2, #43	; 0x2b
 800590c:	2909      	cmp	r1, #9
 800590e:	7042      	strb	r2, [r0, #1]
 8005910:	dd2a      	ble.n	8005968 <__exponent+0x70>
 8005912:	f10d 0407 	add.w	r4, sp, #7
 8005916:	46a4      	mov	ip, r4
 8005918:	270a      	movs	r7, #10
 800591a:	46a6      	mov	lr, r4
 800591c:	460a      	mov	r2, r1
 800591e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005922:	fb07 1516 	mls	r5, r7, r6, r1
 8005926:	3530      	adds	r5, #48	; 0x30
 8005928:	2a63      	cmp	r2, #99	; 0x63
 800592a:	f104 34ff 	add.w	r4, r4, #4294967295
 800592e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005932:	4631      	mov	r1, r6
 8005934:	dcf1      	bgt.n	800591a <__exponent+0x22>
 8005936:	3130      	adds	r1, #48	; 0x30
 8005938:	f1ae 0502 	sub.w	r5, lr, #2
 800593c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005940:	1c44      	adds	r4, r0, #1
 8005942:	4629      	mov	r1, r5
 8005944:	4561      	cmp	r1, ip
 8005946:	d30a      	bcc.n	800595e <__exponent+0x66>
 8005948:	f10d 0209 	add.w	r2, sp, #9
 800594c:	eba2 020e 	sub.w	r2, r2, lr
 8005950:	4565      	cmp	r5, ip
 8005952:	bf88      	it	hi
 8005954:	2200      	movhi	r2, #0
 8005956:	4413      	add	r3, r2
 8005958:	1a18      	subs	r0, r3, r0
 800595a:	b003      	add	sp, #12
 800595c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005962:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005966:	e7ed      	b.n	8005944 <__exponent+0x4c>
 8005968:	2330      	movs	r3, #48	; 0x30
 800596a:	3130      	adds	r1, #48	; 0x30
 800596c:	7083      	strb	r3, [r0, #2]
 800596e:	70c1      	strb	r1, [r0, #3]
 8005970:	1d03      	adds	r3, r0, #4
 8005972:	e7f1      	b.n	8005958 <__exponent+0x60>

08005974 <_printf_float>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	ed2d 8b02 	vpush	{d8}
 800597c:	b08d      	sub	sp, #52	; 0x34
 800597e:	460c      	mov	r4, r1
 8005980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005984:	4616      	mov	r6, r2
 8005986:	461f      	mov	r7, r3
 8005988:	4605      	mov	r5, r0
 800598a:	f001 fb63 	bl	8007054 <_localeconv_r>
 800598e:	f8d0 a000 	ldr.w	sl, [r0]
 8005992:	4650      	mov	r0, sl
 8005994:	f7fa fc24 	bl	80001e0 <strlen>
 8005998:	2300      	movs	r3, #0
 800599a:	930a      	str	r3, [sp, #40]	; 0x28
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	f8d8 3000 	ldr.w	r3, [r8]
 80059a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059a8:	3307      	adds	r3, #7
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	f103 0208 	add.w	r2, r3, #8
 80059b2:	f8c8 2000 	str.w	r2, [r8]
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059cc:	ee08 0a10 	vmov	s16, r0
 80059d0:	4b9f      	ldr	r3, [pc, #636]	; (8005c50 <_printf_float+0x2dc>)
 80059d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d6:	f04f 32ff 	mov.w	r2, #4294967295
 80059da:	f7fb f8af 	bl	8000b3c <__aeabi_dcmpun>
 80059de:	bb88      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e4:	4b9a      	ldr	r3, [pc, #616]	; (8005c50 <_printf_float+0x2dc>)
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	f7fb f889 	bl	8000b00 <__aeabi_dcmple>
 80059ee:	bb48      	cbnz	r0, 8005a44 <_printf_float+0xd0>
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	4640      	mov	r0, r8
 80059f6:	4649      	mov	r1, r9
 80059f8:	f7fb f878 	bl	8000aec <__aeabi_dcmplt>
 80059fc:	b110      	cbz	r0, 8005a04 <_printf_float+0x90>
 80059fe:	232d      	movs	r3, #45	; 0x2d
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	4b93      	ldr	r3, [pc, #588]	; (8005c54 <_printf_float+0x2e0>)
 8005a06:	4894      	ldr	r0, [pc, #592]	; (8005c58 <_printf_float+0x2e4>)
 8005a08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a0c:	bf94      	ite	ls
 8005a0e:	4698      	movls	r8, r3
 8005a10:	4680      	movhi	r8, r0
 8005a12:	2303      	movs	r3, #3
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	9b05      	ldr	r3, [sp, #20]
 8005a18:	f023 0204 	bic.w	r2, r3, #4
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	9700      	str	r7, [sp, #0]
 8005a24:	4633      	mov	r3, r6
 8005a26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f9d8 	bl	8005de0 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	f040 8090 	bne.w	8005b56 <_printf_float+0x1e2>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	b00d      	add	sp, #52	; 0x34
 8005a3c:	ecbd 8b02 	vpop	{d8}
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fb f876 	bl	8000b3c <__aeabi_dcmpun>
 8005a50:	b140      	cbz	r0, 8005a64 <_printf_float+0xf0>
 8005a52:	464b      	mov	r3, r9
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfbc      	itt	lt
 8005a58:	232d      	movlt	r3, #45	; 0x2d
 8005a5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a5e:	487f      	ldr	r0, [pc, #508]	; (8005c5c <_printf_float+0x2e8>)
 8005a60:	4b7f      	ldr	r3, [pc, #508]	; (8005c60 <_printf_float+0x2ec>)
 8005a62:	e7d1      	b.n	8005a08 <_printf_float+0x94>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a6a:	9206      	str	r2, [sp, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	d13f      	bne.n	8005af0 <_printf_float+0x17c>
 8005a70:	2306      	movs	r3, #6
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	6861      	ldr	r1, [r4, #4]
 8005a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	ab0a      	add	r3, sp, #40	; 0x28
 8005a82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a86:	ab09      	add	r3, sp, #36	; 0x24
 8005a88:	ec49 8b10 	vmov	d0, r8, r9
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6022      	str	r2, [r4, #0]
 8005a90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a94:	4628      	mov	r0, r5
 8005a96:	f7ff fecd 	bl	8005834 <__cvt>
 8005a9a:	9b06      	ldr	r3, [sp, #24]
 8005a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a9e:	2b47      	cmp	r3, #71	; 0x47
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	d108      	bne.n	8005ab6 <_printf_float+0x142>
 8005aa4:	1cc8      	adds	r0, r1, #3
 8005aa6:	db02      	blt.n	8005aae <_printf_float+0x13a>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	dd41      	ble.n	8005b32 <_printf_float+0x1be>
 8005aae:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ab2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ab6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aba:	d820      	bhi.n	8005afe <_printf_float+0x18a>
 8005abc:	3901      	subs	r1, #1
 8005abe:	465a      	mov	r2, fp
 8005ac0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ac6:	f7ff ff17 	bl	80058f8 <__exponent>
 8005aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005acc:	1813      	adds	r3, r2, r0
 8005ace:	2a01      	cmp	r2, #1
 8005ad0:	4681      	mov	r9, r0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	dc02      	bgt.n	8005adc <_printf_float+0x168>
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	07d2      	lsls	r2, r2, #31
 8005ada:	d501      	bpl.n	8005ae0 <_printf_float+0x16c>
 8005adc:	3301      	adds	r3, #1
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d09c      	beq.n	8005a22 <_printf_float+0xae>
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aee:	e798      	b.n	8005a22 <_printf_float+0xae>
 8005af0:	9a06      	ldr	r2, [sp, #24]
 8005af2:	2a47      	cmp	r2, #71	; 0x47
 8005af4:	d1be      	bne.n	8005a74 <_printf_float+0x100>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1bc      	bne.n	8005a74 <_printf_float+0x100>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e7b9      	b.n	8005a72 <_printf_float+0xfe>
 8005afe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b02:	d118      	bne.n	8005b36 <_printf_float+0x1c2>
 8005b04:	2900      	cmp	r1, #0
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	dd0b      	ble.n	8005b22 <_printf_float+0x1ae>
 8005b0a:	6121      	str	r1, [r4, #16]
 8005b0c:	b913      	cbnz	r3, 8005b14 <_printf_float+0x1a0>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	07d0      	lsls	r0, r2, #31
 8005b12:	d502      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b14:	3301      	adds	r3, #1
 8005b16:	440b      	add	r3, r1
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	e7de      	b.n	8005ae0 <_printf_float+0x16c>
 8005b22:	b913      	cbnz	r3, 8005b2a <_printf_float+0x1b6>
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	07d2      	lsls	r2, r2, #31
 8005b28:	d501      	bpl.n	8005b2e <_printf_float+0x1ba>
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	e7f4      	b.n	8005b18 <_printf_float+0x1a4>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f2      	b.n	8005b18 <_printf_float+0x1a4>
 8005b32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	db05      	blt.n	8005b48 <_printf_float+0x1d4>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	6121      	str	r1, [r4, #16]
 8005b40:	07d8      	lsls	r0, r3, #31
 8005b42:	d5ea      	bpl.n	8005b1a <_printf_float+0x1a6>
 8005b44:	1c4b      	adds	r3, r1, #1
 8005b46:	e7e7      	b.n	8005b18 <_printf_float+0x1a4>
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	bfd4      	ite	le
 8005b4c:	f1c1 0202 	rsble	r2, r1, #2
 8005b50:	2201      	movgt	r2, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	e7e0      	b.n	8005b18 <_printf_float+0x1a4>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	055a      	lsls	r2, r3, #21
 8005b5a:	d407      	bmi.n	8005b6c <_printf_float+0x1f8>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	4642      	mov	r2, r8
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	d12c      	bne.n	8005bc4 <_printf_float+0x250>
 8005b6a:	e764      	b.n	8005a36 <_printf_float+0xc2>
 8005b6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b70:	f240 80e0 	bls.w	8005d34 <_printf_float+0x3c0>
 8005b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f7fa ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d034      	beq.n	8005bee <_printf_float+0x27a>
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <_printf_float+0x2f0>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f43f af51 	beq.w	8005a36 <_printf_float+0xc2>
 8005b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	db02      	blt.n	8005ba2 <_printf_float+0x22e>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07d8      	lsls	r0, r3, #31
 8005ba0:	d510      	bpl.n	8005bc4 <_printf_float+0x250>
 8005ba2:	ee18 3a10 	vmov	r3, s16
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af41 	beq.w	8005a36 <_printf_float+0xc2>
 8005bb4:	f04f 0800 	mov.w	r8, #0
 8005bb8:	f104 091a 	add.w	r9, r4, #26
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4543      	cmp	r3, r8
 8005bc2:	dc09      	bgt.n	8005bd8 <_printf_float+0x264>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	079b      	lsls	r3, r3, #30
 8005bc8:	f100 8105 	bmi.w	8005dd6 <_printf_float+0x462>
 8005bcc:	68e0      	ldr	r0, [r4, #12]
 8005bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd0:	4298      	cmp	r0, r3
 8005bd2:	bfb8      	it	lt
 8005bd4:	4618      	movlt	r0, r3
 8005bd6:	e730      	b.n	8005a3a <_printf_float+0xc6>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	464a      	mov	r2, r9
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af27 	beq.w	8005a36 <_printf_float+0xc2>
 8005be8:	f108 0801 	add.w	r8, r8, #1
 8005bec:	e7e6      	b.n	8005bbc <_printf_float+0x248>
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc39      	bgt.n	8005c68 <_printf_float+0x2f4>
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <_printf_float+0x2f0>)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af19 	beq.w	8005a36 <_printf_float+0xc2>
 8005c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	d102      	bne.n	8005c12 <_printf_float+0x29e>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	07d9      	lsls	r1, r3, #31
 8005c10:	d5d8      	bpl.n	8005bc4 <_printf_float+0x250>
 8005c12:	ee18 3a10 	vmov	r3, s16
 8005c16:	4652      	mov	r2, sl
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f43f af09 	beq.w	8005a36 <_printf_float+0xc2>
 8005c24:	f04f 0900 	mov.w	r9, #0
 8005c28:	f104 0a1a 	add.w	sl, r4, #26
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	425b      	negs	r3, r3
 8005c30:	454b      	cmp	r3, r9
 8005c32:	dc01      	bgt.n	8005c38 <_printf_float+0x2c4>
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	e792      	b.n	8005b5e <_printf_float+0x1ea>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f aef7 	beq.w	8005a36 <_printf_float+0xc2>
 8005c48:	f109 0901 	add.w	r9, r9, #1
 8005c4c:	e7ee      	b.n	8005c2c <_printf_float+0x2b8>
 8005c4e:	bf00      	nop
 8005c50:	7fefffff 	.word	0x7fefffff
 8005c54:	08008804 	.word	0x08008804
 8005c58:	08008808 	.word	0x08008808
 8005c5c:	08008810 	.word	0x08008810
 8005c60:	0800880c 	.word	0x0800880c
 8005c64:	08008814 	.word	0x08008814
 8005c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bfa8      	it	ge
 8005c70:	461a      	movge	r2, r3
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	4691      	mov	r9, r2
 8005c76:	dc37      	bgt.n	8005ce8 <_printf_float+0x374>
 8005c78:	f04f 0b00 	mov.w	fp, #0
 8005c7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c80:	f104 021a 	add.w	r2, r4, #26
 8005c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c86:	9305      	str	r3, [sp, #20]
 8005c88:	eba3 0309 	sub.w	r3, r3, r9
 8005c8c:	455b      	cmp	r3, fp
 8005c8e:	dc33      	bgt.n	8005cf8 <_printf_float+0x384>
 8005c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c94:	429a      	cmp	r2, r3
 8005c96:	db3b      	blt.n	8005d10 <_printf_float+0x39c>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d438      	bmi.n	8005d10 <_printf_float+0x39c>
 8005c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca0:	9b05      	ldr	r3, [sp, #20]
 8005ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	eba2 0901 	sub.w	r9, r2, r1
 8005caa:	4599      	cmp	r9, r3
 8005cac:	bfa8      	it	ge
 8005cae:	4699      	movge	r9, r3
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	dc35      	bgt.n	8005d22 <_printf_float+0x3ae>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cbe:	f104 0a1a 	add.w	sl, r4, #26
 8005cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	eba3 0309 	sub.w	r3, r3, r9
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	f77f af79 	ble.w	8005bc4 <_printf_float+0x250>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f aeaa 	beq.w	8005a36 <_printf_float+0xc2>
 8005ce2:	f108 0801 	add.w	r8, r8, #1
 8005ce6:	e7ec      	b.n	8005cc2 <_printf_float+0x34e>
 8005ce8:	4613      	mov	r3, r2
 8005cea:	4631      	mov	r1, r6
 8005cec:	4642      	mov	r2, r8
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d1c0      	bne.n	8005c78 <_printf_float+0x304>
 8005cf6:	e69e      	b.n	8005a36 <_printf_float+0xc2>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	9205      	str	r2, [sp, #20]
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f ae97 	beq.w	8005a36 <_printf_float+0xc2>
 8005d08:	9a05      	ldr	r2, [sp, #20]
 8005d0a:	f10b 0b01 	add.w	fp, fp, #1
 8005d0e:	e7b9      	b.n	8005c84 <_printf_float+0x310>
 8005d10:	ee18 3a10 	vmov	r3, s16
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d1be      	bne.n	8005c9e <_printf_float+0x32a>
 8005d20:	e689      	b.n	8005a36 <_printf_float+0xc2>
 8005d22:	9a05      	ldr	r2, [sp, #20]
 8005d24:	464b      	mov	r3, r9
 8005d26:	4442      	add	r2, r8
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1c1      	bne.n	8005cb6 <_printf_float+0x342>
 8005d32:	e680      	b.n	8005a36 <_printf_float+0xc2>
 8005d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d36:	2a01      	cmp	r2, #1
 8005d38:	dc01      	bgt.n	8005d3e <_printf_float+0x3ca>
 8005d3a:	07db      	lsls	r3, r3, #31
 8005d3c:	d538      	bpl.n	8005db0 <_printf_float+0x43c>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4642      	mov	r2, r8
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae74 	beq.w	8005a36 <_printf_float+0xc2>
 8005d4e:	ee18 3a10 	vmov	r3, s16
 8005d52:	4652      	mov	r2, sl
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f ae6b 	beq.w	8005a36 <_printf_float+0xc2>
 8005d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	f7fa feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d6c:	b9d8      	cbnz	r0, 8005da6 <_printf_float+0x432>
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	f108 0201 	add.w	r2, r8, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d10e      	bne.n	8005d9e <_printf_float+0x42a>
 8005d80:	e659      	b.n	8005a36 <_printf_float+0xc2>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4652      	mov	r2, sl
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae52 	beq.w	8005a36 <_printf_float+0xc2>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4543      	cmp	r3, r8
 8005d9c:	dcf1      	bgt.n	8005d82 <_printf_float+0x40e>
 8005d9e:	464b      	mov	r3, r9
 8005da0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005da4:	e6dc      	b.n	8005b60 <_printf_float+0x1ec>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 0a1a 	add.w	sl, r4, #26
 8005dae:	e7f2      	b.n	8005d96 <_printf_float+0x422>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4642      	mov	r2, r8
 8005db4:	e7df      	b.n	8005d76 <_printf_float+0x402>
 8005db6:	2301      	movs	r3, #1
 8005db8:	464a      	mov	r2, r9
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae38 	beq.w	8005a36 <_printf_float+0xc2>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dce:	1a5b      	subs	r3, r3, r1
 8005dd0:	4543      	cmp	r3, r8
 8005dd2:	dcf0      	bgt.n	8005db6 <_printf_float+0x442>
 8005dd4:	e6fa      	b.n	8005bcc <_printf_float+0x258>
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	f104 0919 	add.w	r9, r4, #25
 8005dde:	e7f4      	b.n	8005dca <_printf_float+0x456>

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfb8      	it	lt
 8005df4:	4613      	movlt	r3, r2
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc26      	bgt.n	8005e76 <_printf_common+0x96>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42b      	bmi.n	8005e90 <_printf_common+0xb0>
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d01e      	beq.n	8005e84 <_printf_common+0xa4>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	6832      	ldr	r2, [r6, #0]
 8005e4c:	f003 0306 	and.w	r3, r3, #6
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf08      	it	eq
 8005e54:	1aad      	subeq	r5, r5, r2
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	2500      	movne	r5, #0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfc4      	itt	gt
 8005e66:	1a9b      	subgt	r3, r3, r2
 8005e68:	18ed      	addgt	r5, r5, r3
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xa8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xac>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c6      	b.n	8005e1e <_printf_common+0x3e>
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	4422      	add	r2, r4
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7c7      	b.n	8005e38 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa4>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x8e>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	4691      	mov	r9, r2
 8005ec4:	7e27      	ldrb	r7, [r4, #24]
 8005ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ec8:	2f78      	cmp	r7, #120	; 0x78
 8005eca:	4680      	mov	r8, r0
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d8 	beq.w	800608e <_printf_i+0x1d2>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a3 	beq.w	800602a <_printf_i+0x16e>
 8005ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a001      	add	r0, pc, #4	; (adr r0, 8005efc <_printf_i+0x40>)
 8005ef8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006057 	.word	0x08006057
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006097 	.word	0x08006097
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	0800605f 	.word	0x0800605f
 8005f54:	680b      	ldr	r3, [r1, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	600a      	str	r2, [r1, #0]
 8005f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a3      	b.n	80060b0 <_printf_i+0x1f4>
 8005f68:	6825      	ldr	r5, [r4, #0]
 8005f6a:	6808      	ldr	r0, [r1, #0]
 8005f6c:	062e      	lsls	r6, r5, #24
 8005f6e:	f100 0304 	add.w	r3, r0, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	6805      	ldr	r5, [r0, #0]
 8005f76:	600b      	str	r3, [r1, #0]
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	426d      	negs	r5, r5
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f8e:	6805      	ldr	r5, [r0, #0]
 8005f90:	600b      	str	r3, [r1, #0]
 8005f92:	bf18      	it	ne
 8005f94:	b22d      	sxthne	r5, r5
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	680b      	ldr	r3, [r1, #0]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	1d18      	adds	r0, r3, #4
 8005f9e:	6008      	str	r0, [r1, #0]
 8005fa0:	0628      	lsls	r0, r5, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0669      	lsls	r1, r5, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881d      	ldrh	r5, [r3, #0]
 8005fae:	4854      	ldr	r0, [pc, #336]	; (8006100 <_printf_i+0x244>)
 8005fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2308      	moveq	r3, #8
 8005fb6:	230a      	movne	r3, #10
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6866      	ldr	r6, [r4, #4]
 8005fc0:	60a6      	str	r6, [r4, #8]
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	bfa2      	ittt	ge
 8005fc6:	6821      	ldrge	r1, [r4, #0]
 8005fc8:	f021 0104 	bicge.w	r1, r1, #4
 8005fcc:	6021      	strge	r1, [r4, #0]
 8005fce:	b90d      	cbnz	r5, 8005fd4 <_printf_i+0x118>
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	d04d      	beq.n	8006070 <_printf_i+0x1b4>
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fda:	fb03 5711 	mls	r7, r3, r1, r5
 8005fde:	5dc7      	ldrb	r7, [r0, r7]
 8005fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fe4:	462f      	mov	r7, r5
 8005fe6:	42bb      	cmp	r3, r7
 8005fe8:	460d      	mov	r5, r1
 8005fea:	d9f4      	bls.n	8005fd6 <_printf_i+0x11a>
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10b      	bne.n	8006008 <_printf_i+0x14c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07df      	lsls	r7, r3, #31
 8005ff4:	d508      	bpl.n	8006008 <_printf_i+0x14c>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	bfde      	ittt	le
 8005ffe:	2330      	movle	r3, #48	; 0x30
 8006000:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006004:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006008:	1b92      	subs	r2, r2, r6
 800600a:	6122      	str	r2, [r4, #16]
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	464b      	mov	r3, r9
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fee2 	bl	8005de0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14c      	bne.n	80060ba <_printf_i+0x1fe>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	b004      	add	sp, #16
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4835      	ldr	r0, [pc, #212]	; (8006100 <_printf_i+0x244>)
 800602c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	680e      	ldr	r6, [r1, #0]
 8006034:	061f      	lsls	r7, r3, #24
 8006036:	f856 5b04 	ldr.w	r5, [r6], #4
 800603a:	600e      	str	r6, [r1, #0]
 800603c:	d514      	bpl.n	8006068 <_printf_i+0x1ac>
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	bf44      	itt	mi
 8006042:	f043 0320 	orrmi.w	r3, r3, #32
 8006046:	6023      	strmi	r3, [r4, #0]
 8006048:	b91d      	cbnz	r5, 8006052 <_printf_i+0x196>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	2310      	movs	r3, #16
 8006054:	e7b0      	b.n	8005fb8 <_printf_i+0xfc>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	2378      	movs	r3, #120	; 0x78
 8006060:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006066:	e7e3      	b.n	8006030 <_printf_i+0x174>
 8006068:	065e      	lsls	r6, r3, #25
 800606a:	bf48      	it	mi
 800606c:	b2ad      	uxthmi	r5, r5
 800606e:	e7e6      	b.n	800603e <_printf_i+0x182>
 8006070:	4616      	mov	r6, r2
 8006072:	e7bb      	b.n	8005fec <_printf_i+0x130>
 8006074:	680b      	ldr	r3, [r1, #0]
 8006076:	6826      	ldr	r6, [r4, #0]
 8006078:	6960      	ldr	r0, [r4, #20]
 800607a:	1d1d      	adds	r5, r3, #4
 800607c:	600d      	str	r5, [r1, #0]
 800607e:	0635      	lsls	r5, r6, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1cc>
 8006084:	6018      	str	r0, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1d2>
 8006088:	0671      	lsls	r1, r6, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1c8>
 800608c:	8018      	strh	r0, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4616      	mov	r6, r2
 8006094:	e7ba      	b.n	800600c <_printf_i+0x150>
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	600a      	str	r2, [r1, #0]
 800609c:	681e      	ldr	r6, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7fa f8a4 	bl	80001f0 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1f2>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e7a8      	b.n	800600c <_printf_i+0x150>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	4632      	mov	r2, r6
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ab      	beq.n	8006020 <_printf_i+0x164>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x23a>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a4      	b.n	8006024 <_printf_i+0x168>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09b      	beq.n	8006020 <_printf_i+0x164>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x21e>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x212>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x22e>
 80060fe:	bf00      	nop
 8006100:	08008816 	.word	0x08008816
 8006104:	08008827 	.word	0x08008827

08006108 <iprintf>:
 8006108:	b40f      	push	{r0, r1, r2, r3}
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <iprintf+0x2c>)
 800610c:	b513      	push	{r0, r1, r4, lr}
 800610e:	681c      	ldr	r4, [r3, #0]
 8006110:	b124      	cbz	r4, 800611c <iprintf+0x14>
 8006112:	69a3      	ldr	r3, [r4, #24]
 8006114:	b913      	cbnz	r3, 800611c <iprintf+0x14>
 8006116:	4620      	mov	r0, r4
 8006118:	f000 fefe 	bl	8006f18 <__sinit>
 800611c:	ab05      	add	r3, sp, #20
 800611e:	9a04      	ldr	r2, [sp, #16]
 8006120:	68a1      	ldr	r1, [r4, #8]
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	4620      	mov	r0, r4
 8006126:	f001 fd71 	bl	8007c0c <_vfiprintf_r>
 800612a:	b002      	add	sp, #8
 800612c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr
 8006134:	2000000c 	.word	0x2000000c

08006138 <siprintf>:
 8006138:	b40e      	push	{r1, r2, r3}
 800613a:	b500      	push	{lr}
 800613c:	b09c      	sub	sp, #112	; 0x70
 800613e:	ab1d      	add	r3, sp, #116	; 0x74
 8006140:	9002      	str	r0, [sp, #8]
 8006142:	9006      	str	r0, [sp, #24]
 8006144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006148:	4809      	ldr	r0, [pc, #36]	; (8006170 <siprintf+0x38>)
 800614a:	9107      	str	r1, [sp, #28]
 800614c:	9104      	str	r1, [sp, #16]
 800614e:	4909      	ldr	r1, [pc, #36]	; (8006174 <siprintf+0x3c>)
 8006150:	f853 2b04 	ldr.w	r2, [r3], #4
 8006154:	9105      	str	r1, [sp, #20]
 8006156:	6800      	ldr	r0, [r0, #0]
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	a902      	add	r1, sp, #8
 800615c:	f001 fc2c 	bl	80079b8 <_svfiprintf_r>
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	b01c      	add	sp, #112	; 0x70
 8006168:	f85d eb04 	ldr.w	lr, [sp], #4
 800616c:	b003      	add	sp, #12
 800616e:	4770      	bx	lr
 8006170:	2000000c 	.word	0x2000000c
 8006174:	ffff0208 	.word	0xffff0208

08006178 <quorem>:
 8006178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	6903      	ldr	r3, [r0, #16]
 800617e:	690c      	ldr	r4, [r1, #16]
 8006180:	42a3      	cmp	r3, r4
 8006182:	4607      	mov	r7, r0
 8006184:	f2c0 8081 	blt.w	800628a <quorem+0x112>
 8006188:	3c01      	subs	r4, #1
 800618a:	f101 0814 	add.w	r8, r1, #20
 800618e:	f100 0514 	add.w	r5, r0, #20
 8006192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800619c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a0:	3301      	adds	r3, #1
 80061a2:	429a      	cmp	r2, r3
 80061a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80061b0:	d331      	bcc.n	8006216 <quorem+0x9e>
 80061b2:	f04f 0e00 	mov.w	lr, #0
 80061b6:	4640      	mov	r0, r8
 80061b8:	46ac      	mov	ip, r5
 80061ba:	46f2      	mov	sl, lr
 80061bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80061c0:	b293      	uxth	r3, r2
 80061c2:	fb06 e303 	mla	r3, r6, r3, lr
 80061c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ebaa 0303 	sub.w	r3, sl, r3
 80061d0:	0c12      	lsrs	r2, r2, #16
 80061d2:	f8dc a000 	ldr.w	sl, [ip]
 80061d6:	fb06 e202 	mla	r2, r6, r2, lr
 80061da:	fa13 f38a 	uxtah	r3, r3, sl
 80061de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061e2:	fa1f fa82 	uxth.w	sl, r2
 80061e6:	f8dc 2000 	ldr.w	r2, [ip]
 80061ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061f8:	4581      	cmp	r9, r0
 80061fa:	f84c 3b04 	str.w	r3, [ip], #4
 80061fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006202:	d2db      	bcs.n	80061bc <quorem+0x44>
 8006204:	f855 300b 	ldr.w	r3, [r5, fp]
 8006208:	b92b      	cbnz	r3, 8006216 <quorem+0x9e>
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	3b04      	subs	r3, #4
 800620e:	429d      	cmp	r5, r3
 8006210:	461a      	mov	r2, r3
 8006212:	d32e      	bcc.n	8006272 <quorem+0xfa>
 8006214:	613c      	str	r4, [r7, #16]
 8006216:	4638      	mov	r0, r7
 8006218:	f001 f9b8 	bl	800758c <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	db24      	blt.n	800626a <quorem+0xf2>
 8006220:	3601      	adds	r6, #1
 8006222:	4628      	mov	r0, r5
 8006224:	f04f 0c00 	mov.w	ip, #0
 8006228:	f858 2b04 	ldr.w	r2, [r8], #4
 800622c:	f8d0 e000 	ldr.w	lr, [r0]
 8006230:	b293      	uxth	r3, r2
 8006232:	ebac 0303 	sub.w	r3, ip, r3
 8006236:	0c12      	lsrs	r2, r2, #16
 8006238:	fa13 f38e 	uxtah	r3, r3, lr
 800623c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800624a:	45c1      	cmp	r9, r8
 800624c:	f840 3b04 	str.w	r3, [r0], #4
 8006250:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006254:	d2e8      	bcs.n	8006228 <quorem+0xb0>
 8006256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800625a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800625e:	b922      	cbnz	r2, 800626a <quorem+0xf2>
 8006260:	3b04      	subs	r3, #4
 8006262:	429d      	cmp	r5, r3
 8006264:	461a      	mov	r2, r3
 8006266:	d30a      	bcc.n	800627e <quorem+0x106>
 8006268:	613c      	str	r4, [r7, #16]
 800626a:	4630      	mov	r0, r6
 800626c:	b003      	add	sp, #12
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	3b04      	subs	r3, #4
 8006276:	2a00      	cmp	r2, #0
 8006278:	d1cc      	bne.n	8006214 <quorem+0x9c>
 800627a:	3c01      	subs	r4, #1
 800627c:	e7c7      	b.n	800620e <quorem+0x96>
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	3b04      	subs	r3, #4
 8006282:	2a00      	cmp	r2, #0
 8006284:	d1f0      	bne.n	8006268 <quorem+0xf0>
 8006286:	3c01      	subs	r4, #1
 8006288:	e7eb      	b.n	8006262 <quorem+0xea>
 800628a:	2000      	movs	r0, #0
 800628c:	e7ee      	b.n	800626c <quorem+0xf4>
	...

08006290 <_dtoa_r>:
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	ed2d 8b02 	vpush	{d8}
 8006298:	ec57 6b10 	vmov	r6, r7, d0
 800629c:	b095      	sub	sp, #84	; 0x54
 800629e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062a4:	9105      	str	r1, [sp, #20]
 80062a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062aa:	4604      	mov	r4, r0
 80062ac:	9209      	str	r2, [sp, #36]	; 0x24
 80062ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b0:	b975      	cbnz	r5, 80062d0 <_dtoa_r+0x40>
 80062b2:	2010      	movs	r0, #16
 80062b4:	f000 fed6 	bl	8007064 <malloc>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6260      	str	r0, [r4, #36]	; 0x24
 80062bc:	b920      	cbnz	r0, 80062c8 <_dtoa_r+0x38>
 80062be:	4bb2      	ldr	r3, [pc, #712]	; (8006588 <_dtoa_r+0x2f8>)
 80062c0:	21ea      	movs	r1, #234	; 0xea
 80062c2:	48b2      	ldr	r0, [pc, #712]	; (800658c <_dtoa_r+0x2fc>)
 80062c4:	f001 fef8 	bl	80080b8 <__assert_func>
 80062c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062cc:	6005      	str	r5, [r0, #0]
 80062ce:	60c5      	str	r5, [r0, #12]
 80062d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	b151      	cbz	r1, 80062ec <_dtoa_r+0x5c>
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	604a      	str	r2, [r1, #4]
 80062da:	2301      	movs	r3, #1
 80062dc:	4093      	lsls	r3, r2
 80062de:	608b      	str	r3, [r1, #8]
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 ff15 	bl	8007110 <_Bfree>
 80062e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	1e3b      	subs	r3, r7, #0
 80062ee:	bfb9      	ittee	lt
 80062f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	9303      	strlt	r3, [sp, #12]
 80062f6:	2300      	movge	r3, #0
 80062f8:	f8c8 3000 	strge.w	r3, [r8]
 80062fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006300:	4ba3      	ldr	r3, [pc, #652]	; (8006590 <_dtoa_r+0x300>)
 8006302:	bfbc      	itt	lt
 8006304:	2201      	movlt	r2, #1
 8006306:	f8c8 2000 	strlt.w	r2, [r8]
 800630a:	ea33 0309 	bics.w	r3, r3, r9
 800630e:	d11b      	bne.n	8006348 <_dtoa_r+0xb8>
 8006310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006312:	f242 730f 	movw	r3, #9999	; 0x270f
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800631c:	4333      	orrs	r3, r6
 800631e:	f000 857a 	beq.w	8006e16 <_dtoa_r+0xb86>
 8006322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006324:	b963      	cbnz	r3, 8006340 <_dtoa_r+0xb0>
 8006326:	4b9b      	ldr	r3, [pc, #620]	; (8006594 <_dtoa_r+0x304>)
 8006328:	e024      	b.n	8006374 <_dtoa_r+0xe4>
 800632a:	4b9b      	ldr	r3, [pc, #620]	; (8006598 <_dtoa_r+0x308>)
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	9800      	ldr	r0, [sp, #0]
 8006336:	b015      	add	sp, #84	; 0x54
 8006338:	ecbd 8b02 	vpop	{d8}
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	4b94      	ldr	r3, [pc, #592]	; (8006594 <_dtoa_r+0x304>)
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	3303      	adds	r3, #3
 8006346:	e7f3      	b.n	8006330 <_dtoa_r+0xa0>
 8006348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800634c:	2200      	movs	r2, #0
 800634e:	ec51 0b17 	vmov	r0, r1, d7
 8006352:	2300      	movs	r3, #0
 8006354:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006358:	f7fa fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800635c:	4680      	mov	r8, r0
 800635e:	b158      	cbz	r0, 8006378 <_dtoa_r+0xe8>
 8006360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006362:	2301      	movs	r3, #1
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8551 	beq.w	8006e10 <_dtoa_r+0xb80>
 800636e:	488b      	ldr	r0, [pc, #556]	; (800659c <_dtoa_r+0x30c>)
 8006370:	6018      	str	r0, [r3, #0]
 8006372:	1e43      	subs	r3, r0, #1
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	e7dd      	b.n	8006334 <_dtoa_r+0xa4>
 8006378:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800637c:	aa12      	add	r2, sp, #72	; 0x48
 800637e:	a913      	add	r1, sp, #76	; 0x4c
 8006380:	4620      	mov	r0, r4
 8006382:	f001 f9a7 	bl	80076d4 <__d2b>
 8006386:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800638a:	4683      	mov	fp, r0
 800638c:	2d00      	cmp	r5, #0
 800638e:	d07c      	beq.n	800648a <_dtoa_r+0x1fa>
 8006390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006392:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800639a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800639e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063aa:	4b7d      	ldr	r3, [pc, #500]	; (80065a0 <_dtoa_r+0x310>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7f9 ff71 	bl	8000298 <__aeabi_dsub>
 80063b6:	a36e      	add	r3, pc, #440	; (adr r3, 8006570 <_dtoa_r+0x2e0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7fa f924 	bl	8000608 <__aeabi_dmul>
 80063c0:	a36d      	add	r3, pc, #436	; (adr r3, 8006578 <_dtoa_r+0x2e8>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 ff69 	bl	800029c <__adddf3>
 80063ca:	4606      	mov	r6, r0
 80063cc:	4628      	mov	r0, r5
 80063ce:	460f      	mov	r7, r1
 80063d0:	f7fa f8b0 	bl	8000534 <__aeabi_i2d>
 80063d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006580 <_dtoa_r+0x2f0>)
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f7fa f915 	bl	8000608 <__aeabi_dmul>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7f9 ff59 	bl	800029c <__adddf3>
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	f7fa fbbb 	bl	8000b68 <__aeabi_d2iz>
 80063f2:	2200      	movs	r2, #0
 80063f4:	4682      	mov	sl, r0
 80063f6:	2300      	movs	r3, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa fb76 	bl	8000aec <__aeabi_dcmplt>
 8006400:	b148      	cbz	r0, 8006416 <_dtoa_r+0x186>
 8006402:	4650      	mov	r0, sl
 8006404:	f7fa f896 	bl	8000534 <__aeabi_i2d>
 8006408:	4632      	mov	r2, r6
 800640a:	463b      	mov	r3, r7
 800640c:	f7fa fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8006410:	b908      	cbnz	r0, 8006416 <_dtoa_r+0x186>
 8006412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006416:	f1ba 0f16 	cmp.w	sl, #22
 800641a:	d854      	bhi.n	80064c6 <_dtoa_r+0x236>
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <_dtoa_r+0x314>)
 800641e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800642a:	f7fa fb5f 	bl	8000aec <__aeabi_dcmplt>
 800642e:	2800      	cmp	r0, #0
 8006430:	d04b      	beq.n	80064ca <_dtoa_r+0x23a>
 8006432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006436:	2300      	movs	r3, #0
 8006438:	930e      	str	r3, [sp, #56]	; 0x38
 800643a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800643c:	1b5d      	subs	r5, r3, r5
 800643e:	1e6b      	subs	r3, r5, #1
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	bf43      	ittte	mi
 8006444:	2300      	movmi	r3, #0
 8006446:	f1c5 0801 	rsbmi	r8, r5, #1
 800644a:	9304      	strmi	r3, [sp, #16]
 800644c:	f04f 0800 	movpl.w	r8, #0
 8006450:	f1ba 0f00 	cmp.w	sl, #0
 8006454:	db3b      	blt.n	80064ce <_dtoa_r+0x23e>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800645c:	4453      	add	r3, sl
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	2300      	movs	r3, #0
 8006462:	9306      	str	r3, [sp, #24]
 8006464:	9b05      	ldr	r3, [sp, #20]
 8006466:	2b09      	cmp	r3, #9
 8006468:	d869      	bhi.n	800653e <_dtoa_r+0x2ae>
 800646a:	2b05      	cmp	r3, #5
 800646c:	bfc4      	itt	gt
 800646e:	3b04      	subgt	r3, #4
 8006470:	9305      	strgt	r3, [sp, #20]
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	f1a3 0302 	sub.w	r3, r3, #2
 8006478:	bfcc      	ite	gt
 800647a:	2500      	movgt	r5, #0
 800647c:	2501      	movle	r5, #1
 800647e:	2b03      	cmp	r3, #3
 8006480:	d869      	bhi.n	8006556 <_dtoa_r+0x2c6>
 8006482:	e8df f003 	tbb	[pc, r3]
 8006486:	4e2c      	.short	0x4e2c
 8006488:	5a4c      	.short	0x5a4c
 800648a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800648e:	441d      	add	r5, r3
 8006490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006494:	2b20      	cmp	r3, #32
 8006496:	bfc1      	itttt	gt
 8006498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800649c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80064a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064a8:	bfda      	itte	le
 80064aa:	f1c3 0320 	rsble	r3, r3, #32
 80064ae:	fa06 f003 	lslle.w	r0, r6, r3
 80064b2:	4318      	orrgt	r0, r3
 80064b4:	f7fa f82e 	bl	8000514 <__aeabi_ui2d>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4606      	mov	r6, r0
 80064bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064c0:	3d01      	subs	r5, #1
 80064c2:	9310      	str	r3, [sp, #64]	; 0x40
 80064c4:	e771      	b.n	80063aa <_dtoa_r+0x11a>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e7b6      	b.n	8006438 <_dtoa_r+0x1a8>
 80064ca:	900e      	str	r0, [sp, #56]	; 0x38
 80064cc:	e7b5      	b.n	800643a <_dtoa_r+0x1aa>
 80064ce:	f1ca 0300 	rsb	r3, sl, #0
 80064d2:	9306      	str	r3, [sp, #24]
 80064d4:	2300      	movs	r3, #0
 80064d6:	eba8 080a 	sub.w	r8, r8, sl
 80064da:	930d      	str	r3, [sp, #52]	; 0x34
 80064dc:	e7c2      	b.n	8006464 <_dtoa_r+0x1d4>
 80064de:	2300      	movs	r3, #0
 80064e0:	9308      	str	r3, [sp, #32]
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dc39      	bgt.n	800655c <_dtoa_r+0x2cc>
 80064e8:	f04f 0901 	mov.w	r9, #1
 80064ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80064f0:	464b      	mov	r3, r9
 80064f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80064f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064f8:	2200      	movs	r2, #0
 80064fa:	6042      	str	r2, [r0, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	f102 0614 	add.w	r6, r2, #20
 8006502:	429e      	cmp	r6, r3
 8006504:	6841      	ldr	r1, [r0, #4]
 8006506:	d92f      	bls.n	8006568 <_dtoa_r+0x2d8>
 8006508:	4620      	mov	r0, r4
 800650a:	f000 fdc1 	bl	8007090 <_Balloc>
 800650e:	9000      	str	r0, [sp, #0]
 8006510:	2800      	cmp	r0, #0
 8006512:	d14b      	bne.n	80065ac <_dtoa_r+0x31c>
 8006514:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <_dtoa_r+0x318>)
 8006516:	4602      	mov	r2, r0
 8006518:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800651c:	e6d1      	b.n	80062c2 <_dtoa_r+0x32>
 800651e:	2301      	movs	r3, #1
 8006520:	e7de      	b.n	80064e0 <_dtoa_r+0x250>
 8006522:	2300      	movs	r3, #0
 8006524:	9308      	str	r3, [sp, #32]
 8006526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006528:	eb0a 0903 	add.w	r9, sl, r3
 800652c:	f109 0301 	add.w	r3, r9, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	bfb8      	it	lt
 8006536:	2301      	movlt	r3, #1
 8006538:	e7dd      	b.n	80064f6 <_dtoa_r+0x266>
 800653a:	2301      	movs	r3, #1
 800653c:	e7f2      	b.n	8006524 <_dtoa_r+0x294>
 800653e:	2501      	movs	r5, #1
 8006540:	2300      	movs	r3, #0
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	9508      	str	r5, [sp, #32]
 8006546:	f04f 39ff 	mov.w	r9, #4294967295
 800654a:	2200      	movs	r2, #0
 800654c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006550:	2312      	movs	r3, #18
 8006552:	9209      	str	r2, [sp, #36]	; 0x24
 8006554:	e7cf      	b.n	80064f6 <_dtoa_r+0x266>
 8006556:	2301      	movs	r3, #1
 8006558:	9308      	str	r3, [sp, #32]
 800655a:	e7f4      	b.n	8006546 <_dtoa_r+0x2b6>
 800655c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006560:	f8cd 9004 	str.w	r9, [sp, #4]
 8006564:	464b      	mov	r3, r9
 8006566:	e7c6      	b.n	80064f6 <_dtoa_r+0x266>
 8006568:	3101      	adds	r1, #1
 800656a:	6041      	str	r1, [r0, #4]
 800656c:	0052      	lsls	r2, r2, #1
 800656e:	e7c6      	b.n	80064fe <_dtoa_r+0x26e>
 8006570:	636f4361 	.word	0x636f4361
 8006574:	3fd287a7 	.word	0x3fd287a7
 8006578:	8b60c8b3 	.word	0x8b60c8b3
 800657c:	3fc68a28 	.word	0x3fc68a28
 8006580:	509f79fb 	.word	0x509f79fb
 8006584:	3fd34413 	.word	0x3fd34413
 8006588:	08008845 	.word	0x08008845
 800658c:	0800885c 	.word	0x0800885c
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	08008841 	.word	0x08008841
 8006598:	08008838 	.word	0x08008838
 800659c:	08008815 	.word	0x08008815
 80065a0:	3ff80000 	.word	0x3ff80000
 80065a4:	080089b8 	.word	0x080089b8
 80065a8:	080088bb 	.word	0x080088bb
 80065ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ae:	9a00      	ldr	r2, [sp, #0]
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	2b0e      	cmp	r3, #14
 80065b6:	f200 80ad 	bhi.w	8006714 <_dtoa_r+0x484>
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	f000 80aa 	beq.w	8006714 <_dtoa_r+0x484>
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	dd36      	ble.n	8006634 <_dtoa_r+0x3a4>
 80065c6:	4ac3      	ldr	r2, [pc, #780]	; (80068d4 <_dtoa_r+0x644>)
 80065c8:	f00a 030f 	and.w	r3, sl, #15
 80065cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065d0:	ed93 7b00 	vldr	d7, [r3]
 80065d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80065d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80065dc:	eeb0 8a47 	vmov.f32	s16, s14
 80065e0:	eef0 8a67 	vmov.f32	s17, s15
 80065e4:	d016      	beq.n	8006614 <_dtoa_r+0x384>
 80065e6:	4bbc      	ldr	r3, [pc, #752]	; (80068d8 <_dtoa_r+0x648>)
 80065e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065f0:	f7fa f934 	bl	800085c <__aeabi_ddiv>
 80065f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f8:	f007 070f 	and.w	r7, r7, #15
 80065fc:	2503      	movs	r5, #3
 80065fe:	4eb6      	ldr	r6, [pc, #728]	; (80068d8 <_dtoa_r+0x648>)
 8006600:	b957      	cbnz	r7, 8006618 <_dtoa_r+0x388>
 8006602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006606:	ec53 2b18 	vmov	r2, r3, d8
 800660a:	f7fa f927 	bl	800085c <__aeabi_ddiv>
 800660e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006612:	e029      	b.n	8006668 <_dtoa_r+0x3d8>
 8006614:	2502      	movs	r5, #2
 8006616:	e7f2      	b.n	80065fe <_dtoa_r+0x36e>
 8006618:	07f9      	lsls	r1, r7, #31
 800661a:	d508      	bpl.n	800662e <_dtoa_r+0x39e>
 800661c:	ec51 0b18 	vmov	r0, r1, d8
 8006620:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006624:	f7f9 fff0 	bl	8000608 <__aeabi_dmul>
 8006628:	ec41 0b18 	vmov	d8, r0, r1
 800662c:	3501      	adds	r5, #1
 800662e:	107f      	asrs	r7, r7, #1
 8006630:	3608      	adds	r6, #8
 8006632:	e7e5      	b.n	8006600 <_dtoa_r+0x370>
 8006634:	f000 80a6 	beq.w	8006784 <_dtoa_r+0x4f4>
 8006638:	f1ca 0600 	rsb	r6, sl, #0
 800663c:	4ba5      	ldr	r3, [pc, #660]	; (80068d4 <_dtoa_r+0x644>)
 800663e:	4fa6      	ldr	r7, [pc, #664]	; (80068d8 <_dtoa_r+0x648>)
 8006640:	f006 020f 	and.w	r2, r6, #15
 8006644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006650:	f7f9 ffda 	bl	8000608 <__aeabi_dmul>
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	1136      	asrs	r6, r6, #4
 800665a:	2300      	movs	r3, #0
 800665c:	2502      	movs	r5, #2
 800665e:	2e00      	cmp	r6, #0
 8006660:	f040 8085 	bne.w	800676e <_dtoa_r+0x4de>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1d2      	bne.n	800660e <_dtoa_r+0x37e>
 8006668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 808c 	beq.w	8006788 <_dtoa_r+0x4f8>
 8006670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006674:	4b99      	ldr	r3, [pc, #612]	; (80068dc <_dtoa_r+0x64c>)
 8006676:	2200      	movs	r2, #0
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa fa36 	bl	8000aec <__aeabi_dcmplt>
 8006680:	2800      	cmp	r0, #0
 8006682:	f000 8081 	beq.w	8006788 <_dtoa_r+0x4f8>
 8006686:	9b01      	ldr	r3, [sp, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d07d      	beq.n	8006788 <_dtoa_r+0x4f8>
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	dd3c      	ble.n	800670c <_dtoa_r+0x47c>
 8006692:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	2200      	movs	r2, #0
 800669a:	4b91      	ldr	r3, [pc, #580]	; (80068e0 <_dtoa_r+0x650>)
 800669c:	4630      	mov	r0, r6
 800669e:	4639      	mov	r1, r7
 80066a0:	f7f9 ffb2 	bl	8000608 <__aeabi_dmul>
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	3501      	adds	r5, #1
 80066aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 ff3e 	bl	8000534 <__aeabi_i2d>
 80066b8:	4632      	mov	r2, r6
 80066ba:	463b      	mov	r3, r7
 80066bc:	f7f9 ffa4 	bl	8000608 <__aeabi_dmul>
 80066c0:	4b88      	ldr	r3, [pc, #544]	; (80068e4 <_dtoa_r+0x654>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7f9 fdea 	bl	800029c <__adddf3>
 80066c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15c      	bne.n	8006792 <_dtoa_r+0x502>
 80066d8:	4b83      	ldr	r3, [pc, #524]	; (80068e8 <_dtoa_r+0x658>)
 80066da:	2200      	movs	r2, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7f9 fdda 	bl	8000298 <__aeabi_dsub>
 80066e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066e8:	4606      	mov	r6, r0
 80066ea:	460f      	mov	r7, r1
 80066ec:	f7fa fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f040 8296 	bne.w	8006c22 <_dtoa_r+0x992>
 80066f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066fa:	4630      	mov	r0, r6
 80066fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006700:	4639      	mov	r1, r7
 8006702:	f7fa f9f3 	bl	8000aec <__aeabi_dcmplt>
 8006706:	2800      	cmp	r0, #0
 8006708:	f040 8288 	bne.w	8006c1c <_dtoa_r+0x98c>
 800670c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006716:	2b00      	cmp	r3, #0
 8006718:	f2c0 8158 	blt.w	80069cc <_dtoa_r+0x73c>
 800671c:	f1ba 0f0e 	cmp.w	sl, #14
 8006720:	f300 8154 	bgt.w	80069cc <_dtoa_r+0x73c>
 8006724:	4b6b      	ldr	r3, [pc, #428]	; (80068d4 <_dtoa_r+0x644>)
 8006726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800672a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	f280 80e3 	bge.w	80068fc <_dtoa_r+0x66c>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f300 80df 	bgt.w	80068fc <_dtoa_r+0x66c>
 800673e:	f040 826d 	bne.w	8006c1c <_dtoa_r+0x98c>
 8006742:	4b69      	ldr	r3, [pc, #420]	; (80068e8 <_dtoa_r+0x658>)
 8006744:	2200      	movs	r2, #0
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7f9 ff5d 	bl	8000608 <__aeabi_dmul>
 800674e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006752:	f7fa f9df 	bl	8000b14 <__aeabi_dcmpge>
 8006756:	9e01      	ldr	r6, [sp, #4]
 8006758:	4637      	mov	r7, r6
 800675a:	2800      	cmp	r0, #0
 800675c:	f040 8243 	bne.w	8006be6 <_dtoa_r+0x956>
 8006760:	9d00      	ldr	r5, [sp, #0]
 8006762:	2331      	movs	r3, #49	; 0x31
 8006764:	f805 3b01 	strb.w	r3, [r5], #1
 8006768:	f10a 0a01 	add.w	sl, sl, #1
 800676c:	e23f      	b.n	8006bee <_dtoa_r+0x95e>
 800676e:	07f2      	lsls	r2, r6, #31
 8006770:	d505      	bpl.n	800677e <_dtoa_r+0x4ee>
 8006772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006776:	f7f9 ff47 	bl	8000608 <__aeabi_dmul>
 800677a:	3501      	adds	r5, #1
 800677c:	2301      	movs	r3, #1
 800677e:	1076      	asrs	r6, r6, #1
 8006780:	3708      	adds	r7, #8
 8006782:	e76c      	b.n	800665e <_dtoa_r+0x3ce>
 8006784:	2502      	movs	r5, #2
 8006786:	e76f      	b.n	8006668 <_dtoa_r+0x3d8>
 8006788:	9b01      	ldr	r3, [sp, #4]
 800678a:	f8cd a01c 	str.w	sl, [sp, #28]
 800678e:	930c      	str	r3, [sp, #48]	; 0x30
 8006790:	e78d      	b.n	80066ae <_dtoa_r+0x41e>
 8006792:	9900      	ldr	r1, [sp, #0]
 8006794:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006798:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <_dtoa_r+0x644>)
 800679a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800679e:	4401      	add	r1, r0
 80067a0:	9102      	str	r1, [sp, #8]
 80067a2:	9908      	ldr	r1, [sp, #32]
 80067a4:	eeb0 8a47 	vmov.f32	s16, s14
 80067a8:	eef0 8a67 	vmov.f32	s17, s15
 80067ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d045      	beq.n	8006844 <_dtoa_r+0x5b4>
 80067b8:	494c      	ldr	r1, [pc, #304]	; (80068ec <_dtoa_r+0x65c>)
 80067ba:	2000      	movs	r0, #0
 80067bc:	f7fa f84e 	bl	800085c <__aeabi_ddiv>
 80067c0:	ec53 2b18 	vmov	r2, r3, d8
 80067c4:	f7f9 fd68 	bl	8000298 <__aeabi_dsub>
 80067c8:	9d00      	ldr	r5, [sp, #0]
 80067ca:	ec41 0b18 	vmov	d8, r0, r1
 80067ce:	4639      	mov	r1, r7
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7fa f9c9 	bl	8000b68 <__aeabi_d2iz>
 80067d6:	900c      	str	r0, [sp, #48]	; 0x30
 80067d8:	f7f9 feac 	bl	8000534 <__aeabi_i2d>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fd58 	bl	8000298 <__aeabi_dsub>
 80067e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ea:	3330      	adds	r3, #48	; 0x30
 80067ec:	f805 3b01 	strb.w	r3, [r5], #1
 80067f0:	ec53 2b18 	vmov	r2, r3, d8
 80067f4:	4606      	mov	r6, r0
 80067f6:	460f      	mov	r7, r1
 80067f8:	f7fa f978 	bl	8000aec <__aeabi_dcmplt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d165      	bne.n	80068cc <_dtoa_r+0x63c>
 8006800:	4632      	mov	r2, r6
 8006802:	463b      	mov	r3, r7
 8006804:	4935      	ldr	r1, [pc, #212]	; (80068dc <_dtoa_r+0x64c>)
 8006806:	2000      	movs	r0, #0
 8006808:	f7f9 fd46 	bl	8000298 <__aeabi_dsub>
 800680c:	ec53 2b18 	vmov	r2, r3, d8
 8006810:	f7fa f96c 	bl	8000aec <__aeabi_dcmplt>
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 80b9 	bne.w	800698c <_dtoa_r+0x6fc>
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	429d      	cmp	r5, r3
 800681e:	f43f af75 	beq.w	800670c <_dtoa_r+0x47c>
 8006822:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <_dtoa_r+0x650>)
 8006824:	ec51 0b18 	vmov	r0, r1, d8
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 feed 	bl	8000608 <__aeabi_dmul>
 800682e:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <_dtoa_r+0x650>)
 8006830:	ec41 0b18 	vmov	d8, r0, r1
 8006834:	2200      	movs	r2, #0
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7f9 fee5 	bl	8000608 <__aeabi_dmul>
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	e7c4      	b.n	80067ce <_dtoa_r+0x53e>
 8006844:	ec51 0b17 	vmov	r0, r1, d7
 8006848:	f7f9 fede 	bl	8000608 <__aeabi_dmul>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	9d00      	ldr	r5, [sp, #0]
 8006850:	930c      	str	r3, [sp, #48]	; 0x30
 8006852:	ec41 0b18 	vmov	d8, r0, r1
 8006856:	4639      	mov	r1, r7
 8006858:	4630      	mov	r0, r6
 800685a:	f7fa f985 	bl	8000b68 <__aeabi_d2iz>
 800685e:	9011      	str	r0, [sp, #68]	; 0x44
 8006860:	f7f9 fe68 	bl	8000534 <__aeabi_i2d>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fd14 	bl	8000298 <__aeabi_dsub>
 8006870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006872:	3330      	adds	r3, #48	; 0x30
 8006874:	f805 3b01 	strb.w	r3, [r5], #1
 8006878:	9b02      	ldr	r3, [sp, #8]
 800687a:	429d      	cmp	r5, r3
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	d134      	bne.n	80068f0 <_dtoa_r+0x660>
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <_dtoa_r+0x65c>)
 8006888:	ec51 0b18 	vmov	r0, r1, d8
 800688c:	f7f9 fd06 	bl	800029c <__adddf3>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f7fa f946 	bl	8000b28 <__aeabi_dcmpgt>
 800689c:	2800      	cmp	r0, #0
 800689e:	d175      	bne.n	800698c <_dtoa_r+0x6fc>
 80068a0:	ec53 2b18 	vmov	r2, r3, d8
 80068a4:	4911      	ldr	r1, [pc, #68]	; (80068ec <_dtoa_r+0x65c>)
 80068a6:	2000      	movs	r0, #0
 80068a8:	f7f9 fcf6 	bl	8000298 <__aeabi_dsub>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7fa f91a 	bl	8000aec <__aeabi_dcmplt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f43f af27 	beq.w	800670c <_dtoa_r+0x47c>
 80068be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068c0:	1e6b      	subs	r3, r5, #1
 80068c2:	930c      	str	r3, [sp, #48]	; 0x30
 80068c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068c8:	2b30      	cmp	r3, #48	; 0x30
 80068ca:	d0f8      	beq.n	80068be <_dtoa_r+0x62e>
 80068cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068d0:	e04a      	b.n	8006968 <_dtoa_r+0x6d8>
 80068d2:	bf00      	nop
 80068d4:	080089b8 	.word	0x080089b8
 80068d8:	08008990 	.word	0x08008990
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	40240000 	.word	0x40240000
 80068e4:	401c0000 	.word	0x401c0000
 80068e8:	40140000 	.word	0x40140000
 80068ec:	3fe00000 	.word	0x3fe00000
 80068f0:	4baf      	ldr	r3, [pc, #700]	; (8006bb0 <_dtoa_r+0x920>)
 80068f2:	f7f9 fe89 	bl	8000608 <__aeabi_dmul>
 80068f6:	4606      	mov	r6, r0
 80068f8:	460f      	mov	r7, r1
 80068fa:	e7ac      	b.n	8006856 <_dtoa_r+0x5c6>
 80068fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006900:	9d00      	ldr	r5, [sp, #0]
 8006902:	4642      	mov	r2, r8
 8006904:	464b      	mov	r3, r9
 8006906:	4630      	mov	r0, r6
 8006908:	4639      	mov	r1, r7
 800690a:	f7f9 ffa7 	bl	800085c <__aeabi_ddiv>
 800690e:	f7fa f92b 	bl	8000b68 <__aeabi_d2iz>
 8006912:	9002      	str	r0, [sp, #8]
 8006914:	f7f9 fe0e 	bl	8000534 <__aeabi_i2d>
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	f7f9 fe74 	bl	8000608 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fcb6 	bl	8000298 <__aeabi_dsub>
 800692c:	9e02      	ldr	r6, [sp, #8]
 800692e:	9f01      	ldr	r7, [sp, #4]
 8006930:	3630      	adds	r6, #48	; 0x30
 8006932:	f805 6b01 	strb.w	r6, [r5], #1
 8006936:	9e00      	ldr	r6, [sp, #0]
 8006938:	1bae      	subs	r6, r5, r6
 800693a:	42b7      	cmp	r7, r6
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	d137      	bne.n	80069b2 <_dtoa_r+0x722>
 8006942:	f7f9 fcab 	bl	800029c <__adddf3>
 8006946:	4642      	mov	r2, r8
 8006948:	464b      	mov	r3, r9
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	f7fa f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 8006952:	b9c8      	cbnz	r0, 8006988 <_dtoa_r+0x6f8>
 8006954:	4642      	mov	r2, r8
 8006956:	464b      	mov	r3, r9
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7fa f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006960:	b110      	cbz	r0, 8006968 <_dtoa_r+0x6d8>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	07d9      	lsls	r1, r3, #31
 8006966:	d40f      	bmi.n	8006988 <_dtoa_r+0x6f8>
 8006968:	4620      	mov	r0, r4
 800696a:	4659      	mov	r1, fp
 800696c:	f000 fbd0 	bl	8007110 <_Bfree>
 8006970:	2300      	movs	r3, #0
 8006972:	702b      	strb	r3, [r5, #0]
 8006974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006976:	f10a 0001 	add.w	r0, sl, #1
 800697a:	6018      	str	r0, [r3, #0]
 800697c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800697e:	2b00      	cmp	r3, #0
 8006980:	f43f acd8 	beq.w	8006334 <_dtoa_r+0xa4>
 8006984:	601d      	str	r5, [r3, #0]
 8006986:	e4d5      	b.n	8006334 <_dtoa_r+0xa4>
 8006988:	f8cd a01c 	str.w	sl, [sp, #28]
 800698c:	462b      	mov	r3, r5
 800698e:	461d      	mov	r5, r3
 8006990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006994:	2a39      	cmp	r2, #57	; 0x39
 8006996:	d108      	bne.n	80069aa <_dtoa_r+0x71a>
 8006998:	9a00      	ldr	r2, [sp, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d1f7      	bne.n	800698e <_dtoa_r+0x6fe>
 800699e:	9a07      	ldr	r2, [sp, #28]
 80069a0:	9900      	ldr	r1, [sp, #0]
 80069a2:	3201      	adds	r2, #1
 80069a4:	9207      	str	r2, [sp, #28]
 80069a6:	2230      	movs	r2, #48	; 0x30
 80069a8:	700a      	strb	r2, [r1, #0]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	3201      	adds	r2, #1
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	e78c      	b.n	80068cc <_dtoa_r+0x63c>
 80069b2:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <_dtoa_r+0x920>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	f7f9 fe27 	bl	8000608 <__aeabi_dmul>
 80069ba:	2200      	movs	r2, #0
 80069bc:	2300      	movs	r3, #0
 80069be:	4606      	mov	r6, r0
 80069c0:	460f      	mov	r7, r1
 80069c2:	f7fa f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d09b      	beq.n	8006902 <_dtoa_r+0x672>
 80069ca:	e7cd      	b.n	8006968 <_dtoa_r+0x6d8>
 80069cc:	9a08      	ldr	r2, [sp, #32]
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	f000 80c4 	beq.w	8006b5c <_dtoa_r+0x8cc>
 80069d4:	9a05      	ldr	r2, [sp, #20]
 80069d6:	2a01      	cmp	r2, #1
 80069d8:	f300 80a8 	bgt.w	8006b2c <_dtoa_r+0x89c>
 80069dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069de:	2a00      	cmp	r2, #0
 80069e0:	f000 80a0 	beq.w	8006b24 <_dtoa_r+0x894>
 80069e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069e8:	9e06      	ldr	r6, [sp, #24]
 80069ea:	4645      	mov	r5, r8
 80069ec:	9a04      	ldr	r2, [sp, #16]
 80069ee:	2101      	movs	r1, #1
 80069f0:	441a      	add	r2, r3
 80069f2:	4620      	mov	r0, r4
 80069f4:	4498      	add	r8, r3
 80069f6:	9204      	str	r2, [sp, #16]
 80069f8:	f000 fc46 	bl	8007288 <__i2b>
 80069fc:	4607      	mov	r7, r0
 80069fe:	2d00      	cmp	r5, #0
 8006a00:	dd0b      	ble.n	8006a1a <_dtoa_r+0x78a>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dd08      	ble.n	8006a1a <_dtoa_r+0x78a>
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	9a04      	ldr	r2, [sp, #16]
 8006a0c:	bfa8      	it	ge
 8006a0e:	462b      	movge	r3, r5
 8006a10:	eba8 0803 	sub.w	r8, r8, r3
 8006a14:	1aed      	subs	r5, r5, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	b1fb      	cbz	r3, 8006a5e <_dtoa_r+0x7ce>
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 809f 	beq.w	8006b64 <_dtoa_r+0x8d4>
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	dd11      	ble.n	8006a4e <_dtoa_r+0x7be>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fce6 	bl	8007400 <__pow5mult>
 8006a34:	465a      	mov	r2, fp
 8006a36:	4601      	mov	r1, r0
 8006a38:	4607      	mov	r7, r0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fc3a 	bl	80072b4 <__multiply>
 8006a40:	4659      	mov	r1, fp
 8006a42:	9007      	str	r0, [sp, #28]
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fb63 	bl	8007110 <_Bfree>
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	469b      	mov	fp, r3
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	1b9a      	subs	r2, r3, r6
 8006a52:	d004      	beq.n	8006a5e <_dtoa_r+0x7ce>
 8006a54:	4659      	mov	r1, fp
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 fcd2 	bl	8007400 <__pow5mult>
 8006a5c:	4683      	mov	fp, r0
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fc11 	bl	8007288 <__i2b>
 8006a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	dd7c      	ble.n	8006b68 <_dtoa_r+0x8d8>
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4601      	mov	r1, r0
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 fcc4 	bl	8007400 <__pow5mult>
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	dd76      	ble.n	8006b6e <_dtoa_r+0x8de>
 8006a80:	2300      	movs	r3, #0
 8006a82:	9306      	str	r3, [sp, #24]
 8006a84:	6933      	ldr	r3, [r6, #16]
 8006a86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a8a:	6918      	ldr	r0, [r3, #16]
 8006a8c:	f000 fbac 	bl	80071e8 <__hi0bits>
 8006a90:	f1c0 0020 	rsb	r0, r0, #32
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	4418      	add	r0, r3
 8006a98:	f010 001f 	ands.w	r0, r0, #31
 8006a9c:	f000 8086 	beq.w	8006bac <_dtoa_r+0x91c>
 8006aa0:	f1c0 0320 	rsb	r3, r0, #32
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	dd7f      	ble.n	8006ba8 <_dtoa_r+0x918>
 8006aa8:	f1c0 001c 	rsb	r0, r0, #28
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	4403      	add	r3, r0
 8006ab0:	4480      	add	r8, r0
 8006ab2:	4405      	add	r5, r0
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	f1b8 0f00 	cmp.w	r8, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x838>
 8006abc:	4659      	mov	r1, fp
 8006abe:	4642      	mov	r2, r8
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fcf7 	bl	80074b4 <__lshift>
 8006ac6:	4683      	mov	fp, r0
 8006ac8:	9b04      	ldr	r3, [sp, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dd05      	ble.n	8006ada <_dtoa_r+0x84a>
 8006ace:	4631      	mov	r1, r6
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fcee 	bl	80074b4 <__lshift>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d069      	beq.n	8006bb4 <_dtoa_r+0x924>
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	f000 fd52 	bl	800758c <__mcmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	da63      	bge.n	8006bb4 <_dtoa_r+0x924>
 8006aec:	2300      	movs	r3, #0
 8006aee:	4659      	mov	r1, fp
 8006af0:	220a      	movs	r2, #10
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fb2e 	bl	8007154 <__multadd>
 8006af8:	9b08      	ldr	r3, [sp, #32]
 8006afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006afe:	4683      	mov	fp, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 818f 	beq.w	8006e24 <_dtoa_r+0xb94>
 8006b06:	4639      	mov	r1, r7
 8006b08:	2300      	movs	r3, #0
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 fb21 	bl	8007154 <__multadd>
 8006b12:	f1b9 0f00 	cmp.w	r9, #0
 8006b16:	4607      	mov	r7, r0
 8006b18:	f300 808e 	bgt.w	8006c38 <_dtoa_r+0x9a8>
 8006b1c:	9b05      	ldr	r3, [sp, #20]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	dc50      	bgt.n	8006bc4 <_dtoa_r+0x934>
 8006b22:	e089      	b.n	8006c38 <_dtoa_r+0x9a8>
 8006b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b2a:	e75d      	b.n	80069e8 <_dtoa_r+0x758>
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	1e5e      	subs	r6, r3, #1
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	42b3      	cmp	r3, r6
 8006b34:	bfbf      	itttt	lt
 8006b36:	9b06      	ldrlt	r3, [sp, #24]
 8006b38:	9606      	strlt	r6, [sp, #24]
 8006b3a:	1af2      	sublt	r2, r6, r3
 8006b3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b3e:	bfb6      	itet	lt
 8006b40:	189b      	addlt	r3, r3, r2
 8006b42:	1b9e      	subge	r6, r3, r6
 8006b44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	bfb8      	it	lt
 8006b4a:	2600      	movlt	r6, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb5      	itete	lt
 8006b50:	eba8 0503 	sublt.w	r5, r8, r3
 8006b54:	9b01      	ldrge	r3, [sp, #4]
 8006b56:	2300      	movlt	r3, #0
 8006b58:	4645      	movge	r5, r8
 8006b5a:	e747      	b.n	80069ec <_dtoa_r+0x75c>
 8006b5c:	9e06      	ldr	r6, [sp, #24]
 8006b5e:	9f08      	ldr	r7, [sp, #32]
 8006b60:	4645      	mov	r5, r8
 8006b62:	e74c      	b.n	80069fe <_dtoa_r+0x76e>
 8006b64:	9a06      	ldr	r2, [sp, #24]
 8006b66:	e775      	b.n	8006a54 <_dtoa_r+0x7c4>
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	dc18      	bgt.n	8006ba0 <_dtoa_r+0x910>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	b9b3      	cbnz	r3, 8006ba0 <_dtoa_r+0x910>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b78:	b9a3      	cbnz	r3, 8006ba4 <_dtoa_r+0x914>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b80:	0d1b      	lsrs	r3, r3, #20
 8006b82:	051b      	lsls	r3, r3, #20
 8006b84:	b12b      	cbz	r3, 8006b92 <_dtoa_r+0x902>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	f108 0801 	add.w	r8, r8, #1
 8006b90:	2301      	movs	r3, #1
 8006b92:	9306      	str	r3, [sp, #24]
 8006b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f47f af74 	bne.w	8006a84 <_dtoa_r+0x7f4>
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	e779      	b.n	8006a94 <_dtoa_r+0x804>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e7f6      	b.n	8006b92 <_dtoa_r+0x902>
 8006ba4:	9b02      	ldr	r3, [sp, #8]
 8006ba6:	e7f4      	b.n	8006b92 <_dtoa_r+0x902>
 8006ba8:	d085      	beq.n	8006ab6 <_dtoa_r+0x826>
 8006baa:	4618      	mov	r0, r3
 8006bac:	301c      	adds	r0, #28
 8006bae:	e77d      	b.n	8006aac <_dtoa_r+0x81c>
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dc38      	bgt.n	8006c2c <_dtoa_r+0x99c>
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	dd35      	ble.n	8006c2c <_dtoa_r+0x99c>
 8006bc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bc4:	f1b9 0f00 	cmp.w	r9, #0
 8006bc8:	d10d      	bne.n	8006be6 <_dtoa_r+0x956>
 8006bca:	4631      	mov	r1, r6
 8006bcc:	464b      	mov	r3, r9
 8006bce:	2205      	movs	r2, #5
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fabf 	bl	8007154 <__multadd>
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	4606      	mov	r6, r0
 8006bda:	4658      	mov	r0, fp
 8006bdc:	f000 fcd6 	bl	800758c <__mcmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f73f adbd 	bgt.w	8006760 <_dtoa_r+0x4d0>
 8006be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be8:	9d00      	ldr	r5, [sp, #0]
 8006bea:	ea6f 0a03 	mvn.w	sl, r3
 8006bee:	f04f 0800 	mov.w	r8, #0
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 fa8b 	bl	8007110 <_Bfree>
 8006bfa:	2f00      	cmp	r7, #0
 8006bfc:	f43f aeb4 	beq.w	8006968 <_dtoa_r+0x6d8>
 8006c00:	f1b8 0f00 	cmp.w	r8, #0
 8006c04:	d005      	beq.n	8006c12 <_dtoa_r+0x982>
 8006c06:	45b8      	cmp	r8, r7
 8006c08:	d003      	beq.n	8006c12 <_dtoa_r+0x982>
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fa7f 	bl	8007110 <_Bfree>
 8006c12:	4639      	mov	r1, r7
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fa7b 	bl	8007110 <_Bfree>
 8006c1a:	e6a5      	b.n	8006968 <_dtoa_r+0x6d8>
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	4637      	mov	r7, r6
 8006c20:	e7e1      	b.n	8006be6 <_dtoa_r+0x956>
 8006c22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c28:	4637      	mov	r7, r6
 8006c2a:	e599      	b.n	8006760 <_dtoa_r+0x4d0>
 8006c2c:	9b08      	ldr	r3, [sp, #32]
 8006c2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80fd 	beq.w	8006e32 <_dtoa_r+0xba2>
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	dd05      	ble.n	8006c48 <_dtoa_r+0x9b8>
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fc37 	bl	80074b4 <__lshift>
 8006c46:	4607      	mov	r7, r0
 8006c48:	9b06      	ldr	r3, [sp, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05c      	beq.n	8006d08 <_dtoa_r+0xa78>
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fa1d 	bl	8007090 <_Balloc>
 8006c56:	4605      	mov	r5, r0
 8006c58:	b928      	cbnz	r0, 8006c66 <_dtoa_r+0x9d6>
 8006c5a:	4b80      	ldr	r3, [pc, #512]	; (8006e5c <_dtoa_r+0xbcc>)
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c62:	f7ff bb2e 	b.w	80062c2 <_dtoa_r+0x32>
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	3202      	adds	r2, #2
 8006c6a:	0092      	lsls	r2, r2, #2
 8006c6c:	f107 010c 	add.w	r1, r7, #12
 8006c70:	300c      	adds	r0, #12
 8006c72:	f000 f9ff 	bl	8007074 <memcpy>
 8006c76:	2201      	movs	r2, #1
 8006c78:	4629      	mov	r1, r5
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fc1a 	bl	80074b4 <__lshift>
 8006c80:	9b00      	ldr	r3, [sp, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	9b00      	ldr	r3, [sp, #0]
 8006c88:	444b      	add	r3, r9
 8006c8a:	9307      	str	r3, [sp, #28]
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	46b8      	mov	r8, r7
 8006c94:	9306      	str	r3, [sp, #24]
 8006c96:	4607      	mov	r7, r0
 8006c98:	9b01      	ldr	r3, [sp, #4]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	9302      	str	r3, [sp, #8]
 8006ca2:	f7ff fa69 	bl	8006178 <quorem>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	3330      	adds	r3, #48	; 0x30
 8006caa:	9004      	str	r0, [sp, #16]
 8006cac:	4641      	mov	r1, r8
 8006cae:	4658      	mov	r0, fp
 8006cb0:	9308      	str	r3, [sp, #32]
 8006cb2:	f000 fc6b 	bl	800758c <__mcmp>
 8006cb6:	463a      	mov	r2, r7
 8006cb8:	4681      	mov	r9, r0
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fc81 	bl	80075c4 <__mdiff>
 8006cc2:	68c2      	ldr	r2, [r0, #12]
 8006cc4:	9b08      	ldr	r3, [sp, #32]
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	bb02      	cbnz	r2, 8006d0c <_dtoa_r+0xa7c>
 8006cca:	4601      	mov	r1, r0
 8006ccc:	4658      	mov	r0, fp
 8006cce:	f000 fc5d 	bl	800758c <__mcmp>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4620      	mov	r0, r4
 8006cda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006cde:	f000 fa17 	bl	8007110 <_Bfree>
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce6:	9d01      	ldr	r5, [sp, #4]
 8006ce8:	ea43 0102 	orr.w	r1, r3, r2
 8006cec:	9b06      	ldr	r3, [sp, #24]
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	d10d      	bne.n	8006d10 <_dtoa_r+0xa80>
 8006cf4:	2b39      	cmp	r3, #57	; 0x39
 8006cf6:	d029      	beq.n	8006d4c <_dtoa_r+0xabc>
 8006cf8:	f1b9 0f00 	cmp.w	r9, #0
 8006cfc:	dd01      	ble.n	8006d02 <_dtoa_r+0xa72>
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	3331      	adds	r3, #49	; 0x31
 8006d02:	9a02      	ldr	r2, [sp, #8]
 8006d04:	7013      	strb	r3, [r2, #0]
 8006d06:	e774      	b.n	8006bf2 <_dtoa_r+0x962>
 8006d08:	4638      	mov	r0, r7
 8006d0a:	e7b9      	b.n	8006c80 <_dtoa_r+0x9f0>
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	e7e2      	b.n	8006cd6 <_dtoa_r+0xa46>
 8006d10:	f1b9 0f00 	cmp.w	r9, #0
 8006d14:	db06      	blt.n	8006d24 <_dtoa_r+0xa94>
 8006d16:	9905      	ldr	r1, [sp, #20]
 8006d18:	ea41 0909 	orr.w	r9, r1, r9
 8006d1c:	9906      	ldr	r1, [sp, #24]
 8006d1e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d22:	d120      	bne.n	8006d66 <_dtoa_r+0xad6>
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	ddec      	ble.n	8006d02 <_dtoa_r+0xa72>
 8006d28:	4659      	mov	r1, fp
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	f000 fbc0 	bl	80074b4 <__lshift>
 8006d34:	4631      	mov	r1, r6
 8006d36:	4683      	mov	fp, r0
 8006d38:	f000 fc28 	bl	800758c <__mcmp>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	dc02      	bgt.n	8006d48 <_dtoa_r+0xab8>
 8006d42:	d1de      	bne.n	8006d02 <_dtoa_r+0xa72>
 8006d44:	07da      	lsls	r2, r3, #31
 8006d46:	d5dc      	bpl.n	8006d02 <_dtoa_r+0xa72>
 8006d48:	2b39      	cmp	r3, #57	; 0x39
 8006d4a:	d1d8      	bne.n	8006cfe <_dtoa_r+0xa6e>
 8006d4c:	9a02      	ldr	r2, [sp, #8]
 8006d4e:	2339      	movs	r3, #57	; 0x39
 8006d50:	7013      	strb	r3, [r2, #0]
 8006d52:	462b      	mov	r3, r5
 8006d54:	461d      	mov	r5, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d5c:	2a39      	cmp	r2, #57	; 0x39
 8006d5e:	d050      	beq.n	8006e02 <_dtoa_r+0xb72>
 8006d60:	3201      	adds	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	e745      	b.n	8006bf2 <_dtoa_r+0x962>
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	dd03      	ble.n	8006d72 <_dtoa_r+0xae2>
 8006d6a:	2b39      	cmp	r3, #57	; 0x39
 8006d6c:	d0ee      	beq.n	8006d4c <_dtoa_r+0xabc>
 8006d6e:	3301      	adds	r3, #1
 8006d70:	e7c7      	b.n	8006d02 <_dtoa_r+0xa72>
 8006d72:	9a01      	ldr	r2, [sp, #4]
 8006d74:	9907      	ldr	r1, [sp, #28]
 8006d76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d7a:	428a      	cmp	r2, r1
 8006d7c:	d02a      	beq.n	8006dd4 <_dtoa_r+0xb44>
 8006d7e:	4659      	mov	r1, fp
 8006d80:	2300      	movs	r3, #0
 8006d82:	220a      	movs	r2, #10
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 f9e5 	bl	8007154 <__multadd>
 8006d8a:	45b8      	cmp	r8, r7
 8006d8c:	4683      	mov	fp, r0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	f04f 020a 	mov.w	r2, #10
 8006d96:	4641      	mov	r1, r8
 8006d98:	4620      	mov	r0, r4
 8006d9a:	d107      	bne.n	8006dac <_dtoa_r+0xb1c>
 8006d9c:	f000 f9da 	bl	8007154 <__multadd>
 8006da0:	4680      	mov	r8, r0
 8006da2:	4607      	mov	r7, r0
 8006da4:	9b01      	ldr	r3, [sp, #4]
 8006da6:	3301      	adds	r3, #1
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	e775      	b.n	8006c98 <_dtoa_r+0xa08>
 8006dac:	f000 f9d2 	bl	8007154 <__multadd>
 8006db0:	4639      	mov	r1, r7
 8006db2:	4680      	mov	r8, r0
 8006db4:	2300      	movs	r3, #0
 8006db6:	220a      	movs	r2, #10
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f9cb 	bl	8007154 <__multadd>
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	e7f0      	b.n	8006da4 <_dtoa_r+0xb14>
 8006dc2:	f1b9 0f00 	cmp.w	r9, #0
 8006dc6:	9a00      	ldr	r2, [sp, #0]
 8006dc8:	bfcc      	ite	gt
 8006dca:	464d      	movgt	r5, r9
 8006dcc:	2501      	movle	r5, #1
 8006dce:	4415      	add	r5, r2
 8006dd0:	f04f 0800 	mov.w	r8, #0
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f000 fb6a 	bl	80074b4 <__lshift>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4683      	mov	fp, r0
 8006de4:	f000 fbd2 	bl	800758c <__mcmp>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	dcb2      	bgt.n	8006d52 <_dtoa_r+0xac2>
 8006dec:	d102      	bne.n	8006df4 <_dtoa_r+0xb64>
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	07db      	lsls	r3, r3, #31
 8006df2:	d4ae      	bmi.n	8006d52 <_dtoa_r+0xac2>
 8006df4:	462b      	mov	r3, r5
 8006df6:	461d      	mov	r5, r3
 8006df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dfc:	2a30      	cmp	r2, #48	; 0x30
 8006dfe:	d0fa      	beq.n	8006df6 <_dtoa_r+0xb66>
 8006e00:	e6f7      	b.n	8006bf2 <_dtoa_r+0x962>
 8006e02:	9a00      	ldr	r2, [sp, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d1a5      	bne.n	8006d54 <_dtoa_r+0xac4>
 8006e08:	f10a 0a01 	add.w	sl, sl, #1
 8006e0c:	2331      	movs	r3, #49	; 0x31
 8006e0e:	e779      	b.n	8006d04 <_dtoa_r+0xa74>
 8006e10:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <_dtoa_r+0xbd0>)
 8006e12:	f7ff baaf 	b.w	8006374 <_dtoa_r+0xe4>
 8006e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f47f aa86 	bne.w	800632a <_dtoa_r+0x9a>
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <_dtoa_r+0xbd4>)
 8006e20:	f7ff baa8 	b.w	8006374 <_dtoa_r+0xe4>
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	dc03      	bgt.n	8006e32 <_dtoa_r+0xba2>
 8006e2a:	9b05      	ldr	r3, [sp, #20]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	f73f aec9 	bgt.w	8006bc4 <_dtoa_r+0x934>
 8006e32:	9d00      	ldr	r5, [sp, #0]
 8006e34:	4631      	mov	r1, r6
 8006e36:	4658      	mov	r0, fp
 8006e38:	f7ff f99e 	bl	8006178 <quorem>
 8006e3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e40:	f805 3b01 	strb.w	r3, [r5], #1
 8006e44:	9a00      	ldr	r2, [sp, #0]
 8006e46:	1aaa      	subs	r2, r5, r2
 8006e48:	4591      	cmp	r9, r2
 8006e4a:	ddba      	ble.n	8006dc2 <_dtoa_r+0xb32>
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	2300      	movs	r3, #0
 8006e50:	220a      	movs	r2, #10
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 f97e 	bl	8007154 <__multadd>
 8006e58:	4683      	mov	fp, r0
 8006e5a:	e7eb      	b.n	8006e34 <_dtoa_r+0xba4>
 8006e5c:	080088bb 	.word	0x080088bb
 8006e60:	08008814 	.word	0x08008814
 8006e64:	08008838 	.word	0x08008838

08006e68 <std>:
 8006e68:	2300      	movs	r3, #0
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e76:	6083      	str	r3, [r0, #8]
 8006e78:	8181      	strh	r1, [r0, #12]
 8006e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e7c:	81c2      	strh	r2, [r0, #14]
 8006e7e:	6183      	str	r3, [r0, #24]
 8006e80:	4619      	mov	r1, r3
 8006e82:	2208      	movs	r2, #8
 8006e84:	305c      	adds	r0, #92	; 0x5c
 8006e86:	f7fe fccd 	bl	8005824 <memset>
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <std+0x38>)
 8006e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <std+0x3c>)
 8006e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <std+0x40>)
 8006e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <std+0x44>)
 8006e98:	6224      	str	r4, [r4, #32]
 8006e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08007e8d 	.word	0x08007e8d
 8006ea4:	08007eaf 	.word	0x08007eaf
 8006ea8:	08007ee7 	.word	0x08007ee7
 8006eac:	08007f0b 	.word	0x08007f0b

08006eb0 <_cleanup_r>:
 8006eb0:	4901      	ldr	r1, [pc, #4]	; (8006eb8 <_cleanup_r+0x8>)
 8006eb2:	f000 b8af 	b.w	8007014 <_fwalk_reent>
 8006eb6:	bf00      	nop
 8006eb8:	08008221 	.word	0x08008221

08006ebc <__sfmoreglue>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	1e4a      	subs	r2, r1, #1
 8006ec0:	2568      	movs	r5, #104	; 0x68
 8006ec2:	4355      	muls	r5, r2
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eca:	f000 fcbf 	bl	800784c <_malloc_r>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	b140      	cbz	r0, 8006ee4 <__sfmoreglue+0x28>
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ed8:	300c      	adds	r0, #12
 8006eda:	60a0      	str	r0, [r4, #8]
 8006edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ee0:	f7fe fca0 	bl	8005824 <memset>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}

08006ee8 <__sfp_lock_acquire>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sfp_lock_acquire+0x8>)
 8006eea:	f000 b8b8 	b.w	800705e <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000324 	.word	0x20000324

08006ef4 <__sfp_lock_release>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__sfp_lock_release+0x8>)
 8006ef6:	f000 b8b3 	b.w	8007060 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000324 	.word	0x20000324

08006f00 <__sinit_lock_acquire>:
 8006f00:	4801      	ldr	r0, [pc, #4]	; (8006f08 <__sinit_lock_acquire+0x8>)
 8006f02:	f000 b8ac 	b.w	800705e <__retarget_lock_acquire_recursive>
 8006f06:	bf00      	nop
 8006f08:	2000031f 	.word	0x2000031f

08006f0c <__sinit_lock_release>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__sinit_lock_release+0x8>)
 8006f0e:	f000 b8a7 	b.w	8007060 <__retarget_lock_release_recursive>
 8006f12:	bf00      	nop
 8006f14:	2000031f 	.word	0x2000031f

08006f18 <__sinit>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	f7ff fff0 	bl	8006f00 <__sinit_lock_acquire>
 8006f20:	69a3      	ldr	r3, [r4, #24]
 8006f22:	b11b      	cbz	r3, 8006f2c <__sinit+0x14>
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f28:	f7ff bff0 	b.w	8006f0c <__sinit_lock_release>
 8006f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f30:	6523      	str	r3, [r4, #80]	; 0x50
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <__sinit+0x68>)
 8006f34:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <__sinit+0x6c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	bf04      	itt	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	61a3      	streq	r3, [r4, #24]
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 f820 	bl	8006f88 <__sfp>
 8006f48:	6060      	str	r0, [r4, #4]
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 f81c 	bl	8006f88 <__sfp>
 8006f50:	60a0      	str	r0, [r4, #8]
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 f818 	bl	8006f88 <__sfp>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60e0      	str	r0, [r4, #12]
 8006f5c:	2104      	movs	r1, #4
 8006f5e:	6860      	ldr	r0, [r4, #4]
 8006f60:	f7ff ff82 	bl	8006e68 <std>
 8006f64:	68a0      	ldr	r0, [r4, #8]
 8006f66:	2201      	movs	r2, #1
 8006f68:	2109      	movs	r1, #9
 8006f6a:	f7ff ff7d 	bl	8006e68 <std>
 8006f6e:	68e0      	ldr	r0, [r4, #12]
 8006f70:	2202      	movs	r2, #2
 8006f72:	2112      	movs	r1, #18
 8006f74:	f7ff ff78 	bl	8006e68 <std>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	e7d2      	b.n	8006f24 <__sinit+0xc>
 8006f7e:	bf00      	nop
 8006f80:	08008800 	.word	0x08008800
 8006f84:	08006eb1 	.word	0x08006eb1

08006f88 <__sfp>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	f7ff ffac 	bl	8006ee8 <__sfp_lock_acquire>
 8006f90:	4b1e      	ldr	r3, [pc, #120]	; (800700c <__sfp+0x84>)
 8006f92:	681e      	ldr	r6, [r3, #0]
 8006f94:	69b3      	ldr	r3, [r6, #24]
 8006f96:	b913      	cbnz	r3, 8006f9e <__sfp+0x16>
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f7ff ffbd 	bl	8006f18 <__sinit>
 8006f9e:	3648      	adds	r6, #72	; 0x48
 8006fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	d503      	bpl.n	8006fb0 <__sfp+0x28>
 8006fa8:	6833      	ldr	r3, [r6, #0]
 8006faa:	b30b      	cbz	r3, 8006ff0 <__sfp+0x68>
 8006fac:	6836      	ldr	r6, [r6, #0]
 8006fae:	e7f7      	b.n	8006fa0 <__sfp+0x18>
 8006fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fb4:	b9d5      	cbnz	r5, 8006fec <__sfp+0x64>
 8006fb6:	4b16      	ldr	r3, [pc, #88]	; (8007010 <__sfp+0x88>)
 8006fb8:	60e3      	str	r3, [r4, #12]
 8006fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8006fc0:	f000 f84c 	bl	800705c <__retarget_lock_init_recursive>
 8006fc4:	f7ff ff96 	bl	8006ef4 <__sfp_lock_release>
 8006fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fd0:	6025      	str	r5, [r4, #0]
 8006fd2:	61a5      	str	r5, [r4, #24]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fdc:	f7fe fc22 	bl	8005824 <memset>
 8006fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fe8:	4620      	mov	r0, r4
 8006fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fec:	3468      	adds	r4, #104	; 0x68
 8006fee:	e7d9      	b.n	8006fa4 <__sfp+0x1c>
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f7ff ff62 	bl	8006ebc <__sfmoreglue>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	6030      	str	r0, [r6, #0]
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d1d5      	bne.n	8006fac <__sfp+0x24>
 8007000:	f7ff ff78 	bl	8006ef4 <__sfp_lock_release>
 8007004:	230c      	movs	r3, #12
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	e7ee      	b.n	8006fe8 <__sfp+0x60>
 800700a:	bf00      	nop
 800700c:	08008800 	.word	0x08008800
 8007010:	ffff0001 	.word	0xffff0001

08007014 <_fwalk_reent>:
 8007014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007018:	4606      	mov	r6, r0
 800701a:	4688      	mov	r8, r1
 800701c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007020:	2700      	movs	r7, #0
 8007022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007026:	f1b9 0901 	subs.w	r9, r9, #1
 800702a:	d505      	bpl.n	8007038 <_fwalk_reent+0x24>
 800702c:	6824      	ldr	r4, [r4, #0]
 800702e:	2c00      	cmp	r4, #0
 8007030:	d1f7      	bne.n	8007022 <_fwalk_reent+0xe>
 8007032:	4638      	mov	r0, r7
 8007034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007038:	89ab      	ldrh	r3, [r5, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d907      	bls.n	800704e <_fwalk_reent+0x3a>
 800703e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007042:	3301      	adds	r3, #1
 8007044:	d003      	beq.n	800704e <_fwalk_reent+0x3a>
 8007046:	4629      	mov	r1, r5
 8007048:	4630      	mov	r0, r6
 800704a:	47c0      	blx	r8
 800704c:	4307      	orrs	r7, r0
 800704e:	3568      	adds	r5, #104	; 0x68
 8007050:	e7e9      	b.n	8007026 <_fwalk_reent+0x12>
	...

08007054 <_localeconv_r>:
 8007054:	4800      	ldr	r0, [pc, #0]	; (8007058 <_localeconv_r+0x4>)
 8007056:	4770      	bx	lr
 8007058:	20000160 	.word	0x20000160

0800705c <__retarget_lock_init_recursive>:
 800705c:	4770      	bx	lr

0800705e <__retarget_lock_acquire_recursive>:
 800705e:	4770      	bx	lr

08007060 <__retarget_lock_release_recursive>:
 8007060:	4770      	bx	lr
	...

08007064 <malloc>:
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <malloc+0xc>)
 8007066:	4601      	mov	r1, r0
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	f000 bbef 	b.w	800784c <_malloc_r>
 800706e:	bf00      	nop
 8007070:	2000000c 	.word	0x2000000c

08007074 <memcpy>:
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	f100 33ff 	add.w	r3, r0, #4294967295
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	4770      	bx	lr
 8007080:	b510      	push	{r4, lr}
 8007082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708a:	4291      	cmp	r1, r2
 800708c:	d1f9      	bne.n	8007082 <memcpy+0xe>
 800708e:	bd10      	pop	{r4, pc}

08007090 <_Balloc>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	b976      	cbnz	r6, 80070b8 <_Balloc+0x28>
 800709a:	2010      	movs	r0, #16
 800709c:	f7ff ffe2 	bl	8007064 <malloc>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6260      	str	r0, [r4, #36]	; 0x24
 80070a4:	b920      	cbnz	r0, 80070b0 <_Balloc+0x20>
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <_Balloc+0x78>)
 80070a8:	4818      	ldr	r0, [pc, #96]	; (800710c <_Balloc+0x7c>)
 80070aa:	2166      	movs	r1, #102	; 0x66
 80070ac:	f001 f804 	bl	80080b8 <__assert_func>
 80070b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070b4:	6006      	str	r6, [r0, #0]
 80070b6:	60c6      	str	r6, [r0, #12]
 80070b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070ba:	68f3      	ldr	r3, [r6, #12]
 80070bc:	b183      	cbz	r3, 80070e0 <_Balloc+0x50>
 80070be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070c6:	b9b8      	cbnz	r0, 80070f8 <_Balloc+0x68>
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f605 	lsl.w	r6, r1, r5
 80070ce:	1d72      	adds	r2, r6, #5
 80070d0:	0092      	lsls	r2, r2, #2
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fb5a 	bl	800778c <_calloc_r>
 80070d8:	b160      	cbz	r0, 80070f4 <_Balloc+0x64>
 80070da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070de:	e00e      	b.n	80070fe <_Balloc+0x6e>
 80070e0:	2221      	movs	r2, #33	; 0x21
 80070e2:	2104      	movs	r1, #4
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fb51 	bl	800778c <_calloc_r>
 80070ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ec:	60f0      	str	r0, [r6, #12]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e4      	bne.n	80070be <_Balloc+0x2e>
 80070f4:	2000      	movs	r0, #0
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	6802      	ldr	r2, [r0, #0]
 80070fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070fe:	2300      	movs	r3, #0
 8007100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007104:	e7f7      	b.n	80070f6 <_Balloc+0x66>
 8007106:	bf00      	nop
 8007108:	08008845 	.word	0x08008845
 800710c:	0800892c 	.word	0x0800892c

08007110 <_Bfree>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007114:	4605      	mov	r5, r0
 8007116:	460c      	mov	r4, r1
 8007118:	b976      	cbnz	r6, 8007138 <_Bfree+0x28>
 800711a:	2010      	movs	r0, #16
 800711c:	f7ff ffa2 	bl	8007064 <malloc>
 8007120:	4602      	mov	r2, r0
 8007122:	6268      	str	r0, [r5, #36]	; 0x24
 8007124:	b920      	cbnz	r0, 8007130 <_Bfree+0x20>
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <_Bfree+0x3c>)
 8007128:	4809      	ldr	r0, [pc, #36]	; (8007150 <_Bfree+0x40>)
 800712a:	218a      	movs	r1, #138	; 0x8a
 800712c:	f000 ffc4 	bl	80080b8 <__assert_func>
 8007130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007134:	6006      	str	r6, [r0, #0]
 8007136:	60c6      	str	r6, [r0, #12]
 8007138:	b13c      	cbz	r4, 800714a <_Bfree+0x3a>
 800713a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800713c:	6862      	ldr	r2, [r4, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007144:	6021      	str	r1, [r4, #0]
 8007146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	08008845 	.word	0x08008845
 8007150:	0800892c 	.word	0x0800892c

08007154 <__multadd>:
 8007154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007158:	690e      	ldr	r6, [r1, #16]
 800715a:	4607      	mov	r7, r0
 800715c:	4698      	mov	r8, r3
 800715e:	460c      	mov	r4, r1
 8007160:	f101 0014 	add.w	r0, r1, #20
 8007164:	2300      	movs	r3, #0
 8007166:	6805      	ldr	r5, [r0, #0]
 8007168:	b2a9      	uxth	r1, r5
 800716a:	fb02 8101 	mla	r1, r2, r1, r8
 800716e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007172:	0c2d      	lsrs	r5, r5, #16
 8007174:	fb02 c505 	mla	r5, r2, r5, ip
 8007178:	b289      	uxth	r1, r1
 800717a:	3301      	adds	r3, #1
 800717c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007180:	429e      	cmp	r6, r3
 8007182:	f840 1b04 	str.w	r1, [r0], #4
 8007186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800718a:	dcec      	bgt.n	8007166 <__multadd+0x12>
 800718c:	f1b8 0f00 	cmp.w	r8, #0
 8007190:	d022      	beq.n	80071d8 <__multadd+0x84>
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	42b3      	cmp	r3, r6
 8007196:	dc19      	bgt.n	80071cc <__multadd+0x78>
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	4638      	mov	r0, r7
 800719c:	3101      	adds	r1, #1
 800719e:	f7ff ff77 	bl	8007090 <_Balloc>
 80071a2:	4605      	mov	r5, r0
 80071a4:	b928      	cbnz	r0, 80071b2 <__multadd+0x5e>
 80071a6:	4602      	mov	r2, r0
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <__multadd+0x8c>)
 80071aa:	480e      	ldr	r0, [pc, #56]	; (80071e4 <__multadd+0x90>)
 80071ac:	21b5      	movs	r1, #181	; 0xb5
 80071ae:	f000 ff83 	bl	80080b8 <__assert_func>
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	3202      	adds	r2, #2
 80071b6:	f104 010c 	add.w	r1, r4, #12
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	300c      	adds	r0, #12
 80071be:	f7ff ff59 	bl	8007074 <memcpy>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4638      	mov	r0, r7
 80071c6:	f7ff ffa3 	bl	8007110 <_Bfree>
 80071ca:	462c      	mov	r4, r5
 80071cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80071d0:	3601      	adds	r6, #1
 80071d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80071d6:	6126      	str	r6, [r4, #16]
 80071d8:	4620      	mov	r0, r4
 80071da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071de:	bf00      	nop
 80071e0:	080088bb 	.word	0x080088bb
 80071e4:	0800892c 	.word	0x0800892c

080071e8 <__hi0bits>:
 80071e8:	0c03      	lsrs	r3, r0, #16
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	b9d3      	cbnz	r3, 8007224 <__hi0bits+0x3c>
 80071ee:	0400      	lsls	r0, r0, #16
 80071f0:	2310      	movs	r3, #16
 80071f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071f6:	bf04      	itt	eq
 80071f8:	0200      	lsleq	r0, r0, #8
 80071fa:	3308      	addeq	r3, #8
 80071fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007200:	bf04      	itt	eq
 8007202:	0100      	lsleq	r0, r0, #4
 8007204:	3304      	addeq	r3, #4
 8007206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800720a:	bf04      	itt	eq
 800720c:	0080      	lsleq	r0, r0, #2
 800720e:	3302      	addeq	r3, #2
 8007210:	2800      	cmp	r0, #0
 8007212:	db05      	blt.n	8007220 <__hi0bits+0x38>
 8007214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007218:	f103 0301 	add.w	r3, r3, #1
 800721c:	bf08      	it	eq
 800721e:	2320      	moveq	r3, #32
 8007220:	4618      	mov	r0, r3
 8007222:	4770      	bx	lr
 8007224:	2300      	movs	r3, #0
 8007226:	e7e4      	b.n	80071f2 <__hi0bits+0xa>

08007228 <__lo0bits>:
 8007228:	6803      	ldr	r3, [r0, #0]
 800722a:	f013 0207 	ands.w	r2, r3, #7
 800722e:	4601      	mov	r1, r0
 8007230:	d00b      	beq.n	800724a <__lo0bits+0x22>
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d424      	bmi.n	8007280 <__lo0bits+0x58>
 8007236:	0798      	lsls	r0, r3, #30
 8007238:	bf49      	itett	mi
 800723a:	085b      	lsrmi	r3, r3, #1
 800723c:	089b      	lsrpl	r3, r3, #2
 800723e:	2001      	movmi	r0, #1
 8007240:	600b      	strmi	r3, [r1, #0]
 8007242:	bf5c      	itt	pl
 8007244:	600b      	strpl	r3, [r1, #0]
 8007246:	2002      	movpl	r0, #2
 8007248:	4770      	bx	lr
 800724a:	b298      	uxth	r0, r3
 800724c:	b9b0      	cbnz	r0, 800727c <__lo0bits+0x54>
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	2010      	movs	r0, #16
 8007252:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007256:	bf04      	itt	eq
 8007258:	0a1b      	lsreq	r3, r3, #8
 800725a:	3008      	addeq	r0, #8
 800725c:	071a      	lsls	r2, r3, #28
 800725e:	bf04      	itt	eq
 8007260:	091b      	lsreq	r3, r3, #4
 8007262:	3004      	addeq	r0, #4
 8007264:	079a      	lsls	r2, r3, #30
 8007266:	bf04      	itt	eq
 8007268:	089b      	lsreq	r3, r3, #2
 800726a:	3002      	addeq	r0, #2
 800726c:	07da      	lsls	r2, r3, #31
 800726e:	d403      	bmi.n	8007278 <__lo0bits+0x50>
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	f100 0001 	add.w	r0, r0, #1
 8007276:	d005      	beq.n	8007284 <__lo0bits+0x5c>
 8007278:	600b      	str	r3, [r1, #0]
 800727a:	4770      	bx	lr
 800727c:	4610      	mov	r0, r2
 800727e:	e7e8      	b.n	8007252 <__lo0bits+0x2a>
 8007280:	2000      	movs	r0, #0
 8007282:	4770      	bx	lr
 8007284:	2020      	movs	r0, #32
 8007286:	4770      	bx	lr

08007288 <__i2b>:
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	2101      	movs	r1, #1
 800728e:	f7ff feff 	bl	8007090 <_Balloc>
 8007292:	4602      	mov	r2, r0
 8007294:	b928      	cbnz	r0, 80072a2 <__i2b+0x1a>
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <__i2b+0x24>)
 8007298:	4805      	ldr	r0, [pc, #20]	; (80072b0 <__i2b+0x28>)
 800729a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800729e:	f000 ff0b 	bl	80080b8 <__assert_func>
 80072a2:	2301      	movs	r3, #1
 80072a4:	6144      	str	r4, [r0, #20]
 80072a6:	6103      	str	r3, [r0, #16]
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	bf00      	nop
 80072ac:	080088bb 	.word	0x080088bb
 80072b0:	0800892c 	.word	0x0800892c

080072b4 <__multiply>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4614      	mov	r4, r2
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	bfb8      	it	lt
 80072c2:	460b      	movlt	r3, r1
 80072c4:	460d      	mov	r5, r1
 80072c6:	bfbc      	itt	lt
 80072c8:	4625      	movlt	r5, r4
 80072ca:	461c      	movlt	r4, r3
 80072cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072d4:	68ab      	ldr	r3, [r5, #8]
 80072d6:	6869      	ldr	r1, [r5, #4]
 80072d8:	eb0a 0709 	add.w	r7, sl, r9
 80072dc:	42bb      	cmp	r3, r7
 80072de:	b085      	sub	sp, #20
 80072e0:	bfb8      	it	lt
 80072e2:	3101      	addlt	r1, #1
 80072e4:	f7ff fed4 	bl	8007090 <_Balloc>
 80072e8:	b930      	cbnz	r0, 80072f8 <__multiply+0x44>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <__multiply+0x144>)
 80072ee:	4843      	ldr	r0, [pc, #268]	; (80073fc <__multiply+0x148>)
 80072f0:	f240 115d 	movw	r1, #349	; 0x15d
 80072f4:	f000 fee0 	bl	80080b8 <__assert_func>
 80072f8:	f100 0614 	add.w	r6, r0, #20
 80072fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007300:	4633      	mov	r3, r6
 8007302:	2200      	movs	r2, #0
 8007304:	4543      	cmp	r3, r8
 8007306:	d31e      	bcc.n	8007346 <__multiply+0x92>
 8007308:	f105 0c14 	add.w	ip, r5, #20
 800730c:	f104 0314 	add.w	r3, r4, #20
 8007310:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007314:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007318:	9202      	str	r2, [sp, #8]
 800731a:	ebac 0205 	sub.w	r2, ip, r5
 800731e:	3a15      	subs	r2, #21
 8007320:	f022 0203 	bic.w	r2, r2, #3
 8007324:	3204      	adds	r2, #4
 8007326:	f105 0115 	add.w	r1, r5, #21
 800732a:	458c      	cmp	ip, r1
 800732c:	bf38      	it	cc
 800732e:	2204      	movcc	r2, #4
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9a02      	ldr	r2, [sp, #8]
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d808      	bhi.n	800734c <__multiply+0x98>
 800733a:	2f00      	cmp	r7, #0
 800733c:	dc55      	bgt.n	80073ea <__multiply+0x136>
 800733e:	6107      	str	r7, [r0, #16]
 8007340:	b005      	add	sp, #20
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	f843 2b04 	str.w	r2, [r3], #4
 800734a:	e7db      	b.n	8007304 <__multiply+0x50>
 800734c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007350:	f1ba 0f00 	cmp.w	sl, #0
 8007354:	d020      	beq.n	8007398 <__multiply+0xe4>
 8007356:	f105 0e14 	add.w	lr, r5, #20
 800735a:	46b1      	mov	r9, r6
 800735c:	2200      	movs	r2, #0
 800735e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007362:	f8d9 b000 	ldr.w	fp, [r9]
 8007366:	b2a1      	uxth	r1, r4
 8007368:	fa1f fb8b 	uxth.w	fp, fp
 800736c:	fb0a b101 	mla	r1, sl, r1, fp
 8007370:	4411      	add	r1, r2
 8007372:	f8d9 2000 	ldr.w	r2, [r9]
 8007376:	0c24      	lsrs	r4, r4, #16
 8007378:	0c12      	lsrs	r2, r2, #16
 800737a:	fb0a 2404 	mla	r4, sl, r4, r2
 800737e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007382:	b289      	uxth	r1, r1
 8007384:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007388:	45f4      	cmp	ip, lr
 800738a:	f849 1b04 	str.w	r1, [r9], #4
 800738e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007392:	d8e4      	bhi.n	800735e <__multiply+0xaa>
 8007394:	9901      	ldr	r1, [sp, #4]
 8007396:	5072      	str	r2, [r6, r1]
 8007398:	9a03      	ldr	r2, [sp, #12]
 800739a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800739e:	3304      	adds	r3, #4
 80073a0:	f1b9 0f00 	cmp.w	r9, #0
 80073a4:	d01f      	beq.n	80073e6 <__multiply+0x132>
 80073a6:	6834      	ldr	r4, [r6, #0]
 80073a8:	f105 0114 	add.w	r1, r5, #20
 80073ac:	46b6      	mov	lr, r6
 80073ae:	f04f 0a00 	mov.w	sl, #0
 80073b2:	880a      	ldrh	r2, [r1, #0]
 80073b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073b8:	fb09 b202 	mla	r2, r9, r2, fp
 80073bc:	4492      	add	sl, r2
 80073be:	b2a4      	uxth	r4, r4
 80073c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073c4:	f84e 4b04 	str.w	r4, [lr], #4
 80073c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80073cc:	f8be 2000 	ldrh.w	r2, [lr]
 80073d0:	0c24      	lsrs	r4, r4, #16
 80073d2:	fb09 2404 	mla	r4, r9, r4, r2
 80073d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073da:	458c      	cmp	ip, r1
 80073dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073e0:	d8e7      	bhi.n	80073b2 <__multiply+0xfe>
 80073e2:	9a01      	ldr	r2, [sp, #4]
 80073e4:	50b4      	str	r4, [r6, r2]
 80073e6:	3604      	adds	r6, #4
 80073e8:	e7a3      	b.n	8007332 <__multiply+0x7e>
 80073ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1a5      	bne.n	800733e <__multiply+0x8a>
 80073f2:	3f01      	subs	r7, #1
 80073f4:	e7a1      	b.n	800733a <__multiply+0x86>
 80073f6:	bf00      	nop
 80073f8:	080088bb 	.word	0x080088bb
 80073fc:	0800892c 	.word	0x0800892c

08007400 <__pow5mult>:
 8007400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4615      	mov	r5, r2
 8007406:	f012 0203 	ands.w	r2, r2, #3
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	d007      	beq.n	8007420 <__pow5mult+0x20>
 8007410:	4c25      	ldr	r4, [pc, #148]	; (80074a8 <__pow5mult+0xa8>)
 8007412:	3a01      	subs	r2, #1
 8007414:	2300      	movs	r3, #0
 8007416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800741a:	f7ff fe9b 	bl	8007154 <__multadd>
 800741e:	4607      	mov	r7, r0
 8007420:	10ad      	asrs	r5, r5, #2
 8007422:	d03d      	beq.n	80074a0 <__pow5mult+0xa0>
 8007424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007426:	b97c      	cbnz	r4, 8007448 <__pow5mult+0x48>
 8007428:	2010      	movs	r0, #16
 800742a:	f7ff fe1b 	bl	8007064 <malloc>
 800742e:	4602      	mov	r2, r0
 8007430:	6270      	str	r0, [r6, #36]	; 0x24
 8007432:	b928      	cbnz	r0, 8007440 <__pow5mult+0x40>
 8007434:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <__pow5mult+0xac>)
 8007436:	481e      	ldr	r0, [pc, #120]	; (80074b0 <__pow5mult+0xb0>)
 8007438:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800743c:	f000 fe3c 	bl	80080b8 <__assert_func>
 8007440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007444:	6004      	str	r4, [r0, #0]
 8007446:	60c4      	str	r4, [r0, #12]
 8007448:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800744c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007450:	b94c      	cbnz	r4, 8007466 <__pow5mult+0x66>
 8007452:	f240 2171 	movw	r1, #625	; 0x271
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ff16 	bl	8007288 <__i2b>
 800745c:	2300      	movs	r3, #0
 800745e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007462:	4604      	mov	r4, r0
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	f04f 0900 	mov.w	r9, #0
 800746a:	07eb      	lsls	r3, r5, #31
 800746c:	d50a      	bpl.n	8007484 <__pow5mult+0x84>
 800746e:	4639      	mov	r1, r7
 8007470:	4622      	mov	r2, r4
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ff1e 	bl	80072b4 <__multiply>
 8007478:	4639      	mov	r1, r7
 800747a:	4680      	mov	r8, r0
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff fe47 	bl	8007110 <_Bfree>
 8007482:	4647      	mov	r7, r8
 8007484:	106d      	asrs	r5, r5, #1
 8007486:	d00b      	beq.n	80074a0 <__pow5mult+0xa0>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	b938      	cbnz	r0, 800749c <__pow5mult+0x9c>
 800748c:	4622      	mov	r2, r4
 800748e:	4621      	mov	r1, r4
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff ff0f 	bl	80072b4 <__multiply>
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	f8c0 9000 	str.w	r9, [r0]
 800749c:	4604      	mov	r4, r0
 800749e:	e7e4      	b.n	800746a <__pow5mult+0x6a>
 80074a0:	4638      	mov	r0, r7
 80074a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a6:	bf00      	nop
 80074a8:	08008a80 	.word	0x08008a80
 80074ac:	08008845 	.word	0x08008845
 80074b0:	0800892c 	.word	0x0800892c

080074b4 <__lshift>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	6849      	ldr	r1, [r1, #4]
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	4607      	mov	r7, r0
 80074c6:	4691      	mov	r9, r2
 80074c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074cc:	f108 0601 	add.w	r6, r8, #1
 80074d0:	42b3      	cmp	r3, r6
 80074d2:	db0b      	blt.n	80074ec <__lshift+0x38>
 80074d4:	4638      	mov	r0, r7
 80074d6:	f7ff fddb 	bl	8007090 <_Balloc>
 80074da:	4605      	mov	r5, r0
 80074dc:	b948      	cbnz	r0, 80074f2 <__lshift+0x3e>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b28      	ldr	r3, [pc, #160]	; (8007584 <__lshift+0xd0>)
 80074e2:	4829      	ldr	r0, [pc, #164]	; (8007588 <__lshift+0xd4>)
 80074e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074e8:	f000 fde6 	bl	80080b8 <__assert_func>
 80074ec:	3101      	adds	r1, #1
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	e7ee      	b.n	80074d0 <__lshift+0x1c>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f100 0114 	add.w	r1, r0, #20
 80074f8:	f100 0210 	add.w	r2, r0, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	4553      	cmp	r3, sl
 8007500:	db33      	blt.n	800756a <__lshift+0xb6>
 8007502:	6920      	ldr	r0, [r4, #16]
 8007504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007508:	f104 0314 	add.w	r3, r4, #20
 800750c:	f019 091f 	ands.w	r9, r9, #31
 8007510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007518:	d02b      	beq.n	8007572 <__lshift+0xbe>
 800751a:	f1c9 0e20 	rsb	lr, r9, #32
 800751e:	468a      	mov	sl, r1
 8007520:	2200      	movs	r2, #0
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	fa00 f009 	lsl.w	r0, r0, r9
 8007528:	4302      	orrs	r2, r0
 800752a:	f84a 2b04 	str.w	r2, [sl], #4
 800752e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007532:	459c      	cmp	ip, r3
 8007534:	fa22 f20e 	lsr.w	r2, r2, lr
 8007538:	d8f3      	bhi.n	8007522 <__lshift+0x6e>
 800753a:	ebac 0304 	sub.w	r3, ip, r4
 800753e:	3b15      	subs	r3, #21
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	3304      	adds	r3, #4
 8007546:	f104 0015 	add.w	r0, r4, #21
 800754a:	4584      	cmp	ip, r0
 800754c:	bf38      	it	cc
 800754e:	2304      	movcc	r3, #4
 8007550:	50ca      	str	r2, [r1, r3]
 8007552:	b10a      	cbz	r2, 8007558 <__lshift+0xa4>
 8007554:	f108 0602 	add.w	r6, r8, #2
 8007558:	3e01      	subs	r6, #1
 800755a:	4638      	mov	r0, r7
 800755c:	612e      	str	r6, [r5, #16]
 800755e:	4621      	mov	r1, r4
 8007560:	f7ff fdd6 	bl	8007110 <_Bfree>
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756a:	f842 0f04 	str.w	r0, [r2, #4]!
 800756e:	3301      	adds	r3, #1
 8007570:	e7c5      	b.n	80074fe <__lshift+0x4a>
 8007572:	3904      	subs	r1, #4
 8007574:	f853 2b04 	ldr.w	r2, [r3], #4
 8007578:	f841 2f04 	str.w	r2, [r1, #4]!
 800757c:	459c      	cmp	ip, r3
 800757e:	d8f9      	bhi.n	8007574 <__lshift+0xc0>
 8007580:	e7ea      	b.n	8007558 <__lshift+0xa4>
 8007582:	bf00      	nop
 8007584:	080088bb 	.word	0x080088bb
 8007588:	0800892c 	.word	0x0800892c

0800758c <__mcmp>:
 800758c:	b530      	push	{r4, r5, lr}
 800758e:	6902      	ldr	r2, [r0, #16]
 8007590:	690c      	ldr	r4, [r1, #16]
 8007592:	1b12      	subs	r2, r2, r4
 8007594:	d10e      	bne.n	80075b4 <__mcmp+0x28>
 8007596:	f100 0314 	add.w	r3, r0, #20
 800759a:	3114      	adds	r1, #20
 800759c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075ac:	42a5      	cmp	r5, r4
 80075ae:	d003      	beq.n	80075b8 <__mcmp+0x2c>
 80075b0:	d305      	bcc.n	80075be <__mcmp+0x32>
 80075b2:	2201      	movs	r2, #1
 80075b4:	4610      	mov	r0, r2
 80075b6:	bd30      	pop	{r4, r5, pc}
 80075b8:	4283      	cmp	r3, r0
 80075ba:	d3f3      	bcc.n	80075a4 <__mcmp+0x18>
 80075bc:	e7fa      	b.n	80075b4 <__mcmp+0x28>
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	e7f7      	b.n	80075b4 <__mcmp+0x28>

080075c4 <__mdiff>:
 80075c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	4606      	mov	r6, r0
 80075cc:	4611      	mov	r1, r2
 80075ce:	4620      	mov	r0, r4
 80075d0:	4617      	mov	r7, r2
 80075d2:	f7ff ffdb 	bl	800758c <__mcmp>
 80075d6:	1e05      	subs	r5, r0, #0
 80075d8:	d110      	bne.n	80075fc <__mdiff+0x38>
 80075da:	4629      	mov	r1, r5
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff fd57 	bl	8007090 <_Balloc>
 80075e2:	b930      	cbnz	r0, 80075f2 <__mdiff+0x2e>
 80075e4:	4b39      	ldr	r3, [pc, #228]	; (80076cc <__mdiff+0x108>)
 80075e6:	4602      	mov	r2, r0
 80075e8:	f240 2132 	movw	r1, #562	; 0x232
 80075ec:	4838      	ldr	r0, [pc, #224]	; (80076d0 <__mdiff+0x10c>)
 80075ee:	f000 fd63 	bl	80080b8 <__assert_func>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	bfa4      	itt	ge
 80075fe:	463b      	movge	r3, r7
 8007600:	4627      	movge	r7, r4
 8007602:	4630      	mov	r0, r6
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	bfa6      	itte	ge
 8007608:	461c      	movge	r4, r3
 800760a:	2500      	movge	r5, #0
 800760c:	2501      	movlt	r5, #1
 800760e:	f7ff fd3f 	bl	8007090 <_Balloc>
 8007612:	b920      	cbnz	r0, 800761e <__mdiff+0x5a>
 8007614:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <__mdiff+0x108>)
 8007616:	4602      	mov	r2, r0
 8007618:	f44f 7110 	mov.w	r1, #576	; 0x240
 800761c:	e7e6      	b.n	80075ec <__mdiff+0x28>
 800761e:	693e      	ldr	r6, [r7, #16]
 8007620:	60c5      	str	r5, [r0, #12]
 8007622:	6925      	ldr	r5, [r4, #16]
 8007624:	f107 0114 	add.w	r1, r7, #20
 8007628:	f104 0914 	add.w	r9, r4, #20
 800762c:	f100 0e14 	add.w	lr, r0, #20
 8007630:	f107 0210 	add.w	r2, r7, #16
 8007634:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007638:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800763c:	46f2      	mov	sl, lr
 800763e:	2700      	movs	r7, #0
 8007640:	f859 3b04 	ldr.w	r3, [r9], #4
 8007644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007648:	fa1f f883 	uxth.w	r8, r3
 800764c:	fa17 f78b 	uxtah	r7, r7, fp
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	eba7 0808 	sub.w	r8, r7, r8
 8007656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800765a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800765e:	fa1f f888 	uxth.w	r8, r8
 8007662:	141f      	asrs	r7, r3, #16
 8007664:	454d      	cmp	r5, r9
 8007666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800766a:	f84a 3b04 	str.w	r3, [sl], #4
 800766e:	d8e7      	bhi.n	8007640 <__mdiff+0x7c>
 8007670:	1b2b      	subs	r3, r5, r4
 8007672:	3b15      	subs	r3, #21
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	3304      	adds	r3, #4
 800767a:	3415      	adds	r4, #21
 800767c:	42a5      	cmp	r5, r4
 800767e:	bf38      	it	cc
 8007680:	2304      	movcc	r3, #4
 8007682:	4419      	add	r1, r3
 8007684:	4473      	add	r3, lr
 8007686:	469e      	mov	lr, r3
 8007688:	460d      	mov	r5, r1
 800768a:	4565      	cmp	r5, ip
 800768c:	d30e      	bcc.n	80076ac <__mdiff+0xe8>
 800768e:	f10c 0203 	add.w	r2, ip, #3
 8007692:	1a52      	subs	r2, r2, r1
 8007694:	f022 0203 	bic.w	r2, r2, #3
 8007698:	3903      	subs	r1, #3
 800769a:	458c      	cmp	ip, r1
 800769c:	bf38      	it	cc
 800769e:	2200      	movcc	r2, #0
 80076a0:	441a      	add	r2, r3
 80076a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076a6:	b17b      	cbz	r3, 80076c8 <__mdiff+0x104>
 80076a8:	6106      	str	r6, [r0, #16]
 80076aa:	e7a5      	b.n	80075f8 <__mdiff+0x34>
 80076ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80076b0:	fa17 f488 	uxtah	r4, r7, r8
 80076b4:	1422      	asrs	r2, r4, #16
 80076b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80076ba:	b2a4      	uxth	r4, r4
 80076bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80076c0:	f84e 4b04 	str.w	r4, [lr], #4
 80076c4:	1417      	asrs	r7, r2, #16
 80076c6:	e7e0      	b.n	800768a <__mdiff+0xc6>
 80076c8:	3e01      	subs	r6, #1
 80076ca:	e7ea      	b.n	80076a2 <__mdiff+0xde>
 80076cc:	080088bb 	.word	0x080088bb
 80076d0:	0800892c 	.word	0x0800892c

080076d4 <__d2b>:
 80076d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076d8:	4689      	mov	r9, r1
 80076da:	2101      	movs	r1, #1
 80076dc:	ec57 6b10 	vmov	r6, r7, d0
 80076e0:	4690      	mov	r8, r2
 80076e2:	f7ff fcd5 	bl	8007090 <_Balloc>
 80076e6:	4604      	mov	r4, r0
 80076e8:	b930      	cbnz	r0, 80076f8 <__d2b+0x24>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b25      	ldr	r3, [pc, #148]	; (8007784 <__d2b+0xb0>)
 80076ee:	4826      	ldr	r0, [pc, #152]	; (8007788 <__d2b+0xb4>)
 80076f0:	f240 310a 	movw	r1, #778	; 0x30a
 80076f4:	f000 fce0 	bl	80080b8 <__assert_func>
 80076f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007700:	bb35      	cbnz	r5, 8007750 <__d2b+0x7c>
 8007702:	2e00      	cmp	r6, #0
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	d028      	beq.n	800775a <__d2b+0x86>
 8007708:	4668      	mov	r0, sp
 800770a:	9600      	str	r6, [sp, #0]
 800770c:	f7ff fd8c 	bl	8007228 <__lo0bits>
 8007710:	9900      	ldr	r1, [sp, #0]
 8007712:	b300      	cbz	r0, 8007756 <__d2b+0x82>
 8007714:	9a01      	ldr	r2, [sp, #4]
 8007716:	f1c0 0320 	rsb	r3, r0, #32
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	430b      	orrs	r3, r1
 8007720:	40c2      	lsrs	r2, r0
 8007722:	6163      	str	r3, [r4, #20]
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	61a3      	str	r3, [r4, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf14      	ite	ne
 800772e:	2202      	movne	r2, #2
 8007730:	2201      	moveq	r2, #1
 8007732:	6122      	str	r2, [r4, #16]
 8007734:	b1d5      	cbz	r5, 800776c <__d2b+0x98>
 8007736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800773a:	4405      	add	r5, r0
 800773c:	f8c9 5000 	str.w	r5, [r9]
 8007740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007744:	f8c8 0000 	str.w	r0, [r8]
 8007748:	4620      	mov	r0, r4
 800774a:	b003      	add	sp, #12
 800774c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007754:	e7d5      	b.n	8007702 <__d2b+0x2e>
 8007756:	6161      	str	r1, [r4, #20]
 8007758:	e7e5      	b.n	8007726 <__d2b+0x52>
 800775a:	a801      	add	r0, sp, #4
 800775c:	f7ff fd64 	bl	8007228 <__lo0bits>
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	6163      	str	r3, [r4, #20]
 8007764:	2201      	movs	r2, #1
 8007766:	6122      	str	r2, [r4, #16]
 8007768:	3020      	adds	r0, #32
 800776a:	e7e3      	b.n	8007734 <__d2b+0x60>
 800776c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007774:	f8c9 0000 	str.w	r0, [r9]
 8007778:	6918      	ldr	r0, [r3, #16]
 800777a:	f7ff fd35 	bl	80071e8 <__hi0bits>
 800777e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007782:	e7df      	b.n	8007744 <__d2b+0x70>
 8007784:	080088bb 	.word	0x080088bb
 8007788:	0800892c 	.word	0x0800892c

0800778c <_calloc_r>:
 800778c:	b513      	push	{r0, r1, r4, lr}
 800778e:	434a      	muls	r2, r1
 8007790:	4611      	mov	r1, r2
 8007792:	9201      	str	r2, [sp, #4]
 8007794:	f000 f85a 	bl	800784c <_malloc_r>
 8007798:	4604      	mov	r4, r0
 800779a:	b118      	cbz	r0, 80077a4 <_calloc_r+0x18>
 800779c:	9a01      	ldr	r2, [sp, #4]
 800779e:	2100      	movs	r1, #0
 80077a0:	f7fe f840 	bl	8005824 <memset>
 80077a4:	4620      	mov	r0, r4
 80077a6:	b002      	add	sp, #8
 80077a8:	bd10      	pop	{r4, pc}
	...

080077ac <_free_r>:
 80077ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d048      	beq.n	8007844 <_free_r+0x98>
 80077b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b6:	9001      	str	r0, [sp, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f1a1 0404 	sub.w	r4, r1, #4
 80077be:	bfb8      	it	lt
 80077c0:	18e4      	addlt	r4, r4, r3
 80077c2:	f000 fe1d 	bl	8008400 <__malloc_lock>
 80077c6:	4a20      	ldr	r2, [pc, #128]	; (8007848 <_free_r+0x9c>)
 80077c8:	9801      	ldr	r0, [sp, #4]
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	4615      	mov	r5, r2
 80077ce:	b933      	cbnz	r3, 80077de <_free_r+0x32>
 80077d0:	6063      	str	r3, [r4, #4]
 80077d2:	6014      	str	r4, [r2, #0]
 80077d4:	b003      	add	sp, #12
 80077d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077da:	f000 be17 	b.w	800840c <__malloc_unlock>
 80077de:	42a3      	cmp	r3, r4
 80077e0:	d90b      	bls.n	80077fa <_free_r+0x4e>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	1862      	adds	r2, r4, r1
 80077e6:	4293      	cmp	r3, r2
 80077e8:	bf04      	itt	eq
 80077ea:	681a      	ldreq	r2, [r3, #0]
 80077ec:	685b      	ldreq	r3, [r3, #4]
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	bf04      	itt	eq
 80077f2:	1852      	addeq	r2, r2, r1
 80077f4:	6022      	streq	r2, [r4, #0]
 80077f6:	602c      	str	r4, [r5, #0]
 80077f8:	e7ec      	b.n	80077d4 <_free_r+0x28>
 80077fa:	461a      	mov	r2, r3
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b10b      	cbz	r3, 8007804 <_free_r+0x58>
 8007800:	42a3      	cmp	r3, r4
 8007802:	d9fa      	bls.n	80077fa <_free_r+0x4e>
 8007804:	6811      	ldr	r1, [r2, #0]
 8007806:	1855      	adds	r5, r2, r1
 8007808:	42a5      	cmp	r5, r4
 800780a:	d10b      	bne.n	8007824 <_free_r+0x78>
 800780c:	6824      	ldr	r4, [r4, #0]
 800780e:	4421      	add	r1, r4
 8007810:	1854      	adds	r4, r2, r1
 8007812:	42a3      	cmp	r3, r4
 8007814:	6011      	str	r1, [r2, #0]
 8007816:	d1dd      	bne.n	80077d4 <_free_r+0x28>
 8007818:	681c      	ldr	r4, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	6053      	str	r3, [r2, #4]
 800781e:	4421      	add	r1, r4
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	e7d7      	b.n	80077d4 <_free_r+0x28>
 8007824:	d902      	bls.n	800782c <_free_r+0x80>
 8007826:	230c      	movs	r3, #12
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	e7d3      	b.n	80077d4 <_free_r+0x28>
 800782c:	6825      	ldr	r5, [r4, #0]
 800782e:	1961      	adds	r1, r4, r5
 8007830:	428b      	cmp	r3, r1
 8007832:	bf04      	itt	eq
 8007834:	6819      	ldreq	r1, [r3, #0]
 8007836:	685b      	ldreq	r3, [r3, #4]
 8007838:	6063      	str	r3, [r4, #4]
 800783a:	bf04      	itt	eq
 800783c:	1949      	addeq	r1, r1, r5
 800783e:	6021      	streq	r1, [r4, #0]
 8007840:	6054      	str	r4, [r2, #4]
 8007842:	e7c7      	b.n	80077d4 <_free_r+0x28>
 8007844:	b003      	add	sp, #12
 8007846:	bd30      	pop	{r4, r5, pc}
 8007848:	20000278 	.word	0x20000278

0800784c <_malloc_r>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	1ccd      	adds	r5, r1, #3
 8007850:	f025 0503 	bic.w	r5, r5, #3
 8007854:	3508      	adds	r5, #8
 8007856:	2d0c      	cmp	r5, #12
 8007858:	bf38      	it	cc
 800785a:	250c      	movcc	r5, #12
 800785c:	2d00      	cmp	r5, #0
 800785e:	4606      	mov	r6, r0
 8007860:	db01      	blt.n	8007866 <_malloc_r+0x1a>
 8007862:	42a9      	cmp	r1, r5
 8007864:	d903      	bls.n	800786e <_malloc_r+0x22>
 8007866:	230c      	movs	r3, #12
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	2000      	movs	r0, #0
 800786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786e:	f000 fdc7 	bl	8008400 <__malloc_lock>
 8007872:	4921      	ldr	r1, [pc, #132]	; (80078f8 <_malloc_r+0xac>)
 8007874:	680a      	ldr	r2, [r1, #0]
 8007876:	4614      	mov	r4, r2
 8007878:	b99c      	cbnz	r4, 80078a2 <_malloc_r+0x56>
 800787a:	4f20      	ldr	r7, [pc, #128]	; (80078fc <_malloc_r+0xb0>)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	b923      	cbnz	r3, 800788a <_malloc_r+0x3e>
 8007880:	4621      	mov	r1, r4
 8007882:	4630      	mov	r0, r6
 8007884:	f000 faf2 	bl	8007e6c <_sbrk_r>
 8007888:	6038      	str	r0, [r7, #0]
 800788a:	4629      	mov	r1, r5
 800788c:	4630      	mov	r0, r6
 800788e:	f000 faed 	bl	8007e6c <_sbrk_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d123      	bne.n	80078de <_malloc_r+0x92>
 8007896:	230c      	movs	r3, #12
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	4630      	mov	r0, r6
 800789c:	f000 fdb6 	bl	800840c <__malloc_unlock>
 80078a0:	e7e3      	b.n	800786a <_malloc_r+0x1e>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	1b5b      	subs	r3, r3, r5
 80078a6:	d417      	bmi.n	80078d8 <_malloc_r+0x8c>
 80078a8:	2b0b      	cmp	r3, #11
 80078aa:	d903      	bls.n	80078b4 <_malloc_r+0x68>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	441c      	add	r4, r3
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	e004      	b.n	80078be <_malloc_r+0x72>
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	42a2      	cmp	r2, r4
 80078b8:	bf0c      	ite	eq
 80078ba:	600b      	streq	r3, [r1, #0]
 80078bc:	6053      	strne	r3, [r2, #4]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 fda4 	bl	800840c <__malloc_unlock>
 80078c4:	f104 000b 	add.w	r0, r4, #11
 80078c8:	1d23      	adds	r3, r4, #4
 80078ca:	f020 0007 	bic.w	r0, r0, #7
 80078ce:	1ac2      	subs	r2, r0, r3
 80078d0:	d0cc      	beq.n	800786c <_malloc_r+0x20>
 80078d2:	1a1b      	subs	r3, r3, r0
 80078d4:	50a3      	str	r3, [r4, r2]
 80078d6:	e7c9      	b.n	800786c <_malloc_r+0x20>
 80078d8:	4622      	mov	r2, r4
 80078da:	6864      	ldr	r4, [r4, #4]
 80078dc:	e7cc      	b.n	8007878 <_malloc_r+0x2c>
 80078de:	1cc4      	adds	r4, r0, #3
 80078e0:	f024 0403 	bic.w	r4, r4, #3
 80078e4:	42a0      	cmp	r0, r4
 80078e6:	d0e3      	beq.n	80078b0 <_malloc_r+0x64>
 80078e8:	1a21      	subs	r1, r4, r0
 80078ea:	4630      	mov	r0, r6
 80078ec:	f000 fabe 	bl	8007e6c <_sbrk_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d1dd      	bne.n	80078b0 <_malloc_r+0x64>
 80078f4:	e7cf      	b.n	8007896 <_malloc_r+0x4a>
 80078f6:	bf00      	nop
 80078f8:	20000278 	.word	0x20000278
 80078fc:	2000027c 	.word	0x2000027c

08007900 <__ssputs_r>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	688e      	ldr	r6, [r1, #8]
 8007906:	429e      	cmp	r6, r3
 8007908:	4682      	mov	sl, r0
 800790a:	460c      	mov	r4, r1
 800790c:	4690      	mov	r8, r2
 800790e:	461f      	mov	r7, r3
 8007910:	d838      	bhi.n	8007984 <__ssputs_r+0x84>
 8007912:	898a      	ldrh	r2, [r1, #12]
 8007914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007918:	d032      	beq.n	8007980 <__ssputs_r+0x80>
 800791a:	6825      	ldr	r5, [r4, #0]
 800791c:	6909      	ldr	r1, [r1, #16]
 800791e:	eba5 0901 	sub.w	r9, r5, r1
 8007922:	6965      	ldr	r5, [r4, #20]
 8007924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800792c:	3301      	adds	r3, #1
 800792e:	444b      	add	r3, r9
 8007930:	106d      	asrs	r5, r5, #1
 8007932:	429d      	cmp	r5, r3
 8007934:	bf38      	it	cc
 8007936:	461d      	movcc	r5, r3
 8007938:	0553      	lsls	r3, r2, #21
 800793a:	d531      	bpl.n	80079a0 <__ssputs_r+0xa0>
 800793c:	4629      	mov	r1, r5
 800793e:	f7ff ff85 	bl	800784c <_malloc_r>
 8007942:	4606      	mov	r6, r0
 8007944:	b950      	cbnz	r0, 800795c <__ssputs_r+0x5c>
 8007946:	230c      	movs	r3, #12
 8007948:	f8ca 3000 	str.w	r3, [sl]
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795c:	6921      	ldr	r1, [r4, #16]
 800795e:	464a      	mov	r2, r9
 8007960:	f7ff fb88 	bl	8007074 <memcpy>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	6126      	str	r6, [r4, #16]
 8007972:	6165      	str	r5, [r4, #20]
 8007974:	444e      	add	r6, r9
 8007976:	eba5 0509 	sub.w	r5, r5, r9
 800797a:	6026      	str	r6, [r4, #0]
 800797c:	60a5      	str	r5, [r4, #8]
 800797e:	463e      	mov	r6, r7
 8007980:	42be      	cmp	r6, r7
 8007982:	d900      	bls.n	8007986 <__ssputs_r+0x86>
 8007984:	463e      	mov	r6, r7
 8007986:	4632      	mov	r2, r6
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	4641      	mov	r1, r8
 800798c:	f000 fd1e 	bl	80083cc <memmove>
 8007990:	68a3      	ldr	r3, [r4, #8]
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	1b9b      	subs	r3, r3, r6
 8007996:	4432      	add	r2, r6
 8007998:	60a3      	str	r3, [r4, #8]
 800799a:	6022      	str	r2, [r4, #0]
 800799c:	2000      	movs	r0, #0
 800799e:	e7db      	b.n	8007958 <__ssputs_r+0x58>
 80079a0:	462a      	mov	r2, r5
 80079a2:	f000 fd39 	bl	8008418 <_realloc_r>
 80079a6:	4606      	mov	r6, r0
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d1e1      	bne.n	8007970 <__ssputs_r+0x70>
 80079ac:	6921      	ldr	r1, [r4, #16]
 80079ae:	4650      	mov	r0, sl
 80079b0:	f7ff fefc 	bl	80077ac <_free_r>
 80079b4:	e7c7      	b.n	8007946 <__ssputs_r+0x46>
	...

080079b8 <_svfiprintf_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	4698      	mov	r8, r3
 80079be:	898b      	ldrh	r3, [r1, #12]
 80079c0:	061b      	lsls	r3, r3, #24
 80079c2:	b09d      	sub	sp, #116	; 0x74
 80079c4:	4607      	mov	r7, r0
 80079c6:	460d      	mov	r5, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	d50e      	bpl.n	80079ea <_svfiprintf_r+0x32>
 80079cc:	690b      	ldr	r3, [r1, #16]
 80079ce:	b963      	cbnz	r3, 80079ea <_svfiprintf_r+0x32>
 80079d0:	2140      	movs	r1, #64	; 0x40
 80079d2:	f7ff ff3b 	bl	800784c <_malloc_r>
 80079d6:	6028      	str	r0, [r5, #0]
 80079d8:	6128      	str	r0, [r5, #16]
 80079da:	b920      	cbnz	r0, 80079e6 <_svfiprintf_r+0x2e>
 80079dc:	230c      	movs	r3, #12
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	e0d1      	b.n	8007b8a <_svfiprintf_r+0x1d2>
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	616b      	str	r3, [r5, #20]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	2320      	movs	r3, #32
 80079f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079f8:	2330      	movs	r3, #48	; 0x30
 80079fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ba4 <_svfiprintf_r+0x1ec>
 80079fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a02:	f04f 0901 	mov.w	r9, #1
 8007a06:	4623      	mov	r3, r4
 8007a08:	469a      	mov	sl, r3
 8007a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a0e:	b10a      	cbz	r2, 8007a14 <_svfiprintf_r+0x5c>
 8007a10:	2a25      	cmp	r2, #37	; 0x25
 8007a12:	d1f9      	bne.n	8007a08 <_svfiprintf_r+0x50>
 8007a14:	ebba 0b04 	subs.w	fp, sl, r4
 8007a18:	d00b      	beq.n	8007a32 <_svfiprintf_r+0x7a>
 8007a1a:	465b      	mov	r3, fp
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff6d 	bl	8007900 <__ssputs_r>
 8007a26:	3001      	adds	r0, #1
 8007a28:	f000 80aa 	beq.w	8007b80 <_svfiprintf_r+0x1c8>
 8007a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2e:	445a      	add	r2, fp
 8007a30:	9209      	str	r2, [sp, #36]	; 0x24
 8007a32:	f89a 3000 	ldrb.w	r3, [sl]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80a2 	beq.w	8007b80 <_svfiprintf_r+0x1c8>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a46:	f10a 0a01 	add.w	sl, sl, #1
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a52:	931a      	str	r3, [sp, #104]	; 0x68
 8007a54:	4654      	mov	r4, sl
 8007a56:	2205      	movs	r2, #5
 8007a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5c:	4851      	ldr	r0, [pc, #324]	; (8007ba4 <_svfiprintf_r+0x1ec>)
 8007a5e:	f7f8 fbc7 	bl	80001f0 <memchr>
 8007a62:	9a04      	ldr	r2, [sp, #16]
 8007a64:	b9d8      	cbnz	r0, 8007a9e <_svfiprintf_r+0xe6>
 8007a66:	06d0      	lsls	r0, r2, #27
 8007a68:	bf44      	itt	mi
 8007a6a:	2320      	movmi	r3, #32
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a70:	0711      	lsls	r1, r2, #28
 8007a72:	bf44      	itt	mi
 8007a74:	232b      	movmi	r3, #43	; 0x2b
 8007a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a80:	d015      	beq.n	8007aae <_svfiprintf_r+0xf6>
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	4654      	mov	r4, sl
 8007a86:	2000      	movs	r0, #0
 8007a88:	f04f 0c0a 	mov.w	ip, #10
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a92:	3b30      	subs	r3, #48	; 0x30
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d94e      	bls.n	8007b36 <_svfiprintf_r+0x17e>
 8007a98:	b1b0      	cbz	r0, 8007ac8 <_svfiprintf_r+0x110>
 8007a9a:	9207      	str	r2, [sp, #28]
 8007a9c:	e014      	b.n	8007ac8 <_svfiprintf_r+0x110>
 8007a9e:	eba0 0308 	sub.w	r3, r0, r8
 8007aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	46a2      	mov	sl, r4
 8007aac:	e7d2      	b.n	8007a54 <_svfiprintf_r+0x9c>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	1d19      	adds	r1, r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	9103      	str	r1, [sp, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfbb      	ittet	lt
 8007aba:	425b      	neglt	r3, r3
 8007abc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac0:	9307      	strge	r3, [sp, #28]
 8007ac2:	9307      	strlt	r3, [sp, #28]
 8007ac4:	bfb8      	it	lt
 8007ac6:	9204      	strlt	r2, [sp, #16]
 8007ac8:	7823      	ldrb	r3, [r4, #0]
 8007aca:	2b2e      	cmp	r3, #46	; 0x2e
 8007acc:	d10c      	bne.n	8007ae8 <_svfiprintf_r+0x130>
 8007ace:	7863      	ldrb	r3, [r4, #1]
 8007ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad2:	d135      	bne.n	8007b40 <_svfiprintf_r+0x188>
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	1d1a      	adds	r2, r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	9203      	str	r2, [sp, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bfb8      	it	lt
 8007ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ae4:	3402      	adds	r4, #2
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bb4 <_svfiprintf_r+0x1fc>
 8007aec:	7821      	ldrb	r1, [r4, #0]
 8007aee:	2203      	movs	r2, #3
 8007af0:	4650      	mov	r0, sl
 8007af2:	f7f8 fb7d 	bl	80001f0 <memchr>
 8007af6:	b140      	cbz	r0, 8007b0a <_svfiprintf_r+0x152>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	eba0 000a 	sub.w	r0, r0, sl
 8007afe:	fa03 f000 	lsl.w	r0, r3, r0
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	4303      	orrs	r3, r0
 8007b06:	3401      	adds	r4, #1
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0e:	4826      	ldr	r0, [pc, #152]	; (8007ba8 <_svfiprintf_r+0x1f0>)
 8007b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b14:	2206      	movs	r2, #6
 8007b16:	f7f8 fb6b 	bl	80001f0 <memchr>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d038      	beq.n	8007b90 <_svfiprintf_r+0x1d8>
 8007b1e:	4b23      	ldr	r3, [pc, #140]	; (8007bac <_svfiprintf_r+0x1f4>)
 8007b20:	bb1b      	cbnz	r3, 8007b6a <_svfiprintf_r+0x1b2>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	3307      	adds	r3, #7
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	4433      	add	r3, r6
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	e767      	b.n	8007a06 <_svfiprintf_r+0x4e>
 8007b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	e7a5      	b.n	8007a8c <_svfiprintf_r+0xd4>
 8007b40:	2300      	movs	r3, #0
 8007b42:	3401      	adds	r4, #1
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4619      	mov	r1, r3
 8007b48:	f04f 0c0a 	mov.w	ip, #10
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b52:	3a30      	subs	r2, #48	; 0x30
 8007b54:	2a09      	cmp	r2, #9
 8007b56:	d903      	bls.n	8007b60 <_svfiprintf_r+0x1a8>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0c5      	beq.n	8007ae8 <_svfiprintf_r+0x130>
 8007b5c:	9105      	str	r1, [sp, #20]
 8007b5e:	e7c3      	b.n	8007ae8 <_svfiprintf_r+0x130>
 8007b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b64:	4604      	mov	r4, r0
 8007b66:	2301      	movs	r3, #1
 8007b68:	e7f0      	b.n	8007b4c <_svfiprintf_r+0x194>
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <_svfiprintf_r+0x1f8>)
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	4638      	mov	r0, r7
 8007b76:	f7fd fefd 	bl	8005974 <_printf_float>
 8007b7a:	1c42      	adds	r2, r0, #1
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	d1d6      	bne.n	8007b2e <_svfiprintf_r+0x176>
 8007b80:	89ab      	ldrh	r3, [r5, #12]
 8007b82:	065b      	lsls	r3, r3, #25
 8007b84:	f53f af2c 	bmi.w	80079e0 <_svfiprintf_r+0x28>
 8007b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8a:	b01d      	add	sp, #116	; 0x74
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	462a      	mov	r2, r5
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <_svfiprintf_r+0x1f8>)
 8007b98:	a904      	add	r1, sp, #16
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7fe f98e 	bl	8005ebc <_printf_i>
 8007ba0:	e7eb      	b.n	8007b7a <_svfiprintf_r+0x1c2>
 8007ba2:	bf00      	nop
 8007ba4:	08008a8c 	.word	0x08008a8c
 8007ba8:	08008a96 	.word	0x08008a96
 8007bac:	08005975 	.word	0x08005975
 8007bb0:	08007901 	.word	0x08007901
 8007bb4:	08008a92 	.word	0x08008a92

08007bb8 <__sfputc_r>:
 8007bb8:	6893      	ldr	r3, [r2, #8]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	b410      	push	{r4}
 8007bc0:	6093      	str	r3, [r2, #8]
 8007bc2:	da08      	bge.n	8007bd6 <__sfputc_r+0x1e>
 8007bc4:	6994      	ldr	r4, [r2, #24]
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	db01      	blt.n	8007bce <__sfputc_r+0x16>
 8007bca:	290a      	cmp	r1, #10
 8007bcc:	d103      	bne.n	8007bd6 <__sfputc_r+0x1e>
 8007bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd2:	f000 b99f 	b.w	8007f14 <__swbuf_r>
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	1c58      	adds	r0, r3, #1
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	7019      	strb	r1, [r3, #0]
 8007bde:	4608      	mov	r0, r1
 8007be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <__sfputs_r>:
 8007be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	18d5      	adds	r5, r2, r3
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	d101      	bne.n	8007bf8 <__sfputs_r+0x12>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e007      	b.n	8007c08 <__sfputs_r+0x22>
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	463a      	mov	r2, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ffda 	bl	8007bb8 <__sfputc_r>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d1f3      	bne.n	8007bf0 <__sfputs_r+0xa>
 8007c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c0c <_vfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	460d      	mov	r5, r1
 8007c12:	b09d      	sub	sp, #116	; 0x74
 8007c14:	4614      	mov	r4, r2
 8007c16:	4698      	mov	r8, r3
 8007c18:	4606      	mov	r6, r0
 8007c1a:	b118      	cbz	r0, 8007c24 <_vfiprintf_r+0x18>
 8007c1c:	6983      	ldr	r3, [r0, #24]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <_vfiprintf_r+0x18>
 8007c20:	f7ff f97a 	bl	8006f18 <__sinit>
 8007c24:	4b89      	ldr	r3, [pc, #548]	; (8007e4c <_vfiprintf_r+0x240>)
 8007c26:	429d      	cmp	r5, r3
 8007c28:	d11b      	bne.n	8007c62 <_vfiprintf_r+0x56>
 8007c2a:	6875      	ldr	r5, [r6, #4]
 8007c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	d405      	bmi.n	8007c3e <_vfiprintf_r+0x32>
 8007c32:	89ab      	ldrh	r3, [r5, #12]
 8007c34:	059a      	lsls	r2, r3, #22
 8007c36:	d402      	bmi.n	8007c3e <_vfiprintf_r+0x32>
 8007c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c3a:	f7ff fa10 	bl	800705e <__retarget_lock_acquire_recursive>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	071b      	lsls	r3, r3, #28
 8007c42:	d501      	bpl.n	8007c48 <_vfiprintf_r+0x3c>
 8007c44:	692b      	ldr	r3, [r5, #16]
 8007c46:	b9eb      	cbnz	r3, 8007c84 <_vfiprintf_r+0x78>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f9c6 	bl	8007fdc <__swsetup_r>
 8007c50:	b1c0      	cbz	r0, 8007c84 <_vfiprintf_r+0x78>
 8007c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c54:	07dc      	lsls	r4, r3, #31
 8007c56:	d50e      	bpl.n	8007c76 <_vfiprintf_r+0x6a>
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	b01d      	add	sp, #116	; 0x74
 8007c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c62:	4b7b      	ldr	r3, [pc, #492]	; (8007e50 <_vfiprintf_r+0x244>)
 8007c64:	429d      	cmp	r5, r3
 8007c66:	d101      	bne.n	8007c6c <_vfiprintf_r+0x60>
 8007c68:	68b5      	ldr	r5, [r6, #8]
 8007c6a:	e7df      	b.n	8007c2c <_vfiprintf_r+0x20>
 8007c6c:	4b79      	ldr	r3, [pc, #484]	; (8007e54 <_vfiprintf_r+0x248>)
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	bf08      	it	eq
 8007c72:	68f5      	ldreq	r5, [r6, #12]
 8007c74:	e7da      	b.n	8007c2c <_vfiprintf_r+0x20>
 8007c76:	89ab      	ldrh	r3, [r5, #12]
 8007c78:	0598      	lsls	r0, r3, #22
 8007c7a:	d4ed      	bmi.n	8007c58 <_vfiprintf_r+0x4c>
 8007c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c7e:	f7ff f9ef 	bl	8007060 <__retarget_lock_release_recursive>
 8007c82:	e7e9      	b.n	8007c58 <_vfiprintf_r+0x4c>
 8007c84:	2300      	movs	r3, #0
 8007c86:	9309      	str	r3, [sp, #36]	; 0x24
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c92:	2330      	movs	r3, #48	; 0x30
 8007c94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e58 <_vfiprintf_r+0x24c>
 8007c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c9c:	f04f 0901 	mov.w	r9, #1
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	469a      	mov	sl, r3
 8007ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca8:	b10a      	cbz	r2, 8007cae <_vfiprintf_r+0xa2>
 8007caa:	2a25      	cmp	r2, #37	; 0x25
 8007cac:	d1f9      	bne.n	8007ca2 <_vfiprintf_r+0x96>
 8007cae:	ebba 0b04 	subs.w	fp, sl, r4
 8007cb2:	d00b      	beq.n	8007ccc <_vfiprintf_r+0xc0>
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7ff ff93 	bl	8007be6 <__sfputs_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f000 80aa 	beq.w	8007e1a <_vfiprintf_r+0x20e>
 8007cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cc8:	445a      	add	r2, fp
 8007cca:	9209      	str	r2, [sp, #36]	; 0x24
 8007ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80a2 	beq.w	8007e1a <_vfiprintf_r+0x20e>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce0:	f10a 0a01 	add.w	sl, sl, #1
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	9307      	str	r3, [sp, #28]
 8007ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cec:	931a      	str	r3, [sp, #104]	; 0x68
 8007cee:	4654      	mov	r4, sl
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf6:	4858      	ldr	r0, [pc, #352]	; (8007e58 <_vfiprintf_r+0x24c>)
 8007cf8:	f7f8 fa7a 	bl	80001f0 <memchr>
 8007cfc:	9a04      	ldr	r2, [sp, #16]
 8007cfe:	b9d8      	cbnz	r0, 8007d38 <_vfiprintf_r+0x12c>
 8007d00:	06d1      	lsls	r1, r2, #27
 8007d02:	bf44      	itt	mi
 8007d04:	2320      	movmi	r3, #32
 8007d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0a:	0713      	lsls	r3, r2, #28
 8007d0c:	bf44      	itt	mi
 8007d0e:	232b      	movmi	r3, #43	; 0x2b
 8007d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d14:	f89a 3000 	ldrb.w	r3, [sl]
 8007d18:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1a:	d015      	beq.n	8007d48 <_vfiprintf_r+0x13c>
 8007d1c:	9a07      	ldr	r2, [sp, #28]
 8007d1e:	4654      	mov	r4, sl
 8007d20:	2000      	movs	r0, #0
 8007d22:	f04f 0c0a 	mov.w	ip, #10
 8007d26:	4621      	mov	r1, r4
 8007d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d2c:	3b30      	subs	r3, #48	; 0x30
 8007d2e:	2b09      	cmp	r3, #9
 8007d30:	d94e      	bls.n	8007dd0 <_vfiprintf_r+0x1c4>
 8007d32:	b1b0      	cbz	r0, 8007d62 <_vfiprintf_r+0x156>
 8007d34:	9207      	str	r2, [sp, #28]
 8007d36:	e014      	b.n	8007d62 <_vfiprintf_r+0x156>
 8007d38:	eba0 0308 	sub.w	r3, r0, r8
 8007d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d40:	4313      	orrs	r3, r2
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	46a2      	mov	sl, r4
 8007d46:	e7d2      	b.n	8007cee <_vfiprintf_r+0xe2>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	1d19      	adds	r1, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9103      	str	r1, [sp, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfbb      	ittet	lt
 8007d54:	425b      	neglt	r3, r3
 8007d56:	f042 0202 	orrlt.w	r2, r2, #2
 8007d5a:	9307      	strge	r3, [sp, #28]
 8007d5c:	9307      	strlt	r3, [sp, #28]
 8007d5e:	bfb8      	it	lt
 8007d60:	9204      	strlt	r2, [sp, #16]
 8007d62:	7823      	ldrb	r3, [r4, #0]
 8007d64:	2b2e      	cmp	r3, #46	; 0x2e
 8007d66:	d10c      	bne.n	8007d82 <_vfiprintf_r+0x176>
 8007d68:	7863      	ldrb	r3, [r4, #1]
 8007d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6c:	d135      	bne.n	8007dda <_vfiprintf_r+0x1ce>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	9203      	str	r2, [sp, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfb8      	it	lt
 8007d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d7e:	3402      	adds	r4, #2
 8007d80:	9305      	str	r3, [sp, #20]
 8007d82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e68 <_vfiprintf_r+0x25c>
 8007d86:	7821      	ldrb	r1, [r4, #0]
 8007d88:	2203      	movs	r2, #3
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	f7f8 fa30 	bl	80001f0 <memchr>
 8007d90:	b140      	cbz	r0, 8007da4 <_vfiprintf_r+0x198>
 8007d92:	2340      	movs	r3, #64	; 0x40
 8007d94:	eba0 000a 	sub.w	r0, r0, sl
 8007d98:	fa03 f000 	lsl.w	r0, r3, r0
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	4303      	orrs	r3, r0
 8007da0:	3401      	adds	r4, #1
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da8:	482c      	ldr	r0, [pc, #176]	; (8007e5c <_vfiprintf_r+0x250>)
 8007daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dae:	2206      	movs	r2, #6
 8007db0:	f7f8 fa1e 	bl	80001f0 <memchr>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d03f      	beq.n	8007e38 <_vfiprintf_r+0x22c>
 8007db8:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <_vfiprintf_r+0x254>)
 8007dba:	bb1b      	cbnz	r3, 8007e04 <_vfiprintf_r+0x1f8>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	3307      	adds	r3, #7
 8007dc0:	f023 0307 	bic.w	r3, r3, #7
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dca:	443b      	add	r3, r7
 8007dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dce:	e767      	b.n	8007ca0 <_vfiprintf_r+0x94>
 8007dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7a5      	b.n	8007d26 <_vfiprintf_r+0x11a>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	3401      	adds	r4, #1
 8007dde:	9305      	str	r3, [sp, #20]
 8007de0:	4619      	mov	r1, r3
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	4620      	mov	r0, r4
 8007de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dec:	3a30      	subs	r2, #48	; 0x30
 8007dee:	2a09      	cmp	r2, #9
 8007df0:	d903      	bls.n	8007dfa <_vfiprintf_r+0x1ee>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0c5      	beq.n	8007d82 <_vfiprintf_r+0x176>
 8007df6:	9105      	str	r1, [sp, #20]
 8007df8:	e7c3      	b.n	8007d82 <_vfiprintf_r+0x176>
 8007dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dfe:	4604      	mov	r4, r0
 8007e00:	2301      	movs	r3, #1
 8007e02:	e7f0      	b.n	8007de6 <_vfiprintf_r+0x1da>
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4b16      	ldr	r3, [pc, #88]	; (8007e64 <_vfiprintf_r+0x258>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7fd fdb0 	bl	8005974 <_printf_float>
 8007e14:	4607      	mov	r7, r0
 8007e16:	1c78      	adds	r0, r7, #1
 8007e18:	d1d6      	bne.n	8007dc8 <_vfiprintf_r+0x1bc>
 8007e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e1c:	07d9      	lsls	r1, r3, #31
 8007e1e:	d405      	bmi.n	8007e2c <_vfiprintf_r+0x220>
 8007e20:	89ab      	ldrh	r3, [r5, #12]
 8007e22:	059a      	lsls	r2, r3, #22
 8007e24:	d402      	bmi.n	8007e2c <_vfiprintf_r+0x220>
 8007e26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e28:	f7ff f91a 	bl	8007060 <__retarget_lock_release_recursive>
 8007e2c:	89ab      	ldrh	r3, [r5, #12]
 8007e2e:	065b      	lsls	r3, r3, #25
 8007e30:	f53f af12 	bmi.w	8007c58 <_vfiprintf_r+0x4c>
 8007e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e36:	e711      	b.n	8007c5c <_vfiprintf_r+0x50>
 8007e38:	ab03      	add	r3, sp, #12
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <_vfiprintf_r+0x258>)
 8007e40:	a904      	add	r1, sp, #16
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7fe f83a 	bl	8005ebc <_printf_i>
 8007e48:	e7e4      	b.n	8007e14 <_vfiprintf_r+0x208>
 8007e4a:	bf00      	nop
 8007e4c:	080088ec 	.word	0x080088ec
 8007e50:	0800890c 	.word	0x0800890c
 8007e54:	080088cc 	.word	0x080088cc
 8007e58:	08008a8c 	.word	0x08008a8c
 8007e5c:	08008a96 	.word	0x08008a96
 8007e60:	08005975 	.word	0x08005975
 8007e64:	08007be7 	.word	0x08007be7
 8007e68:	08008a92 	.word	0x08008a92

08007e6c <_sbrk_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_sbrk_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7f9 ff42 	bl	8001d00 <_sbrk>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_sbrk_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_sbrk_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000328 	.word	0x20000328

08007e8c <__sread>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	f000 fae6 	bl	8008464 <_read_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	bfab      	itete	ge
 8007e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea0:	181b      	addge	r3, r3, r0
 8007ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ea6:	bfac      	ite	ge
 8007ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eaa:	81a3      	strhlt	r3, [r4, #12]
 8007eac:	bd10      	pop	{r4, pc}

08007eae <__swrite>:
 8007eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	898b      	ldrh	r3, [r1, #12]
 8007eb6:	05db      	lsls	r3, r3, #23
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	d505      	bpl.n	8007ecc <__swrite+0x1e>
 8007ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f000 f9f8 	bl	80082bc <_lseek_r>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	4632      	mov	r2, r6
 8007eda:	463b      	mov	r3, r7
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	f000 b869 	b.w	8007fb8 <_write_r>

08007ee6 <__sseek>:
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	460c      	mov	r4, r1
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 f9e5 	bl	80082bc <_lseek_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	bf15      	itete	ne
 8007ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f02:	81a3      	strheq	r3, [r4, #12]
 8007f04:	bf18      	it	ne
 8007f06:	81a3      	strhne	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__sclose>:
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 b8f1 	b.w	80080f4 <_close_r>
	...

08007f14 <__swbuf_r>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	460e      	mov	r6, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	b118      	cbz	r0, 8007f26 <__swbuf_r+0x12>
 8007f1e:	6983      	ldr	r3, [r0, #24]
 8007f20:	b90b      	cbnz	r3, 8007f26 <__swbuf_r+0x12>
 8007f22:	f7fe fff9 	bl	8006f18 <__sinit>
 8007f26:	4b21      	ldr	r3, [pc, #132]	; (8007fac <__swbuf_r+0x98>)
 8007f28:	429c      	cmp	r4, r3
 8007f2a:	d12b      	bne.n	8007f84 <__swbuf_r+0x70>
 8007f2c:	686c      	ldr	r4, [r5, #4]
 8007f2e:	69a3      	ldr	r3, [r4, #24]
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	071a      	lsls	r2, r3, #28
 8007f36:	d52f      	bpl.n	8007f98 <__swbuf_r+0x84>
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	b36b      	cbz	r3, 8007f98 <__swbuf_r+0x84>
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	6820      	ldr	r0, [r4, #0]
 8007f40:	1ac0      	subs	r0, r0, r3
 8007f42:	6963      	ldr	r3, [r4, #20]
 8007f44:	b2f6      	uxtb	r6, r6
 8007f46:	4283      	cmp	r3, r0
 8007f48:	4637      	mov	r7, r6
 8007f4a:	dc04      	bgt.n	8007f56 <__swbuf_r+0x42>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f966 	bl	8008220 <_fflush_r>
 8007f54:	bb30      	cbnz	r0, 8007fa4 <__swbuf_r+0x90>
 8007f56:	68a3      	ldr	r3, [r4, #8]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	60a3      	str	r3, [r4, #8]
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	6022      	str	r2, [r4, #0]
 8007f62:	701e      	strb	r6, [r3, #0]
 8007f64:	6963      	ldr	r3, [r4, #20]
 8007f66:	3001      	adds	r0, #1
 8007f68:	4283      	cmp	r3, r0
 8007f6a:	d004      	beq.n	8007f76 <__swbuf_r+0x62>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	07db      	lsls	r3, r3, #31
 8007f70:	d506      	bpl.n	8007f80 <__swbuf_r+0x6c>
 8007f72:	2e0a      	cmp	r6, #10
 8007f74:	d104      	bne.n	8007f80 <__swbuf_r+0x6c>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f951 	bl	8008220 <_fflush_r>
 8007f7e:	b988      	cbnz	r0, 8007fa4 <__swbuf_r+0x90>
 8007f80:	4638      	mov	r0, r7
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <__swbuf_r+0x9c>)
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d101      	bne.n	8007f8e <__swbuf_r+0x7a>
 8007f8a:	68ac      	ldr	r4, [r5, #8]
 8007f8c:	e7cf      	b.n	8007f2e <__swbuf_r+0x1a>
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <__swbuf_r+0xa0>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	bf08      	it	eq
 8007f94:	68ec      	ldreq	r4, [r5, #12]
 8007f96:	e7ca      	b.n	8007f2e <__swbuf_r+0x1a>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 f81e 	bl	8007fdc <__swsetup_r>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d0cb      	beq.n	8007f3c <__swbuf_r+0x28>
 8007fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8007fa8:	e7ea      	b.n	8007f80 <__swbuf_r+0x6c>
 8007faa:	bf00      	nop
 8007fac:	080088ec 	.word	0x080088ec
 8007fb0:	0800890c 	.word	0x0800890c
 8007fb4:	080088cc 	.word	0x080088cc

08007fb8 <_write_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	; (8007fd8 <_write_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7f9 fe49 	bl	8001c5e <_write>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_write_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_write_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000328 	.word	0x20000328

08007fdc <__swsetup_r>:
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <__swsetup_r+0xcc>)
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b125      	cbz	r5, 8007ff2 <__swsetup_r+0x16>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__swsetup_r+0x16>
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7fe ff93 	bl	8006f18 <__sinit>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__swsetup_r+0xd0>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d10f      	bne.n	8008018 <__swsetup_r+0x3c>
 8007ff8:	686c      	ldr	r4, [r5, #4]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	d42c      	bmi.n	800805e <__swsetup_r+0x82>
 8008004:	06dd      	lsls	r5, r3, #27
 8008006:	d411      	bmi.n	800802c <__swsetup_r+0x50>
 8008008:	2309      	movs	r3, #9
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	e03e      	b.n	8008096 <__swsetup_r+0xba>
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <__swsetup_r+0xd4>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swsetup_r+0x46>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7eb      	b.n	8007ffa <__swsetup_r+0x1e>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__swsetup_r+0xd8>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7e6      	b.n	8007ffa <__swsetup_r+0x1e>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x7a>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x6a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x66>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fbb5 	bl	80077ac <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x9a>
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f959 	bl	8008328 <__smakebuf_r>
 8008076:	89a0      	ldrh	r0, [r4, #12]
 8008078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807c:	f010 0301 	ands.w	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <__swsetup_r+0xbc>
 8008082:	2300      	movs	r3, #0
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	425b      	negs	r3, r3
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b943      	cbnz	r3, 80080a2 <__swsetup_r+0xc6>
 8008090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008094:	d1ba      	bne.n	800800c <__swsetup_r+0x30>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	0781      	lsls	r1, r0, #30
 800809a:	bf58      	it	pl
 800809c:	6963      	ldrpl	r3, [r4, #20]
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7f4      	b.n	800808c <__swsetup_r+0xb0>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e7f7      	b.n	8008096 <__swsetup_r+0xba>
 80080a6:	bf00      	nop
 80080a8:	2000000c 	.word	0x2000000c
 80080ac:	080088ec 	.word	0x080088ec
 80080b0:	0800890c 	.word	0x0800890c
 80080b4:	080088cc 	.word	0x080088cc

080080b8 <__assert_func>:
 80080b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ba:	4614      	mov	r4, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <__assert_func+0x2c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	68d8      	ldr	r0, [r3, #12]
 80080c6:	b14c      	cbz	r4, 80080dc <__assert_func+0x24>
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <__assert_func+0x30>)
 80080ca:	9100      	str	r1, [sp, #0]
 80080cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080d0:	4906      	ldr	r1, [pc, #24]	; (80080ec <__assert_func+0x34>)
 80080d2:	462b      	mov	r3, r5
 80080d4:	f000 f8e0 	bl	8008298 <fiprintf>
 80080d8:	f000 f9e3 	bl	80084a2 <abort>
 80080dc:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <__assert_func+0x38>)
 80080de:	461c      	mov	r4, r3
 80080e0:	e7f3      	b.n	80080ca <__assert_func+0x12>
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c
 80080e8:	08008a9d 	.word	0x08008a9d
 80080ec:	08008aaa 	.word	0x08008aaa
 80080f0:	08008ad8 	.word	0x08008ad8

080080f4 <_close_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d06      	ldr	r5, [pc, #24]	; (8008110 <_close_r+0x1c>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	602b      	str	r3, [r5, #0]
 8008100:	f7f9 fdc9 	bl	8001c96 <_close>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_close_r+0x1a>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_close_r+0x1a>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20000328 	.word	0x20000328

08008114 <__sflush_r>:
 8008114:	898a      	ldrh	r2, [r1, #12]
 8008116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	4605      	mov	r5, r0
 800811c:	0710      	lsls	r0, r2, #28
 800811e:	460c      	mov	r4, r1
 8008120:	d458      	bmi.n	80081d4 <__sflush_r+0xc0>
 8008122:	684b      	ldr	r3, [r1, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	dc05      	bgt.n	8008134 <__sflush_r+0x20>
 8008128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	dc02      	bgt.n	8008134 <__sflush_r+0x20>
 800812e:	2000      	movs	r0, #0
 8008130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008136:	2e00      	cmp	r6, #0
 8008138:	d0f9      	beq.n	800812e <__sflush_r+0x1a>
 800813a:	2300      	movs	r3, #0
 800813c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008140:	682f      	ldr	r7, [r5, #0]
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	d032      	beq.n	80081ac <__sflush_r+0x98>
 8008146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	075a      	lsls	r2, r3, #29
 800814c:	d505      	bpl.n	800815a <__sflush_r+0x46>
 800814e:	6863      	ldr	r3, [r4, #4]
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008154:	b10b      	cbz	r3, 800815a <__sflush_r+0x46>
 8008156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008158:	1ac0      	subs	r0, r0, r3
 800815a:	2300      	movs	r3, #0
 800815c:	4602      	mov	r2, r0
 800815e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008160:	6a21      	ldr	r1, [r4, #32]
 8008162:	4628      	mov	r0, r5
 8008164:	47b0      	blx	r6
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	d106      	bne.n	800817a <__sflush_r+0x66>
 800816c:	6829      	ldr	r1, [r5, #0]
 800816e:	291d      	cmp	r1, #29
 8008170:	d82c      	bhi.n	80081cc <__sflush_r+0xb8>
 8008172:	4a2a      	ldr	r2, [pc, #168]	; (800821c <__sflush_r+0x108>)
 8008174:	40ca      	lsrs	r2, r1
 8008176:	07d6      	lsls	r6, r2, #31
 8008178:	d528      	bpl.n	80081cc <__sflush_r+0xb8>
 800817a:	2200      	movs	r2, #0
 800817c:	6062      	str	r2, [r4, #4]
 800817e:	04d9      	lsls	r1, r3, #19
 8008180:	6922      	ldr	r2, [r4, #16]
 8008182:	6022      	str	r2, [r4, #0]
 8008184:	d504      	bpl.n	8008190 <__sflush_r+0x7c>
 8008186:	1c42      	adds	r2, r0, #1
 8008188:	d101      	bne.n	800818e <__sflush_r+0x7a>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	b903      	cbnz	r3, 8008190 <__sflush_r+0x7c>
 800818e:	6560      	str	r0, [r4, #84]	; 0x54
 8008190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008192:	602f      	str	r7, [r5, #0]
 8008194:	2900      	cmp	r1, #0
 8008196:	d0ca      	beq.n	800812e <__sflush_r+0x1a>
 8008198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800819c:	4299      	cmp	r1, r3
 800819e:	d002      	beq.n	80081a6 <__sflush_r+0x92>
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7ff fb03 	bl	80077ac <_free_r>
 80081a6:	2000      	movs	r0, #0
 80081a8:	6360      	str	r0, [r4, #52]	; 0x34
 80081aa:	e7c1      	b.n	8008130 <__sflush_r+0x1c>
 80081ac:	6a21      	ldr	r1, [r4, #32]
 80081ae:	2301      	movs	r3, #1
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b0      	blx	r6
 80081b4:	1c41      	adds	r1, r0, #1
 80081b6:	d1c7      	bne.n	8008148 <__sflush_r+0x34>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0c4      	beq.n	8008148 <__sflush_r+0x34>
 80081be:	2b1d      	cmp	r3, #29
 80081c0:	d001      	beq.n	80081c6 <__sflush_r+0xb2>
 80081c2:	2b16      	cmp	r3, #22
 80081c4:	d101      	bne.n	80081ca <__sflush_r+0xb6>
 80081c6:	602f      	str	r7, [r5, #0]
 80081c8:	e7b1      	b.n	800812e <__sflush_r+0x1a>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	e7ad      	b.n	8008130 <__sflush_r+0x1c>
 80081d4:	690f      	ldr	r7, [r1, #16]
 80081d6:	2f00      	cmp	r7, #0
 80081d8:	d0a9      	beq.n	800812e <__sflush_r+0x1a>
 80081da:	0793      	lsls	r3, r2, #30
 80081dc:	680e      	ldr	r6, [r1, #0]
 80081de:	bf08      	it	eq
 80081e0:	694b      	ldreq	r3, [r1, #20]
 80081e2:	600f      	str	r7, [r1, #0]
 80081e4:	bf18      	it	ne
 80081e6:	2300      	movne	r3, #0
 80081e8:	eba6 0807 	sub.w	r8, r6, r7
 80081ec:	608b      	str	r3, [r1, #8]
 80081ee:	f1b8 0f00 	cmp.w	r8, #0
 80081f2:	dd9c      	ble.n	800812e <__sflush_r+0x1a>
 80081f4:	6a21      	ldr	r1, [r4, #32]
 80081f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081f8:	4643      	mov	r3, r8
 80081fa:	463a      	mov	r2, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	2800      	cmp	r0, #0
 8008202:	dc06      	bgt.n	8008212 <__sflush_r+0xfe>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800820a:	81a3      	strh	r3, [r4, #12]
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	e78e      	b.n	8008130 <__sflush_r+0x1c>
 8008212:	4407      	add	r7, r0
 8008214:	eba8 0800 	sub.w	r8, r8, r0
 8008218:	e7e9      	b.n	80081ee <__sflush_r+0xda>
 800821a:	bf00      	nop
 800821c:	20400001 	.word	0x20400001

08008220 <_fflush_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	690b      	ldr	r3, [r1, #16]
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b913      	cbnz	r3, 8008230 <_fflush_r+0x10>
 800822a:	2500      	movs	r5, #0
 800822c:	4628      	mov	r0, r5
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	b118      	cbz	r0, 800823a <_fflush_r+0x1a>
 8008232:	6983      	ldr	r3, [r0, #24]
 8008234:	b90b      	cbnz	r3, 800823a <_fflush_r+0x1a>
 8008236:	f7fe fe6f 	bl	8006f18 <__sinit>
 800823a:	4b14      	ldr	r3, [pc, #80]	; (800828c <_fflush_r+0x6c>)
 800823c:	429c      	cmp	r4, r3
 800823e:	d11b      	bne.n	8008278 <_fflush_r+0x58>
 8008240:	686c      	ldr	r4, [r5, #4]
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0ef      	beq.n	800822a <_fflush_r+0xa>
 800824a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800824c:	07d0      	lsls	r0, r2, #31
 800824e:	d404      	bmi.n	800825a <_fflush_r+0x3a>
 8008250:	0599      	lsls	r1, r3, #22
 8008252:	d402      	bmi.n	800825a <_fflush_r+0x3a>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f7fe ff02 	bl	800705e <__retarget_lock_acquire_recursive>
 800825a:	4628      	mov	r0, r5
 800825c:	4621      	mov	r1, r4
 800825e:	f7ff ff59 	bl	8008114 <__sflush_r>
 8008262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008264:	07da      	lsls	r2, r3, #31
 8008266:	4605      	mov	r5, r0
 8008268:	d4e0      	bmi.n	800822c <_fflush_r+0xc>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	059b      	lsls	r3, r3, #22
 800826e:	d4dd      	bmi.n	800822c <_fflush_r+0xc>
 8008270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008272:	f7fe fef5 	bl	8007060 <__retarget_lock_release_recursive>
 8008276:	e7d9      	b.n	800822c <_fflush_r+0xc>
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <_fflush_r+0x70>)
 800827a:	429c      	cmp	r4, r3
 800827c:	d101      	bne.n	8008282 <_fflush_r+0x62>
 800827e:	68ac      	ldr	r4, [r5, #8]
 8008280:	e7df      	b.n	8008242 <_fflush_r+0x22>
 8008282:	4b04      	ldr	r3, [pc, #16]	; (8008294 <_fflush_r+0x74>)
 8008284:	429c      	cmp	r4, r3
 8008286:	bf08      	it	eq
 8008288:	68ec      	ldreq	r4, [r5, #12]
 800828a:	e7da      	b.n	8008242 <_fflush_r+0x22>
 800828c:	080088ec 	.word	0x080088ec
 8008290:	0800890c 	.word	0x0800890c
 8008294:	080088cc 	.word	0x080088cc

08008298 <fiprintf>:
 8008298:	b40e      	push	{r1, r2, r3}
 800829a:	b503      	push	{r0, r1, lr}
 800829c:	4601      	mov	r1, r0
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <fiprintf+0x20>)
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	6800      	ldr	r0, [r0, #0]
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	f7ff fcaf 	bl	8007c0c <_vfiprintf_r>
 80082ae:	b002      	add	sp, #8
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	2000000c 	.word	0x2000000c

080082bc <_lseek_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_lseek_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f9 fd0a 	bl	8001ce4 <_lseek>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_lseek_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_lseek_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20000328 	.word	0x20000328

080082e0 <__swhatbuf_r>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	460e      	mov	r6, r1
 80082e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e8:	2900      	cmp	r1, #0
 80082ea:	b096      	sub	sp, #88	; 0x58
 80082ec:	4614      	mov	r4, r2
 80082ee:	461d      	mov	r5, r3
 80082f0:	da07      	bge.n	8008302 <__swhatbuf_r+0x22>
 80082f2:	2300      	movs	r3, #0
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	89b3      	ldrh	r3, [r6, #12]
 80082f8:	061a      	lsls	r2, r3, #24
 80082fa:	d410      	bmi.n	800831e <__swhatbuf_r+0x3e>
 80082fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008300:	e00e      	b.n	8008320 <__swhatbuf_r+0x40>
 8008302:	466a      	mov	r2, sp
 8008304:	f000 f8d4 	bl	80084b0 <_fstat_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	dbf2      	blt.n	80082f2 <__swhatbuf_r+0x12>
 800830c:	9a01      	ldr	r2, [sp, #4]
 800830e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008316:	425a      	negs	r2, r3
 8008318:	415a      	adcs	r2, r3
 800831a:	602a      	str	r2, [r5, #0]
 800831c:	e7ee      	b.n	80082fc <__swhatbuf_r+0x1c>
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	2000      	movs	r0, #0
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	b016      	add	sp, #88	; 0x58
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <__smakebuf_r>:
 8008328:	898b      	ldrh	r3, [r1, #12]
 800832a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800832c:	079d      	lsls	r5, r3, #30
 800832e:	4606      	mov	r6, r0
 8008330:	460c      	mov	r4, r1
 8008332:	d507      	bpl.n	8008344 <__smakebuf_r+0x1c>
 8008334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	6123      	str	r3, [r4, #16]
 800833c:	2301      	movs	r3, #1
 800833e:	6163      	str	r3, [r4, #20]
 8008340:	b002      	add	sp, #8
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	ab01      	add	r3, sp, #4
 8008346:	466a      	mov	r2, sp
 8008348:	f7ff ffca 	bl	80082e0 <__swhatbuf_r>
 800834c:	9900      	ldr	r1, [sp, #0]
 800834e:	4605      	mov	r5, r0
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff fa7b 	bl	800784c <_malloc_r>
 8008356:	b948      	cbnz	r0, 800836c <__smakebuf_r+0x44>
 8008358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835c:	059a      	lsls	r2, r3, #22
 800835e:	d4ef      	bmi.n	8008340 <__smakebuf_r+0x18>
 8008360:	f023 0303 	bic.w	r3, r3, #3
 8008364:	f043 0302 	orr.w	r3, r3, #2
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	e7e3      	b.n	8008334 <__smakebuf_r+0xc>
 800836c:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <__smakebuf_r+0x7c>)
 800836e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	6020      	str	r0, [r4, #0]
 8008374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	9b00      	ldr	r3, [sp, #0]
 800837c:	6163      	str	r3, [r4, #20]
 800837e:	9b01      	ldr	r3, [sp, #4]
 8008380:	6120      	str	r0, [r4, #16]
 8008382:	b15b      	cbz	r3, 800839c <__smakebuf_r+0x74>
 8008384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008388:	4630      	mov	r0, r6
 800838a:	f000 f8a3 	bl	80084d4 <_isatty_r>
 800838e:	b128      	cbz	r0, 800839c <__smakebuf_r+0x74>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f023 0303 	bic.w	r3, r3, #3
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	89a0      	ldrh	r0, [r4, #12]
 800839e:	4305      	orrs	r5, r0
 80083a0:	81a5      	strh	r5, [r4, #12]
 80083a2:	e7cd      	b.n	8008340 <__smakebuf_r+0x18>
 80083a4:	08006eb1 	.word	0x08006eb1

080083a8 <__ascii_mbtowc>:
 80083a8:	b082      	sub	sp, #8
 80083aa:	b901      	cbnz	r1, 80083ae <__ascii_mbtowc+0x6>
 80083ac:	a901      	add	r1, sp, #4
 80083ae:	b142      	cbz	r2, 80083c2 <__ascii_mbtowc+0x1a>
 80083b0:	b14b      	cbz	r3, 80083c6 <__ascii_mbtowc+0x1e>
 80083b2:	7813      	ldrb	r3, [r2, #0]
 80083b4:	600b      	str	r3, [r1, #0]
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	1e10      	subs	r0, r2, #0
 80083ba:	bf18      	it	ne
 80083bc:	2001      	movne	r0, #1
 80083be:	b002      	add	sp, #8
 80083c0:	4770      	bx	lr
 80083c2:	4610      	mov	r0, r2
 80083c4:	e7fb      	b.n	80083be <__ascii_mbtowc+0x16>
 80083c6:	f06f 0001 	mvn.w	r0, #1
 80083ca:	e7f8      	b.n	80083be <__ascii_mbtowc+0x16>

080083cc <memmove>:
 80083cc:	4288      	cmp	r0, r1
 80083ce:	b510      	push	{r4, lr}
 80083d0:	eb01 0402 	add.w	r4, r1, r2
 80083d4:	d902      	bls.n	80083dc <memmove+0x10>
 80083d6:	4284      	cmp	r4, r0
 80083d8:	4623      	mov	r3, r4
 80083da:	d807      	bhi.n	80083ec <memmove+0x20>
 80083dc:	1e43      	subs	r3, r0, #1
 80083de:	42a1      	cmp	r1, r4
 80083e0:	d008      	beq.n	80083f4 <memmove+0x28>
 80083e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ea:	e7f8      	b.n	80083de <memmove+0x12>
 80083ec:	4402      	add	r2, r0
 80083ee:	4601      	mov	r1, r0
 80083f0:	428a      	cmp	r2, r1
 80083f2:	d100      	bne.n	80083f6 <memmove+0x2a>
 80083f4:	bd10      	pop	{r4, pc}
 80083f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fe:	e7f7      	b.n	80083f0 <memmove+0x24>

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_lock+0x8>)
 8008402:	f7fe be2c 	b.w	800705e <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20000320 	.word	0x20000320

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_unlock+0x8>)
 800840e:	f7fe be27 	b.w	8007060 <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20000320 	.word	0x20000320

08008418 <_realloc_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	4607      	mov	r7, r0
 800841c:	4614      	mov	r4, r2
 800841e:	460e      	mov	r6, r1
 8008420:	b921      	cbnz	r1, 800842c <_realloc_r+0x14>
 8008422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008426:	4611      	mov	r1, r2
 8008428:	f7ff ba10 	b.w	800784c <_malloc_r>
 800842c:	b922      	cbnz	r2, 8008438 <_realloc_r+0x20>
 800842e:	f7ff f9bd 	bl	80077ac <_free_r>
 8008432:	4625      	mov	r5, r4
 8008434:	4628      	mov	r0, r5
 8008436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008438:	f000 f85c 	bl	80084f4 <_malloc_usable_size_r>
 800843c:	42a0      	cmp	r0, r4
 800843e:	d20f      	bcs.n	8008460 <_realloc_r+0x48>
 8008440:	4621      	mov	r1, r4
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff fa02 	bl	800784c <_malloc_r>
 8008448:	4605      	mov	r5, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d0f2      	beq.n	8008434 <_realloc_r+0x1c>
 800844e:	4631      	mov	r1, r6
 8008450:	4622      	mov	r2, r4
 8008452:	f7fe fe0f 	bl	8007074 <memcpy>
 8008456:	4631      	mov	r1, r6
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff f9a7 	bl	80077ac <_free_r>
 800845e:	e7e9      	b.n	8008434 <_realloc_r+0x1c>
 8008460:	4635      	mov	r5, r6
 8008462:	e7e7      	b.n	8008434 <_realloc_r+0x1c>

08008464 <_read_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_read_r+0x20>)
 8008468:	4604      	mov	r4, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 fbd6 	bl	8001c24 <_read>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_read_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_read_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20000328 	.word	0x20000328

08008488 <__ascii_wctomb>:
 8008488:	b149      	cbz	r1, 800849e <__ascii_wctomb+0x16>
 800848a:	2aff      	cmp	r2, #255	; 0xff
 800848c:	bf85      	ittet	hi
 800848e:	238a      	movhi	r3, #138	; 0x8a
 8008490:	6003      	strhi	r3, [r0, #0]
 8008492:	700a      	strbls	r2, [r1, #0]
 8008494:	f04f 30ff 	movhi.w	r0, #4294967295
 8008498:	bf98      	it	ls
 800849a:	2001      	movls	r0, #1
 800849c:	4770      	bx	lr
 800849e:	4608      	mov	r0, r1
 80084a0:	4770      	bx	lr

080084a2 <abort>:
 80084a2:	b508      	push	{r3, lr}
 80084a4:	2006      	movs	r0, #6
 80084a6:	f000 f855 	bl	8008554 <raise>
 80084aa:	2001      	movs	r0, #1
 80084ac:	f7f9 fbb0 	bl	8001c10 <_exit>

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	; (80084d0 <_fstat_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f9 fbf6 	bl	8001cae <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20000328 	.word	0x20000328

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	; (80084f0 <_isatty_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f9 fbf5 	bl	8001cce <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000328 	.word	0x20000328

080084f4 <_malloc_usable_size_r>:
 80084f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f8:	1f18      	subs	r0, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfbc      	itt	lt
 80084fe:	580b      	ldrlt	r3, [r1, r0]
 8008500:	18c0      	addlt	r0, r0, r3
 8008502:	4770      	bx	lr

08008504 <_raise_r>:
 8008504:	291f      	cmp	r1, #31
 8008506:	b538      	push	{r3, r4, r5, lr}
 8008508:	4604      	mov	r4, r0
 800850a:	460d      	mov	r5, r1
 800850c:	d904      	bls.n	8008518 <_raise_r+0x14>
 800850e:	2316      	movs	r3, #22
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800851a:	b112      	cbz	r2, 8008522 <_raise_r+0x1e>
 800851c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008520:	b94b      	cbnz	r3, 8008536 <_raise_r+0x32>
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f830 	bl	8008588 <_getpid_r>
 8008528:	462a      	mov	r2, r5
 800852a:	4601      	mov	r1, r0
 800852c:	4620      	mov	r0, r4
 800852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008532:	f000 b817 	b.w	8008564 <_kill_r>
 8008536:	2b01      	cmp	r3, #1
 8008538:	d00a      	beq.n	8008550 <_raise_r+0x4c>
 800853a:	1c59      	adds	r1, r3, #1
 800853c:	d103      	bne.n	8008546 <_raise_r+0x42>
 800853e:	2316      	movs	r3, #22
 8008540:	6003      	str	r3, [r0, #0]
 8008542:	2001      	movs	r0, #1
 8008544:	e7e7      	b.n	8008516 <_raise_r+0x12>
 8008546:	2400      	movs	r4, #0
 8008548:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800854c:	4628      	mov	r0, r5
 800854e:	4798      	blx	r3
 8008550:	2000      	movs	r0, #0
 8008552:	e7e0      	b.n	8008516 <_raise_r+0x12>

08008554 <raise>:
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <raise+0xc>)
 8008556:	4601      	mov	r1, r0
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f7ff bfd3 	b.w	8008504 <_raise_r>
 800855e:	bf00      	nop
 8008560:	2000000c 	.word	0x2000000c

08008564 <_kill_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d07      	ldr	r5, [pc, #28]	; (8008584 <_kill_r+0x20>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	602b      	str	r3, [r5, #0]
 8008572:	f7f9 fb3d 	bl	8001bf0 <_kill>
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	d102      	bne.n	8008580 <_kill_r+0x1c>
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	b103      	cbz	r3, 8008580 <_kill_r+0x1c>
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	bf00      	nop
 8008584:	20000328 	.word	0x20000328

08008588 <_getpid_r>:
 8008588:	f7f9 bb2a 	b.w	8001be0 <_getpid>

0800858c <_init>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr

08008598 <_fini>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr


DFMmpu6050DMPv7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  0800c458  0800c458  0001c458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d66c  0800d66c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d66c  0800d66c  0001d66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d674  0800d674  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d674  0800d674  0001d674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d67c  0800d67c  0001d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200001e0  0800d860  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800d860  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dcea  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004353  00000000  00000000  0004defa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  00052250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  00053c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6b7  00000000  00000000  00055470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aed0  00000000  00000000  00073b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c2bc  00000000  00000000  0008e9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012acb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea8  00000000  00000000  0012ad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c440 	.word	0x0800c440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c440 	.word	0x0800c440

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <_Z10mapArduinofffff>:
//
// Created by hu on 2020/7/11.
//
#include "ArduinoWrapper.h"

float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f62:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f66:	ed87 2a01 	vstr	s4, [r7, #4]
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
 8000f6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f76:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000f82:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f86:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f8e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <__io_putchar+0x20>)
 8000fbe:	f006 fb45 	bl	800764c <HAL_UART_Transmit>

    return ch;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200004e4 	.word	0x200004e4

08000fd0 <_ZN6I2Cdev8readBitsEhhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
                        uint8_t length, uint8_t *data, uint16_t timeout)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4623      	mov	r3, r4
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71bb      	strb	r3, [r7, #6]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	717b      	strb	r3, [r7, #5]
 8000fea:	4613      	mov	r3, r2
 8000fec:	713b      	strb	r3, [r7, #4]
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0)
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	f107 020d 	add.w	r2, r7, #13
 8000ff4:	79b9      	ldrb	r1, [r7, #6]
 8000ff6:	79f8      	ldrb	r0, [r7, #7]
 8000ff8:	f000 f82e 	bl	8001058 <_ZN6I2Cdev8readByteEhhPht>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d01d      	beq.n	800104c <_ZN6I2Cdev8readBitsEhhhhPht+0x7c>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001010:	793b      	ldrb	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	7979      	ldrb	r1, [r7, #5]
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	3301      	adds	r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	73bb      	strb	r3, [r7, #14]
        b &= mask;
 8001028:	7b7a      	ldrb	r2, [r7, #13]
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	4013      	ands	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	737b      	strb	r3, [r7, #13]
        b >>= (bitStart - length + 1);
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	4619      	mov	r1, r3
 8001036:	797a      	ldrb	r2, [r7, #5]
 8001038:	793b      	ldrb	r3, [r7, #4]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	3301      	adds	r3, #1
 800103e:	fa41 f303 	asr.w	r3, r1, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	737b      	strb	r3, [r7, #13]
        *data = b;
 8001046:	7b7a      	ldrb	r2, [r7, #13]
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	701a      	strb	r2, [r3, #0]
    }
    return count;
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <_ZN6I2Cdev8readByteEhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data,
                        uint16_t timeout)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	80bb      	strh	r3, [r7, #4]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 800106e:	79b9      	ldrb	r1, [r7, #6]
 8001070:	79f8      	ldrb	r0, [r7, #7]
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2201      	movs	r2, #1
 800107a:	f000 f805 	bl	8001088 <_ZN6I2Cdev9readBytesEhhhPht>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint8_t *data, uint16_t timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af04      	add	r7, sp, #16
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	460b      	mov	r3, r1
 8001096:	71bb      	strb	r3, [r7, #6]
 8001098:	4613      	mov	r3, r2
 800109a:	717b      	strb	r3, [r7, #5]
    Serial.print(" bytes from 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif

    int8_t count = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	75fb      	strb	r3, [r7, #23]
    uint32_t t1 = millis();
 80010a0:	f002 fc12 	bl	80038c8 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

    I2C_readBytesFromAddress(devAddr, regAddr, length, data);

    count = length; //TODO implement something meaningful, for now just making sure no error is thrown
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c3, devAddr << 1, regAddr,
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	b298      	uxth	r0, r3
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	8c3a      	ldrh	r2, [r7, #32]
 80010b8:	9202      	str	r2, [sp, #8]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	4602      	mov	r2, r0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <_ZN6I2Cdev9readBytesEhhhPht+0x64>)
 80010c6:	f003 fd4f 	bl	8004b68 <HAL_I2C_Mem_Read>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
                                                I2C_MEMADD_SIZE_8BIT, data, length, timeout);
    if (status == HAL_OK)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_ZN6I2Cdev9readBytesEhhhPht+0x52>
    {
        count = length;
 80010d4:	797b      	ldrb	r3, [r7, #5]
 80010d6:	75fb      	strb	r3, [r7, #23]
 80010d8:	e001      	b.n	80010de <_ZN6I2Cdev9readBytesEhhhPht+0x56>
    }
    else
    {
        count = -1;
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	75fb      	strb	r3, [r7, #23]
    Serial.print(". Done (");
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif

    return count;
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002c4 	.word	0x200002c4

080010f0 <_ZN6I2Cdev9readWordsEhhhPtt>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of words read (0 indicates failure)
 */
int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint16_t *data, uint16_t timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	460b      	mov	r3, r1
 80010fe:	71bb      	strb	r3, [r7, #6]
 8001100:	4613      	mov	r3, r2
 8001102:	717b      	strb	r3, [r7, #5]
    Serial.print(" words from 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif

    int8_t count = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	77fb      	strb	r3, [r7, #31]
    uint32_t t1 = millis();
 8001108:	f002 fbde 	bl	80038c8 <HAL_GetTick>
 800110c:	6178      	str	r0, [r7, #20]

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_MSP430)
    //TODO implement

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    uint8_t * cache=(uint8_t*)malloc(sizeof(uint8_t)*2*length);
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f008 fbba 	bl	800988c <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c3, devAddr << 1, regAddr,
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	b29b      	uxth	r3, r3
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b299      	uxth	r1, r3
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	b298      	uxth	r0, r3
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	b29b      	uxth	r3, r3
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001132:	9202      	str	r2, [sp, #8]
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4602      	mov	r2, r0
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <_ZN6I2Cdev9readWordsEhhhPtt+0xbc>)
 8001140:	f003 fd12 	bl	8004b68 <HAL_I2C_Mem_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
                                                I2C_MEMADD_SIZE_8BIT, cache, length*2, timeout);
    if (status == HAL_OK)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d123      	bne.n	8001196 <_ZN6I2Cdev9readWordsEhhhPtt+0xa6>
    {
        for (int i = 0; i < length; ++i)
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	797b      	ldrb	r3, [r7, #5]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	429a      	cmp	r2, r3
 8001158:	da1a      	bge.n	8001190 <_ZN6I2Cdev9readWordsEhhhPtt+0xa0>
        {
            *(data+i)=(uint16_t)(*(cache+2*i)<<8)+(*(cache+2*i+1));
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	461a      	mov	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b299      	uxth	r1, r3
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	3301      	adds	r3, #1
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b29a      	uxth	r2, r3
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	4403      	add	r3, r0
 8001182:	440a      	add	r2, r1
 8001184:	b292      	uxth	r2, r2
 8001186:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < length; ++i)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	e7e0      	b.n	8001152 <_ZN6I2Cdev9readWordsEhhhPtt+0x62>
        }
        count = length;
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	77fb      	strb	r3, [r7, #31]
 8001194:	e001      	b.n	800119a <_ZN6I2Cdev9readWordsEhhhPtt+0xaa>
    }
    else
    {
        count = -1;
 8001196:	23ff      	movs	r3, #255	; 0xff
 8001198:	77fb      	strb	r3, [r7, #31]
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.print(". Done (");
    Serial.print(count, DEC);
    Serial.println(" read).");
#endif
    free(cache);
 800119a:	6938      	ldr	r0, [r7, #16]
 800119c:	f008 fb7e 	bl	800989c <free>
    return count;
 80011a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002c4 	.word	0x200002c4

080011b0 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum,
                      uint8_t data)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4623      	mov	r3, r4
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4603      	mov	r3, r0
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	460b      	mov	r3, r1
 80011c8:	717b      	strb	r3, [r7, #5]
 80011ca:	4613      	mov	r3, r2
 80011cc:	713b      	strb	r3, [r7, #4]
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <_ZN6I2Cdev8writeBitEhhhh+0x7c>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	f107 020f 	add.w	r2, r7, #15
 80011d6:	79b9      	ldrb	r1, [r7, #6]
 80011d8:	79f8      	ldrb	r0, [r7, #7]
 80011da:	f7ff ff3d 	bl	8001058 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00a      	beq.n	80011fa <_ZN6I2Cdev8writeBitEhhhh+0x4a>
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	2201      	movs	r2, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	e00b      	b.n	8001212 <_ZN6I2Cdev8writeBitEhhhh+0x62>
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	2201      	movs	r2, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	b25b      	sxtb	r3, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	b25a      	sxtb	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	4013      	ands	r3, r2
 800120e:	b25b      	sxtb	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
    return writeByte(devAddr, regAddr, b);
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	79b9      	ldrb	r1, [r7, #6]
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f862 	bl	80012e4 <_ZN6I2Cdev9writeByteEhhh>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart,
                       uint8_t length, uint8_t data)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	4603      	mov	r3, r0
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	717b      	strb	r3, [r7, #5]
 800124a:	4613      	mov	r3, r2
 800124c:	713b      	strb	r3, [r7, #4]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0)
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <_ZN6I2Cdev9writeBitsEhhhhh+0xb0>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	f107 020e 	add.w	r2, r7, #14
 8001256:	79b9      	ldrb	r1, [r7, #6]
 8001258:	79f8      	ldrb	r0, [r7, #7]
 800125a:	f7ff fefd 	bl	8001058 <_ZN6I2Cdev8readByteEhhPht>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d033      	beq.n	80012d6 <_ZN6I2Cdev9writeBitsEhhhhh+0xa6>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	7979      	ldrb	r1, [r7, #5]
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	3301      	adds	r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	73fb      	strb	r3, [r7, #15]
        data <<= (bitStart - length + 1); // shift data into correct position
 8001286:	f897 2020 	ldrb.w	r2, [r7, #32]
 800128a:	7979      	ldrb	r1, [r7, #5]
 800128c:	793b      	ldrb	r3, [r7, #4]
 800128e:	1acb      	subs	r3, r1, r3
 8001290:	3301      	adds	r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	f887 3020 	strb.w	r3, [r7, #32]
        data &= mask; // zero all non-important bits in data
 800129a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4013      	ands	r3, r2
 80012a2:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~(mask); // zero all important bits in existing byte
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	73bb      	strb	r3, [r7, #14]
        b |= data; // combine data with existing byte
 80012ba:	7bba      	ldrb	r2, [r7, #14]
 80012bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73bb      	strb	r3, [r7, #14]
        return writeByte(devAddr, regAddr, b);
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	79b9      	ldrb	r1, [r7, #6]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f809 	bl	80012e4 <_ZN6I2Cdev9writeByteEhhh>
 80012d2:	4603      	mov	r3, r0
 80012d4:	e000      	b.n	80012d8 <_ZN6I2Cdev9writeBitsEhhhhh+0xa8>
    }
    else
    {
        return false;
 80012d6:	2300      	movs	r3, #0
    }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	20000000 	.word	0x20000000

080012e4 <_ZN6I2Cdev9writeByteEhhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	460b      	mov	r3, r1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	4613      	mov	r3, r2
 80012f4:	717b      	strb	r3, [r7, #5]
    return writeBytes(devAddr, regAddr, 1, &data);
 80012f6:	1d7b      	adds	r3, r7, #5
 80012f8:	79b9      	ldrb	r1, [r7, #6]
 80012fa:	79f8      	ldrb	r0, [r7, #7]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f000 f819 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
 8001302:	4603      	mov	r3, r0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZN6I2Cdev9writeWordEhht>:
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	460b      	mov	r3, r1
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	4613      	mov	r3, r2
 800131c:	80bb      	strh	r3, [r7, #4]
    return writeWords(devAddr, regAddr, 1, &data);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	79b9      	ldrb	r1, [r7, #6]
 8001322:	79f8      	ldrb	r0, [r7, #7]
 8001324:	2201      	movs	r2, #1
 8001326:	f000 f83b 	bl	80013a0 <_ZN6I2Cdev10writeWordsEhhhPt>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af04      	add	r7, sp, #16
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	717b      	strb	r3, [r7, #5]
    Serial.print(length, DEC);
    Serial.print(" bytes to 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif
    uint8_t status = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73bb      	strb	r3, [r7, #14]
    Wire.send((uint8_t) regAddr); // send address
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
    Wire.beginTransmission(devAddr);
    Wire.write((uint8_t) regAddr); // send address
#endif
    for (uint8_t i = 0; i < length; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	429a      	cmp	r2, r3
 8001356:	d203      	bcs.n	8001360 <_ZN6I2Cdev10writeBytesEhhhPh+0x2c>
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e7f7      	b.n	8001350 <_ZN6I2Cdev10writeBytesEhhhPh+0x1c>
    //        USCI_I2C_transmit(length,data);       // start transmitting

      I2C_writeBytesToAddress(devAddr, regAddr, length, data);

#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    status = HAL_I2C_Mem_Write(&hi2c3, devAddr << 1, regAddr,
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	b29b      	uxth	r3, r3
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b299      	uxth	r1, r3
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	b29a      	uxth	r2, r3
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	b29b      	uxth	r3, r3
 8001370:	2064      	movs	r0, #100	; 0x64
 8001372:	9002      	str	r0, [sp, #8]
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <_ZN6I2Cdev10writeBytesEhhhPh+0x68>)
 800137e:	f003 faf9 	bl	8004974 <HAL_I2C_Mem_Write>
 8001382:	4603      	mov	r3, r0
 8001384:	73bb      	strb	r3, [r7, #14]
                               I2C_MEMADD_SIZE_8BIT, data, length, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
    return status == 0;
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002c4 	.word	0x200002c4

080013a0 <_ZN6I2Cdev10writeWordsEhhhPt>:
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint16_t *data)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	460b      	mov	r3, r1
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	717b      	strb	r3, [r7, #5]
    Serial.print(length, DEC);
    Serial.print(" words to 0x");
    Serial.print(regAddr, HEX);
    Serial.print("...");
#endif
    uint8_t status = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
    uint8_t *cache=(uint8_t*)malloc(sizeof(uint8_t)*length);
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fa66 	bl	800988c <malloc>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60bb      	str	r3, [r7, #8]
    //		//Delay until transmission completes
    //		while (I2C_isBusBusy()) ;
    //todo implement

#endif
    for (uint8_t i = 0; i < length * 2; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]
 80013c8:	7dfa      	ldrb	r2, [r7, #23]
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	429a      	cmp	r2, r3
 80013d0:	da03      	bge.n	80013da <_ZN6I2Cdev10writeWordsEhhhPt+0x3a>
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	3301      	adds	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
 80013d8:	e7f6      	b.n	80013c8 <_ZN6I2Cdev10writeWordsEhhhPt+0x28>
    //    	//Disable TX interrupt
    //    	I2C_disableInterrupt(I2C_TRANSMIT_INTERRUPT);
    //    	//Disable I2C Module to stop operations
    //    	I2C_disable();
#elif (I2CDEV_IMPLEMENTATION == I2CDEV_STM32_HAL)
    for (int j = 0; j < length; ++j)
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	da1c      	bge.n	8001420 <_ZN6I2Cdev10writeWordsEhhhPt+0x80>
    {
        *(cache+2*j)=(uint8_t)(*(data+j)>>8);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	121a      	asrs	r2, r3, #8
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	440b      	add	r3, r1
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
        *(cache+2*j+1)=(uint8_t)(*(data+j));
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	8819      	ldrh	r1, [r3, #0]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3301      	adds	r3, #1
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < length; ++j)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	3301      	adds	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	e7de      	b.n	80013de <_ZN6I2Cdev10writeWordsEhhhPt+0x3e>
    }
    status = HAL_I2C_Mem_Write(&hi2c3, devAddr << 1, regAddr,
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	b29b      	uxth	r3, r3
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b299      	uxth	r1, r3
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	b29a      	uxth	r2, r3
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	b29b      	uxth	r3, r3
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	2064      	movs	r0, #100	; 0x64
 8001436:	9002      	str	r0, [sp, #8]
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <_ZN6I2Cdev10writeWordsEhhhPt+0xc4>)
 8001442:	f003 fa97 	bl	8004974 <HAL_I2C_Mem_Write>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
                               I2C_MEMADD_SIZE_8BIT, (uint8_t *) cache, length*2, I2CDEV_DEFAULT_WRITE_TIMEOUT);
#endif
#ifdef I2CDEV_SERIAL_DEBUG
    Serial.println(". Done.");
#endif
    free(cache);
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f008 fa26 	bl	800989c <free>
    return status == 0;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002c4 	.word	0x200002c4

08001468 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001472:	edd7 7a01 	vldr	s15, [r7, #4]
 8001476:	eef0 7ae7 	vabs.f32	s15, s15
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001492:	ed97 0a01 	vldr	s0, [r7, #4]
 8001496:	f008 f801 	bl	800949c <roundf>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_ZN7MPU6050C1Eh>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	701a      	strb	r2, [r3, #0]
}
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80014d0:	2101      	movs	r1, #1
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f87e 	bl	80015d4 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80014d8:	2100      	movs	r1, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f81d 	bl	800151a <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80014e0:	2100      	movs	r1, #0
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f82c 	bl	8001540 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f861 	bl	80015b2 <_ZN7MPU605015setSleepEnabledEb>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f957 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 8001506:	4603      	mov	r3, r0
 8001508:	2b34      	cmp	r3, #52	; 0x34
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7818      	ldrb	r0, [r3, #0]
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2302      	movs	r3, #2
 8001530:	2204      	movs	r2, #4
 8001532:	211b      	movs	r1, #27
 8001534:	f7ff fe7c 	bl	8001230 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7818      	ldrb	r0, [r3, #0]
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2302      	movs	r3, #2
 8001556:	2204      	movs	r2, #4
 8001558:	211c      	movs	r1, #28
 800155a:	f7ff fe69 	bl	8001230 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7818      	ldrb	r0, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <_ZN7MPU605012getIntStatusEv+0x28>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	213a      	movs	r1, #58	; 0x3a
 800157e:	f7ff fd6b 	bl	8001058 <_ZN6I2Cdev8readByteEhhPht>
    return buffer[0];
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	785b      	ldrb	r3, [r3, #1]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7818      	ldrb	r0, [r3, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	2202      	movs	r2, #2
 80015a4:	216a      	movs	r1, #106	; 0x6a
 80015a6:	f7ff fe03 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7818      	ldrb	r0, [r3, #0]
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	2206      	movs	r2, #6
 80015c6:	216b      	movs	r1, #107	; 0x6b
 80015c8:	f7ff fdf2 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7818      	ldrb	r0, [r3, #0]
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2303      	movs	r3, #3
 80015ea:	2202      	movs	r2, #2
 80015ec:	216b      	movs	r1, #107	; 0x6b
 80015ee:	f7ff fe1f 	bl	8001230 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7818      	ldrb	r0, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <_ZN7MPU605012getFIFOCountEv+0x3c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	2202      	movs	r2, #2
 8001616:	2172      	movs	r1, #114	; 0x72
 8001618:	f7ff fd36 	bl	8001088 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	785b      	ldrb	r3, [r3, #1]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21b      	sxth	r3, r3
 800162e:	b29b      	uxth	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000

0800163c <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00a      	beq.n	8001666 <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	7818      	ldrb	r0, [r3, #0]
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_ZN7MPU605012getFIFOBytesEPhh+0x38>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2174      	movs	r1, #116	; 0x74
 8001660:	f7ff fd12 	bl	8001088 <_ZN6I2Cdev9readBytesEhhhPht>
    } else {
        *data = 0;
    }
}
 8001664:	e002      	b.n	800166c <_ZN7MPU605012getFIFOBytesEPhh+0x30>
        *data = 0;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000000 	.word	0x20000000

08001678 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>:
 * Returns 1) when nothing special was done
 *         2) when recovering from overflow
 *         0) when no valid data is available
 * ================================================================ */
int8_t MPU6050::GetCurrentFIFOPacket(uint8_t *data, uint8_t length)
{ // overflow proof
 8001678:	b580      	push	{r7, lr}
 800167a:	b090      	sub	sp, #64	; 0x40
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	4613      	mov	r3, r2
 8001684:	71fb      	strb	r3, [r7, #7]
    int16_t fifoC;
    // This section of code is for when we allowed more than 1 packet to be acquired
    uint32_t BreakTimer = millis();
 8001686:	f002 f91f 	bl	80038c8 <HAL_GetTick>
 800168a:	63b8      	str	r0, [r7, #56]	; 0x38
    do
    {
        if ((fifoC = getFIFOCount()) > length)//when FIFOCount more than 28
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff ffb5 	bl	80015fc <_ZN7MPU605012getFIFOCountEv>
 8001692:	4603      	mov	r3, r0
 8001694:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001696:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	429a      	cmp	r2, r3
 800169e:	bfcc      	ite	gt
 80016a0:	2301      	movgt	r3, #1
 80016a2:	2300      	movle	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04c      	beq.n	8001744 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
        {

            if (fifoC > 200)
 80016aa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80016ae:	2bc8      	cmp	r3, #200	; 0xc8
 80016b0:	dd1a      	ble.n	80016e8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x70>
            { // if you waited to get the FIFO buffer to > 200 bytes it will take longer to get the last packet in the FIFO Buffer than it will take to  reset the buffer and wait for the next to arrive
                resetFIFO(); // Fixes any overflow corruption
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff ff6e 	bl	8001594 <_ZN7MPU60509resetFIFOEv>
                fifoC = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
                while (!(fifoC = getFIFOCount()) && ((millis() - BreakTimer) <= (11))); // Get Next New Packet
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff ff9d 	bl	80015fc <_ZN7MPU605012getFIFOCountEv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80016c6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x68>
 80016ce:	f002 f8fb 	bl	80038c8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b0b      	cmp	r3, #11
 80016da:	d801      	bhi.n	80016e0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x68>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x6a>
 80016e0:	2300      	movs	r3, #0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d02e      	beq.n	8001744 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
 80016e6:	e7e9      	b.n	80016bc <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x44>
            }
            else
            { //We have more than 1 packet but less than 200 bytes of data in the FIFO Buffer
                uint8_t Trash[BUFFER_LENGTH];
                while ((fifoC = getFIFOCount()) > length)
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff ff87 	bl	80015fc <_ZN7MPU605012getFIFOCountEv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80016f2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	bfcc      	ite	gt
 80016fc:	2301      	movgt	r3, #1
 80016fe:	2300      	movle	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01e      	beq.n	8001744 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xcc>
                {  // Test each time just in case the MPU is writing to the FIFO Buffer
                    fifoC = fifoC - length; // Save the last packet
 8001706:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	b29b      	uxth	r3, r3
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
 8001710:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    uint16_t RemoveBytes;
                    while (fifoC)
 8001712:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0e6      	beq.n	80016e8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x70>
                    { // fifo count will reach zero so this is safe
                        RemoveBytes = (int) fifoC < BUFFER_LENGTH ? (int) fifoC
 800171a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800171e:	2b20      	cmp	r3, #32
 8001720:	bfa8      	it	ge
 8001722:	2320      	movge	r3, #32
 8001724:	b21b      	sxth	r3, r3
 8001726:	86fb      	strh	r3, [r7, #54]	; 0x36
                                                                  : BUFFER_LENGTH; // Buffer Length is different than the packet length this will efficiently clear the buffer
                        getFIFOBytes(Trash, (uint8_t) RemoveBytes);
 8001728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800172a:	b2da      	uxtb	r2, r3
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff ff82 	bl	800163c <_ZN7MPU605012getFIFOBytesEPhh>
                        fifoC -= RemoveBytes;
 8001738:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800173a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    while (fifoC)
 8001742:	e7e6      	b.n	8001712 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x9a>
                    }
                }
            }
        }
        if (!fifoC)
 8001744:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001748:	2b00      	cmp	r3, #0
 800174a:	d104      	bne.n	8001756 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0xde>
        {
            printf("fifo no data!\n");
 800174c:	4816      	ldr	r0, [pc, #88]	; (80017a8 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x130>)
 800174e:	f008 fe81 	bl	800a454 <puts>
            return 0; // Called too early no data or we timed out after FIFO Reset
 8001752:	2300      	movs	r3, #0
 8001754:	e023      	b.n	800179e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x126>
        }
        // We have 1 packet
        if ((millis() - BreakTimer) > (11))
 8001756:	f002 f8b7 	bl	80038c8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b0b      	cmp	r3, #11
 8001762:	bf8c      	ite	hi
 8001764:	2301      	movhi	r3, #1
 8001766:	2300      	movls	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x10c>
        {
            printf("fifo wait too long!\n");
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x134>)
 8001770:	f008 fe70 	bl	800a454 <puts>
            __HAL_RCC_I2C1_FORCE_RESET();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x138>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x138>)
 800177a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800177e:	6213      	str	r3, [r2, #32]
            return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e00c      	b.n	800179e <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x126>
        }
    }
    while (fifoC != length);
 8001784:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	429a      	cmp	r2, r3
 800178c:	d000      	beq.n	8001790 <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x118>
    do
 800178e:	e77d      	b.n	800168c <_ZN7MPU605020GetCurrentFIFOPacketEPhh+0x14>
    getFIFOBytes(data, length); //Get 1 packet
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	461a      	mov	r2, r3
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff ff50 	bl	800163c <_ZN7MPU605012getFIFOBytesEPhh>
    return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3740      	adds	r7, #64	; 0x40
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	0800c458 	.word	0x0800c458
 80017ac:	0800c468 	.word	0x0800c468
 80017b0:	40023800 	.word	0x40023800

080017b4 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7818      	ldrb	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <_ZN7MPU605011getDeviceIDEv+0x30>)
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	9201      	str	r2, [sp, #4]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2306      	movs	r3, #6
 80017ce:	2206      	movs	r2, #6
 80017d0:	2175      	movs	r1, #117	; 0x75
 80017d2:	f7ff fbfd 	bl	8000fd0 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	785b      	ldrb	r3, [r3, #1]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000

080017e8 <_ZN7MPU605015setXAccelOffsetEs>:
int16_t MPU6050::getXAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffdd 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b37      	cmp	r3, #55	; 0x37
 80017fe:	d801      	bhi.n	8001804 <_ZN7MPU605015setXAccelOffsetEs+0x1c>
 8001800:	2306      	movs	r3, #6
 8001802:	e000      	b.n	8001806 <_ZN7MPU605015setXAccelOffsetEs+0x1e>
 8001804:	2377      	movs	r3, #119	; 0x77
 8001806:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	7bf9      	ldrb	r1, [r7, #15]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd7b 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZN7MPU605015setYAccelOffsetEs>:
int16_t MPU6050::getYAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_YA_OFFS_H:0x7A); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffc2 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 8001830:	4603      	mov	r3, r0
 8001832:	2b37      	cmp	r3, #55	; 0x37
 8001834:	d801      	bhi.n	800183a <_ZN7MPU605015setYAccelOffsetEs+0x1c>
 8001836:	2308      	movs	r3, #8
 8001838:	e000      	b.n	800183c <_ZN7MPU605015setYAccelOffsetEs+0x1e>
 800183a:	237a      	movs	r3, #122	; 0x7a
 800183c:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	7bf9      	ldrb	r1, [r7, #15]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fd60 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZN7MPU605015setZAccelOffsetEs>:
int16_t MPU6050::getZAccelOffset() {
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
    I2Cdev::readBytes(devAddr, SaveAddress, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
    uint8_t SaveAddress = ((getDeviceID() < 0x38 )? MPU6050_RA_ZA_OFFS_H:0x7D); // MPU6050,MPU9150 Vs MPU6500,MPU9250
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffa7 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 8001866:	4603      	mov	r3, r0
 8001868:	2b37      	cmp	r3, #55	; 0x37
 800186a:	d801      	bhi.n	8001870 <_ZN7MPU605015setZAccelOffsetEs+0x1c>
 800186c:	230a      	movs	r3, #10
 800186e:	e000      	b.n	8001872 <_ZN7MPU605015setZAccelOffsetEs+0x1e>
 8001870:	237d      	movs	r3, #125	; 0x7d
 8001872:	73fb      	strb	r3, [r7, #15]
    I2Cdev::writeWord(devAddr, SaveAddress, offset);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	887a      	ldrh	r2, [r7, #2]
 800187a:	7bf9      	ldrb	r1, [r7, #15]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd45 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN7MPU605014setXGyroOffsetEs>:

int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	2113      	movs	r1, #19
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fd34 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN7MPU605014setYGyroOffsetEs>:

int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	2115      	movs	r1, #21
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd23 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZN7MPU605014setZGyroOffsetEs>:

int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	2117      	movs	r1, #23
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd12 	bl	800130c <_ZN6I2Cdev9writeWordEhht>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZN7MPU605013setDMPEnabledEb>:

bool MPU6050::getDMPEnabled() {
    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);
    return buffer[0];
}
void MPU6050::setDMPEnabled(bool enabled) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7818      	ldrb	r0, [r3, #0]
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	2207      	movs	r2, #7
 8001904:	216a      	movs	r1, #106	; 0x6a
 8001906:	f7ff fc53 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN7MPU60508resetDMPEv>:
void MPU6050::resetDMP() {
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7818      	ldrb	r0, [r3, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	216a      	movs	r1, #106	; 0x6a
 8001924:	f7ff fc44 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN7MPU605013setMemoryBankEhbb>:

// BANK_SEL register

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	70fb      	strb	r3, [r7, #3]
 8001942:	460b      	mov	r3, r1
 8001944:	70bb      	strb	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 8001952:	787b      	ldrb	r3, [r7, #1]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	216d      	movs	r1, #109	; 0x6d
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fcb4 	bl	80012e4 <_ZN6I2Cdev9writeByteEhhh>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN7MPU605021setMemoryStartAddressEh>:

// MEM_START_ADDR register

void MPU6050::setMemoryStartAddress(uint8_t address) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	216e      	movs	r1, #110	; 0x6e
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fca3 	bl	80012e4 <_ZN6I2Cdev9writeByteEhhh>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>:
            setMemoryBank(bank);
            setMemoryStartAddress(address);
        }
    }
}
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	460b      	mov	r3, r1
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4613      	mov	r3, r2
 80019bc:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80019be:	7979      	ldrb	r1, [r7, #5]
 80019c0:	2300      	movs	r3, #0
 80019c2:	2200      	movs	r2, #0
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff ffb3 	bl	8001930 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80019ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019ce:	4619      	mov	r1, r3
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff ffd7 	bl	8001984 <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer=0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
    uint8_t *progBuffer=0;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
    uint16_t i;
    uint8_t j;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80019de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x48>
 80019e6:	2010      	movs	r0, #16
 80019e8:	f007 ff50 	bl	800988c <malloc>
 80019ec:	4603      	mov	r3, r0
 80019ee:	61bb      	str	r3, [r7, #24]
    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80019f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5a>
 80019f8:	2010      	movs	r0, #16
 80019fa:	f007 ff47 	bl	800988c <malloc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	617b      	str	r3, [r7, #20]
    for (i = 0; i < dataSize;) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	827b      	strh	r3, [r7, #18]
 8001a06:	8a7a      	ldrh	r2, [r7, #18]
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f080 8092 	bcs.w	8001b34 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x18c>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8001a10:	2310      	movs	r3, #16
 8001a12:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8001a14:	8a7a      	ldrh	r2, [r7, #18]
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	441a      	add	r2, r3
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dd05      	ble.n	8001a2c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x84>
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	8a7b      	ldrh	r3, [r7, #18]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8001a2c:	7ffa      	ldrb	r2, [r7, #31]
 8001a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a32:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dd03      	ble.n	8001a42 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x9a>
 8001a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a3e:	425b      	negs	r3, r3
 8001a40:	77fb      	strb	r3, [r7, #31]

        if (useProgMem) {
 8001a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d013      	beq.n	8001a72 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xca>
            // write the chunk of data as specified
            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	747b      	strb	r3, [r7, #17]
 8001a4e:	7c7a      	ldrb	r2, [r7, #17]
 8001a50:	7ffb      	ldrb	r3, [r7, #31]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d211      	bcs.n	8001a7a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xd2>
 8001a56:	8a7a      	ldrh	r2, [r7, #18]
 8001a58:	7c7b      	ldrb	r3, [r7, #17]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	441a      	add	r2, r3
 8001a60:	7c7b      	ldrb	r3, [r7, #17]
 8001a62:	6979      	ldr	r1, [r7, #20]
 8001a64:	440b      	add	r3, r1
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	7c7b      	ldrb	r3, [r7, #17]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	747b      	strb	r3, [r7, #17]
 8001a70:	e7ed      	b.n	8001a4e <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0xa6>
        } else {
            // write the chunk of data as specified
            progBuffer = (uint8_t *)data + i;
 8001a72:	8a7b      	ldrh	r3, [r7, #18]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
        }

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	7818      	ldrb	r0, [r3, #0]
 8001a7e:	7ffa      	ldrb	r2, [r7, #31]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	216f      	movs	r1, #111	; 0x6f
 8001a84:	f7ff fc56 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8001a88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02d      	beq.n	8001aec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d02a      	beq.n	8001aec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
            setMemoryBank(bank);
 8001a96:	7979      	ldrb	r1, [r7, #5]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff ff47 	bl	8001930 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8001aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff ff6b 	bl	8001984 <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	7818      	ldrb	r0, [r3, #0]
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1b4>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	7ffa      	ldrb	r2, [r7, #31]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	216f      	movs	r1, #111	; 0x6f
 8001abe:	f7ff fae3 	bl	8001088 <_ZN6I2Cdev9readBytesEhhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	6978      	ldr	r0, [r7, #20]
 8001aca:	f007 feef 	bl	80098ac <memcmp>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x144>
                    Serial.print(" 0x");
                    if (verifyBuffer[i + j] < 16) Serial.print("0");
                    Serial.print(verifyBuffer[i + j], HEX);
                }
                Serial.print("\n");*/
                free(verifyBuffer);
 8001ad4:	69b8      	ldr	r0, [r7, #24]
 8001ad6:	f007 fee1 	bl	800989c <free>
                if (useProgMem) free(progBuffer);
 8001ada:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x140>
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f007 feda 	bl	800989c <free>
                return false; // uh oh.
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e032      	b.n	8001b52 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1aa>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8001aec:	7ffb      	ldrb	r3, [r7, #31]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	8a7b      	ldrh	r3, [r7, #18]
 8001af2:	4413      	add	r3, r2
 8001af4:	827b      	strh	r3, [r7, #18]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8001af6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	4413      	add	r3, r2
 8001afe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8001b02:	8a7a      	ldrh	r2, [r7, #18]
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	f4bf af7d 	bcs.w	8001a06 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
            if (address == 0) bank++;
 8001b0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x172>
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	3301      	adds	r3, #1
 8001b18:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8001b1a:	7979      	ldrb	r1, [r7, #5]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff ff05 	bl	8001930 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8001b26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ff29 	bl	8001984 <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8001b32:	e768      	b.n	8001a06 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x5e>
        }
    }
    if (verify) free(verifyBuffer);
 8001b34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x19a>
 8001b3c:	69b8      	ldr	r0, [r7, #24]
 8001b3e:	f007 fead 	bl	800989c <free>
    if (useProgMem) free(progBuffer);
 8001b42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <_ZN7MPU605016writeMemoryBlockEPKhthhbb+0x1a8>
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f007 fea6 	bl	800989c <free>
    return true;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000

08001b60 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	460b      	mov	r3, r1
 8001b70:	80fb      	strh	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify, true);
 8001b76:	7979      	ldrb	r1, [r7, #5]
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	7f3b      	ldrb	r3, [r7, #28]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	7e3b      	ldrb	r3, [r7, #24]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	460b      	mov	r3, r1
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff ff0c 	bl	80019a8 <_ZN7MPU605016writeMemoryBlockEPKhthhbb>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	0000      	movs	r0, r0
 8001b9c:	0000      	movs	r0, r0
	...

08001ba0 <_ZN7MPU605013CalibrateGyroEh>:
//**********************           Calibration Routines            **********************
//***************************************************************************************
/**
  @brief      Fully calibrate Gyro from ZERO in about 6-7 Loops 600-700 readings
*/
void MPU6050::CalibrateGyro(uint8_t Loops ) {
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
    double kP = 0.3;
 8001bac:	a337      	add	r3, pc, #220	; (adr r3, 8001c8c <_ZN7MPU605013CalibrateGyroEh+0xec>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double kI = 90;
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <_ZN7MPU605013CalibrateGyroEh+0xe0>)
 8001bbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    float x;
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bca:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8001c84 <_ZN7MPU605013CalibrateGyroEh+0xe4>
 8001bce:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8001bd2:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001bd6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	f7ff f9b7 	bl	8000f50 <_Z10mapArduinofffff>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c88 <_ZN7MPU605013CalibrateGyroEh+0xe8>
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	ee17 0a90 	vmov	r0, s15
 8001bf2:	f7fe fcb1 	bl	8000558 <__aeabi_f2d>
 8001bf6:	a320      	add	r3, pc, #128	; (adr r3, 8001c78 <_ZN7MPU605013CalibrateGyroEh+0xd8>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd04 	bl	8000608 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ffd6 	bl	8000bb8 <__aeabi_d2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]
    kP *= x;
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7fe fca1 	bl	8000558 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1e:	f7fe fcf3 	bl	8000608 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    kI *= x;
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7fe fc94 	bl	8000558 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c38:	f7fe fce6 	bl	8000608 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	e9c7 2304 	strd	r2, r3, [r7, #16]

    PID( 0x43,  kP, kI,  Loops);
 8001c44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c48:	f7fe ffb6 	bl	8000bb8 <__aeabi_d2f>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c52:	f7fe ffb1 	bl	8000bb8 <__aeabi_d2f>
 8001c56:	4601      	mov	r1, r0
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	ee00 1a90 	vmov	s1, r1
 8001c60:	ee00 4a10 	vmov	s0, r4
 8001c64:	2143      	movs	r1, #67	; 0x43
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f872 	bl	8001d50 <_ZN7MPU60503PIDEhffh>
}
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	f3af 8000 	nop.w
 8001c78:	47ae147b 	.word	0x47ae147b
 8001c7c:	3f847ae1 	.word	0x3f847ae1
 8001c80:	40568000 	.word	0x40568000
 8001c84:	00000000 	.word	0x00000000
 8001c88:	42c80000 	.word	0x42c80000
 8001c8c:	33333333 	.word	0x33333333
 8001c90:	3fd33333 	.word	0x3fd33333
 8001c94:	00000000 	.word	0x00000000

08001c98 <_ZN7MPU605014CalibrateAccelEh>:

/**
  @brief      Fully calibrate Accel from ZERO in about 6-7 Loops 600-700 readings
*/
void MPU6050::CalibrateAccel(uint8_t Loops ) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]

    float kP = 0.3;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <_ZN7MPU605014CalibrateAccelEh+0xa8>)
 8001ca6:	617b      	str	r3, [r7, #20]
    float kI = 20;
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <_ZN7MPU605014CalibrateAccelEh+0xac>)
 8001caa:	613b      	str	r3, [r7, #16]
    float x;
    x = (100 - mapArduino(Loops, 1, 5, 20, 0)) * .01;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb6:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8001d48 <_ZN7MPU605014CalibrateAccelEh+0xb0>
 8001cba:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8001cbe:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8001cc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	f7ff f941 	bl	8000f50 <_Z10mapArduinofffff>
 8001cce:	eef0 7a40 	vmov.f32	s15, s0
 8001cd2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d4c <_ZN7MPU605014CalibrateAccelEh+0xb4>
 8001cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cda:	ee17 0a90 	vmov	r0, s15
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_f2d>
 8001ce2:	a315      	add	r3, pc, #84	; (adr r3, 8001d38 <_ZN7MPU605014CalibrateAccelEh+0xa0>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc8e 	bl	8000608 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff60 	bl	8000bb8 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
    //printf("CA=%f\n",x);
    kP *= x;
 8001cfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	edc7 7a05 	vstr	s15, [r7, #20]
    kI *= x;
 8001d0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d18:	edc7 7a04 	vstr	s15, [r7, #16]
    PID( 0x3B, kP, kI,  Loops);
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	edd7 0a04 	vldr	s1, [r7, #16]
 8001d24:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d28:	213b      	movs	r1, #59	; 0x3b
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f810 	bl	8001d50 <_ZN7MPU60503PIDEhffh>
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	47ae147b 	.word	0x47ae147b
 8001d3c:	3f847ae1 	.word	0x3f847ae1
 8001d40:	3e99999a 	.word	0x3e99999a
 8001d44:	41a00000 	.word	0x41a00000
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	42c80000 	.word	0x42c80000

08001d50 <_ZN7MPU60503PIDEhffh>:

void MPU6050::PID(uint8_t ReadAddress, float kP,float kI, uint8_t Loops){
 8001d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d54:	b096      	sub	sp, #88	; 0x58
 8001d56:	af02      	add	r7, sp, #8
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d60:	edc7 0a00 	vstr	s1, [r7]
 8001d64:	72fb      	strb	r3, [r7, #11]
 8001d66:	4613      	mov	r3, r2
 8001d68:	72bb      	strb	r3, [r7, #10]
    uint8_t SaveAddress = (ReadAddress == 0x3B) ? ((getDeviceID() < 0x38) ? 0x06 : 0x77) : 0x13;
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	2b3b      	cmp	r3, #59	; 0x3b
 8001d6e:	d109      	bne.n	8001d84 <_ZN7MPU60503PIDEhffh+0x34>
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff fd1f 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b37      	cmp	r3, #55	; 0x37
 8001d7a:	d801      	bhi.n	8001d80 <_ZN7MPU60503PIDEhffh+0x30>
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	e002      	b.n	8001d86 <_ZN7MPU60503PIDEhffh+0x36>
 8001d80:	2377      	movs	r3, #119	; 0x77
 8001d82:	e000      	b.n	8001d86 <_ZN7MPU60503PIDEhffh+0x36>
 8001d84:	2313      	movs	r3, #19
 8001d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    int16_t Data;
    float Reading;
    int16_t BitZero[3];
    uint8_t shift = (SaveAddress == 0x77) ? 3 : 2;
 8001d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d8e:	2b77      	cmp	r3, #119	; 0x77
 8001d90:	d101      	bne.n	8001d96 <_ZN7MPU60503PIDEhffh+0x46>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e000      	b.n	8001d98 <_ZN7MPU60503PIDEhffh+0x48>
 8001d96:	2302      	movs	r3, #2
 8001d98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    float Error, PTerm, ITerm[3];
    int16_t eSample;
    uint32_t eSum;
    HAL_UART_Transmit(&huart2, (uint8_t *) ">", 1, 100);
 8001d9c:	2364      	movs	r3, #100	; 0x64
 8001d9e:	2201      	movs	r2, #1
 8001da0:	49bd      	ldr	r1, [pc, #756]	; (8002098 <_ZN7MPU60503PIDEhffh+0x348>)
 8001da2:	48be      	ldr	r0, [pc, #760]	; (800209c <_ZN7MPU60503PIDEhffh+0x34c>)
 8001da4:	f005 fc52 	bl	800764c <HAL_UART_Transmit>
    for (int i = 0; i < 3; i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	643b      	str	r3, [r7, #64]	; 0x40
 8001dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	dc4e      	bgt.n	8001e50 <_ZN7MPU60503PIDEhffh+0x100>
    {
        I2Cdev::readWords(devAddr, SaveAddress + (i * shift), 1,
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	7818      	ldrb	r0, [r3, #0]
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001dbe:	fb12 f303 	smulbb	r3, r2, r3
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc8:	4413      	add	r3, r2
 8001dca:	b2d9      	uxtb	r1, r3
 8001dcc:	4bb4      	ldr	r3, [pc, #720]	; (80020a0 <_ZN7MPU60503PIDEhffh+0x350>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f7ff f989 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
                          (uint16_t *) &Data); // reads 1 or more 16 bit integers (Word)
        Reading = Data;
 8001dde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        if (SaveAddress != 0x13)
 8001dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df2:	2b13      	cmp	r3, #19
 8001df4:	d01a      	beq.n	8001e2c <_ZN7MPU60503PIDEhffh+0xdc>
        {
            BitZero[i] = Data &
 8001df6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001e08:	440b      	add	r3, r1
 8001e0a:	f823 2c34 	strh.w	r2, [r3, #-52]
                         1;                                         // Capture Bit Zero to properly handle Accelerometer calibration
            ITerm[i] = ((float) Reading) * 8;
 8001e0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e12:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e22:	4413      	add	r3, r2
 8001e24:	3b40      	subs	r3, #64	; 0x40
 8001e26:	edc3 7a00 	vstr	s15, [r3]
 8001e2a:	e00d      	b.n	8001e48 <_ZN7MPU60503PIDEhffh+0xf8>
        }
        else
        {
            ITerm[i] = Reading * 4;
 8001e2c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e30:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e40:	4413      	add	r3, r2
 8001e42:	3b40      	subs	r3, #64	; 0x40
 8001e44:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e4e:	e7ad      	b.n	8001dac <_ZN7MPU60503PIDEhffh+0x5c>
        }
    }
    printf("\nbegin!\n");
 8001e50:	4894      	ldr	r0, [pc, #592]	; (80020a4 <_ZN7MPU60503PIDEhffh+0x354>)
 8001e52:	f008 faff 	bl	800a454 <puts>
    for (int L = 0; L < Loops; L++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e5a:	7abb      	ldrb	r3, [r7, #10]
 8001e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	f280 81cb 	bge.w	80021fa <_ZN7MPU60503PIDEhffh+0x4aa>
    {
        eSample = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        for (int c = 0; c < 100; c++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e70:	2b63      	cmp	r3, #99	; 0x63
 8001e72:	f300 8149 	bgt.w	8002108 <_ZN7MPU60503PIDEhffh+0x3b8>
        {// 100 PI Calculations
            eSum = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
            for (int i = 0; i < 3; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f300 80df 	bgt.w	8002044 <_ZN7MPU60503PIDEhffh+0x2f4>
            {
                I2Cdev::readWords(devAddr, ReadAddress + (i * 2), 1,
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	7818      	ldrb	r0, [r3, #0]
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2d9      	uxtb	r1, r3
 8001e98:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <_ZN7MPU60503PIDEhffh+0x350>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f7ff f923 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
                                  (uint16_t *) &Data); // reads 1 or more 16 bit integers (Word)
                Reading = Data;
 8001eaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                //printf("R%d:%.1f  ",i,Reading);
                if ((ReadAddress == 0x3B) && (i == 2)) Reading -= 16384.0;    //remove Gravity
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	2b3b      	cmp	r3, #59	; 0x3b
 8001ebe:	d10a      	bne.n	8001ed6 <_ZN7MPU60503PIDEhffh+0x186>
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <_ZN7MPU60503PIDEhffh+0x186>
 8001ec6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001eca:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80020a8 <_ZN7MPU60503PIDEhffh+0x358>
 8001ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ed2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                Error = -Reading;
 8001ed6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001eda:	eef1 7a67 	vneg.f32	s15, s15
 8001ede:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                eSum += abs(Reading);
 8001ee2:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001ee6:	f7ff fabf 	bl	8001468 <_ZSt3absf>
 8001eea:	eeb0 7a40 	vmov.f32	s14, s0
 8001eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f00:	ee17 3a90 	vmov	r3, s15
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
                PTerm = kP * Error;
 8001f06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                //printf("E:%.1f",Error);
                //printf("P:%.1f ",PTerm);
                ITerm[i] += (Error * 0.001) * kI;                // Integral term 1000 Calculations a second = 0.001
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b40      	subs	r3, #64	; 0x40
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb17 	bl	8000558 <__aeabi_f2d>
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460d      	mov	r5, r1
 8001f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f30:	f7fe fb12 	bl	8000558 <__aeabi_f2d>
 8001f34:	a354      	add	r3, pc, #336	; (adr r3, 8002088 <_ZN7MPU60503PIDEhffh+0x338>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fb65 	bl	8000608 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4690      	mov	r8, r2
 8001f44:	4699      	mov	r9, r3
 8001f46:	6838      	ldr	r0, [r7, #0]
 8001f48:	f7fe fb06 	bl	8000558 <__aeabi_f2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4640      	mov	r0, r8
 8001f52:	4649      	mov	r1, r9
 8001f54:	f7fe fb58 	bl	8000608 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f99c 	bl	800029c <__adddf3>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fe24 	bl	8000bb8 <__aeabi_d2f>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3b40      	subs	r3, #64	; 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
                //printf("I:%.1f ",ITerm[i]);
                if (SaveAddress != 0x13)
 8001f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f84:	2b13      	cmp	r3, #19
 8001f86:	d02b      	beq.n	8001fe0 <_ZN7MPU60503PIDEhffh+0x290>
                {
                    //printf("%f",(PTerm + ITerm[i]) / 8);
                    Data = round((PTerm + ITerm[i]) / 8);        //Compute PID Output
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001f90:	4413      	add	r3, r2
 8001f92:	3b40      	subs	r3, #64	; 0x40
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001fa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fac:	f7ff fa6c 	bl	8001488 <_ZSt5roundf>
 8001fb0:	eef0 7a40 	vmov.f32	s15, s0
 8001fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb8:	ee17 3a90 	vmov	r3, s15
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	847b      	strh	r3, [r7, #34]	; 0x22
                    Data = ((Data) & 0xFFFE) | BitZero[i];            // Insert Bit0 Saved at beginning
 8001fc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fde:	e01b      	b.n	8002018 <_ZN7MPU60503PIDEhffh+0x2c8>
                }
                else Data = round((PTerm + ITerm[i]) / 4);    //Compute PID Output
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b40      	subs	r3, #64	; 0x40
 8001fec:	ed93 7a00 	vldr	s14, [r3]
 8001ff0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001ffc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002000:	eeb0 0a47 	vmov.f32	s0, s14
 8002004:	f7ff fa40 	bl	8001488 <_ZSt5roundf>
 8002008:	eef0 7a40 	vmov.f32	s15, s0
 800200c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002010:	ee17 3a90 	vmov	r3, s15
 8002014:	b21b      	sxth	r3, r3
 8002016:	847b      	strh	r3, [r7, #34]	; 0x22
                I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t *) &Data);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	7818      	ldrb	r0, [r3, #0]
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002024:	fb12 f303 	smulbb	r3, r2, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800202e:	4413      	add	r3, r2
 8002030:	b2d9      	uxtb	r1, r3
 8002032:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002036:	2201      	movs	r2, #1
 8002038:	f7ff f9b2 	bl	80013a0 <_ZN6I2Cdev10writeWordsEhhhPt>
            for (int i = 0; i < 3; i++)
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	3301      	adds	r3, #1
 8002040:	637b      	str	r3, [r7, #52]	; 0x34
 8002042:	e71c      	b.n	8001e7e <_ZN7MPU60503PIDEhffh+0x12e>
                //printf("d%d:%d e:%.2f\t",i,Data,Error);
            }
            //printf("\n");
            if ((c == 99) && eSum > 1000)
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	2b63      	cmp	r3, #99	; 0x63
 8002048:	d10f      	bne.n	800206a <_ZN7MPU60503PIDEhffh+0x31a>
 800204a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002050:	d90b      	bls.n	800206a <_ZN7MPU60503PIDEhffh+0x31a>
            {                        // Error is still to great to continue
                c = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
                printf("Error still : %lu\n",eSum);
 8002056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002058:	4814      	ldr	r0, [pc, #80]	; (80020ac <_ZN7MPU60503PIDEhffh+0x35c>)
 800205a:	f008 f95f 	bl	800a31c <iprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *) "*", 1, 100);
 800205e:	2364      	movs	r3, #100	; 0x64
 8002060:	2201      	movs	r2, #1
 8002062:	4913      	ldr	r1, [pc, #76]	; (80020b0 <_ZN7MPU60503PIDEhffh+0x360>)
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <_ZN7MPU60503PIDEhffh+0x34c>)
 8002066:	f005 faf1 	bl	800764c <HAL_UART_Transmit>
            }
            if ((eSum * ((ReadAddress == 0x3B) ? .05 : 1)) < 5)
 800206a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800206c:	f7fe fa52 	bl	8000514 <__aeabi_ui2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	7af9      	ldrb	r1, [r7, #11]
 8002076:	293b      	cmp	r1, #59	; 0x3b
 8002078:	d11c      	bne.n	80020b4 <_ZN7MPU60503PIDEhffh+0x364>
 800207a:	a105      	add	r1, pc, #20	; (adr r1, 8002090 <_ZN7MPU60503PIDEhffh+0x340>)
 800207c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002080:	e01b      	b.n	80020ba <_ZN7MPU60503PIDEhffh+0x36a>
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	d2f1a9fc 	.word	0xd2f1a9fc
 800208c:	3f50624d 	.word	0x3f50624d
 8002090:	9999999a 	.word	0x9999999a
 8002094:	3fa99999 	.word	0x3fa99999
 8002098:	0800c47c 	.word	0x0800c47c
 800209c:	200004e4 	.word	0x200004e4
 80020a0:	20000000 	.word	0x20000000
 80020a4:	0800c480 	.word	0x0800c480
 80020a8:	46800000 	.word	0x46800000
 80020ac:	0800c488 	.word	0x0800c488
 80020b0:	0800c49c 	.word	0x0800c49c
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	4955      	ldr	r1, [pc, #340]	; (8002210 <_ZN7MPU60503PIDEhffh+0x4c0>)
 80020ba:	f7fe faa5 	bl	8000608 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b52      	ldr	r3, [pc, #328]	; (8002214 <_ZN7MPU60503PIDEhffh+0x4c4>)
 80020cc:	f7fe fd0e 	bl	8000aec <__aeabi_dcmplt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <_ZN7MPU60503PIDEhffh+0x394>
                eSample++;    // Successfully found offsets prepare to  advance
 80020d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
            if ((eSum < 100) && (c > 10) && (eSample >= 10)) break;        // Advance to next Loop
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	2b63      	cmp	r3, #99	; 0x63
 80020e8:	d806      	bhi.n	80020f8 <_ZN7MPU60503PIDEhffh+0x3a8>
 80020ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ec:	2b0a      	cmp	r3, #10
 80020ee:	dd03      	ble.n	80020f8 <_ZN7MPU60503PIDEhffh+0x3a8>
 80020f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	dc06      	bgt.n	8002106 <_ZN7MPU60503PIDEhffh+0x3b6>
            delay(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f001 fbf1 	bl	80038e0 <HAL_Delay>
        for (int c = 0; c < 100; c++)
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	3301      	adds	r3, #1
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
 8002104:	e6b3      	b.n	8001e6e <_ZN7MPU60503PIDEhffh+0x11e>
            if ((eSum < 100) && (c > 10) && (eSample >= 10)) break;        // Advance to next Loop
 8002106:	bf00      	nop
        }
        HAL_UART_Transmit(&huart2, (uint8_t *) ".", 1, 100);
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	2201      	movs	r2, #1
 800210c:	4942      	ldr	r1, [pc, #264]	; (8002218 <_ZN7MPU60503PIDEhffh+0x4c8>)
 800210e:	4843      	ldr	r0, [pc, #268]	; (800221c <_ZN7MPU60503PIDEhffh+0x4cc>)
 8002110:	f005 fa9c 	bl	800764c <HAL_UART_Transmit>
        kP *= .75;
 8002114:	edd7 7a01 	vldr	s15, [r7, #4]
 8002118:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	edc7 7a01 	vstr	s15, [r7, #4]
        kI *= .75;
 8002124:	edd7 7a00 	vldr	s15, [r7]
 8002128:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800212c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002130:	edc7 7a00 	vstr	s15, [r7]
        for (int i = 0; i < 3; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	2b02      	cmp	r3, #2
 800213c:	dc59      	bgt.n	80021f2 <_ZN7MPU60503PIDEhffh+0x4a2>
        {
            if (SaveAddress != 0x13)
 800213e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002142:	2b13      	cmp	r3, #19
 8002144:	d027      	beq.n	8002196 <_ZN7MPU60503PIDEhffh+0x446>
            {
                Data = round((ITerm[i]) / 8);        //Compute PID Output
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800214e:	4413      	add	r3, r2
 8002150:	3b40      	subs	r3, #64	; 0x40
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800215a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800215e:	eeb0 0a47 	vmov.f32	s0, s14
 8002162:	f7ff f991 	bl	8001488 <_ZSt5roundf>
 8002166:	eef0 7a40 	vmov.f32	s15, s0
 800216a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800216e:	ee17 3a90 	vmov	r3, s15
 8002172:	b21b      	sxth	r3, r3
 8002174:	847b      	strh	r3, [r7, #34]	; 0x22
                Data = ((Data) & 0xFFFE) | BitZero[i];    // Insert Bit0 Saved at beginning
 8002176:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	b21a      	sxth	r2, r3
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002188:	440b      	add	r3, r1
 800218a:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	847b      	strh	r3, [r7, #34]	; 0x22
 8002194:	e017      	b.n	80021c6 <_ZN7MPU60503PIDEhffh+0x476>
            }
            else Data = round((ITerm[i]) / 4);
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800219e:	4413      	add	r3, r2
 80021a0:	3b40      	subs	r3, #64	; 0x40
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80021aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ae:	eeb0 0a47 	vmov.f32	s0, s14
 80021b2:	f7ff f969 	bl	8001488 <_ZSt5roundf>
 80021b6:	eef0 7a40 	vmov.f32	s15, s0
 80021ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021be:	ee17 3a90 	vmov	r3, s15
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	847b      	strh	r3, [r7, #34]	; 0x22
            I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t *) &Data);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	7818      	ldrb	r0, [r3, #0]
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021d2:	fb12 f303 	smulbb	r3, r2, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021dc:	4413      	add	r3, r2
 80021de:	b2d9      	uxtb	r1, r3
 80021e0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80021e4:	2201      	movs	r2, #1
 80021e6:	f7ff f8db 	bl	80013a0 <_ZN6I2Cdev10writeWordsEhhhPt>
        for (int i = 0; i < 3; i++)
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	3301      	adds	r3, #1
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
 80021f0:	e7a2      	b.n	8002138 <_ZN7MPU60503PIDEhffh+0x3e8>
    for (int L = 0; L < Loops; L++)
 80021f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f4:	3301      	adds	r3, #1
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f8:	e62f      	b.n	8001e5a <_ZN7MPU60503PIDEhffh+0x10a>
        }
    }
    resetFIFO();
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff f9ca 	bl	8001594 <_ZN7MPU60509resetFIFOEv>
    resetDMP();
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff fb86 	bl	8001912 <_ZN7MPU60508resetDMPEv>
}
 8002206:	bf00      	nop
 8002208:	3750      	adds	r7, #80	; 0x50
 800220a:	46bd      	mov	sp, r7
 800220c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002210:	3ff00000 	.word	0x3ff00000
 8002214:	40140000 	.word	0x40140000
 8002218:	0800c4a0 	.word	0x0800c4a0
 800221c:	200004e4 	.word	0x200004e4

08002220 <_ZN7MPU605018PrintActiveOffsetsEv>:

#define printfloatx(Name,Variable,Spaces,Precision,EndTxt) { Serial.print(F(Name)); {char S[(Spaces + Precision + 3)];Serial.print(F(" ")); Serial.print(dtostrf((float)Variable,Spaces,Precision ,S));}Serial.print(F(EndTxt)); }//Name,Variable,Spaces,Precision,EndTxt
void MPU6050::PrintActiveOffsets() {
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
    uint8_t AOffsetRegister = (getDeviceID() < 0x38 )? MPU6050_RA_XA_OFFS_H:0x77;
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fac3 	bl	80017b4 <_ZN7MPU605011getDeviceIDEv>
 800222e:	4603      	mov	r3, r0
 8002230:	2b37      	cmp	r3, #55	; 0x37
 8002232:	d801      	bhi.n	8002238 <_ZN7MPU605018PrintActiveOffsetsEv+0x18>
 8002234:	2306      	movs	r3, #6
 8002236:	e000      	b.n	800223a <_ZN7MPU605018PrintActiveOffsetsEv+0x1a>
 8002238:	2377      	movs	r3, #119	; 0x77
 800223a:	73fb      	strb	r3, [r7, #15]
    int16_t Data[3];
    //Serial.print(F("Offset Register 0x"));
    //Serial.print(AOffsetRegister>>4,HEX);Serial.print(AOffsetRegister&0x0F,HEX);
    printf("\n//           X Accel  Y Accel  Z Accel   X Gyro   Y Gyro   Z Gyro\n//OFFSETS   ");
 800223c:	4837      	ldr	r0, [pc, #220]	; (800231c <_ZN7MPU605018PrintActiveOffsetsEv+0xfc>)
 800223e:	f008 f86d 	bl	800a31c <iprintf>
    if(AOffsetRegister == 0x06)	I2Cdev::readWords(devAddr, AOffsetRegister, 3, (uint16_t *)Data);
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d10c      	bne.n	8002262 <_ZN7MPU605018PrintActiveOffsetsEv+0x42>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7818      	ldrb	r0, [r3, #0]
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f107 0208 	add.w	r2, r7, #8
 8002254:	7bf9      	ldrb	r1, [r7, #15]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	2203      	movs	r2, #3
 800225c:	f7fe ff48 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
 8002260:	e027      	b.n	80022b2 <_ZN7MPU605018PrintActiveOffsetsEv+0x92>
    else {
        I2Cdev::readWords(devAddr, AOffsetRegister, 1, (uint16_t *)Data);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7818      	ldrb	r0, [r3, #0]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	7bf9      	ldrb	r1, [r7, #15]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	2201      	movs	r2, #1
 8002276:	f7fe ff3b 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
        I2Cdev::readWords(devAddr, AOffsetRegister+3, 1, (uint16_t *)Data+1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7818      	ldrb	r0, [r3, #0]
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	3303      	adds	r3, #3
 8002282:	b2d9      	uxtb	r1, r3
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	3302      	adds	r3, #2
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	f7fe ff2d 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
        I2Cdev::readWords(devAddr, AOffsetRegister+6, 1, (uint16_t *)Data+2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7818      	ldrb	r0, [r3, #0]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3306      	adds	r3, #6
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	f107 0308 	add.w	r3, r7, #8
 80022a4:	3304      	adds	r3, #4
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f7fe ff1f 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
    //	A_OFFSET_H_READ_A_OFFS(Data);
    //todo:print float
//	printfloatx("", Data[0], 5, 0, ",  ");
//	printfloatx("", Data[1], 5, 0, ",  ");
//	printfloatx("", Data[2], 5, 0, ",  ");
    printf("%d     ,  ",Data[0]);
 80022b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80022b6:	4619      	mov	r1, r3
 80022b8:	481a      	ldr	r0, [pc, #104]	; (8002324 <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 80022ba:	f008 f82f 	bl	800a31c <iprintf>
    printf("%d     ,  ",Data[1]);
 80022be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4817      	ldr	r0, [pc, #92]	; (8002324 <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 80022c6:	f008 f829 	bl	800a31c <iprintf>
    printf("%d     ,  ",Data[2]);
 80022ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4814      	ldr	r0, [pc, #80]	; (8002324 <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 80022d2:	f008 f823 	bl	800a31c <iprintf>
    I2Cdev::readWords(devAddr, 0x13, 3, (uint16_t *)Data);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7818      	ldrb	r0, [r3, #0]
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_ZN7MPU605018PrintActiveOffsetsEv+0x100>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	2203      	movs	r2, #3
 80022e8:	2113      	movs	r1, #19
 80022ea:	f7fe ff01 	bl	80010f0 <_ZN6I2Cdev9readWordsEhhhPtt>
    //	XG_OFFSET_H_READ_OFFS_USR(Data);
//	printfloatx("", Data[0], 5, 0, ",  ");
//	printfloatx("", Data[1], 5, 0, ",  ");
//	printfloatx("", Data[2], 5, 0, "\n");
    printf("%d     ,  ",Data[0]);
 80022ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 80022f6:	f008 f811 	bl	800a31c <iprintf>
    printf("%d     ,  ",Data[1]);
 80022fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022fe:	4619      	mov	r1, r3
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <_ZN7MPU605018PrintActiveOffsetsEv+0x104>)
 8002302:	f008 f80b 	bl	800a31c <iprintf>
    printf("%d     \n",Data[2]);
 8002306:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800230a:	4619      	mov	r1, r3
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <_ZN7MPU605018PrintActiveOffsetsEv+0x108>)
 800230e:	f008 f805 	bl	800a31c <iprintf>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	0800c4a4 	.word	0x0800c4a4
 8002320:	20000000 	.word	0x20000000
 8002324:	0800c4f4 	.word	0x0800c4f4
 8002328:	0800c500 	.word	0x0800c500

0800232c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_DMA_Init+0x4c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <MX_DMA_Init+0x4c>)
 800233c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MX_DMA_Init+0x4c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	203b      	movs	r0, #59	; 0x3b
 8002354:	f001 fbc3 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002358:	203b      	movs	r0, #59	; 0x3b
 800235a:	f001 fbdc 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2045      	movs	r0, #69	; 0x45
 8002364:	f001 fbbb 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002368:	2045      	movs	r0, #69	; 0x45
 800236a:	f001 fbd4 	bl	8003b16 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <MX_GPIO_Init+0x14c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <MX_GPIO_Init+0x14c>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b49      	ldr	r3, [pc, #292]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <MX_GPIO_Init+0x14c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	210e      	movs	r1, #14
 8002406:	4831      	ldr	r0, [pc, #196]	; (80024cc <MX_GPIO_Init+0x150>)
 8002408:	f002 f932 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2120      	movs	r1, #32
 8002410:	482f      	ldr	r0, [pc, #188]	; (80024d0 <MX_GPIO_Init+0x154>)
 8002412:	f002 f92d 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800241c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4827      	ldr	r0, [pc, #156]	; (80024cc <MX_GPIO_Init+0x150>)
 800242e:	f001 ff9b 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002432:	230e      	movs	r3, #14
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4820      	ldr	r0, [pc, #128]	; (80024cc <MX_GPIO_Init+0x150>)
 800244a:	f001 ff8d 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800244e:	2301      	movs	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002452:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	481b      	ldr	r0, [pc, #108]	; (80024d0 <MX_GPIO_Init+0x154>)
 8002464:	f001 ff80 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002468:	2320      	movs	r3, #32
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4814      	ldr	r0, [pc, #80]	; (80024d0 <MX_GPIO_Init+0x154>)
 8002480:	f001 ff72 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 8002484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800248e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	480e      	ldr	r0, [pc, #56]	; (80024d4 <MX_GPIO_Init+0x158>)
 800249c:	f001 ff64 	bl	8004368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2006      	movs	r0, #6
 80024a6:	f001 fb1a 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024aa:	2006      	movs	r0, #6
 80024ac:	f001 fb33 	bl	8003b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2017      	movs	r0, #23
 80024b6:	f001 fb12 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024ba:	2017      	movs	r0, #23
 80024bc:	f001 fb2b 	bl	8003b16 <HAL_NVIC_EnableIRQ>

}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400

080024d8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_I2C3_Init+0x50>)
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <MX_I2C3_Init+0x54>)
 80024e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_I2C3_Init+0x50>)
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <MX_I2C3_Init+0x58>)
 80024e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_I2C3_Init+0x50>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <MX_I2C3_Init+0x50>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <MX_I2C3_Init+0x50>)
 80024f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <MX_I2C3_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_I2C3_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <MX_I2C3_Init+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <MX_I2C3_Init+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002514:	4804      	ldr	r0, [pc, #16]	; (8002528 <MX_I2C3_Init+0x50>)
 8002516:	f002 f8e9 	bl	80046ec <HAL_I2C_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002520:	f000 fd22 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200002c4 	.word	0x200002c4
 800252c:	40005c00 	.word	0x40005c00
 8002530:	00061a80 	.word	0x00061a80

08002534 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <HAL_I2C_MspInit+0xc0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d14a      	bne.n	80025ec <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002594:	2312      	movs	r3, #18
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025a0:	2304      	movs	r3, #4
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <HAL_I2C_MspInit+0xc8>)
 80025ac:	f001 fedc 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025b0:	2310      	movs	r3, #16
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	2312      	movs	r3, #18
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80025c0:	2309      	movs	r3, #9
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <HAL_I2C_MspInit+0xcc>)
 80025cc:	f001 fecc 	bl	8004368 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 80025da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_I2C_MspInit+0xc4>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40005c00 	.word	0x40005c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400

08002604 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	ed87 0a01 	vstr	s0, [r7, #4]
 800260e:	edc7 0a00 	vstr	s1, [r7]
 8002612:	edd7 0a00 	vldr	s1, [r7]
 8002616:	ed97 0a01 	vldr	s0, [r7, #4]
 800261a:	f006 ff65 	bl	80094e8 <atan2f>
 800261e:	eef0 7a40 	vmov.f32	s15, s0
 8002622:	eeb0 0a67 	vmov.f32	s0, s15
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	ed87 0a01 	vstr	s0, [r7, #4]
 8002636:	ed97 0a01 	vldr	s0, [r7, #4]
 800263a:	f006 ff57 	bl	80094ec <sqrtf>
 800263e:	eef0 7a40 	vmov.f32	s15, s0
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800265a:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
        }
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
            x = 0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	801a      	strh	r2, [r3, #0]
            y = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	805a      	strh	r2, [r3, #2]
            z = 0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	809a      	strh	r2, [r3, #4]
        }
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
            x = 0;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
            y = 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
            z = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
        }
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_ZN7MPU605013dmpInitializeEv>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default 
#endif

// this is the most basic initialization I can create. with the intent that we access the register bytes as few times as needed to get the job done.
// for detailed descriptins of all registers and there purpose google "MPU-6000/MPU-6050 Register Map and Descriptions"
uint8_t MPU6050::dmpInitialize() { // Lets get it over with fast Write everything once and set it up necely
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af02      	add	r7, sp, #8
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t val;
	uint16_t ival;
  // Reset procedure per instructions in the "MPU-6000/MPU-6050 Register Map and Descriptions" page 41
	I2Cdev::writeBit(devAddr,0x6B, 7, (val = 1)); //PWR_MGMT_1: reset with 100ms delay
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7818      	ldrb	r0, [r3, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2207      	movs	r2, #7
 80026ec:	216b      	movs	r1, #107	; 0x6b
 80026ee:	f7fe fd5f 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>
	delay(100);
 80026f2:	2064      	movs	r0, #100	; 0x64
 80026f4:	f001 f8f4 	bl	80038e0 <HAL_Delay>
	I2Cdev::writeBits(devAddr,0x6A, 2, 3, (val = 0b111)); // full SIGNAL_PATH_RESET: with another 100ms delay
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7818      	ldrb	r0, [r3, #0]
 80026fc:	2307      	movs	r3, #7
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2303      	movs	r3, #3
 8002706:	2202      	movs	r2, #2
 8002708:	216a      	movs	r1, #106	; 0x6a
 800270a:	f7fe fd91 	bl	8001230 <_ZN6I2Cdev9writeBitsEhhhhh>
	delay(100);         
 800270e:	2064      	movs	r0, #100	; 0x64
 8002710:	f001 f8e6 	bl	80038e0 <HAL_Delay>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 1000 0001 PWR_MGMT_1:Clock Source Select PLL_X_gyro
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7818      	ldrb	r0, [r3, #0]
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	f107 030f 	add.w	r3, r7, #15
 8002720:	2201      	movs	r2, #1
 8002722:	216b      	movs	r1, #107	; 0x6b
 8002724:	f7fe fe06 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x00)); // 0000 0000 INT_ENABLE: no Interrupt
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7818      	ldrb	r0, [r3, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	f107 030f 	add.w	r3, r7, #15
 8002734:	2201      	movs	r2, #1
 8002736:	2138      	movs	r1, #56	; 0x38
 8002738:	f7fe fdfc 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x23, 1, &(val = 0x00)); // 0000 0000 MPU FIFO_EN: (all off) Using DMP's FIFO instead
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7818      	ldrb	r0, [r3, #0]
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	f107 030f 	add.w	r3, r7, #15
 8002748:	2201      	movs	r2, #1
 800274a:	2123      	movs	r1, #35	; 0x23
 800274c:	f7fe fdf2 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1C, 1, &(val = 0x00)); // 0000 0000 ACCEL_CONFIG: 0 =  Accel Full Scale Select: 2g
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7818      	ldrb	r0, [r3, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	f107 030f 	add.w	r3, r7, #15
 800275c:	2201      	movs	r2, #1
 800275e:	211c      	movs	r1, #28
 8002760:	f7fe fde8 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x37, 1, &(val = 0x80)); // 1001 0000 INT_PIN_CFG: ACTL The logic level for int pin is active low. and interrupt status bits are cleared on any read
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7818      	ldrb	r0, [r3, #0]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	f107 030f 	add.w	r3, r7, #15
 8002770:	2201      	movs	r2, #1
 8002772:	2137      	movs	r1, #55	; 0x37
 8002774:	f7fe fdde 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6B, 1, &(val = 0x01)); // 0000 0001 PWR_MGMT_1: Clock Source Select PLL_X_gyro
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7818      	ldrb	r0, [r3, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	f107 030f 	add.w	r3, r7, #15
 8002784:	2201      	movs	r2, #1
 8002786:	216b      	movs	r1, #107	; 0x6b
 8002788:	f7fe fdd4 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x19, 1, &(val = 0x04)); // 0000 0100 SMPLRT_DIV: Divides the internal sample rate 400Hz ( Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7818      	ldrb	r0, [r3, #0]
 8002790:	2304      	movs	r3, #4
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	f107 030f 	add.w	r3, r7, #15
 8002798:	2201      	movs	r2, #1
 800279a:	2119      	movs	r1, #25
 800279c:	f7fe fdca 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x1A, 1, &(val = 0x01)); // 0000 0001 CONFIG: Digital Low Pass Filter (DLPF) Configuration 188HZ  //Im betting this will be the beat
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7818      	ldrb	r0, [r3, #0]
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	f107 030f 	add.w	r3, r7, #15
 80027ac:	2201      	movs	r2, #1
 80027ae:	211a      	movs	r1, #26
 80027b0:	f7fe fdc0 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	if (!writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) return 1; // Loads the DMP image into the MPU6050 Memory // Should Never Fail
 80027b4:	2301      	movs	r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	f640 32f6 	movw	r2, #3062	; 0xbf6
 80027c2:	4924      	ldr	r1, [pc, #144]	; (8002854 <_ZN7MPU605013dmpInitializeEv+0x17c>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff f9cb 	bl	8001b60 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_ZN7MPU605013dmpInitializeEv+0x102>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e037      	b.n	800284a <_ZN7MPU605013dmpInitializeEv+0x172>
	I2Cdev::writeWords(devAddr, 0x70, 1, &(ival = 0x0400)); // DMP Program Start Address
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7818      	ldrb	r0, [r3, #0]
 80027de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e2:	81bb      	strh	r3, [r7, #12]
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	2201      	movs	r2, #1
 80027ea:	2170      	movs	r1, #112	; 0x70
 80027ec:	f7fe fdd8 	bl	80013a0 <_ZN6I2Cdev10writeWordsEhhhPt>
	I2Cdev::writeBytes(devAddr,0x1B, 1, &(val = 0x18)); // 0001 1000 GYRO_CONFIG: 3 = +2000 Deg/sec
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7818      	ldrb	r0, [r3, #0]
 80027f4:	2318      	movs	r3, #24
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	f107 030f 	add.w	r3, r7, #15
 80027fc:	2201      	movs	r2, #1
 80027fe:	211b      	movs	r1, #27
 8002800:	f7fe fd98 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x6A, 1, &(val = 0xC0)); // 1100 1100 USER_CTRL: Enable Fifo and Reset Fifo
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7818      	ldrb	r0, [r3, #0]
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	f107 030f 	add.w	r3, r7, #15
 8002810:	2201      	movs	r2, #1
 8002812:	216a      	movs	r1, #106	; 0x6a
 8002814:	f7fe fd8e 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBytes(devAddr,0x38, 1, &(val = 0x02)); // 0000 0010 INT_ENABLE: RAW_DMP_INT_EN on
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7818      	ldrb	r0, [r3, #0]
 800281c:	2302      	movs	r3, #2
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	f107 030f 	add.w	r3, r7, #15
 8002824:	2201      	movs	r2, #1
 8002826:	2138      	movs	r1, #56	; 0x38
 8002828:	f7fe fd84 	bl	8001334 <_ZN6I2Cdev10writeBytesEhhhPh>
	I2Cdev::writeBit(devAddr,0x6A, 2, 1);      // Reset FIFO one last time just for kicks. (MPUi2cWrite reads 0x6A first and only alters 1 bit and then saves the byte)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7818      	ldrb	r0, [r3, #0]
 8002830:	2301      	movs	r3, #1
 8002832:	2202      	movs	r2, #2
 8002834:	216a      	movs	r1, #106	; 0x6a
 8002836:	f7fe fcbb 	bl	80011b0 <_ZN6I2Cdev8writeBitEhhhh>

  setDMPEnabled(false); // disable DMP for compatibility with the MPU6050 library
 800283a:	2100      	movs	r1, #0
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff f857 	bl	80018f0 <_ZN7MPU605013setDMPEnabledEb>
/*
    dmpPacketSize += 16;//DMP_FEATURE_6X_LP_QUAT
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_ACCEL
    dmpPacketSize += 6;//DMP_FEATURE_SEND_RAW_GYRO
*/
	dmpPacketSize = 28;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	221c      	movs	r2, #28
 8002846:	829a      	strh	r2, [r3, #20]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	0800c628 	.word	0x0800c628

08002858 <_ZN7MPU605016dmpGetQuaternionEPsPKh>:
    data[1] = (((uint32_t)packet[4] << 24) | ((uint32_t)packet[5] << 16) | ((uint32_t)packet[6] << 8) | packet[7]);
    data[2] = (((uint32_t)packet[8] << 24) | ((uint32_t)packet[9] << 16) | ((uint32_t)packet[10] << 8) | packet[11]);
    data[3] = (((uint32_t)packet[12] << 24) | ((uint32_t)packet[13] << 16) | ((uint32_t)packet[14] << 8) | packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <_ZN7MPU605016dmpGetQuaternionEPsPKh+0x18>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) | packet[1]);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	b21a      	sxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b21b      	sxth	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	b21a      	sxth	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) | packet[5]);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b219      	sxth	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3305      	adds	r3, #5
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b21a      	sxth	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3302      	adds	r3, #2
 800289e:	430a      	orrs	r2, r1
 80028a0:	b212      	sxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) | packet[9]);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3308      	adds	r3, #8
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	b219      	sxth	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3309      	adds	r3, #9
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b21a      	sxth	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3304      	adds	r3, #4
 80028ba:	430a      	orrs	r2, r1
 80028bc:	b212      	sxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) | packet[13]);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	330c      	adds	r3, #12
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	b219      	sxth	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	330d      	adds	r3, #13
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3306      	adds	r3, #6
 80028d6:	430a      	orrs	r2, r1
 80028d8:	b212      	sxth	r2, r2
 80028da:	801a      	strh	r2, [r3, #0]
    return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4619      	mov	r1, r3
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff ffa9 	bl	8002858 <_ZN7MPU605016dmpGetQuaternionEPsPKh>
 8002906:	4603      	mov	r3, r0
 8002908:	77fb      	strb	r3, [r7, #31]
    if (status == 0) {
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d135      	bne.n	800297c <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x90>
        q -> w = (float)qI[0] / 16384.0f;
 8002910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002988 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	edc3 7a00 	vstr	s15, [r3]
        q -> x = (float)qI[1] / 16384.0f;
 800292a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002936:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002988 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	edc3 7a01 	vstr	s15, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 8002944:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002950:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002988 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8002954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	edc3 7a02 	vstr	s15, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 800295e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002988 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 800296e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	edc3 7a03 	vstr	s15, [r3, #12]
        return 0;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x92>
    }
    return status; // int16 return value, indicates error if this line is reached
 800297c:	7ffb      	ldrb	r3, [r7, #31]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	46800000 	.word	0x46800000

0800298c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
    data[2] = ((int32_t)qI[0] * qI[0] - (int32_t)qI[1] * qI[1]
	       - (int32_t)qI[2] * qI[2] + (int32_t)qI[3] * qI[3]) / (2 * 16384);
    return status;
}

uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	ed93 7a01 	vldr	s14, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	edc3 7a00 	vstr	s15, [r3]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ed93 7a00 	vldr	s14, [r3]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80029d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edd3 7a03 	vldr	s15, [r3, #12]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	edc3 7a01 	vstr	s15, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	ed93 7a00 	vldr	s14, [r3]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	edc3 7a02 	vstr	s15, [r3, #8]
    return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    // roll: (tilt left/right, about X axis)
    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));
    return 0;
}
#else 
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	ed2d 8b02 	vpush	{d8}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee37 6a67 	vsub.f32	s12, s14, s15
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ac6:	eef0 0a67 	vmov.f32	s1, s15
 8002aca:	eeb0 0a46 	vmov.f32	s0, s12
 8002ace:	f7ff fd99 	bl	8002604 <_ZSt5atan2ff>
 8002ad2:	eef0 7a40 	vmov.f32	s15, s0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	edc3 7a00 	vstr	s15, [r3]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	ed93 8a00 	vldr	s16, [r3]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	f7ff fd8f 	bl	800262c <_ZSt4sqrtf>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1d1c      	adds	r4, r3, #4
 8002b16:	eef0 0a67 	vmov.f32	s1, s15
 8002b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8002b1e:	f7ff fd71 	bl	8002604 <_ZSt5atan2ff>
 8002b22:	eef0 7a40 	vmov.f32	s15, s0
 8002b26:	edc4 7a00 	vstr	s15, [r4]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f103 0408 	add.w	r4, r3, #8
 8002b3c:	eef0 0a47 	vmov.f32	s1, s14
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	f7ff fd5e 	bl	8002604 <_ZSt5atan2ff>
 8002b48:	eef0 7a40 	vmov.f32	s15, s0
 8002b4c:	edc4 7a00 	vstr	s15, [r4]
    if (gravity -> z < 0) {
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	d521      	bpl.n	8002ba4 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x150>
        if(data[1] > 0) {
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3304      	adds	r3, #4
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	dd0c      	ble.n	8002b8c <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x138>
            data[1] = PI - data[1]; 
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3304      	adds	r3, #4
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002bb4 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x160>
 8002b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b86:	edc3 7a00 	vstr	s15, [r3]
 8002b8a:	e00b      	b.n	8002ba4 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x150>
        } else { 
            data[1] = -PI - data[1];
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	3304      	adds	r3, #4
 8002b98:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002bb8 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat+0x164>
 8002b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
        }
    }
    return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	ecbd 8b02 	vpop	{d8}
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40490ff9 	.word	0x40490ff9
 8002bb8:	c0490ff9 	.word	0xc0490ff9

08002bbc <_ZN7MPU605020dmpGetFIFOPacketSizeEv>:
// uint8_t MPU6050::dmpSetGyroDataSource(uint_fast8_t source);
// uint8_t MPU6050::dmpDecodeQuantizedAccel();
// uint32_t MPU6050::dmpGetGyroSumOfSquare();
// uint32_t MPU6050::dmpGetAccelSumOfSquare();
// void MPU6050::dmpOverrideQuaternion(long *q);
uint16_t MPU6050::dmpGetFIFOPacketSize() {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    return dmpPacketSize;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8a9b      	ldrh	r3, [r3, #20]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN7MPU605023dmpGetCurrentFIFOPacketEPh>:



uint8_t MPU6050::dmpGetCurrentFIFOPacket(uint8_t *data) { // overflow proof
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
    //printf("%d",dmpPacketSize);
    return(GetCurrentFIFOPacket(data, dmpPacketSize));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8a9b      	ldrh	r3, [r3, #20]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe fd45 	bl	8001678 <_ZN7MPU605020GetCurrentFIFOPacketEPhh>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b2db      	uxtb	r3, r3
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	0000      	movs	r0, r0
 8002bfc:	0000      	movs	r0, r0
	...

08002c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c04:	f000 fdfa 	bl	80037fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c08:	f000 f93c 	bl	8002e84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c0c:	f7ff fbb6 	bl	800237c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c10:	f000 fcb4 	bl	800357c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002c14:	f7ff fb8a 	bl	800232c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002c18:	f000 f9ea 	bl	8002ff0 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002c1c:	f000 fc84 	bl	8003528 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002c20:	f000 fcd6 	bl	80035d0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002c24:	f006 f9a0 	bl	8008f68 <MX_FATFS_Init>
  MX_I2C3_Init();
 8002c28:	f7ff fc56 	bl	80024d8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // initialize device

        printf(F("Initializing I2C devices...\n"));//F(x)=x
 8002c2c:	487c      	ldr	r0, [pc, #496]	; (8002e20 <main+0x220>)
 8002c2e:	f007 fc11 	bl	800a454 <puts>
        mpu.initialize();
 8002c32:	487c      	ldr	r0, [pc, #496]	; (8002e24 <main+0x224>)
 8002c34:	f7fe fc48 	bl	80014c8 <_ZN7MPU605010initializeEv>
        delay(1000);
 8002c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c3c:	f000 fe50 	bl	80038e0 <HAL_Delay>


        // verify connection
        printf(F("Testing device connections...\n"));
 8002c40:	4879      	ldr	r0, [pc, #484]	; (8002e28 <main+0x228>)
 8002c42:	f007 fc07 	bl	800a454 <puts>
    //        HAL_I2C_MspInit(&hi2c1);
    //        HAL_Delay(250);
    //        HAL_UART_Transmit(&huart1,(uint8_t *)".",1,100);
    //        //HAL_NVIC_SystemReset();
    //    }
        printf(mpu.testConnection() ? F("MPU6050 connection successful\n") : F("MPU6050 connection failed\n"));
 8002c46:	4877      	ldr	r0, [pc, #476]	; (8002e24 <main+0x224>)
 8002c48:	f7fe fc56 	bl	80014f8 <_ZN7MPU605014testConnectionEv>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <main+0x56>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <main+0x22c>)
 8002c54:	e000      	b.n	8002c58 <main+0x58>
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <main+0x230>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f007 fb5f 	bl	800a31c <iprintf>

        // wait for ready


        // load and configure the DMP
        printf(F("Initializing DMP...\n"));
 8002c5e:	4875      	ldr	r0, [pc, #468]	; (8002e34 <main+0x234>)
 8002c60:	f007 fbf8 	bl	800a454 <puts>

        // supply your own gyro offsets here, scaled for min sensitivity
        mpu.setXGyroOffset(30);
 8002c64:	211e      	movs	r1, #30
 8002c66:	486f      	ldr	r0, [pc, #444]	; (8002e24 <main+0x224>)
 8002c68:	f7fe fe0f 	bl	800188a <_ZN7MPU605014setXGyroOffsetEs>
        mpu.setYGyroOffset(58);
 8002c6c:	213a      	movs	r1, #58	; 0x3a
 8002c6e:	486d      	ldr	r0, [pc, #436]	; (8002e24 <main+0x224>)
 8002c70:	f7fe fe1c 	bl	80018ac <_ZN7MPU605014setYGyroOffsetEs>
        mpu.setZGyroOffset(21);
 8002c74:	2115      	movs	r1, #21
 8002c76:	486b      	ldr	r0, [pc, #428]	; (8002e24 <main+0x224>)
 8002c78:	f7fe fe29 	bl	80018ce <_ZN7MPU605014setZGyroOffsetEs>
        mpu.setXAccelOffset(0);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4869      	ldr	r0, [pc, #420]	; (8002e24 <main+0x224>)
 8002c80:	f7fe fdb2 	bl	80017e8 <_ZN7MPU605015setXAccelOffsetEs>
        mpu.setYAccelOffset(0);
 8002c84:	2100      	movs	r1, #0
 8002c86:	4867      	ldr	r0, [pc, #412]	; (8002e24 <main+0x224>)
 8002c88:	f7fe fdc9 	bl	800181e <_ZN7MPU605015setYAccelOffsetEs>
        mpu.setZAccelOffset(0);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4865      	ldr	r0, [pc, #404]	; (8002e24 <main+0x224>)
 8002c90:	f7fe fde0 	bl	8001854 <_ZN7MPU605015setZAccelOffsetEs>

        devStatus = mpu.dmpInitialize();
 8002c94:	4863      	ldr	r0, [pc, #396]	; (8002e24 <main+0x224>)
 8002c96:	f7ff fd1f 	bl	80026d8 <_ZN7MPU605013dmpInitializeEv>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <main+0x238>)
 8002ca0:	701a      	strb	r2, [r3, #0]
        // make sure it worked (returns 0 if so)
        if (devStatus == 0)
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <main+0x238>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d126      	bne.n	8002cf8 <main+0xf8>
        {
            // Calibration Time: generate offsets and calibrate our MPU6050
            mpu.CalibrateAccel(6);
 8002caa:	2106      	movs	r1, #6
 8002cac:	485d      	ldr	r0, [pc, #372]	; (8002e24 <main+0x224>)
 8002cae:	f7fe fff3 	bl	8001c98 <_ZN7MPU605014CalibrateAccelEh>
            mpu.CalibrateGyro(6);
 8002cb2:	2106      	movs	r1, #6
 8002cb4:	485b      	ldr	r0, [pc, #364]	; (8002e24 <main+0x224>)
 8002cb6:	f7fe ff73 	bl	8001ba0 <_ZN7MPU605013CalibrateGyroEh>
            mpu.PrintActiveOffsets();
 8002cba:	485a      	ldr	r0, [pc, #360]	; (8002e24 <main+0x224>)
 8002cbc:	f7ff fab0 	bl	8002220 <_ZN7MPU605018PrintActiveOffsetsEv>
            // turn on the DMP, now that it's ready
            printf(F("Enabling DMP...\n"));
 8002cc0:	485e      	ldr	r0, [pc, #376]	; (8002e3c <main+0x23c>)
 8002cc2:	f007 fbc7 	bl	800a454 <puts>
            mpu.setDMPEnabled(true);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4856      	ldr	r0, [pc, #344]	; (8002e24 <main+0x224>)
 8002cca:	f7fe fe11 	bl	80018f0 <_ZN7MPU605013setDMPEnabledEb>

            // enable Arduino interrupt detection
            mpuIntStatus = mpu.getIntStatus();
 8002cce:	4855      	ldr	r0, [pc, #340]	; (8002e24 <main+0x224>)
 8002cd0:	f7fe fc4a 	bl	8001568 <_ZN7MPU605012getIntStatusEv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <main+0x240>)
 8002cda:	701a      	strb	r2, [r3, #0]

            // set our DMP Ready flag so the main loop() function knows it's okay to use it
            printf(F("DMP ready! Waiting for first interrupt...\n"));
 8002cdc:	4859      	ldr	r0, [pc, #356]	; (8002e44 <main+0x244>)
 8002cde:	f007 fbb9 	bl	800a454 <puts>
    //        float a;
    //        printf("int is %d\n",sizeof(a));
            dmpReady = true;
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <main+0x248>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]

            // get expected DMP packet size for later comparison
            packetSize = mpu.dmpGetFIFOPacketSize();
 8002ce8:	484e      	ldr	r0, [pc, #312]	; (8002e24 <main+0x224>)
 8002cea:	f7ff ff67 	bl	8002bbc <_ZN7MPU605020dmpGetFIFOPacketSizeEv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <main+0x24c>)
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e00b      	b.n	8002d10 <main+0x110>
        {
            // ERROR!
            // 1 = initial memory load failed
            // 2 = DMP configuration updates failed
            // (if it's going to break, usually the code will be 1)
            printf(F("DMP Initialization failed (code "));
 8002cf8:	4855      	ldr	r0, [pc, #340]	; (8002e50 <main+0x250>)
 8002cfa:	f007 fb0f 	bl	800a31c <iprintf>
            printf("%d",devStatus);
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <main+0x238>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4853      	ldr	r0, [pc, #332]	; (8002e54 <main+0x254>)
 8002d06:	f007 fb09 	bl	800a31c <iprintf>
            printf(F(")\n"));
 8002d0a:	4853      	ldr	r0, [pc, #332]	; (8002e58 <main+0x258>)
 8002d0c:	f007 fba2 	bl	800a454 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!dmpReady)
 8002d10:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <main+0x248>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d178      	bne.n	8002e10 <main+0x210>
	  	 	 	        continue;
	  	 	 	    if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer))
 8002d1e:	494f      	ldr	r1, [pc, #316]	; (8002e5c <main+0x25c>)
 8002d20:	4840      	ldr	r0, [pc, #256]	; (8002e24 <main+0x224>)
 8002d22:	f7ff ff57 	bl	8002bd4 <_ZN7MPU605023dmpGetCurrentFIFOPacketEPh>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d064      	beq.n	8002e00 <main+0x200>
	  	 	 	        printfln(euler[2] * 180 / M_PI);
	  	 	 	#endif

	  	 	 	#ifdef OUTPUT_READABLE_YAWPITCHROLL
	  	 	 	        // display Euler angles in degrees
	  	 	 	        mpu.dmpGetQuaternion(&q, fifoBuffer);
 8002d36:	4a49      	ldr	r2, [pc, #292]	; (8002e5c <main+0x25c>)
 8002d38:	4949      	ldr	r1, [pc, #292]	; (8002e60 <main+0x260>)
 8002d3a:	483a      	ldr	r0, [pc, #232]	; (8002e24 <main+0x224>)
 8002d3c:	f7ff fdd6 	bl	80028ec <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
	  	 	 	        mpu.dmpGetGravity(&gravity, &q);
 8002d40:	4a47      	ldr	r2, [pc, #284]	; (8002e60 <main+0x260>)
 8002d42:	4948      	ldr	r1, [pc, #288]	; (8002e64 <main+0x264>)
 8002d44:	4837      	ldr	r0, [pc, #220]	; (8002e24 <main+0x224>)
 8002d46:	f7ff fe21 	bl	800298c <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
	  	 	 	        mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <main+0x264>)
 8002d4c:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <main+0x260>)
 8002d4e:	4946      	ldr	r1, [pc, #280]	; (8002e68 <main+0x268>)
 8002d50:	4834      	ldr	r0, [pc, #208]	; (8002e24 <main+0x224>)
 8002d52:	f7ff fe7f 	bl	8002a54 <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>
	  	 	 	        //mpu.getMotion6(&a_x, &a_y, &a_z, &g_x, &g_y, &g_z);
	  	 	 	        //printf("6:\t%d\t%d\t%d\t%d\t%d\t%d\n", a_x, a_y, a_z, g_x, g_y, g_z);
	  	 	 	        printf("ypr: ");
 8002d56:	4845      	ldr	r0, [pc, #276]	; (8002e6c <main+0x26c>)
 8002d58:	f007 fae0 	bl	800a31c <iprintf>
	  	 	 	        printf("%.2f", ypr[0] * 180 / M_PI);
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <main+0x268>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002e70 <main+0x270>
 8002d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6a:	ee17 0a90 	vmov	r0, s15
 8002d6e:	f7fd fbf3 	bl	8000558 <__aeabi_f2d>
 8002d72:	a329      	add	r3, pc, #164	; (adr r3, 8002e18 <main+0x218>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fd70 	bl	800085c <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	483c      	ldr	r0, [pc, #240]	; (8002e74 <main+0x274>)
 8002d82:	f007 facb 	bl	800a31c <iprintf>
	  	 	 	        printf("\t");
 8002d86:	2009      	movs	r0, #9
 8002d88:	f007 fae0 	bl	800a34c <putchar>
	  	 	 	        printf("%.2f", ypr[1] * 180 / M_PI);
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <main+0x268>)
 8002d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d92:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e70 <main+0x270>
 8002d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fbdb 	bl	8000558 <__aeabi_f2d>
 8002da2:	a31d      	add	r3, pc, #116	; (adr r3, 8002e18 <main+0x218>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fd58 	bl	800085c <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4830      	ldr	r0, [pc, #192]	; (8002e74 <main+0x274>)
 8002db2:	f007 fab3 	bl	800a31c <iprintf>
	  	 	 	        printf("\t");
 8002db6:	2009      	movs	r0, #9
 8002db8:	f007 fac8 	bl	800a34c <putchar>
	  	 	 	        printf("%.2f", ypr[2] * 180 / M_PI);
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <main+0x268>)
 8002dbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e70 <main+0x270>
 8002dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dca:	ee17 0a90 	vmov	r0, s15
 8002dce:	f7fd fbc3 	bl	8000558 <__aeabi_f2d>
 8002dd2:	a311      	add	r3, pc, #68	; (adr r3, 8002e18 <main+0x218>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fd40 	bl	800085c <__aeabi_ddiv>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4824      	ldr	r0, [pc, #144]	; (8002e74 <main+0x274>)
 8002de2:	f007 fa9b 	bl	800a31c <iprintf>
	  	 	 	        printf("\r\n");
 8002de6:	4824      	ldr	r0, [pc, #144]	; (8002e78 <main+0x278>)
 8002de8:	f007 fb34 	bl	800a454 <puts>
	  	 	 	          printf("\t");
	  	 	 	          printf(gy.y);
	  	 	 	          printf("\t");
	  	 	 	          printf(gy.z);
	  	 	 	        */
	  	 	 	        printf("\n");
 8002dec:	200a      	movs	r0, #10
 8002dee:	f007 faad 	bl	800a34c <putchar>
	  	 	 	        teapotPacket[8] = fifoBuffer[12];
	  	 	 	        teapotPacket[9] = fifoBuffer[13];
	  	 	 	        Serial.write(teapotPacket, 14);
	  	 	 	        teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
	  	 	 	#endif
	  	 	 	        printf("good\n");
 8002df2:	4822      	ldr	r0, [pc, #136]	; (8002e7c <main+0x27c>)
 8002df4:	f007 fb2e 	bl	800a454 <puts>
	  	 	 	        HAL_Delay(10);
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f000 fd71 	bl	80038e0 <HAL_Delay>
 8002dfe:	e787      	b.n	8002d10 <main+0x110>
	  	 	 	    }
	  	 	 	    else{
	  	 	 	        printf("fifo error!\n");
 8002e00:	481f      	ldr	r0, [pc, #124]	; (8002e80 <main+0x280>)
 8002e02:	f007 fb27 	bl	800a454 <puts>
	  	 	 	        HAL_Delay(1000);
 8002e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e0a:	f000 fd69 	bl	80038e0 <HAL_Delay>
 8002e0e:	e77f      	b.n	8002d10 <main+0x110>
	  	 	 	        continue;
 8002e10:	bf00      	nop
	  if (!dmpReady)
 8002e12:	e77d      	b.n	8002d10 <main+0x110>
 8002e14:	f3af 8000 	nop.w
 8002e18:	54442d18 	.word	0x54442d18
 8002e1c:	400921fb 	.word	0x400921fb
 8002e20:	0800c50c 	.word	0x0800c50c
 8002e24:	200001fc 	.word	0x200001fc
 8002e28:	0800c528 	.word	0x0800c528
 8002e2c:	0800c548 	.word	0x0800c548
 8002e30:	0800c568 	.word	0x0800c568
 8002e34:	0800c584 	.word	0x0800c584
 8002e38:	20000216 	.word	0x20000216
 8002e3c:	0800c598 	.word	0x0800c598
 8002e40:	20000215 	.word	0x20000215
 8002e44:	0800c5a8 	.word	0x0800c5a8
 8002e48:	20000214 	.word	0x20000214
 8002e4c:	20000218 	.word	0x20000218
 8002e50:	0800c5d4 	.word	0x0800c5d4
 8002e54:	0800c5f8 	.word	0x0800c5f8
 8002e58:	0800c5fc 	.word	0x0800c5fc
 8002e5c:	2000021c 	.word	0x2000021c
 8002e60:	2000025c 	.word	0x2000025c
 8002e64:	2000028c 	.word	0x2000028c
 8002e68:	20000298 	.word	0x20000298
 8002e6c:	0800c600 	.word	0x0800c600
 8002e70:	43340000 	.word	0x43340000
 8002e74:	0800c608 	.word	0x0800c608
 8002e78:	0800c610 	.word	0x0800c610
 8002e7c:	0800c614 	.word	0x0800c614
 8002e80:	0800c61c 	.word	0x0800c61c

08002e84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b094      	sub	sp, #80	; 0x50
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0320 	add.w	r3, r7, #32
 8002e8e:	2230      	movs	r2, #48	; 0x30
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f006 fd26 	bl	80098e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <_Z18SystemClock_Configv+0xdc>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <_Z18SystemClock_Configv+0xdc>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <_Z18SystemClock_Configv+0xdc>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <_Z18SystemClock_Configv+0xe0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <_Z18SystemClock_Configv+0xe0>)
 8002ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <_Z18SystemClock_Configv+0xe0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ee4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eea:	2302      	movs	r3, #2
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002ef8:	2364      	movs	r3, #100	; 0x64
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002efc:	2302      	movs	r3, #2
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002f00:	2305      	movs	r3, #5
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f04:	f107 0320 	add.w	r3, r7, #32
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fbaf 	bl	800566c <HAL_RCC_OscConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002f1e:	f000 f823 	bl	8002f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f22:	230f      	movs	r3, #15
 8002f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f26:	2302      	movs	r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 fe0c 	bl	8005b5c <HAL_RCC_ClockConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002f54:	f000 f808 	bl	8002f68 <Error_Handler>
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3750      	adds	r7, #80	; 0x50
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000

08002f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6c:	b672      	cpsid	i
}
 8002f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <Error_Handler+0x8>
	...

08002f74 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d11a      	bne.n	8002fba <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d115      	bne.n	8002fba <_Z41__static_initialization_and_destruction_0ii+0x46>
MPU6050 mpu;
 8002f8e:	2168      	movs	r1, #104	; 0x68
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002f92:	f7fe fa89 	bl	80014a8 <_ZN7MPU6050C1Eh>
Quaternion q;           // [w, x, y, z]         quaternion container
 8002f96:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002f98:	f7ff fb58 	bl	800264c <_ZN10QuaternionC1Ev>
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002f9e:	f7ff fb70 	bl	8002682 <_ZN11VectorInt16C1Ev>
VectorInt16 gy;         // [x, y, z]            gyro sensor measurements
 8002fa2:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002fa4:	f7ff fb6d 	bl	8002682 <_ZN11VectorInt16C1Ev>
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
 8002fa8:	480a      	ldr	r0, [pc, #40]	; (8002fd4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002faa:	f7ff fb6a 	bl	8002682 <_ZN11VectorInt16C1Ev>
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
 8002fae:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002fb0:	f7ff fb67 	bl	8002682 <_ZN11VectorInt16C1Ev>
VectorFloat gravity;    // [x, y, z]            gravity vector
 8002fb4:	4809      	ldr	r0, [pc, #36]	; (8002fdc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002fb6:	f7ff fb78 	bl	80026aa <_ZN11VectorFloatC1Ev>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200001fc 	.word	0x200001fc
 8002fc8:	2000025c 	.word	0x2000025c
 8002fcc:	2000026c 	.word	0x2000026c
 8002fd0:	20000274 	.word	0x20000274
 8002fd4:	2000027c 	.word	0x2000027c
 8002fd8:	20000284 	.word	0x20000284
 8002fdc:	2000028c 	.word	0x2000028c

08002fe0 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7ff ffc3 	bl	8002f74 <_Z41__static_initialization_and_destruction_0ii>
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 8002ff6:	4a0d      	ldr	r2, [pc, #52]	; (800302c <MX_SDIO_SD_Init+0x3c>)
 8002ff8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 8003008:	2200      	movs	r2, #0
 800300a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <MX_SDIO_SD_Init+0x38>)
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	200003d8 	.word	0x200003d8
 800302c:	40012c00 	.word	0x40012c00

08003030 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a77      	ldr	r2, [pc, #476]	; (800322c <HAL_SD_MspInit+0x1fc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 80e8 	bne.w	8003224 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_SD_MspInit+0x200>)
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	4a74      	ldr	r2, [pc, #464]	; (8003230 <HAL_SD_MspInit+0x200>)
 800305e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003062:	6453      	str	r3, [r2, #68]	; 0x44
 8003064:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_SD_MspInit+0x200>)
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <HAL_SD_MspInit+0x200>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a6d      	ldr	r2, [pc, #436]	; (8003230 <HAL_SD_MspInit+0x200>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_SD_MspInit+0x200>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b67      	ldr	r3, [pc, #412]	; (8003230 <HAL_SD_MspInit+0x200>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a66      	ldr	r2, [pc, #408]	; (8003230 <HAL_SD_MspInit+0x200>)
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <HAL_SD_MspInit+0x200>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b60      	ldr	r3, [pc, #384]	; (8003230 <HAL_SD_MspInit+0x200>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a5f      	ldr	r2, [pc, #380]	; (8003230 <HAL_SD_MspInit+0x200>)
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_SD_MspInit+0x200>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030d4:	230c      	movs	r3, #12
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	4855      	ldr	r0, [pc, #340]	; (8003234 <HAL_SD_MspInit+0x204>)
 80030e0:	f001 f942 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030f6:	230c      	movs	r3, #12
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	f107 031c 	add.w	r3, r7, #28
 80030fe:	4619      	mov	r1, r3
 8003100:	484d      	ldr	r0, [pc, #308]	; (8003238 <HAL_SD_MspInit+0x208>)
 8003102:	f001 f931 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003106:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800310a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003118:	230c      	movs	r3, #12
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 031c 	add.w	r3, r7, #28
 8003120:	4619      	mov	r1, r3
 8003122:	4846      	ldr	r0, [pc, #280]	; (800323c <HAL_SD_MspInit+0x20c>)
 8003124:	f001 f920 	bl	8004368 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003128:	4b45      	ldr	r3, [pc, #276]	; (8003240 <HAL_SD_MspInit+0x210>)
 800312a:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_SD_MspInit+0x214>)
 800312c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800312e:	4b44      	ldr	r3, [pc, #272]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003134:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800313c:	4b40      	ldr	r3, [pc, #256]	; (8003240 <HAL_SD_MspInit+0x210>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003148:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_SD_MspInit+0x210>)
 800314c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003150:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003154:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003158:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <HAL_SD_MspInit+0x210>)
 800315c:	2220      	movs	r2, #32
 800315e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003160:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003168:	2204      	movs	r2, #4
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800316c:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_SD_MspInit+0x210>)
 800316e:	2203      	movs	r2, #3
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003174:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800317a:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_SD_MspInit+0x210>)
 800317c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003182:	482f      	ldr	r0, [pc, #188]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003184:	f000 fce2 	bl	8003b4c <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 800318e:	f7ff feeb 	bl	8002f68 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_SD_MspInit+0x210>)
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <HAL_SD_MspInit+0x210>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <HAL_SD_MspInit+0x21c>)
 80031a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031ae:	2240      	movs	r2, #64	; 0x40
 80031b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031b8:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031be:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031c8:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031d2:	2220      	movs	r2, #32
 80031d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031de:	2204      	movs	r2, #4
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80031f8:	4813      	ldr	r0, [pc, #76]	; (8003248 <HAL_SD_MspInit+0x218>)
 80031fa:	f000 fca7 	bl	8003b4c <HAL_DMA_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_SD_MspInit+0x1d8>
    {
      Error_Handler();
 8003204:	f7ff feb0 	bl	8002f68 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <HAL_SD_MspInit+0x218>)
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <HAL_SD_MspInit+0x218>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	2031      	movs	r0, #49	; 0x31
 800321a:	f000 fc60 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800321e:	2031      	movs	r0, #49	; 0x31
 8003220:	f000 fc79 	bl	8003b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003224:	bf00      	nop
 8003226:	3730      	adds	r7, #48	; 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40023800 	.word	0x40023800
 8003234:	40020000 	.word	0x40020000
 8003238:	40020400 	.word	0x40020400
 800323c:	40020800 	.word	0x40020800
 8003240:	20000318 	.word	0x20000318
 8003244:	40026458 	.word	0x40026458
 8003248:	20000378 	.word	0x20000378
 800324c:	400264a0 	.word	0x400264a0

08003250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_MspInit+0x4c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a0f      	ldr	r2, [pc, #60]	; (800329c <HAL_MspInit+0x4c>)
 8003260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_MspInit+0x4c>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_MspInit+0x4c>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <HAL_MspInit+0x4c>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_MspInit+0x4c>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800328e:	2007      	movs	r0, #7
 8003290:	f000 fc1a 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800

080032a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <NMI_Handler+0x4>

080032a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <MemManage_Handler+0x4>

080032b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <BusFault_Handler+0x4>

080032b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <UsageFault_Handler+0x4>

080032be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ec:	f000 fad8 	bl	80038a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f001 f9d3 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}

08003302 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003306:	f44f 7080 	mov.w	r0, #256	; 0x100
 800330a:	f001 f9cb 	bl	80046a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <USART1_IRQHandler+0x10>)
 800331a:	f004 fa29 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000045c 	.word	0x2000045c

08003328 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <SDIO_IRQHandler+0x10>)
 800332e:	f003 f887 	bl	8006440 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200003d8 	.word	0x200003d8

0800333c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA2_Stream3_IRQHandler+0x10>)
 8003342:	f000 fd9b 	bl	8003e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000318 	.word	0x20000318

08003350 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <DMA2_Stream6_IRQHandler+0x10>)
 8003356:	f000 fd91 	bl	8003e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000378 	.word	0x20000378

08003364 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <USART6_IRQHandler+0x10>)
 800336a:	f004 fa01 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200004a0 	.word	0x200004a0

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003392:	f006 fa51 	bl	8009838 <__errno>
 8003396:	4603      	mov	r3, r0
 8003398:	2216      	movs	r2, #22
 800339a:	601a      	str	r2, [r3, #0]
	return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_exit>:

void _exit (int status)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffe7 	bl	8003388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033ba:	e7fe      	b.n	80033ba <_exit+0x12>

080033bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ce:	f3af 8000 	nop.w
 80033d2:	4601      	mov	r1, r0
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	60ba      	str	r2, [r7, #8]
 80033da:	b2ca      	uxtb	r2, r1
 80033dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dbf0      	blt.n	80033ce <_read+0x12>
	}

return len;
 80033ec:	687b      	ldr	r3, [r7, #4]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e009      	b.n	800341c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fdcb 	bl	8000fac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	dbf1      	blt.n	8003408 <_write+0x12>
	}
	return len;
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_close>:

int _close(int file)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	return -1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003456:	605a      	str	r2, [r3, #4]
	return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_isatty>:

int _isatty(int file)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	return 1;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <_sbrk+0x5c>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_sbrk+0x60>)
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <_sbrk+0x64>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <_sbrk+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c8:	f006 f9b6 	bl	8009838 <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20020000 	.word	0x20020000
 80034f8:	00000400 	.word	0x00000400
 80034fc:	200002a4 	.word	0x200002a4
 8003500:	200009a8 	.word	0x200009a8

08003504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <SystemInit+0x20>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <SystemInit+0x20>)
 8003510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <MX_USART1_UART_Init+0x50>)
 8003530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 8003534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 800354e:	220c      	movs	r2, #12
 8003550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800355e:	4805      	ldr	r0, [pc, #20]	; (8003574 <MX_USART1_UART_Init+0x4c>)
 8003560:	f004 f827 	bl	80075b2 <HAL_UART_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800356a:	f7ff fcfd 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000045c 	.word	0x2000045c
 8003578:	40011000 	.word	0x40011000

0800357c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <MX_USART2_UART_Init+0x50>)
 8003584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 8003588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800358c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 80035a2:	220c      	movs	r2, #12
 80035a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	; (80035c8 <MX_USART2_UART_Init+0x4c>)
 80035b4:	f003 fffd 	bl	80075b2 <HAL_UART_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035be:	f7ff fcd3 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200004e4 	.word	0x200004e4
 80035cc:	40004400 	.word	0x40004400

080035d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <MX_USART6_UART_Init+0x50>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <MX_USART6_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <MX_USART6_UART_Init+0x4c>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003606:	4805      	ldr	r0, [pc, #20]	; (800361c <MX_USART6_UART_Init+0x4c>)
 8003608:	f003 ffd3 	bl	80075b2 <HAL_UART_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003612:	f7ff fca9 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200004a0 	.word	0x200004a0
 8003620:	40011400 	.word	0x40011400

08003624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a53      	ldr	r2, [pc, #332]	; (8003790 <HAL_UART_MspInit+0x16c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d135      	bne.n	80036b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_UART_MspInit+0x170>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a51      	ldr	r2, [pc, #324]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003650:	f043 0310 	orr.w	r3, r3, #16
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_UART_MspInit+0x170>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800367e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003690:	2307      	movs	r3, #7
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	4619      	mov	r1, r3
 800369a:	483f      	ldr	r0, [pc, #252]	; (8003798 <HAL_UART_MspInit+0x174>)
 800369c:	f000 fe64 	bl	8004368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2025      	movs	r0, #37	; 0x25
 80036a6:	f000 fa1a 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036aa:	2025      	movs	r0, #37	; 0x25
 80036ac:	f000 fa33 	bl	8003b16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80036b0:	e06a      	b.n	8003788 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a39      	ldr	r2, [pc, #228]	; (800379c <HAL_UART_MspInit+0x178>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d12c      	bne.n	8003716 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	4a33      	ldr	r2, [pc, #204]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ca:	6413      	str	r3, [r2, #64]	; 0x40
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6313      	str	r3, [r2, #48]	; 0x30
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_UART_MspInit+0x170>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036f4:	230c      	movs	r3, #12
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003704:	2307      	movs	r3, #7
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	4619      	mov	r1, r3
 800370e:	4822      	ldr	r0, [pc, #136]	; (8003798 <HAL_UART_MspInit+0x174>)
 8003710:	f000 fe2a 	bl	8004368 <HAL_GPIO_Init>
}
 8003714:	e038      	b.n	8003788 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <HAL_UART_MspInit+0x17c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d133      	bne.n	8003788 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_UART_MspInit+0x170>)
 800372a:	f043 0320 	orr.w	r3, r3, #32
 800372e:	6453      	str	r3, [r2, #68]	; 0x44
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_UART_MspInit+0x170>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6313      	str	r3, [r2, #48]	; 0x30
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_UART_MspInit+0x170>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003758:	23c0      	movs	r3, #192	; 0xc0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003768:	2308      	movs	r3, #8
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	4619      	mov	r1, r3
 8003772:	480c      	ldr	r0, [pc, #48]	; (80037a4 <HAL_UART_MspInit+0x180>)
 8003774:	f000 fdf8 	bl	8004368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2047      	movs	r0, #71	; 0x47
 800377e:	f000 f9ae 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003782:	2047      	movs	r0, #71	; 0x47
 8003784:	f000 f9c7 	bl	8003b16 <HAL_NVIC_EnableIRQ>
}
 8003788:	bf00      	nop
 800378a:	3738      	adds	r7, #56	; 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40011000 	.word	0x40011000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	40004400 	.word	0x40004400
 80037a0:	40011400 	.word	0x40011400
 80037a4:	40020800 	.word	0x40020800

080037a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037ac:	480d      	ldr	r0, [pc, #52]	; (80037e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037c4:	4c0b      	ldr	r4, [pc, #44]	; (80037f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037d2:	f7ff fe97 	bl	8003504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037d6:	f006 f835 	bl	8009844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037da:	f7ff fa11 	bl	8002c00 <main>
  bx  lr    
 80037de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80037ec:	0800d680 	.word	0x0800d680
  ldr r2, =_sbss
 80037f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037f4:	200009a4 	.word	0x200009a4

080037f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC_IRQHandler>
	...

080037fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_Init+0x40>)
 8003806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_Init+0x40>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <HAL_Init+0x40>)
 8003812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_Init+0x40>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_Init+0x40>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003824:	2003      	movs	r0, #3
 8003826:	f000 f94f 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382a:	2000      	movs	r0, #0
 800382c:	f000 f808 	bl	8003840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003830:	f7ff fd0e 	bl	8003250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00

08003840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_InitTick+0x54>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_InitTick+0x58>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003856:	fbb3 f3f1 	udiv	r3, r3, r1
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f967 	bl	8003b32 <HAL_SYSTICK_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e00e      	b.n	800388c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d80a      	bhi.n	800388a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003874:	2200      	movs	r2, #0
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f000 f92f 	bl	8003ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003880:	4a06      	ldr	r2, [pc, #24]	; (800389c <HAL_InitTick+0x5c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000004 	.word	0x20000004
 8003898:	2000000c 	.word	0x2000000c
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x20>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_IncTick+0x24>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_IncTick+0x24>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	20000528 	.word	0x20000528

080038c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_GetTick+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000528 	.word	0x20000528

080038e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff ffee 	bl	80038c8 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d005      	beq.n	8003906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_Delay+0x44>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003906:	bf00      	nop
 8003908:	f7ff ffde 	bl	80038c8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d8f7      	bhi.n	8003908 <HAL_Delay+0x28>
  {
  }
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	2000000c 	.word	0x2000000c

08003928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395a:	4a04      	ldr	r2, [pc, #16]	; (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60d3      	str	r3, [r2, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <__NVIC_GetPriorityGrouping+0x18>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 0307 	and.w	r3, r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0b      	blt.n	80039b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4907      	ldr	r1, [pc, #28]	; (80039c4 <__NVIC_EnableIRQ+0x38>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2001      	movs	r0, #1
 80039ae:	fa00 f202 	lsl.w	r2, r0, r2
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db0a      	blt.n	80039f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	490c      	ldr	r1, [pc, #48]	; (8003a14 <__NVIC_SetPriority+0x4c>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	440b      	add	r3, r1
 80039ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f0:	e00a      	b.n	8003a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <__NVIC_SetPriority+0x50>)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	3b04      	subs	r3, #4
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	440b      	add	r3, r1
 8003a06:	761a      	strb	r2, [r3, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e100 	.word	0xe000e100
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f1c3 0307 	rsb	r3, r3, #7
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf28      	it	cs
 8003a3a:	2304      	movcs	r3, #4
 8003a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d902      	bls.n	8003a4c <NVIC_EncodePriority+0x30>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3b03      	subs	r3, #3
 8003a4a:	e000      	b.n	8003a4e <NVIC_EncodePriority+0x32>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	4313      	orrs	r3, r2
         );
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	; 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d301      	bcc.n	8003a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <SysTick_Config+0x40>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	f7ff ff8e 	bl	80039c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <SysTick_Config+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <SysTick_Config+0x40>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff29 	bl	8003928 <__NVIC_SetPriorityGrouping>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af0:	f7ff ff3e 	bl	8003970 <__NVIC_GetPriorityGrouping>
 8003af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7ff ff8e 	bl	8003a1c <NVIC_EncodePriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff5d 	bl	80039c8 <__NVIC_SetPriority>
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff31 	bl	800398c <__NVIC_EnableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffa2 	bl	8003a84 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff feb6 	bl	80038c8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e099      	b.n	8003c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b88:	e00f      	b.n	8003baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8a:	f7ff fe9d 	bl	80038c8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d908      	bls.n	8003baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e078      	b.n	8003c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e8      	bne.n	8003b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <HAL_DMA_Init+0x158>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d107      	bne.n	8003c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d117      	bne.n	8003c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fb0d 	bl	8004270 <DMA_CheckFifoParam>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e016      	b.n	8003c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fac4 	bl	8004204 <DMA_CalcBaseAndBitshift>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	f010803f 	.word	0xf010803f

08003ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA_Start_IT+0x26>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e040      	b.n	8003d50 <HAL_DMA_Start_IT+0xa8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d12f      	bne.n	8003d42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa56 	bl	80041a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	223f      	movs	r2, #63	; 0x3f
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0216 	orr.w	r2, r2, #22
 8003d16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0208 	orr.w	r2, r2, #8
 8003d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e005      	b.n	8003d4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d66:	f7ff fdaf 	bl	80038c8 <HAL_GetTick>
 8003d6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d008      	beq.n	8003d8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e052      	b.n	8003e30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0216 	bic.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMA_Abort+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dda:	e013      	b.n	8003e04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ddc:	f7ff fd74 	bl	80038c8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d90c      	bls.n	8003e04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e015      	b.n	8003e30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e4      	bne.n	8003ddc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	223f      	movs	r2, #63	; 0x3f
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00c      	b.n	8003e70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e88:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_DMA_IRQHandler+0x258>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a92      	ldr	r2, [pc, #584]	; (80040d8 <HAL_DMA_IRQHandler+0x25c>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2204      	movs	r2, #4
 8003f24:	409a      	lsls	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	2204      	movs	r2, #4
 8003f42:	409a      	lsls	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2210      	movs	r2, #16
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d043      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	2210      	movs	r2, #16
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d024      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
 8003faa:	e01f      	b.n	8003fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
 8003fbc:	e016      	b.n	8003fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0208 	bic.w	r2, r2, #8
 8003fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 808e 	beq.w	800411a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8086 	beq.w	800411a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2220      	movs	r2, #32
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b05      	cmp	r3, #5
 8004024:	d136      	bne.n	8004094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0216 	bic.w	r2, r2, #22
 8004034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_DMA_IRQHandler+0x1da>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0208 	bic.w	r2, r2, #8
 8004064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	223f      	movs	r2, #63	; 0x3f
 800406c:	409a      	lsls	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07d      	beq.n	8004186 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
        }
        return;
 8004092:	e078      	b.n	8004186 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d108      	bne.n	80040c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d030      	beq.n	800411a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
 80040c0:	e02b      	b.n	800411a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d027      	beq.n	800411a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
 80040d2:	e022      	b.n	800411a <HAL_DMA_IRQHandler+0x29e>
 80040d4:	20000004 	.word	0x20000004
 80040d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0210 	bic.w	r2, r2, #16
 80040f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	2b00      	cmp	r3, #0
 8004120:	d032      	beq.n	8004188 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d022      	beq.n	8004174 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2205      	movs	r2, #5
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3301      	adds	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	429a      	cmp	r2, r3
 8004150:	d307      	bcc.n	8004162 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f2      	bne.n	8004146 <HAL_DMA_IRQHandler+0x2ca>
 8004160:	e000      	b.n	8004164 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004162:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
 8004184:	e000      	b.n	8004188 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004186:	bf00      	nop
    }
  }
}
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop

08004190 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b10      	subs	r3, #16
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <DMA_CalcBaseAndBitshift+0x64>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x68>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d909      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	e007      	b.n	8004256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	0800d238 	.word	0x0800d238

08004270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0x5a>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d856      	bhi.n	800433e <DMA_CheckFifoParam+0xce>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x28>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	0800433f 	.word	0x0800433f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d046      	beq.n	8004342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e043      	b.n	8004342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c2:	d140      	bne.n	8004346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e03d      	b.n	8004346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d121      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d837      	bhi.n	800434a <DMA_CheckFifoParam+0xda>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e030      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d025      	beq.n	800434e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e022      	b.n	800434e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004316:	e01c      	b.n	8004352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d903      	bls.n	8004326 <DMA_CheckFifoParam+0xb6>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d003      	beq.n	800432c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004324:	e018      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      break;
 800432a:	e015      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e00b      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 800433e:	bf00      	nop
 8004340:	e00a      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;   
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
    }
  } 
  
  return status; 
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e159      	b.n	8004638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 8148 	bne.w	8004632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d005      	beq.n	80043ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d130      	bne.n	800441c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0201 	and.w	r2, r3, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d017      	beq.n	8004458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d123      	bne.n	80044ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	220f      	movs	r2, #15
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08da      	lsrs	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3208      	adds	r2, #8
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a2 	beq.w	8004632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b57      	ldr	r3, [pc, #348]	; (8004650 <HAL_GPIO_Init+0x2e8>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4a56      	ldr	r2, [pc, #344]	; (8004650 <HAL_GPIO_Init+0x2e8>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	4b54      	ldr	r3, [pc, #336]	; (8004650 <HAL_GPIO_Init+0x2e8>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450a:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_GPIO_Init+0x2ec>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a49      	ldr	r2, [pc, #292]	; (8004658 <HAL_GPIO_Init+0x2f0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_GPIO_Init+0x202>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a48      	ldr	r2, [pc, #288]	; (800465c <HAL_GPIO_Init+0x2f4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x1fe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a47      	ldr	r2, [pc, #284]	; (8004660 <HAL_GPIO_Init+0x2f8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x1fa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a46      	ldr	r2, [pc, #280]	; (8004664 <HAL_GPIO_Init+0x2fc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x1f6>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a45      	ldr	r2, [pc, #276]	; (8004668 <HAL_GPIO_Init+0x300>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x1f2>
 8004556:	2304      	movs	r3, #4
 8004558:	e008      	b.n	800456c <HAL_GPIO_Init+0x204>
 800455a:	2307      	movs	r3, #7
 800455c:	e006      	b.n	800456c <HAL_GPIO_Init+0x204>
 800455e:	2303      	movs	r3, #3
 8004560:	e004      	b.n	800456c <HAL_GPIO_Init+0x204>
 8004562:	2302      	movs	r3, #2
 8004564:	e002      	b.n	800456c <HAL_GPIO_Init+0x204>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_GPIO_Init+0x204>
 800456a:	2300      	movs	r3, #0
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	f002 0203 	and.w	r2, r2, #3
 8004572:	0092      	lsls	r2, r2, #2
 8004574:	4093      	lsls	r3, r2
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800457c:	4935      	ldr	r1, [pc, #212]	; (8004654 <HAL_GPIO_Init+0x2ec>)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_GPIO_Init+0x304>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045ae:	4a2f      	ldr	r2, [pc, #188]	; (800466c <HAL_GPIO_Init+0x304>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_GPIO_Init+0x304>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d8:	4a24      	ldr	r2, [pc, #144]	; (800466c <HAL_GPIO_Init+0x304>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_GPIO_Init+0x304>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_GPIO_Init+0x304>)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <HAL_GPIO_Init+0x304>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800462c:	4a0f      	ldr	r2, [pc, #60]	; (800466c <HAL_GPIO_Init+0x304>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	f67f aea2 	bls.w	8004384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40013800 	.word	0x40013800
 8004658:	40020000 	.word	0x40020000
 800465c:	40020400 	.word	0x40020400
 8004660:	40020800 	.word	0x40020800
 8004664:	40020c00 	.word	0x40020c00
 8004668:	40021000 	.word	0x40021000
 800466c:	40013c00 	.word	0x40013c00

08004670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004680:	787b      	ldrb	r3, [r7, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800468c:	e003      	b.n	8004696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	619a      	str	r2, [r3, #24]
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ba:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f806 	bl	80046d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40013c00 	.word	0x40013c00

080046d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e12b      	b.n	8004956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd ff0e 	bl	8002534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004750:	f001 fbd8 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8004754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a81      	ldr	r2, [pc, #516]	; (8004960 <HAL_I2C_Init+0x274>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d807      	bhi.n	8004770 <HAL_I2C_Init+0x84>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a80      	ldr	r2, [pc, #512]	; (8004964 <HAL_I2C_Init+0x278>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e006      	b.n	800477e <HAL_I2C_Init+0x92>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a7d      	ldr	r2, [pc, #500]	; (8004968 <HAL_I2C_Init+0x27c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e0e7      	b.n	8004956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a78      	ldr	r2, [pc, #480]	; (800496c <HAL_I2C_Init+0x280>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0c9b      	lsrs	r3, r3, #18
 8004790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_I2C_Init+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d802      	bhi.n	80047c0 <HAL_I2C_Init+0xd4>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3301      	adds	r3, #1
 80047be:	e009      	b.n	80047d4 <HAL_I2C_Init+0xe8>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a69      	ldr	r2, [pc, #420]	; (8004970 <HAL_I2C_Init+0x284>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	3301      	adds	r3, #1
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	430b      	orrs	r3, r1
 80047da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	495c      	ldr	r1, [pc, #368]	; (8004960 <HAL_I2C_Init+0x274>)
 80047f0:	428b      	cmp	r3, r1
 80047f2:	d819      	bhi.n	8004828 <HAL_I2C_Init+0x13c>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e59      	subs	r1, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004808:	400b      	ands	r3, r1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_I2C_Init+0x138>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1e59      	subs	r1, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fbb1 f3f3 	udiv	r3, r1, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	e051      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004824:	2304      	movs	r3, #4
 8004826:	e04f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <HAL_I2C_Init+0x168>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e012      	b.n	800487a <HAL_I2C_Init+0x18e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1e58      	subs	r0, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	0099      	lsls	r1, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	fbb0 f3f3 	udiv	r3, r0, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Init+0x196>
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_I2C_Init+0x1bc>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1e58      	subs	r0, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	440b      	add	r3, r1
 8004898:	fbb0 f3f3 	udiv	r3, r0, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	e00f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1e58      	subs	r0, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	0099      	lsls	r1, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	6809      	ldr	r1, [r1, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6911      	ldr	r1, [r2, #16]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68d2      	ldr	r2, [r2, #12]
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	430b      	orrs	r3, r1
 800490a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	000186a0 	.word	0x000186a0
 8004964:	001e847f 	.word	0x001e847f
 8004968:	003d08ff 	.word	0x003d08ff
 800496c:	431bde83 	.word	0x431bde83
 8004970:	10624dd3 	.word	0x10624dd3

08004974 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	460b      	mov	r3, r1
 8004988:	813b      	strh	r3, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800498e:	f7fe ff9b 	bl	80038c8 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	f040 80d9 	bne.w	8004b54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2319      	movs	r3, #25
 80049a8:	2201      	movs	r2, #1
 80049aa:	496d      	ldr	r1, [pc, #436]	; (8004b60 <HAL_I2C_Mem_Write+0x1ec>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fc7f 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
 80049ba:	e0cc      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Mem_Write+0x56>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0c5      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d007      	beq.n	80049f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2221      	movs	r2, #33	; 0x21
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a4d      	ldr	r2, [pc, #308]	; (8004b64 <HAL_I2C_Mem_Write+0x1f0>)
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a32:	88f8      	ldrh	r0, [r7, #6]
 8004a34:	893a      	ldrh	r2, [r7, #8]
 8004a36:	8979      	ldrh	r1, [r7, #10]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4603      	mov	r3, r0
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fab6 	bl	8004fb4 <I2C_RequestMemoryWrite>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d052      	beq.n	8004af4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e081      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fd00 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d107      	bne.n	8004a7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06b      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_I2C_Mem_Write+0x180>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1aa      	bne.n	8004a52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fcec 	bl	80054de <I2C_WaitOnBTFFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d107      	bne.n	8004b24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e016      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	00100002 	.word	0x00100002
 8004b64:	ffff0000 	.word	0xffff0000

08004b68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	; 0x30
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	817b      	strh	r3, [r7, #10]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	813b      	strh	r3, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b82:	f7fe fea1 	bl	80038c8 <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 8208 	bne.w	8004fa6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2319      	movs	r3, #25
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	497b      	ldr	r1, [pc, #492]	; (8004d8c <HAL_I2C_Mem_Read+0x224>)
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fb85 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	e1fb      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Mem_Read+0x56>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e1f4      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d007      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2222      	movs	r2, #34	; 0x22
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a5b      	ldr	r2, [pc, #364]	; (8004d90 <HAL_I2C_Mem_Read+0x228>)
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c26:	88f8      	ldrh	r0, [r7, #6]
 8004c28:	893a      	ldrh	r2, [r7, #8]
 8004c2a:	8979      	ldrh	r1, [r7, #10]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	4603      	mov	r3, r0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa52 	bl	80050e0 <I2C_RequestMemoryRead>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e1b0      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d113      	bne.n	8004c76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	623b      	str	r3, [r7, #32]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e184      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e164      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d11b      	bne.n	8004cf6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	e144      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d0c:	e138      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	f200 80f1 	bhi.w	8004efa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d123      	bne.n	8004d68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fc1b 	bl	8005560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e139      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d66:	e10b      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d14e      	bne.n	8004e0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2200      	movs	r2, #0
 8004d78:	4906      	ldr	r1, [pc, #24]	; (8004d94 <HAL_I2C_Mem_Read+0x22c>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fa98 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e10e      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000
 8004d94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e0c:	e0b8      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2200      	movs	r2, #0
 8004e16:	4966      	ldr	r1, [pc, #408]	; (8004fb0 <HAL_I2C_Mem_Read+0x448>)
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fa49 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0bf      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2200      	movs	r2, #0
 8004e72:	494f      	ldr	r1, [pc, #316]	; (8004fb0 <HAL_I2C_Mem_Read+0x448>)
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa1b 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e091      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef8:	e042      	b.n	8004f80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fb2e 	bl	8005560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e04c      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d118      	bne.n	8004f80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f aec2 	bne.w	8004d0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
  }
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	00010004 	.word	0x00010004

08004fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	817b      	strh	r3, [r7, #10]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	813b      	strh	r3, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f960 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005004:	d103      	bne.n	800500e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e05f      	b.n	80050d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	492d      	ldr	r1, [pc, #180]	; (80050dc <I2C_RequestMemoryWrite+0x128>)
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f998 	bl	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e04c      	b.n	80050d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fa02 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e02b      	b.n	80050d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005080:	893b      	ldrh	r3, [r7, #8]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]
 800508a:	e021      	b.n	80050d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800508c:	893b      	ldrh	r3, [r7, #8]
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	b29b      	uxth	r3, r3
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	6a39      	ldr	r1, [r7, #32]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f9dc 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d107      	bne.n	80050c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e005      	b.n	80050d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c6:	893b      	ldrh	r3, [r7, #8]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	00010002 	.word	0x00010002

080050e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	460b      	mov	r3, r1
 80050f4:	813b      	strh	r3, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005108:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2200      	movs	r2, #0
 8005122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f8c2 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005140:	d103      	bne.n	800514a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0aa      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800515c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	4952      	ldr	r1, [pc, #328]	; (80052ac <I2C_RequestMemoryRead+0x1cc>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f8fa 	bl	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e097      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f964 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e076      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	611a      	str	r2, [r3, #16]
 80051c6:	e021      	b.n	800520c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051c8:	893b      	ldrh	r3, [r7, #8]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	6a39      	ldr	r1, [r7, #32]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f93e 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d107      	bne.n	80051fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e050      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005202:	893b      	ldrh	r3, [r7, #8]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	6a39      	ldr	r1, [r7, #32]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f923 	bl	800545c <I2C_WaitOnTXEFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	2b04      	cmp	r3, #4
 8005222:	d107      	bne.n	8005234 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e035      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005246:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	2200      	movs	r2, #0
 8005250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f82b 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526e:	d103      	bne.n	8005278 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e013      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800527c:	897b      	ldrh	r3, [r7, #10]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	4906      	ldr	r1, [pc, #24]	; (80052ac <I2C_RequestMemoryRead+0x1cc>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f863 	bl	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	00010002 	.word	0x00010002

080052b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c0:	e025      	b.n	800530e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d021      	beq.n	800530e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fe fafd 	bl	80038c8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d116      	bne.n	800530e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e023      	b.n	8005356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d10d      	bne.n	8005334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	e00c      	b.n	800534e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	429a      	cmp	r2, r3
 8005352:	d0b6      	beq.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536c:	e051      	b.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537c:	d123      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e046      	b.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d021      	beq.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fe fa7b 	bl	80038c8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e020      	b.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10c      	bne.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	43da      	mvns	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf14      	ite	ne
 800542e:	2301      	movne	r3, #1
 8005430:	2300      	moveq	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	e00b      	b.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	43da      	mvns	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d18d      	bne.n	800536e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005468:	e02d      	b.n	80054c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f8ce 	bl	800560c <I2C_IsAcknowledgeFailed>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e02d      	b.n	80054d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d021      	beq.n	80054c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fa21 	bl	80038c8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e007      	b.n	80054d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d1ca      	bne.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ea:	e02d      	b.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f88d 	bl	800560c <I2C_IsAcknowledgeFailed>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e02d      	b.n	8005558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005502:	d021      	beq.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005504:	f7fe f9e0 	bl	80038c8 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e007      	b.n	8005558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d1ca      	bne.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800556c:	e042      	b.n	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b10      	cmp	r3, #16
 800557a:	d119      	bne.n	80055b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0210 	mvn.w	r2, #16
 8005584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e029      	b.n	8005604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b0:	f7fe f98a 	bl	80038c8 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e007      	b.n	8005604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d1b5      	bne.n	800556e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d11b      	bne.n	800565c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800562c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f043 0204 	orr.w	r2, r3, #4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e264      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d075      	beq.n	8005776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568a:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005696:	4ba0      	ldr	r3, [pc, #640]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d112      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a2:	4b9d      	ldr	r3, [pc, #628]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	4b99      	ldr	r3, [pc, #612]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05b      	beq.n	8005774 <HAL_RCC_OscConfig+0x108>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d157      	bne.n	8005774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e23f      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d106      	bne.n	80056e0 <HAL_RCC_OscConfig+0x74>
 80056d2:	4b91      	ldr	r3, [pc, #580]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a90      	ldr	r2, [pc, #576]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e01d      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0x98>
 80056ea:	4b8b      	ldr	r3, [pc, #556]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a8a      	ldr	r2, [pc, #552]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4b88      	ldr	r3, [pc, #544]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a87      	ldr	r2, [pc, #540]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e00b      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 8005704:	4b84      	ldr	r3, [pc, #528]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a83      	ldr	r2, [pc, #524]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b81      	ldr	r3, [pc, #516]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a80      	ldr	r2, [pc, #512]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fe f8d0 	bl	80038c8 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7fe f8cc 	bl	80038c8 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e204      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0xc0>
 800574a:	e014      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fe f8bc 	bl	80038c8 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7fe f8b8 	bl	80038c8 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1f0      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0xe8>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d063      	beq.n	800584a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b62      	ldr	r3, [pc, #392]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005796:	2b08      	cmp	r3, #8
 8005798:	d11c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800579a:	4b5f      	ldr	r3, [pc, #380]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	4b5c      	ldr	r3, [pc, #368]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1c4      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4b56      	ldr	r3, [pc, #344]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4952      	ldr	r1, [pc, #328]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	e03a      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d020      	beq.n	800581e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057dc:	4b4f      	ldr	r3, [pc, #316]	; (800591c <HAL_RCC_OscConfig+0x2b0>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e2:	f7fe f871 	bl	80038c8 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ea:	f7fe f86d 	bl	80038c8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1a5      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fc:	4b46      	ldr	r3, [pc, #280]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005808:	4b43      	ldr	r3, [pc, #268]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4940      	ldr	r1, [pc, #256]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
 800581c:	e015      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800581e:	4b3f      	ldr	r3, [pc, #252]	; (800591c <HAL_RCC_OscConfig+0x2b0>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fe f850 	bl	80038c8 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582c:	f7fe f84c 	bl	80038c8 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e184      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d030      	beq.n	80058b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800585e:	4b30      	ldr	r3, [pc, #192]	; (8005920 <HAL_RCC_OscConfig+0x2b4>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7fe f830 	bl	80038c8 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586c:	f7fe f82c 	bl	80038c8 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e164      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x200>
 800588a:	e015      	b.n	80058b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_OscConfig+0x2b4>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005892:	f7fe f819 	bl	80038c8 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589a:	f7fe f815 	bl	80038c8 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e14d      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80a0 	beq.w	8005a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d121      	bne.n	8005946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7fd ffdb 	bl	80038c8 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e011      	b.n	800593a <HAL_RCC_OscConfig+0x2ce>
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	42470000 	.word	0x42470000
 8005920:	42470e80 	.word	0x42470e80
 8005924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005928:	f7fd ffce 	bl	80038c8 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e106      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <HAL_RCC_OscConfig+0x4e4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x2f0>
 800594e:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e01c      	b.n	8005996 <HAL_RCC_OscConfig+0x32a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b05      	cmp	r3, #5
 8005962:	d10c      	bne.n	800597e <HAL_RCC_OscConfig+0x312>
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b78      	ldr	r3, [pc, #480]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a77      	ldr	r2, [pc, #476]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e00b      	b.n	8005996 <HAL_RCC_OscConfig+0x32a>
 800597e:	4b75      	ldr	r3, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a74      	ldr	r2, [pc, #464]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a71      	ldr	r2, [pc, #452]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fd ff93 	bl	80038c8 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fd ff8f 	bl	80038c8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e0c5      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059bc:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ee      	beq.n	80059a6 <HAL_RCC_OscConfig+0x33a>
 80059c8:	e014      	b.n	80059f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ca:	f7fd ff7d 	bl	80038c8 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fd ff79 	bl	80038c8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0af      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ee      	bne.n	80059d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a55      	ldr	r2, [pc, #340]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 809b 	beq.w	8005b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a10:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d05c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d141      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a24:	4b4c      	ldr	r3, [pc, #304]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2a:	f7fd ff4d 	bl	80038c8 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fd ff49 	bl	80038c8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e081      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f0      	bne.n	8005a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	019b      	lsls	r3, r3, #6
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	4937      	ldr	r1, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fd ff22 	bl	80038c8 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fd ff1e 	bl	80038c8 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e056      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0x41c>
 8005aa6:	e04e      	b.n	8005b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aae:	f7fd ff0b 	bl	80038c8 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fd ff07 	bl	80038c8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e03f      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x44a>
 8005ad4:	e037      	b.n	8005b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e032      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d028      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d121      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d11a      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b12:	4013      	ands	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d111      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40007000 	.word	0x40007000
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470060 	.word	0x42470060

08005b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0cc      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d90c      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b86:	4b63      	ldr	r3, [pc, #396]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0b8      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb0:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a58      	ldr	r2, [pc, #352]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc8:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a52      	ldr	r2, [pc, #328]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd4:	4b50      	ldr	r3, [pc, #320]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	494d      	ldr	r1, [pc, #308]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d044      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e07f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e067      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4934      	ldr	r1, [pc, #208]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7fd fe3c 	bl	80038c8 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fd fe38 	bl	80038c8 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e04f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d20c      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e032      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4916      	ldr	r1, [pc, #88]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	490e      	ldr	r1, [pc, #56]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ce2:	f000 f821 	bl	8005d28 <HAL_RCC_GetSysClockFreq>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	490a      	ldr	r1, [pc, #40]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	5ccb      	ldrb	r3, [r1, r3]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd fd9c 	bl	8003840 <HAL_InitTick>

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023c00 	.word	0x40023c00
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	0800d220 	.word	0x0800d220
 8005d20:	20000004 	.word	0x20000004
 8005d24:	20000008 	.word	0x20000008

08005d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d40:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x40>
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	f200 80bd 	bhi.w	8005ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x34>
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d5a:	e0b7      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d5c:	4b61      	ldr	r3, [pc, #388]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d5e:	60bb      	str	r3, [r7, #8]
       break;
 8005d60:	e0b7      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d62:	4b61      	ldr	r3, [pc, #388]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d64:	60bb      	str	r3, [r7, #8]
      break;
 8005d66:	e0b4      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d68:	4b5d      	ldr	r3, [pc, #372]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d72:	4b5b      	ldr	r3, [pc, #364]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d04d      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7e:	4b58      	ldr	r3, [pc, #352]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	461a      	mov	r2, r3
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	ea02 0800 	and.w	r8, r2, r0
 8005d96:	ea03 0901 	and.w	r9, r3, r1
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	014b      	lsls	r3, r1, #5
 8005da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dac:	0142      	lsls	r2, r0, #5
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	ebb0 0008 	subs.w	r0, r0, r8
 8005db6:	eb61 0109 	sbc.w	r1, r1, r9
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	018b      	lsls	r3, r1, #6
 8005dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dc8:	0182      	lsls	r2, r0, #6
 8005dca:	1a12      	subs	r2, r2, r0
 8005dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8005dd0:	f04f 0000 	mov.w	r0, #0
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	00d9      	lsls	r1, r3, #3
 8005dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dde:	00d0      	lsls	r0, r2, #3
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	eb12 0208 	adds.w	r2, r2, r8
 8005de8:	eb43 0309 	adc.w	r3, r3, r9
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	0259      	lsls	r1, r3, #9
 8005df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005dfa:	0250      	lsls	r0, r2, #9
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	f7fa ff24 	bl	8000c58 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e04a      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	099b      	lsrs	r3, r3, #6
 8005e20:	461a      	mov	r2, r3
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	ea02 0400 	and.w	r4, r2, r0
 8005e32:	ea03 0501 	and.w	r5, r3, r1
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	014b      	lsls	r3, r1, #5
 8005e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e48:	0142      	lsls	r2, r0, #5
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	1b00      	subs	r0, r0, r4
 8005e50:	eb61 0105 	sbc.w	r1, r1, r5
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	018b      	lsls	r3, r1, #6
 8005e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e62:	0182      	lsls	r2, r0, #6
 8005e64:	1a12      	subs	r2, r2, r0
 8005e66:	eb63 0301 	sbc.w	r3, r3, r1
 8005e6a:	f04f 0000 	mov.w	r0, #0
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	00d9      	lsls	r1, r3, #3
 8005e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e78:	00d0      	lsls	r0, r2, #3
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	1912      	adds	r2, r2, r4
 8005e80:	eb45 0303 	adc.w	r3, r5, r3
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0299      	lsls	r1, r3, #10
 8005e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e92:	0290      	lsls	r0, r2, #10
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	f7fa fed8 	bl	8000c58 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	60bb      	str	r3, [r7, #8]
      break;
 8005eca:	e002      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ece:	60bb      	str	r3, [r7, #8]
      break;
 8005ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	007a1200 	.word	0x007a1200

08005eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000004 	.word	0x20000004

08005f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f08:	f7ff fff0 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4903      	ldr	r1, [pc, #12]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800d230 	.word	0x0800d230

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f30:	f7ff ffdc 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0b5b      	lsrs	r3, r3, #13
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800d230 	.word	0x0800d230

08005f54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e022      	b.n	8005fac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7fd f859 	bl	8003030 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2203      	movs	r2, #3
 8005f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f814 	bl	8005fb4 <HAL_SD_InitCard>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e00a      	b.n	8005fac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fb4:	b5b0      	push	{r4, r5, r7, lr}
 8005fb6:	b08e      	sub	sp, #56	; 0x38
 8005fb8:	af04      	add	r7, sp, #16
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005fd0:	2376      	movs	r3, #118	; 0x76
 8005fd2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681d      	ldr	r5, [r3, #0]
 8005fd8:	466c      	mov	r4, sp
 8005fda:	f107 0314 	add.w	r3, r7, #20
 8005fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fec:	4628      	mov	r0, r5
 8005fee:	f002 fa47 	bl	8008480 <SDIO_Init>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e04c      	b.n	800609e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_SD_InitCard+0xf4>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f002 fa7f 	bl	8008512 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <HAL_SD_InitCard+0xf4>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f804 	bl	8007028 <SD_PowerON>
 8006020:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e02e      	b.n	800609e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 ff25 	bl	8006e90 <SD_InitCard>
 8006046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e01b      	b.n	800609e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800606e:	4618      	mov	r0, r3
 8006070:	f002 fae2 	bl	8008638 <SDMMC_CmdBlockLength>
 8006074:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00f      	beq.n	800609c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <HAL_SD_InitCard+0xf8>)
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bdb0      	pop	{r4, r5, r7, pc}
 80060a6:	bf00      	nop
 80060a8:	422580a0 	.word	0x422580a0
 80060ac:	004005ff 	.word	0x004005ff

080060b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	; 0x30
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0c0      	b.n	800625a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 80b9 	bne.w	8006258 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d907      	bls.n	800610a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0a7      	b.n	800625a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2203      	movs	r2, #3
 800610e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	4a4c      	ldr	r2, [pc, #304]	; (8006264 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	4a4b      	ldr	r2, [pc, #300]	; (8006268 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800613c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2200      	movs	r2, #0
 8006144:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3380      	adds	r3, #128	; 0x80
 8006174:	4619      	mov	r1, r3
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	025b      	lsls	r3, r3, #9
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	f7fd fd93 	bl	8003ca8 <HAL_DMA_Start_IT>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d017      	beq.n	80061b8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006196:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a33      	ldr	r2, [pc, #204]	; (800626c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e050      	b.n	800625a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80061b8:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d002      	beq.n	80061cc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	025b      	lsls	r3, r3, #9
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
 80061d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	025b      	lsls	r3, r3, #9
 80061d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80061d8:	2390      	movs	r3, #144	; 0x90
 80061da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80061dc:	2302      	movs	r3, #2
 80061de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f107 0210 	add.w	r2, r7, #16
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f002 f9f4 	bl	80085e0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d90a      	bls.n	8006214 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2282      	movs	r2, #130	; 0x82
 8006202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800620a:	4618      	mov	r0, r3
 800620c:	f002 fa58 	bl	80086c0 <SDMMC_CmdReadMultiBlock>
 8006210:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006212:	e009      	b.n	8006228 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2281      	movs	r2, #129	; 0x81
 8006218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006220:	4618      	mov	r0, r3
 8006222:	f002 fa2b 	bl	800867c <SDMMC_CmdReadSingleBlock>
 8006226:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d012      	beq.n	8006254 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a0e      	ldr	r2, [pc, #56]	; (800626c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e002      	b.n	800625a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e000      	b.n	800625a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3730      	adds	r7, #48	; 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	08006c9f 	.word	0x08006c9f
 8006268:	08006d11 	.word	0x08006d11
 800626c:	004005ff 	.word	0x004005ff
 8006270:	4225858c 	.word	0x4225858c

08006274 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0c5      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	f040 80be 	bne.w	8006426 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80062b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d907      	bls.n	80062ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0ac      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2203      	movs	r2, #3
 80062d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	4a4e      	ldr	r2, [pc, #312]	; (8006430 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80062f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	4a4d      	ldr	r2, [pc, #308]	; (8006434 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	2200      	movs	r2, #0
 8006308:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	2b01      	cmp	r3, #1
 8006310:	d002      	beq.n	8006318 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d90a      	bls.n	8006334 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	22a0      	movs	r2, #160	; 0xa0
 8006322:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800632a:	4618      	mov	r0, r3
 800632c:	f002 fa0c 	bl	8008748 <SDMMC_CmdWriteMultiBlock>
 8006330:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006332:	e009      	b.n	8006348 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2290      	movs	r2, #144	; 0x90
 8006338:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006340:	4618      	mov	r0, r3
 8006342:	f002 f9df 	bl	8008704 <SDMMC_CmdWriteSingleBlock>
 8006346:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d012      	beq.n	8006374 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a39      	ldr	r2, [pc, #228]	; (8006438 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	431a      	orrs	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e059      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006374:	4b31      	ldr	r3, [pc, #196]	; (800643c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3380      	adds	r3, #128	; 0x80
 80063aa:	461a      	mov	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	025b      	lsls	r3, r3, #9
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	f7fd fc79 	bl	8003ca8 <HAL_DMA_Start_IT>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01c      	beq.n	80063f6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80063ca:	f023 0302 	bic.w	r3, r3, #2
 80063ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e018      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	025b      	lsls	r3, r3, #9
 8006400:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006402:	2390      	movs	r3, #144	; 0x90
 8006404:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006406:	2300      	movs	r3, #0
 8006408:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800640a:	2300      	movs	r3, #0
 800640c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800640e:	2301      	movs	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f107 0210 	add.w	r2, r7, #16
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f002 f8df 	bl	80085e0 <SDIO_ConfigData>

      return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3730      	adds	r7, #48	; 0x30
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08006c75 	.word	0x08006c75
 8006434:	08006d11 	.word	0x08006d11
 8006438:	004005ff 	.word	0x004005ff
 800643c:	4225858c 	.word	0x4225858c

08006440 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_SD_IRQHandler+0x2e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fffd 	bl	8007466 <SD_Read_IT>
 800646c:	e165      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808f 	beq.w	800659c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006496:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800649a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d039      	beq.n	800652a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_SD_IRQHandler+0x8a>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f002 f95c 	bl	800878c <SDMMC_CmdStopTransfer>
 80064d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f92f 	bl	800674c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_SD_IRQHandler+0xda>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f002 fdc2 	bl	80090a4 <HAL_SD_RxCpltCallback>
 8006520:	e10b      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f002 fdb4 	bl	8009090 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006528:	e107      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8102 	beq.w	800673a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f002 f921 	bl	800878c <SDMMC_CmdStopTransfer>
 800654a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8f4 	bl	800674c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 80e5 	bne.w	800673a <HAL_SD_IRQHandler+0x2fa>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 80df 	bne.w	800673a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0208 	bic.w	r2, r2, #8
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f002 fd7b 	bl	8009090 <HAL_SD_TxCpltCallback>
}
 800659a:	e0ce      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_SD_IRQHandler+0x17c>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 ffa7 	bl	8007508 <SD_Write_IT>
 80065ba:	e0be      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c2:	f240 233a 	movw	r3, #570	; 0x23a
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80b6 	beq.w	800673a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	f043 0202 	orr.w	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	f043 0210 	orr.w	r2, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f043 0208 	orr.w	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f240 723a 	movw	r2, #1850	; 0x73a
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006668:	f023 0302 	bic.w	r3, r3, #2
 800666c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f002 f88a 	bl	800878c <SDMMC_CmdStopTransfer>
 8006678:	4602      	mov	r2, r0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f855 	bl	800674c <HAL_SD_ErrorCallback>
}
 80066a2:	e04a      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d045      	beq.n	800673a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <HAL_SD_IRQHandler+0x282>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d011      	beq.n	80066e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <HAL_SD_IRQHandler+0x304>)
 80066c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd fbb2 	bl	8003e38 <HAL_DMA_Abort_IT>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02f      	beq.n	800673a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fb68 	bl	8006db4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80066e4:	e029      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <HAL_SD_IRQHandler+0x2ba>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d011      	beq.n	800671e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <HAL_SD_IRQHandler+0x308>)
 8006700:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	4618      	mov	r0, r3
 8006708:	f7fd fb96 	bl	8003e38 <HAL_DMA_Abort_IT>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d013      	beq.n	800673a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fb83 	bl	8006e22 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800671c:	e00d      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f002 fca2 	bl	800907c <HAL_SD_AbortCallback>
}
 8006738:	e7ff      	b.n	800673a <HAL_SD_IRQHandler+0x2fa>
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	08006db5 	.word	0x08006db5
 8006748:	08006e23 	.word	0x08006e23

0800674c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800676e:	0f9b      	lsrs	r3, r3, #30
 8006770:	b2da      	uxtb	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677a:	0e9b      	lsrs	r3, r3, #26
 800677c:	b2db      	uxtb	r3, r3
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	b2da      	uxtb	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678c:	0e1b      	lsrs	r3, r3, #24
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679e:	0c1b      	lsrs	r3, r3, #16
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c0:	0d1b      	lsrs	r3, r3, #20
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067de:	0bdb      	lsrs	r3, r3, #15
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f0:	0b9b      	lsrs	r3, r3, #14
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006802:	0b5b      	lsrs	r3, r3, #13
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	0b1b      	lsrs	r3, r3, #12
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2200      	movs	r2, #0
 8006826:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	2b00      	cmp	r3, #0
 800682e:	d163      	bne.n	80068f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006834:	009a      	lsls	r2, r3, #2
 8006836:	f640 73fc 	movw	r3, #4092	; 0xffc
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006840:	0f92      	lsrs	r2, r2, #30
 8006842:	431a      	orrs	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	0edb      	lsrs	r3, r3, #27
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	b2da      	uxtb	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	0e1b      	lsrs	r3, r3, #24
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	b2da      	uxtb	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	0d5b      	lsrs	r3, r3, #21
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	b2da      	uxtb	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006882:	0c9b      	lsrs	r3, r3, #18
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	b2da      	uxtb	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006894:	0bdb      	lsrs	r3, r3, #15
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	b2da      	uxtb	r2, r3
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	7e1b      	ldrb	r3, [r3, #24]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	3302      	adds	r3, #2
 80068b8:	2201      	movs	r2, #1
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80068c2:	fb02 f203 	mul.w	r2, r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	7a1b      	ldrb	r3, [r3, #8]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	2201      	movs	r2, #1
 80068d6:	409a      	lsls	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80068e4:	0a52      	lsrs	r2, r2, #9
 80068e6:	fb02 f203 	mul.w	r2, r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60
 80068f6:	e031      	b.n	800695c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d11d      	bne.n	800693c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	041b      	lsls	r3, r3, #16
 8006906:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	431a      	orrs	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	3301      	adds	r3, #1
 800691c:	029a      	lsls	r2, r3, #10
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006930:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	661a      	str	r2, [r3, #96]	; 0x60
 800693a:	e00f      	b.n	800695c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a58      	ldr	r2, [pc, #352]	; (8006aa4 <HAL_SD_GetCardCSD+0x344>)
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e09d      	b.n	8006a98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006960:	0b9b      	lsrs	r3, r3, #14
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697a:	b2da      	uxtb	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	0fdb      	lsrs	r3, r3, #31
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	0f5b      	lsrs	r3, r3, #29
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	0e9b      	lsrs	r3, r3, #26
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	0d9b      	lsrs	r3, r3, #22
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	0d5b      	lsrs	r3, r3, #21
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	0bdb      	lsrs	r3, r3, #15
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	0b9b      	lsrs	r3, r3, #14
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	0b5b      	lsrs	r3, r3, #13
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	0b1b      	lsrs	r3, r3, #12
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	0a9b      	lsrs	r3, r3, #10
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	004005ff 	.word	0x004005ff

08006aa8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b00:	b5b0      	push	{r4, r5, r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2203      	movs	r2, #3
 8006b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d02e      	beq.n	8006b7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d106      	bne.n	8006b36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
 8006b34:	e029      	b.n	8006b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3c:	d10a      	bne.n	8006b54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb28 	bl	8007194 <SD_WideBus_Enable>
 8006b44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
 8006b52:	e01a      	b.n	8006b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fb65 	bl	800722a <SD_WideBus_Disable>
 8006b60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b6e:	e00c      	b.n	8006b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b7c:	e005      	b.n	8006b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a26      	ldr	r2, [pc, #152]	; (8006c30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ba8:	e01f      	b.n	8006bea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681d      	ldr	r5, [r3, #0]
 8006bd0:	466c      	mov	r4, sp
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006bde:	f107 0308 	add.w	r3, r7, #8
 8006be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006be4:	4628      	mov	r0, r5
 8006be6:	f001 fc4b 	bl	8008480 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 fd20 	bl	8008638 <SDMMC_CmdBlockLength>
 8006bf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	004005ff 	.word	0x004005ff

08006c34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c40:	f107 030c 	add.w	r3, r7, #12
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa7c 	bl	8007144 <SD_SendStatus>
 8006c4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0a5b      	lsrs	r3, r3, #9
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c6a:	693b      	ldr	r3, [r7, #16]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b82      	cmp	r3, #130	; 0x82
 8006cb2:	d111      	bne.n	8006cd8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 fd67 	bl	800878c <SDMMC_CmdStopTransfer>
 8006cbe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7ff fd3a 	bl	800674c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0208 	bic.w	r2, r2, #8
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f240 523a 	movw	r2, #1338	; 0x53a
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f002 f9cf 	bl	80090a4 <HAL_SD_RxCpltCallback>
#endif
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fd fa36 	bl	8004190 <HAL_DMA_GetError>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d03e      	beq.n	8006da8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <SD_DMAError+0x36>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d12d      	bne.n	8006da2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <SD_DMAError+0xa0>)
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006d5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006d6a:	6978      	ldr	r0, [r7, #20]
 8006d6c:	f7ff ff62 	bl	8006c34 <HAL_SD_GetCardState>
 8006d70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d002      	beq.n	8006d7e <SD_DMAError+0x6e>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d10a      	bne.n	8006d94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fd02 	bl	800878c <SDMMC_CmdStopTransfer>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006da2:	6978      	ldr	r0, [r7, #20]
 8006da4:	f7ff fcd2 	bl	800674c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006da8:	bf00      	nop
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	004005ff 	.word	0x004005ff

08006db4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff31 	bl	8006c34 <HAL_SD_GetCardState>
 8006dd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b06      	cmp	r3, #6
 8006de6:	d002      	beq.n	8006dee <SD_DMATxAbort+0x3a>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d10a      	bne.n	8006e04 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fcca 	bl	800878c <SDMMC_CmdStopTransfer>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f002 f935 	bl	800907c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e12:	e002      	b.n	8006e1a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fc99 	bl	800674c <HAL_SD_ErrorCallback>
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fefa 	bl	8006c34 <HAL_SD_GetCardState>
 8006e40:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d002      	beq.n	8006e5c <SD_DMARxAbort+0x3a>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d10a      	bne.n	8006e72 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fc93 	bl	800878c <SDMMC_CmdStopTransfer>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f002 f8fe 	bl	800907c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e80:	e002      	b.n	8006e88 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fc62 	bl	800674c <HAL_SD_ErrorCallback>
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e90:	b5b0      	push	{r4, r5, r7, lr}
 8006e92:	b094      	sub	sp, #80	; 0x50
 8006e94:	af04      	add	r7, sp, #16
 8006e96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fb45 	bl	8008530 <SDIO_GetPowerState>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006eb0:	e0b6      	b.n	8007020 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d02f      	beq.n	8006f1a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 fd6e 	bl	80089a0 <SDMMC_CmdSendCID>
 8006ec4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ece:	e0a7      	b.n	8007020 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 fb6f 	bl	80085ba <SDIO_GetResponse>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f001 fb66 	bl	80085ba <SDIO_GetResponse>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2108      	movs	r1, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fb5d 	bl	80085ba <SDIO_GetResponse>
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	210c      	movs	r1, #12
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fb54 	bl	80085ba <SDIO_GetResponse>
 8006f12:	4602      	mov	r2, r0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d00d      	beq.n	8006f3e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f107 020e 	add.w	r2, r7, #14
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 fd74 	bl	8008a1a <SDMMC_CmdSetRelAdd>
 8006f32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <SD_InitCard+0xae>
    {
      return errorstate;
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	e070      	b.n	8007020 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d036      	beq.n	8006fb4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f46:	89fb      	ldrh	r3, [r7, #14]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f001 fd3e 	bl	80089dc <SDMMC_CmdSendCSD>
 8006f60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6a:	e059      	b.n	8007020 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fb21 	bl	80085ba <SDIO_GetResponse>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2104      	movs	r1, #4
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fb18 	bl	80085ba <SDIO_GetResponse>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2108      	movs	r1, #8
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fb0f 	bl	80085ba <SDIO_GetResponse>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	210c      	movs	r1, #12
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 fb06 	bl	80085ba <SDIO_GetResponse>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2104      	movs	r1, #4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fafd 	bl	80085ba <SDIO_GetResponse>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	0d1a      	lsrs	r2, r3, #20
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fc8:	f107 0310 	add.w	r3, r7, #16
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fbc6 	bl	8006760 <HAL_SD_GetCardCSD>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fde:	e01f      	b.n	8007020 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	461a      	mov	r2, r3
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	f001 fbed 	bl	80087d0 <SDMMC_CmdSelDesel>
 8006ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <SD_InitCard+0x172>
  {
    return errorstate;
 8006ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007000:	e00e      	b.n	8007020 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681d      	ldr	r5, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	466c      	mov	r4, sp
 800700a:	f103 0210 	add.w	r2, r3, #16
 800700e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007014:	3304      	adds	r3, #4
 8007016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007018:	4628      	mov	r0, r5
 800701a:	f001 fa31 	bl	8008480 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3740      	adds	r7, #64	; 0x40
 8007024:	46bd      	mov	sp, r7
 8007026:	bdb0      	pop	{r4, r5, r7, pc}

08007028 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f001 fbe8 	bl	8008816 <SDMMC_CmdGoIdleState>
 8007046:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <SD_PowerON+0x2a>
  {
    return errorstate;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	e072      	b.n	8007138 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fbfb 	bl	8008852 <SDMMC_CmdOperCond>
 800705c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fbd1 	bl	8008816 <SDMMC_CmdGoIdleState>
 8007074:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <SD_PowerON+0x5e>
    {
      return errorstate;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	e05b      	b.n	8007138 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708a:	2b01      	cmp	r3, #1
 800708c:	d137      	bne.n	80070fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fbfb 	bl	8008890 <SDMMC_CmdAppCommand>
 800709a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d02d      	beq.n	80070fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070a6:	e047      	b.n	8007138 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fbee 	bl	8008890 <SDMMC_CmdAppCommand>
 80070b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	e03b      	b.n	8007138 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	491e      	ldr	r1, [pc, #120]	; (8007140 <SD_PowerON+0x118>)
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fc04 	bl	80088d4 <SDMMC_CmdAppOperCommand>
 80070cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070d8:	e02e      	b.n	8007138 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fa6a 	bl	80085ba <SDIO_GetResponse>
 80070e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	0fdb      	lsrs	r3, r3, #31
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <SD_PowerON+0xcc>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <SD_PowerON+0xce>
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

    count++;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007104:	4293      	cmp	r3, r2
 8007106:	d802      	bhi.n	800710e <SD_PowerON+0xe6>
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0cc      	beq.n	80070a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007114:	4293      	cmp	r3, r2
 8007116:	d902      	bls.n	800711e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800711c:	e00c      	b.n	8007138 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
 800712e:	e002      	b.n	8007136 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	c1100000 	.word	0xc1100000

08007144 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007158:	e018      	b.n	800718c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f001 fc78 	bl	8008a5c <SDMMC_CmdSendStatus>
 800716c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	e009      	b.n	800718c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fa1b 	bl	80085ba <SDIO_GetResponse>
 8007184:	4602      	mov	r2, r0
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 fa05 	bl	80085ba <SDIO_GetResponse>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ba:	d102      	bne.n	80071c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80071bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071c0:	e02f      	b.n	8007222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f879 	bl	80072c0 <SD_FindSCR>
 80071ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	e023      	b.n	8007222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01c      	beq.n	800721e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f001 fb4d 	bl	8008890 <SDMMC_CmdAppCommand>
 80071f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	e00f      	b.n	8007222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2102      	movs	r1, #2
 8007208:	4618      	mov	r0, r3
 800720a:	f001 fb86 	bl	800891a <SDMMC_CmdBusWidth>
 800720e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	e003      	b.n	8007222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800721a:	2300      	movs	r3, #0
 800721c:	e001      	b.n	8007222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800721e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f9ba 	bl	80085ba <SDIO_GetResponse>
 8007246:	4603      	mov	r3, r0
 8007248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007250:	d102      	bne.n	8007258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007256:	e02f      	b.n	80072b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f82e 	bl	80072c0 <SD_FindSCR>
 8007264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	e023      	b.n	80072b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d01c      	beq.n	80072b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f001 fb02 	bl	8008890 <SDMMC_CmdAppCommand>
 800728c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	e00f      	b.n	80072b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fb3b 	bl	800891a <SDMMC_CmdBusWidth>
 80072a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	e003      	b.n	80072b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e001      	b.n	80072b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80072c0:	b590      	push	{r4, r7, lr}
 80072c2:	b08f      	sub	sp, #60	; 0x3c
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072ca:	f7fc fafd 	bl	80038c8 <HAL_GetTick>
 80072ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80072d4:	2300      	movs	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2108      	movs	r1, #8
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f9a6 	bl	8008638 <SDMMC_CmdBlockLength>
 80072ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	e0b2      	b.n	800745e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f001 fac3 	bl	8008890 <SDMMC_CmdAppCommand>
 800730a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	e0a3      	b.n	800745e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800731c:	2308      	movs	r3, #8
 800731e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007320:	2330      	movs	r3, #48	; 0x30
 8007322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007324:	2302      	movs	r3, #2
 8007326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007328:	2300      	movs	r3, #0
 800732a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800732c:	2301      	movs	r3, #1
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f107 0210 	add.w	r2, r7, #16
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f001 f950 	bl	80085e0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f001 fb0a 	bl	800895e <SDMMC_CmdSendSCR>
 800734a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d02a      	beq.n	80073a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	e083      	b.n	800745e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00f      	beq.n	8007384 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	f107 0208 	add.w	r2, r7, #8
 8007370:	18d4      	adds	r4, r2, r3
 8007372:	4608      	mov	r0, r1
 8007374:	f001 f8af 	bl	80084d6 <SDIO_ReadFIFO>
 8007378:	4603      	mov	r3, r0
 800737a:	6023      	str	r3, [r4, #0]
      index++;
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	3301      	adds	r3, #1
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	e006      	b.n	8007392 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d012      	beq.n	80073b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007392:	f7fc fa99 	bl	80038c8 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d102      	bne.n	80073a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073a6:	e05a      	b.n	800745e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0cf      	beq.n	8007356 <SD_FindSCR+0x96>
 80073b6:	e000      	b.n	80073ba <SD_FindSCR+0xfa>
      break;
 80073b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	f003 0308 	and.w	r3, r3, #8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2208      	movs	r2, #8
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80073d0:	2308      	movs	r3, #8
 80073d2:	e044      	b.n	800745e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2202      	movs	r2, #2
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	e037      	b.n	800745e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2220      	movs	r2, #32
 8007402:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007404:	2320      	movs	r3, #32
 8007406:	e02a      	b.n	800745e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007410:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	061a      	lsls	r2, r3, #24
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800741e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007428:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0e1b      	lsrs	r3, r3, #24
 800742e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	601a      	str	r2, [r3, #0]
    scr++;
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	3304      	adds	r3, #4
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	061a      	lsls	r2, r3, #24
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007446:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007450:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	373c      	adds	r7, #60	; 0x3c
 8007462:	46bd      	mov	sp, r7
 8007464:	bd90      	pop	{r4, r7, pc}

08007466 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d03f      	beq.n	8007500 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e033      	b.n	80074ee <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f823 	bl	80084d6 <SDIO_ReadFIFO>
 8007490:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	701a      	strb	r2, [r3, #0]
      tmp++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	0e1b      	lsrs	r3, r3, #24
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	3301      	adds	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	d9c8      	bls.n	8007486 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007500:	bf00      	nop
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d043      	beq.n	80075aa <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e037      	b.n	8007598 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3b01      	subs	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4313      	orrs	r3, r2
 8007544:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	3b01      	subs	r3, #1
 8007550:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	041a      	lsls	r2, r3, #16
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3b01      	subs	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	061a      	lsls	r2, r3, #24
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	3b01      	subs	r3, #1
 8007580:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f107 0208 	add.w	r2, r7, #8
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f000 ffaf 	bl	80084f0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	3301      	adds	r3, #1
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2b07      	cmp	r3, #7
 800759c:	d9c4      	bls.n	8007528 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e03f      	b.n	8007644 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fc f823 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2224      	movs	r2, #36	; 0x24
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fd7a 	bl	80080f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800760a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695a      	ldr	r2, [r3, #20]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800761a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800762a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b20      	cmp	r3, #32
 800766a:	d17c      	bne.n	8007766 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_UART_Transmit+0x2c>
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e075      	b.n	8007768 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_UART_Transmit+0x3e>
 8007686:	2302      	movs	r3, #2
 8007688:	e06e      	b.n	8007768 <HAL_UART_Transmit+0x11c>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2221      	movs	r2, #33	; 0x21
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076a0:	f7fc f912 	bl	80038c8 <HAL_GetTick>
 80076a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	88fa      	ldrh	r2, [r7, #6]
 80076aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ba:	d108      	bne.n	80076ce <HAL_UART_Transmit+0x82>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e003      	b.n	80076d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076de:	e02a      	b.n	8007736 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2200      	movs	r2, #0
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 faf8 	bl	8007ce0 <UART_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e036      	b.n	8007768 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	3302      	adds	r3, #2
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e007      	b.n	8007728 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	3301      	adds	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1cf      	bne.n	80076e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2200      	movs	r2, #0
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fac8 	bl	8007ce0 <UART_WaitOnFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e006      	b.n	8007768 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b0ba      	sub	sp, #232	; 0xe8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10f      	bne.n	80077d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_UART_IRQHandler+0x66>
 80077c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fbd3 	bl	8007f7a <UART_Receive_IT>
      return;
 80077d4:	e256      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80de 	beq.w	800799c <HAL_UART_IRQHandler+0x22c>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80d1 	beq.w	800799c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HAL_UART_IRQHandler+0xae>
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0201 	orr.w	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_UART_IRQHandler+0xd2>
 800782a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	f043 0202 	orr.w	r2, r3, #2
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <HAL_UART_IRQHandler+0xf6>
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f043 0204 	orr.w	r2, r3, #4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <HAL_UART_IRQHandler+0x126>
 8007872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d105      	bne.n	800788a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800787e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 81ed 	beq.w	8007c7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_UART_IRQHandler+0x14e>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb5e 	bl	8007f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <HAL_UART_IRQHandler+0x17a>
 80078e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d04f      	beq.n	800798a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa66 	bl	8007dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d141      	bne.n	8007982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3314      	adds	r3, #20
 8007904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800792a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800792e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1d9      	bne.n	80078fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	2b00      	cmp	r3, #0
 8007950:	d013      	beq.n	800797a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	4a7d      	ldr	r2, [pc, #500]	; (8007b4c <HAL_UART_IRQHandler+0x3dc>)
 8007958:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	4618      	mov	r0, r3
 8007960:	f7fc fa6a 	bl	8003e38 <HAL_DMA_Abort_IT>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d016      	beq.n	8007998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	e00e      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f99a 	bl	8007cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	e00a      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f996 	bl	8007cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	e006      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f992 	bl	8007cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007996:	e170      	b.n	8007c7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	bf00      	nop
    return;
 800799a:	e16e      	b.n	8007c7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	f040 814a 	bne.w	8007c3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8143 	beq.w	8007c3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 813c 	beq.w	8007c3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	f040 80b4 	bne.w	8007b50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8140 	beq.w	8007c7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a06:	429a      	cmp	r2, r3
 8007a08:	f080 8139 	bcs.w	8007c7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	f000 8088 	beq.w	8007b32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1d9      	bne.n	8007a22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3314      	adds	r3, #20
 8007a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e1      	bne.n	8007a6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e3      	bne.n	8007aaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	330c      	adds	r3, #12
 8007af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b02:	f023 0310 	bic.w	r3, r3, #16
 8007b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e3      	bne.n	8007af0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fc f913 	bl	8003d58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f8c0 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b48:	e099      	b.n	8007c7e <HAL_UART_IRQHandler+0x50e>
 8007b4a:	bf00      	nop
 8007b4c:	08007e83 	.word	0x08007e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 808b 	beq.w	8007c82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8086 	beq.w	8007c82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e3      	bne.n	8007b76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3314      	adds	r3, #20
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f023 0301 	bic.w	r3, r3, #1
 8007bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3314      	adds	r3, #20
 8007bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e3      	bne.n	8007bae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0310 	bic.w	r3, r3, #16
 8007c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c18:	61fa      	str	r2, [r7, #28]
 8007c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	69b9      	ldr	r1, [r7, #24]
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	617b      	str	r3, [r7, #20]
   return(result);
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e3      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f848 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c38:	e023      	b.n	8007c82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <HAL_UART_IRQHandler+0x4ea>
 8007c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f929 	bl	8007eaa <UART_Transmit_IT>
    return;
 8007c58:	e014      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <HAL_UART_IRQHandler+0x514>
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d008      	beq.n	8007c84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f969 	bl	8007f4a <UART_EndTransmit_IT>
    return;
 8007c78:	e004      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
    return;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
      return;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
      return;
 8007c82:	bf00      	nop
  }
}
 8007c84:	37e8      	adds	r7, #232	; 0xe8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop

08007c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b090      	sub	sp, #64	; 0x40
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf0:	e050      	b.n	8007d94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d04c      	beq.n	8007d94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d00:	f7fb fde2 	bl	80038c8 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d241      	bcs.n	8007d94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d30:	637a      	str	r2, [r7, #52]	; 0x34
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	613b      	str	r3, [r7, #16]
   return(result);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f023 0301 	bic.w	r3, r3, #1
 8007d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3314      	adds	r3, #20
 8007d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d64:	623a      	str	r2, [r7, #32]
 8007d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	6a3a      	ldr	r2, [r7, #32]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e5      	bne.n	8007d44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e00f      	b.n	8007db4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d09f      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3740      	adds	r7, #64	; 0x40
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b095      	sub	sp, #84	; 0x54
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de4:	643a      	str	r2, [r7, #64]	; 0x40
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d119      	bne.n	8007e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e54:	61ba      	str	r2, [r7, #24]
 8007e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6979      	ldr	r1, [r7, #20]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	613b      	str	r3, [r7, #16]
   return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e76:	bf00      	nop
 8007e78:	3754      	adds	r7, #84	; 0x54
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff ff09 	bl	8007cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b21      	cmp	r3, #33	; 0x21
 8007ebc:	d13e      	bne.n	8007f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d114      	bne.n	8007ef2 <UART_Transmit_IT+0x48>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	621a      	str	r2, [r3, #32]
 8007ef0:	e008      	b.n	8007f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6211      	str	r1, [r2, #32]
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4619      	mov	r1, r3
 8007f12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10f      	bne.n	8007f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e000      	b.n	8007f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
  }
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fe8e 	bl	8007c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b08c      	sub	sp, #48	; 0x30
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b22      	cmp	r3, #34	; 0x22
 8007f8c:	f040 80ab 	bne.w	80080e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f98:	d117      	bne.n	8007fca <UART_Receive_IT+0x50>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d113      	bne.n	8007fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc8:	e026      	b.n	8008018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fdc:	d007      	beq.n	8007fee <UART_Receive_IT+0x74>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <UART_Receive_IT+0x82>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d106      	bne.n	8007ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	e008      	b.n	800800e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008008:	b2da      	uxtb	r2, r3
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	4619      	mov	r1, r3
 8008026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008028:	2b00      	cmp	r3, #0
 800802a:	d15a      	bne.n	80080e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0220 	bic.w	r2, r2, #32
 800803a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800804a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	2b01      	cmp	r3, #1
 800806a:	d135      	bne.n	80080d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	613b      	str	r3, [r7, #16]
   return(result);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f023 0310 	bic.w	r3, r3, #16
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	623a      	str	r2, [r7, #32]
 8008094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d10a      	bne.n	80080ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fdf9 	bl	8007cc8 <HAL_UARTEx_RxEventCallback>
 80080d6:	e002      	b.n	80080de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fde1 	bl	8007ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e002      	b.n	80080e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3730      	adds	r7, #48	; 0x30
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	b09f      	sub	sp, #124	; 0x7c
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	68d9      	ldr	r1, [r3, #12]
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	ea40 0301 	orr.w	r3, r0, r1
 8008110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	431a      	orrs	r2, r3
 800811c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	431a      	orrs	r2, r3
 8008122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	4313      	orrs	r3, r2
 8008128:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800812a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008134:	f021 010c 	bic.w	r1, r1, #12
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813e:	430b      	orrs	r3, r1
 8008140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800814c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814e:	6999      	ldr	r1, [r3, #24]
 8008150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	ea40 0301 	orr.w	r3, r0, r1
 8008158:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800815a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4bc5      	ldr	r3, [pc, #788]	; (8008474 <UART_SetConfig+0x384>)
 8008160:	429a      	cmp	r2, r3
 8008162:	d004      	beq.n	800816e <UART_SetConfig+0x7e>
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	4bc3      	ldr	r3, [pc, #780]	; (8008478 <UART_SetConfig+0x388>)
 800816a:	429a      	cmp	r2, r3
 800816c:	d103      	bne.n	8008176 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800816e:	f7fd fedd 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 8008172:	6778      	str	r0, [r7, #116]	; 0x74
 8008174:	e002      	b.n	800817c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008176:	f7fd fec5 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 800817a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800817c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008184:	f040 80b6 	bne.w	80082f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818a:	461c      	mov	r4, r3
 800818c:	f04f 0500 	mov.w	r5, #0
 8008190:	4622      	mov	r2, r4
 8008192:	462b      	mov	r3, r5
 8008194:	1891      	adds	r1, r2, r2
 8008196:	6439      	str	r1, [r7, #64]	; 0x40
 8008198:	415b      	adcs	r3, r3
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
 800819c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081a0:	1912      	adds	r2, r2, r4
 80081a2:	eb45 0303 	adc.w	r3, r5, r3
 80081a6:	f04f 0000 	mov.w	r0, #0
 80081aa:	f04f 0100 	mov.w	r1, #0
 80081ae:	00d9      	lsls	r1, r3, #3
 80081b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b4:	00d0      	lsls	r0, r2, #3
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	1911      	adds	r1, r2, r4
 80081bc:	6639      	str	r1, [r7, #96]	; 0x60
 80081be:	416b      	adcs	r3, r5
 80081c0:	667b      	str	r3, [r7, #100]	; 0x64
 80081c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	461a      	mov	r2, r3
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	1891      	adds	r1, r2, r2
 80081ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80081d0:	415b      	adcs	r3, r3
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081dc:	f7f8 fd3c 	bl	8000c58 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4ba5      	ldr	r3, [pc, #660]	; (800847c <UART_SetConfig+0x38c>)
 80081e6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	011e      	lsls	r6, r3, #4
 80081ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f0:	461c      	mov	r4, r3
 80081f2:	f04f 0500 	mov.w	r5, #0
 80081f6:	4622      	mov	r2, r4
 80081f8:	462b      	mov	r3, r5
 80081fa:	1891      	adds	r1, r2, r2
 80081fc:	6339      	str	r1, [r7, #48]	; 0x30
 80081fe:	415b      	adcs	r3, r3
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
 8008202:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008206:	1912      	adds	r2, r2, r4
 8008208:	eb45 0303 	adc.w	r3, r5, r3
 800820c:	f04f 0000 	mov.w	r0, #0
 8008210:	f04f 0100 	mov.w	r1, #0
 8008214:	00d9      	lsls	r1, r3, #3
 8008216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800821a:	00d0      	lsls	r0, r2, #3
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	1911      	adds	r1, r2, r4
 8008222:	65b9      	str	r1, [r7, #88]	; 0x58
 8008224:	416b      	adcs	r3, r5
 8008226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	461a      	mov	r2, r3
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	1891      	adds	r1, r2, r2
 8008234:	62b9      	str	r1, [r7, #40]	; 0x28
 8008236:	415b      	adcs	r3, r3
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008242:	f7f8 fd09 	bl	8000c58 <__aeabi_uldivmod>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4b8c      	ldr	r3, [pc, #560]	; (800847c <UART_SetConfig+0x38c>)
 800824c:	fba3 1302 	umull	r1, r3, r3, r2
 8008250:	095b      	lsrs	r3, r3, #5
 8008252:	2164      	movs	r1, #100	; 0x64
 8008254:	fb01 f303 	mul.w	r3, r1, r3
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	3332      	adds	r3, #50	; 0x32
 800825e:	4a87      	ldr	r2, [pc, #540]	; (800847c <UART_SetConfig+0x38c>)
 8008260:	fba2 2303 	umull	r2, r3, r2, r3
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800826c:	441e      	add	r6, r3
 800826e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008270:	4618      	mov	r0, r3
 8008272:	f04f 0100 	mov.w	r1, #0
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	1894      	adds	r4, r2, r2
 800827c:	623c      	str	r4, [r7, #32]
 800827e:	415b      	adcs	r3, r3
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
 8008282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008286:	1812      	adds	r2, r2, r0
 8008288:	eb41 0303 	adc.w	r3, r1, r3
 800828c:	f04f 0400 	mov.w	r4, #0
 8008290:	f04f 0500 	mov.w	r5, #0
 8008294:	00dd      	lsls	r5, r3, #3
 8008296:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800829a:	00d4      	lsls	r4, r2, #3
 800829c:	4622      	mov	r2, r4
 800829e:	462b      	mov	r3, r5
 80082a0:	1814      	adds	r4, r2, r0
 80082a2:	653c      	str	r4, [r7, #80]	; 0x50
 80082a4:	414b      	adcs	r3, r1
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
 80082a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	461a      	mov	r2, r3
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	1891      	adds	r1, r2, r2
 80082b4:	61b9      	str	r1, [r7, #24]
 80082b6:	415b      	adcs	r3, r3
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082c2:	f7f8 fcc9 	bl	8000c58 <__aeabi_uldivmod>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4b6c      	ldr	r3, [pc, #432]	; (800847c <UART_SetConfig+0x38c>)
 80082cc:	fba3 1302 	umull	r1, r3, r3, r2
 80082d0:	095b      	lsrs	r3, r3, #5
 80082d2:	2164      	movs	r1, #100	; 0x64
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	3332      	adds	r3, #50	; 0x32
 80082de:	4a67      	ldr	r2, [pc, #412]	; (800847c <UART_SetConfig+0x38c>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	f003 0207 	and.w	r2, r3, #7
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4432      	add	r2, r6
 80082f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082f2:	e0b9      	b.n	8008468 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f6:	461c      	mov	r4, r3
 80082f8:	f04f 0500 	mov.w	r5, #0
 80082fc:	4622      	mov	r2, r4
 80082fe:	462b      	mov	r3, r5
 8008300:	1891      	adds	r1, r2, r2
 8008302:	6139      	str	r1, [r7, #16]
 8008304:	415b      	adcs	r3, r3
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800830c:	1912      	adds	r2, r2, r4
 800830e:	eb45 0303 	adc.w	r3, r5, r3
 8008312:	f04f 0000 	mov.w	r0, #0
 8008316:	f04f 0100 	mov.w	r1, #0
 800831a:	00d9      	lsls	r1, r3, #3
 800831c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008320:	00d0      	lsls	r0, r2, #3
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	eb12 0804 	adds.w	r8, r2, r4
 800832a:	eb43 0905 	adc.w	r9, r3, r5
 800832e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4618      	mov	r0, r3
 8008334:	f04f 0100 	mov.w	r1, #0
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	008b      	lsls	r3, r1, #2
 8008342:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008346:	0082      	lsls	r2, r0, #2
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 fc84 	bl	8000c58 <__aeabi_uldivmod>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4b49      	ldr	r3, [pc, #292]	; (800847c <UART_SetConfig+0x38c>)
 8008356:	fba3 2302 	umull	r2, r3, r3, r2
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	011e      	lsls	r6, r3, #4
 800835e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008360:	4618      	mov	r0, r3
 8008362:	f04f 0100 	mov.w	r1, #0
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	1894      	adds	r4, r2, r2
 800836c:	60bc      	str	r4, [r7, #8]
 800836e:	415b      	adcs	r3, r3
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008376:	1812      	adds	r2, r2, r0
 8008378:	eb41 0303 	adc.w	r3, r1, r3
 800837c:	f04f 0400 	mov.w	r4, #0
 8008380:	f04f 0500 	mov.w	r5, #0
 8008384:	00dd      	lsls	r5, r3, #3
 8008386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800838a:	00d4      	lsls	r4, r2, #3
 800838c:	4622      	mov	r2, r4
 800838e:	462b      	mov	r3, r5
 8008390:	1814      	adds	r4, r2, r0
 8008392:	64bc      	str	r4, [r7, #72]	; 0x48
 8008394:	414b      	adcs	r3, r1
 8008396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	f04f 0100 	mov.w	r1, #0
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	008b      	lsls	r3, r1, #2
 80083ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083b0:	0082      	lsls	r2, r0, #2
 80083b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083b6:	f7f8 fc4f 	bl	8000c58 <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b2f      	ldr	r3, [pc, #188]	; (800847c <UART_SetConfig+0x38c>)
 80083c0:	fba3 1302 	umull	r1, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	2164      	movs	r1, #100	; 0x64
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	3332      	adds	r3, #50	; 0x32
 80083d2:	4a2a      	ldr	r2, [pc, #168]	; (800847c <UART_SetConfig+0x38c>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083de:	441e      	add	r6, r3
 80083e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e2:	4618      	mov	r0, r3
 80083e4:	f04f 0100 	mov.w	r1, #0
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	1894      	adds	r4, r2, r2
 80083ee:	603c      	str	r4, [r7, #0]
 80083f0:	415b      	adcs	r3, r3
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f8:	1812      	adds	r2, r2, r0
 80083fa:	eb41 0303 	adc.w	r3, r1, r3
 80083fe:	f04f 0400 	mov.w	r4, #0
 8008402:	f04f 0500 	mov.w	r5, #0
 8008406:	00dd      	lsls	r5, r3, #3
 8008408:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800840c:	00d4      	lsls	r4, r2, #3
 800840e:	4622      	mov	r2, r4
 8008410:	462b      	mov	r3, r5
 8008412:	eb12 0a00 	adds.w	sl, r2, r0
 8008416:	eb43 0b01 	adc.w	fp, r3, r1
 800841a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4618      	mov	r0, r3
 8008420:	f04f 0100 	mov.w	r1, #0
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	f04f 0300 	mov.w	r3, #0
 800842c:	008b      	lsls	r3, r1, #2
 800842e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008432:	0082      	lsls	r2, r0, #2
 8008434:	4650      	mov	r0, sl
 8008436:	4659      	mov	r1, fp
 8008438:	f7f8 fc0e 	bl	8000c58 <__aeabi_uldivmod>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <UART_SetConfig+0x38c>)
 8008442:	fba3 1302 	umull	r1, r3, r3, r2
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	2164      	movs	r1, #100	; 0x64
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	3332      	adds	r3, #50	; 0x32
 8008454:	4a09      	ldr	r2, [pc, #36]	; (800847c <UART_SetConfig+0x38c>)
 8008456:	fba2 2303 	umull	r2, r3, r2, r3
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	f003 020f 	and.w	r2, r3, #15
 8008460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4432      	add	r2, r6
 8008466:	609a      	str	r2, [r3, #8]
}
 8008468:	bf00      	nop
 800846a:	377c      	adds	r7, #124	; 0x7c
 800846c:	46bd      	mov	sp, r7
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	bf00      	nop
 8008474:	40011000 	.word	0x40011000
 8008478:	40011400 	.word	0x40011400
 800847c:	51eb851f 	.word	0x51eb851f

08008480 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008480:	b084      	sub	sp, #16
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	f107 001c 	add.w	r0, r7, #28
 800848e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008496:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008498:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800849a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800849e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80084a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80084a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80084aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80084ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	b004      	add	sp, #16
 80084d4:	4770      	bx	lr

080084d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2203      	movs	r2, #3
 800851e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008520:	2002      	movs	r0, #2
 8008522:	f7fb f9dd 	bl	80038e0 <HAL_Delay>
  
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0303 	and.w	r3, r3, #3
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800856a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008570:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008576:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008586:	f023 030f 	bic.w	r3, r3, #15
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	b2db      	uxtb	r3, r3
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3314      	adds	r3, #20
 80085c8:	461a      	mov	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
}  
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008606:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800860c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008612:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800862a:	2300      	movs	r3, #0

}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008646:	2310      	movs	r3, #16
 8008648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ff74 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008664:	f241 3288 	movw	r2, #5000	; 0x1388
 8008668:	2110      	movs	r1, #16
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa44 	bl	8008af8 <SDMMC_GetCmdResp1>
 8008670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008672:	69fb      	ldr	r3, [r7, #28]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800868a:	2311      	movs	r3, #17
 800868c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800868e:	2340      	movs	r3, #64	; 0x40
 8008690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800869a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800869c:	f107 0308 	add.w	r3, r7, #8
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ff52 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80086a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ac:	2111      	movs	r1, #17
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa22 	bl	8008af8 <SDMMC_GetCmdResp1>
 80086b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086b6:	69fb      	ldr	r3, [r7, #28]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80086ce:	2312      	movs	r3, #18
 80086d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086d2:	2340      	movs	r3, #64	; 0x40
 80086d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086d6:	2300      	movs	r3, #0
 80086d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086e0:	f107 0308 	add.w	r3, r7, #8
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff ff30 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80086ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f0:	2112      	movs	r1, #18
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa00 	bl	8008af8 <SDMMC_GetCmdResp1>
 80086f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086fa:	69fb      	ldr	r3, [r7, #28]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3720      	adds	r7, #32
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008712:	2318      	movs	r3, #24
 8008714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800871e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008724:	f107 0308 	add.w	r3, r7, #8
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ff0e 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008730:	f241 3288 	movw	r2, #5000	; 0x1388
 8008734:	2118      	movs	r1, #24
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9de 	bl	8008af8 <SDMMC_GetCmdResp1>
 800873c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800873e:	69fb      	ldr	r3, [r7, #28]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008756:	2319      	movs	r3, #25
 8008758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800875a:	2340      	movs	r3, #64	; 0x40
 800875c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008768:	f107 0308 	add.w	r3, r7, #8
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff feec 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008774:	f241 3288 	movw	r2, #5000	; 0x1388
 8008778:	2119      	movs	r1, #25
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f9bc 	bl	8008af8 <SDMMC_GetCmdResp1>
 8008780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008782:	69fb      	ldr	r3, [r7, #28]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008798:	230c      	movs	r3, #12
 800879a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087aa:	f107 0308 	add.w	r3, r7, #8
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff fecb 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80087b6:	4a05      	ldr	r2, [pc, #20]	; (80087cc <SDMMC_CmdStopTransfer+0x40>)
 80087b8:	210c      	movs	r1, #12
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f99c 	bl	8008af8 <SDMMC_GetCmdResp1>
 80087c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c2:	69fb      	ldr	r3, [r7, #28]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	05f5e100 	.word	0x05f5e100

080087d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80087e0:	2307      	movs	r3, #7
 80087e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087f2:	f107 0310 	add.w	r3, r7, #16
 80087f6:	4619      	mov	r1, r3
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff fea7 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80087fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008802:	2107      	movs	r1, #7
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f977 	bl	8008af8 <SDMMC_GetCmdResp1>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800880e:	4618      	mov	r0, r3
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b088      	sub	sp, #32
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fe86 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f92d 	bl	8008aa0 <SDMMC_GetCmdError>
 8008846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008848:	69fb      	ldr	r3, [r7, #28]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b088      	sub	sp, #32
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800885a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800885e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008860:	2308      	movs	r3, #8
 8008862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fe67 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fb24 	bl	8008ecc <SDMMC_GetCmdResp7>
 8008884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008886:	69fb      	ldr	r3, [r7, #28]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800889e:	2337      	movs	r3, #55	; 0x37
 80088a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fe48 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80088bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c0:	2137      	movs	r1, #55	; 0x37
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f918 	bl	8008af8 <SDMMC_GetCmdResp1>
 80088c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80088ea:	2329      	movs	r3, #41	; 0x29
 80088ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088ee:	2340      	movs	r3, #64	; 0x40
 80088f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088f2:	2300      	movs	r3, #0
 80088f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fe22 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa2b 	bl	8008d64 <SDMMC_GetCmdResp3>
 800890e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008910:	69fb      	ldr	r3, [r7, #28]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b088      	sub	sp, #32
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008928:	2306      	movs	r3, #6
 800892a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff fe03 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008946:	f241 3288 	movw	r2, #5000	; 0x1388
 800894a:	2106      	movs	r1, #6
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8d3 	bl	8008af8 <SDMMC_GetCmdResp1>
 8008952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008954:	69fb      	ldr	r3, [r7, #28]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b088      	sub	sp, #32
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800896a:	2333      	movs	r3, #51	; 0x33
 800896c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fde2 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	2133      	movs	r1, #51	; 0x33
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8b2 	bl	8008af8 <SDMMC_GetCmdResp1>
 8008994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80089ac:	2302      	movs	r3, #2
 80089ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80089b0:	23c0      	movs	r3, #192	; 0xc0
 80089b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089be:	f107 0308 	add.w	r3, r7, #8
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fdc1 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f982 	bl	8008cd4 <SDMMC_GetCmdResp2>
 80089d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089d2:	69fb      	ldr	r3, [r7, #28]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80089ea:	2309      	movs	r3, #9
 80089ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80089ee:	23c0      	movs	r3, #192	; 0xc0
 80089f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089fc:	f107 0308 	add.w	r3, r7, #8
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fda2 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f963 	bl	8008cd4 <SDMMC_GetCmdResp2>
 8008a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a10:	69fb      	ldr	r3, [r7, #28]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3720      	adds	r7, #32
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b088      	sub	sp, #32
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a3a:	f107 0308 	add.w	r3, r7, #8
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fd83 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	2103      	movs	r1, #3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9c8 	bl	8008de0 <SDMMC_GetCmdResp6>
 8008a50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a52:	69fb      	ldr	r3, [r7, #28]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008a6a:	230d      	movs	r3, #13
 8008a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a6e:	2340      	movs	r3, #64	; 0x40
 8008a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a7c:	f107 0308 	add.w	r3, r7, #8
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff fd62 	bl	800854c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8c:	210d      	movs	r1, #13
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f832 	bl	8008af8 <SDMMC_GetCmdResp1>
 8008a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a96:	69fb      	ldr	r3, [r7, #28]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <SDMMC_GetCmdError+0x50>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <SDMMC_GetCmdError+0x54>)
 8008aae:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab2:	0a5b      	lsrs	r3, r3, #9
 8008ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
 8008abc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1e5a      	subs	r2, r3, #1
 8008ac2:	60fa      	str	r2, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008acc:	e009      	b.n	8008ae2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f1      	beq.n	8008abe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	22c5      	movs	r2, #197	; 0xc5
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000004 	.word	0x20000004
 8008af4:	10624dd3 	.word	0x10624dd3

08008af8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	460b      	mov	r3, r1
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008b06:	4b70      	ldr	r3, [pc, #448]	; (8008cc8 <SDMMC_GetCmdResp1+0x1d0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a70      	ldr	r2, [pc, #448]	; (8008ccc <SDMMC_GetCmdResp1+0x1d4>)
 8008b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b10:	0a5a      	lsrs	r2, r3, #9
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	fb02 f303 	mul.w	r3, r2, r3
 8008b18:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	1e5a      	subs	r2, r3, #1
 8008b1e:	61fa      	str	r2, [r7, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b28:	e0c9      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0ef      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x22>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ea      	bne.n	8008b1a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2204      	movs	r2, #4
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b56:	2304      	movs	r3, #4
 8008b58:	e0b1      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0a6      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	22c5      	movs	r2, #197	; 0xc5
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fd12 	bl	80085a0 <SDIO_GetCommandResponse>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d001      	beq.n	8008b8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e099      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff fd14 	bl	80085ba <SDIO_GetResponse>
 8008b92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4b4e      	ldr	r3, [pc, #312]	; (8008cd0 <SDMMC_GetCmdResp1+0x1d8>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e08d      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da02      	bge.n	8008bae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bac:	e087      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008bb8:	2340      	movs	r3, #64	; 0x40
 8008bba:	e080      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	e079      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd8:	e071      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008be8:	e069      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf8:	e061      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c08:	e059      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c18:	e051      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c28:	e049      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c38:	e041      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c48:	e039      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c58:	e031      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c68:	e029      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008c74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c78:	e021      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008c84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c88:	e019      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c98:	e011      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ca8:	e009      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f003 0308 	and.w	r3, r3, #8
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008cb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008cb8:	e001      	b.n	8008cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000004 	.word	0x20000004
 8008ccc:	10624dd3 	.word	0x10624dd3
 8008cd0:	fdffe008 	.word	0xfdffe008

08008cd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cdc:	4b1f      	ldr	r3, [pc, #124]	; (8008d5c <SDMMC_GetCmdResp2+0x88>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <SDMMC_GetCmdResp2+0x8c>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	0a5b      	lsrs	r3, r3, #9
 8008ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cec:	fb02 f303 	mul.w	r3, r2, r3
 8008cf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	60fa      	str	r2, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d00:	e026      	b.n	8008d50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0ef      	beq.n	8008cf2 <SDMMC_GetCmdResp2+0x1e>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1ea      	bne.n	8008cf2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d2e:	2304      	movs	r3, #4
 8008d30:	e00e      	b.n	8008d50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d004      	beq.n	8008d48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e003      	b.n	8008d50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	22c5      	movs	r2, #197	; 0xc5
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20000004 	.word	0x20000004
 8008d60:	10624dd3 	.word	0x10624dd3

08008d64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d6c:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <SDMMC_GetCmdResp3+0x74>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <SDMMC_GetCmdResp3+0x78>)
 8008d72:	fba2 2303 	umull	r2, r3, r2, r3
 8008d76:	0a5b      	lsrs	r3, r3, #9
 8008d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d7c:	fb02 f303 	mul.w	r3, r2, r3
 8008d80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1e5a      	subs	r2, r3, #1
 8008d86:	60fa      	str	r2, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d90:	e01b      	b.n	8008dca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0ef      	beq.n	8008d82 <SDMMC_GetCmdResp3+0x1e>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ea      	bne.n	8008d82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	e003      	b.n	8008dca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	22c5      	movs	r2, #197	; 0xc5
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000004 	.word	0x20000004
 8008ddc:	10624dd3 	.word	0x10624dd3

08008de0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	460b      	mov	r3, r1
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dee:	4b35      	ldr	r3, [pc, #212]	; (8008ec4 <SDMMC_GetCmdResp6+0xe4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <SDMMC_GetCmdResp6+0xe8>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	0a5b      	lsrs	r3, r3, #9
 8008dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	1e5a      	subs	r2, r3, #1
 8008e08:	61fa      	str	r2, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e12:	e052      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0ef      	beq.n	8008e04 <SDMMC_GetCmdResp6+0x24>
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1ea      	bne.n	8008e04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e40:	2304      	movs	r3, #4
 8008e42:	e03a      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e02f      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff fba0 	bl	80085a0 <SDIO_GetCommandResponse>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d001      	beq.n	8008e6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e025      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	22c5      	movs	r2, #197	; 0xc5
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008e74:	2100      	movs	r1, #0
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7ff fb9f 	bl	80085ba <SDIO_GetResponse>
 8008e7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	0c1b      	lsrs	r3, r3, #16
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e011      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ea4:	e009      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eb4:	e001      	b.n	8008eba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000004 	.word	0x20000004
 8008ec8:	10624dd3 	.word	0x10624dd3

08008ecc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ed4:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <SDMMC_GetCmdResp7+0x94>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a22      	ldr	r2, [pc, #136]	; (8008f64 <SDMMC_GetCmdResp7+0x98>)
 8008eda:	fba2 2303 	umull	r2, r3, r2, r3
 8008ede:	0a5b      	lsrs	r3, r3, #9
 8008ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee4:	fb02 f303 	mul.w	r3, r2, r3
 8008ee8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	1e5a      	subs	r2, r3, #1
 8008eee:	60fa      	str	r2, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d102      	bne.n	8008efa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ef8:	e02c      	b.n	8008f54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0ef      	beq.n	8008eea <SDMMC_GetCmdResp7+0x1e>
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1ea      	bne.n	8008eea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2204      	movs	r2, #4
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f26:	2304      	movs	r3, #4
 8008f28:	e014      	b.n	8008f54 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d004      	beq.n	8008f40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e009      	b.n	8008f54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2240      	movs	r2, #64	; 0x40
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008f52:	2300      	movs	r3, #0
  
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	20000004 	.word	0x20000004
 8008f64:	10624dd3 	.word	0x10624dd3

08008f68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008f6c:	4904      	ldr	r1, [pc, #16]	; (8008f80 <MX_FATFS_Init+0x18>)
 8008f6e:	4805      	ldr	r0, [pc, #20]	; (8008f84 <MX_FATFS_Init+0x1c>)
 8008f70:	f000 fa84 	bl	800947c <FATFS_LinkDriver>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <MX_FATFS_Init+0x20>)
 8008f7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008f7c:	bf00      	nop
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000530 	.word	0x20000530
 8008f84:	0800d240 	.word	0x0800d240
 8008f88:	2000052c 	.word	0x2000052c

08008f8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008f96:	f000 f896 	bl	80090c6 <BSP_SD_IsDetected>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d001      	beq.n	8008fa4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e012      	b.n	8008fca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008fa4:	480b      	ldr	r0, [pc, #44]	; (8008fd4 <BSP_SD_Init+0x48>)
 8008fa6:	f7fc ffd5 	bl	8005f54 <HAL_SD_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fb8:	4806      	ldr	r0, [pc, #24]	; (8008fd4 <BSP_SD_Init+0x48>)
 8008fba:	f7fd fda1 	bl	8006b00 <HAL_SD_ConfigWideBusOperation>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	200003d8 	.word	0x200003d8

08008fd8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	68f9      	ldr	r1, [r7, #12]
 8008fee:	4806      	ldr	r0, [pc, #24]	; (8009008 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008ff0:	f7fd f85e 	bl	80060b0 <HAL_SD_ReadBlocks_DMA>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200003d8 	.word	0x200003d8

0800900c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	68f9      	ldr	r1, [r7, #12]
 8009022:	4806      	ldr	r0, [pc, #24]	; (800903c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009024:	f7fd f926 	bl	8006274 <HAL_SD_WriteBlocks_DMA>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200003d8 	.word	0x200003d8

08009040 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009044:	4805      	ldr	r0, [pc, #20]	; (800905c <BSP_SD_GetCardState+0x1c>)
 8009046:	f7fd fdf5 	bl	8006c34 <HAL_SD_GetCardState>
 800904a:	4603      	mov	r3, r0
 800904c:	2b04      	cmp	r3, #4
 800904e:	bf14      	ite	ne
 8009050:	2301      	movne	r3, #1
 8009052:	2300      	moveq	r3, #0
 8009054:	b2db      	uxtb	r3, r3
}
 8009056:	4618      	mov	r0, r3
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200003d8 	.word	0x200003d8

08009060 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4803      	ldr	r0, [pc, #12]	; (8009078 <BSP_SD_GetCardInfo+0x18>)
 800906c:	f7fd fd1c 	bl	8006aa8 <HAL_SD_GetCardInfo>
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200003d8 	.word	0x200003d8

0800907c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009084:	f000 f818 	bl	80090b8 <BSP_SD_AbortCallback>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009098:	f000 f98c 	bl	80093b4 <BSP_SD_WriteCpltCallback>
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80090ac:	f000 f98e 	bl	80093cc <BSP_SD_ReadCpltCallback>
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0

}
 80090bc:	bf00      	nop
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80090cc:	2301      	movs	r3, #1
 80090ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	b2db      	uxtb	r3, r3
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80090e8:	f7fa fbee 	bl	80038c8 <HAL_GetTick>
 80090ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80090ee:	e006      	b.n	80090fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80090f0:	f7ff ffa6 	bl	8009040 <BSP_SD_GetCardState>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e009      	b.n	8009112 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80090fe:	f7fa fbe3 	bl	80038c8 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	429a      	cmp	r2, r3
 800910c:	d8f0      	bhi.n	80090f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <SD_CheckStatus+0x38>)
 8009128:	2201      	movs	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800912c:	f7ff ff88 	bl	8009040 <BSP_SD_GetCardState>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d107      	bne.n	8009146 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009136:	4b07      	ldr	r3, [pc, #28]	; (8009154 <SD_CheckStatus+0x38>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f023 0301 	bic.w	r3, r3, #1
 8009140:	b2da      	uxtb	r2, r3
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <SD_CheckStatus+0x38>)
 8009144:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009146:	4b03      	ldr	r3, [pc, #12]	; (8009154 <SD_CheckStatus+0x38>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	b2db      	uxtb	r3, r3
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	2000000d 	.word	0x2000000d

08009158 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009162:	f7ff ff13 	bl	8008f8c <BSP_SD_Init>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d107      	bne.n	800917c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff ffd4 	bl	800911c <SD_CheckStatus>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <SD_initialize+0x34>)
 800917a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <SD_initialize+0x34>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	b2db      	uxtb	r3, r3
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	2000000d 	.word	0x2000000d

08009190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff ffbd 	bl	800911c <SD_CheckStatus>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80091c0:	f247 5030 	movw	r0, #30000	; 0x7530
 80091c4:	f7ff ff8c 	bl	80090e0 <SD_CheckStatusWithTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da01      	bge.n	80091d2 <SD_read+0x26>
  {
    return res;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	e03b      	b.n	800924a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	68b8      	ldr	r0, [r7, #8]
 80091d8:	f7ff fefe 	bl	8008fd8 <BSP_SD_ReadBlocks_DMA>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d132      	bne.n	8009248 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80091e2:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <SD_read+0xa8>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80091e8:	f7fa fb6e 	bl	80038c8 <HAL_GetTick>
 80091ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80091ee:	bf00      	nop
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <SD_read+0xa8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <SD_read+0x5e>
 80091f8:	f7fa fb66 	bl	80038c8 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f247 522f 	movw	r2, #29999	; 0x752f
 8009206:	4293      	cmp	r3, r2
 8009208:	d9f2      	bls.n	80091f0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <SD_read+0xa8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
 8009216:	e017      	b.n	8009248 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <SD_read+0xa8>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800921e:	f7fa fb53 	bl	80038c8 <HAL_GetTick>
 8009222:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009224:	e007      	b.n	8009236 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009226:	f7ff ff0b 	bl	8009040 <BSP_SD_GetCardState>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <SD_read+0x8a>
          {
            res = RES_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009234:	e008      	b.n	8009248 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009236:	f7fa fb47 	bl	80038c8 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	f247 522f 	movw	r2, #29999	; 0x752f
 8009244:	4293      	cmp	r3, r2
 8009246:	d9ee      	bls.n	8009226 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	200002ac 	.word	0x200002ac

08009258 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800926c:	4b24      	ldr	r3, [pc, #144]	; (8009300 <SD_write+0xa8>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009272:	f247 5030 	movw	r0, #30000	; 0x7530
 8009276:	f7ff ff33 	bl	80090e0 <SD_CheckStatusWithTimeout>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	da01      	bge.n	8009284 <SD_write+0x2c>
  {
    return res;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	e038      	b.n	80092f6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	68b8      	ldr	r0, [r7, #8]
 800928a:	f7ff febf 	bl	800900c <BSP_SD_WriteBlocks_DMA>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d12f      	bne.n	80092f4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009294:	f7fa fb18 	bl	80038c8 <HAL_GetTick>
 8009298:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800929a:	bf00      	nop
 800929c:	4b18      	ldr	r3, [pc, #96]	; (8009300 <SD_write+0xa8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d108      	bne.n	80092b6 <SD_write+0x5e>
 80092a4:	f7fa fb10 	bl	80038c8 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d9f2      	bls.n	800929c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <SD_write+0xa8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
 80092c2:	e017      	b.n	80092f4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80092c4:	4b0e      	ldr	r3, [pc, #56]	; (8009300 <SD_write+0xa8>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80092ca:	f7fa fafd 	bl	80038c8 <HAL_GetTick>
 80092ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80092d0:	e007      	b.n	80092e2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80092d2:	f7ff feb5 	bl	8009040 <BSP_SD_GetCardState>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <SD_write+0x8a>
          {
            res = RES_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
            break;
 80092e0:	e008      	b.n	80092f4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80092e2:	f7fa faf1 	bl	80038c8 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d9ee      	bls.n	80092d2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200002a8 	.word	0x200002a8

08009304 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	; 0x30
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	603a      	str	r2, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
 8009310:	460b      	mov	r3, r1
 8009312:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800931a:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <SD_ioctl+0xac>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <SD_ioctl+0x28>
 8009328:	2303      	movs	r3, #3
 800932a:	e03c      	b.n	80093a6 <SD_ioctl+0xa2>

  switch (cmd)
 800932c:	79bb      	ldrb	r3, [r7, #6]
 800932e:	2b03      	cmp	r3, #3
 8009330:	d834      	bhi.n	800939c <SD_ioctl+0x98>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <SD_ioctl+0x34>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	08009349 	.word	0x08009349
 800933c:	08009351 	.word	0x08009351
 8009340:	08009369 	.word	0x08009369
 8009344:	08009383 	.word	0x08009383
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800934e:	e028      	b.n	80093a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fe83 	bl	8009060 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009366:	e01c      	b.n	80093a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fe77 	bl	8009060 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	b29a      	uxth	r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009380:	e00f      	b.n	80093a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009382:	f107 030c 	add.w	r3, r7, #12
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fe6a 	bl	8009060 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	0a5a      	lsrs	r2, r3, #9
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800939a:	e002      	b.n	80093a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800939c:	2304      	movs	r3, #4
 800939e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80093a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3730      	adds	r7, #48	; 0x30
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	2000000d 	.word	0x2000000d

080093b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80093b4:	b480      	push	{r7}
 80093b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <BSP_SD_WriteCpltCallback+0x14>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
}
 80093be:	bf00      	nop
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	200002a8 	.word	0x200002a8

080093cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <BSP_SD_ReadCpltCallback+0x14>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
}
 80093d6:	bf00      	nop
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	200002ac 	.word	0x200002ac

080093e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093fa:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 80093fc:	7a5b      	ldrb	r3, [r3, #9]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d131      	bne.n	8009468 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009404:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 8009406:	7a5b      	ldrb	r3, [r3, #9]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	461a      	mov	r2, r3
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 800940e:	2100      	movs	r1, #0
 8009410:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009412:	4b19      	ldr	r3, [pc, #100]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 8009414:	7a5b      	ldrb	r3, [r3, #9]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4a17      	ldr	r2, [pc, #92]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 8009424:	7a5b      	ldrb	r3, [r3, #9]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 800942c:	4413      	add	r3, r2
 800942e:	79fa      	ldrb	r2, [r7, #7]
 8009430:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 8009434:	7a5b      	ldrb	r3, [r3, #9]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	b2d1      	uxtb	r1, r2
 800943c:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <FATFS_LinkDriverEx+0x94>)
 800943e:	7251      	strb	r1, [r2, #9]
 8009440:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009442:	7dbb      	ldrb	r3, [r7, #22]
 8009444:	3330      	adds	r3, #48	; 0x30
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	3301      	adds	r3, #1
 8009450:	223a      	movs	r2, #58	; 0x3a
 8009452:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	3302      	adds	r3, #2
 8009458:	222f      	movs	r2, #47	; 0x2f
 800945a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	3303      	adds	r3, #3
 8009460:	2200      	movs	r2, #0
 8009462:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
}
 800946a:	4618      	mov	r0, r3
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	200002b0 	.word	0x200002b0

0800947c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009486:	2200      	movs	r2, #0
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff ffaa 	bl	80093e4 <FATFS_LinkDriverEx>
 8009490:	4603      	mov	r3, r0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <roundf>:
 800949c:	ee10 0a10 	vmov	r0, s0
 80094a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80094a4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80094a8:	2a16      	cmp	r2, #22
 80094aa:	dc15      	bgt.n	80094d8 <roundf+0x3c>
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	da08      	bge.n	80094c2 <roundf+0x26>
 80094b0:	3201      	adds	r2, #1
 80094b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80094b6:	d101      	bne.n	80094bc <roundf+0x20>
 80094b8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80094bc:	ee00 3a10 	vmov	s0, r3
 80094c0:	4770      	bx	lr
 80094c2:	4908      	ldr	r1, [pc, #32]	; (80094e4 <roundf+0x48>)
 80094c4:	4111      	asrs	r1, r2
 80094c6:	4208      	tst	r0, r1
 80094c8:	d0fa      	beq.n	80094c0 <roundf+0x24>
 80094ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ce:	4113      	asrs	r3, r2
 80094d0:	4403      	add	r3, r0
 80094d2:	ea23 0301 	bic.w	r3, r3, r1
 80094d6:	e7f1      	b.n	80094bc <roundf+0x20>
 80094d8:	2a80      	cmp	r2, #128	; 0x80
 80094da:	d1f1      	bne.n	80094c0 <roundf+0x24>
 80094dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	007fffff 	.word	0x007fffff

080094e8 <atan2f>:
 80094e8:	f000 b826 	b.w	8009538 <__ieee754_atan2f>

080094ec <sqrtf>:
 80094ec:	b508      	push	{r3, lr}
 80094ee:	ed2d 8b02 	vpush	{d8}
 80094f2:	eeb0 8a40 	vmov.f32	s16, s0
 80094f6:	f000 f8bf 	bl	8009678 <__ieee754_sqrtf>
 80094fa:	4b0d      	ldr	r3, [pc, #52]	; (8009530 <sqrtf+0x44>)
 80094fc:	f993 3000 	ldrsb.w	r3, [r3]
 8009500:	3301      	adds	r3, #1
 8009502:	d011      	beq.n	8009528 <sqrtf+0x3c>
 8009504:	eeb4 8a48 	vcmp.f32	s16, s16
 8009508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950c:	d60c      	bvs.n	8009528 <sqrtf+0x3c>
 800950e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8009534 <sqrtf+0x48>
 8009512:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	d505      	bpl.n	8009528 <sqrtf+0x3c>
 800951c:	f000 f98c 	bl	8009838 <__errno>
 8009520:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009524:	2321      	movs	r3, #33	; 0x21
 8009526:	6003      	str	r3, [r0, #0]
 8009528:	ecbd 8b02 	vpop	{d8}
 800952c:	bd08      	pop	{r3, pc}
 800952e:	bf00      	nop
 8009530:	2000000e 	.word	0x2000000e
 8009534:	00000000 	.word	0x00000000

08009538 <__ieee754_atan2f>:
 8009538:	ee10 2a90 	vmov	r2, s1
 800953c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009540:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009544:	b510      	push	{r4, lr}
 8009546:	eef0 7a40 	vmov.f32	s15, s0
 800954a:	dc06      	bgt.n	800955a <__ieee754_atan2f+0x22>
 800954c:	ee10 0a10 	vmov	r0, s0
 8009550:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009554:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009558:	dd04      	ble.n	8009564 <__ieee754_atan2f+0x2c>
 800955a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800955e:	eeb0 0a67 	vmov.f32	s0, s15
 8009562:	bd10      	pop	{r4, pc}
 8009564:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009568:	d103      	bne.n	8009572 <__ieee754_atan2f+0x3a>
 800956a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956e:	f000 b887 	b.w	8009680 <atanf>
 8009572:	1794      	asrs	r4, r2, #30
 8009574:	f004 0402 	and.w	r4, r4, #2
 8009578:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800957c:	b943      	cbnz	r3, 8009590 <__ieee754_atan2f+0x58>
 800957e:	2c02      	cmp	r4, #2
 8009580:	d05e      	beq.n	8009640 <__ieee754_atan2f+0x108>
 8009582:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009654 <__ieee754_atan2f+0x11c>
 8009586:	2c03      	cmp	r4, #3
 8009588:	bf08      	it	eq
 800958a:	eef0 7a47 	vmoveq.f32	s15, s14
 800958e:	e7e6      	b.n	800955e <__ieee754_atan2f+0x26>
 8009590:	b941      	cbnz	r1, 80095a4 <__ieee754_atan2f+0x6c>
 8009592:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009658 <__ieee754_atan2f+0x120>
 8009596:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800965c <__ieee754_atan2f+0x124>
 800959a:	2800      	cmp	r0, #0
 800959c:	bfb8      	it	lt
 800959e:	eef0 7a40 	vmovlt.f32	s15, s0
 80095a2:	e7dc      	b.n	800955e <__ieee754_atan2f+0x26>
 80095a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80095a8:	d110      	bne.n	80095cc <__ieee754_atan2f+0x94>
 80095aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80095ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80095b2:	d107      	bne.n	80095c4 <__ieee754_atan2f+0x8c>
 80095b4:	2c02      	cmp	r4, #2
 80095b6:	d846      	bhi.n	8009646 <__ieee754_atan2f+0x10e>
 80095b8:	4b29      	ldr	r3, [pc, #164]	; (8009660 <__ieee754_atan2f+0x128>)
 80095ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80095be:	edd4 7a00 	vldr	s15, [r4]
 80095c2:	e7cc      	b.n	800955e <__ieee754_atan2f+0x26>
 80095c4:	2c02      	cmp	r4, #2
 80095c6:	d841      	bhi.n	800964c <__ieee754_atan2f+0x114>
 80095c8:	4b26      	ldr	r3, [pc, #152]	; (8009664 <__ieee754_atan2f+0x12c>)
 80095ca:	e7f6      	b.n	80095ba <__ieee754_atan2f+0x82>
 80095cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80095d0:	d0df      	beq.n	8009592 <__ieee754_atan2f+0x5a>
 80095d2:	1a5b      	subs	r3, r3, r1
 80095d4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80095d8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80095dc:	da1a      	bge.n	8009614 <__ieee754_atan2f+0xdc>
 80095de:	2a00      	cmp	r2, #0
 80095e0:	da01      	bge.n	80095e6 <__ieee754_atan2f+0xae>
 80095e2:	313c      	adds	r1, #60	; 0x3c
 80095e4:	db19      	blt.n	800961a <__ieee754_atan2f+0xe2>
 80095e6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80095ea:	f000 f91d 	bl	8009828 <fabsf>
 80095ee:	f000 f847 	bl	8009680 <atanf>
 80095f2:	eef0 7a40 	vmov.f32	s15, s0
 80095f6:	2c01      	cmp	r4, #1
 80095f8:	d012      	beq.n	8009620 <__ieee754_atan2f+0xe8>
 80095fa:	2c02      	cmp	r4, #2
 80095fc:	d017      	beq.n	800962e <__ieee754_atan2f+0xf6>
 80095fe:	2c00      	cmp	r4, #0
 8009600:	d0ad      	beq.n	800955e <__ieee754_atan2f+0x26>
 8009602:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009668 <__ieee754_atan2f+0x130>
 8009606:	ee77 7a80 	vadd.f32	s15, s15, s0
 800960a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800966c <__ieee754_atan2f+0x134>
 800960e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009612:	e7a4      	b.n	800955e <__ieee754_atan2f+0x26>
 8009614:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009658 <__ieee754_atan2f+0x120>
 8009618:	e7ed      	b.n	80095f6 <__ieee754_atan2f+0xbe>
 800961a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009670 <__ieee754_atan2f+0x138>
 800961e:	e7ea      	b.n	80095f6 <__ieee754_atan2f+0xbe>
 8009620:	ee17 3a90 	vmov	r3, s15
 8009624:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	e797      	b.n	800955e <__ieee754_atan2f+0x26>
 800962e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009668 <__ieee754_atan2f+0x130>
 8009632:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009636:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800966c <__ieee754_atan2f+0x134>
 800963a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800963e:	e78e      	b.n	800955e <__ieee754_atan2f+0x26>
 8009640:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800966c <__ieee754_atan2f+0x134>
 8009644:	e78b      	b.n	800955e <__ieee754_atan2f+0x26>
 8009646:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009674 <__ieee754_atan2f+0x13c>
 800964a:	e788      	b.n	800955e <__ieee754_atan2f+0x26>
 800964c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009670 <__ieee754_atan2f+0x138>
 8009650:	e785      	b.n	800955e <__ieee754_atan2f+0x26>
 8009652:	bf00      	nop
 8009654:	c0490fdb 	.word	0xc0490fdb
 8009658:	3fc90fdb 	.word	0x3fc90fdb
 800965c:	bfc90fdb 	.word	0xbfc90fdb
 8009660:	0800d254 	.word	0x0800d254
 8009664:	0800d260 	.word	0x0800d260
 8009668:	33bbbd2e 	.word	0x33bbbd2e
 800966c:	40490fdb 	.word	0x40490fdb
 8009670:	00000000 	.word	0x00000000
 8009674:	3f490fdb 	.word	0x3f490fdb

08009678 <__ieee754_sqrtf>:
 8009678:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800967c:	4770      	bx	lr
	...

08009680 <atanf>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	ee10 5a10 	vmov	r5, s0
 8009686:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800968a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800968e:	eef0 7a40 	vmov.f32	s15, s0
 8009692:	db10      	blt.n	80096b6 <atanf+0x36>
 8009694:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009698:	dd04      	ble.n	80096a4 <atanf+0x24>
 800969a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800969e:	eeb0 0a67 	vmov.f32	s0, s15
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80097dc <atanf+0x15c>
 80096a8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80097e0 <atanf+0x160>
 80096ac:	2d00      	cmp	r5, #0
 80096ae:	bfd8      	it	le
 80096b0:	eef0 7a40 	vmovle.f32	s15, s0
 80096b4:	e7f3      	b.n	800969e <atanf+0x1e>
 80096b6:	4b4b      	ldr	r3, [pc, #300]	; (80097e4 <atanf+0x164>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	dc10      	bgt.n	80096de <atanf+0x5e>
 80096bc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80096c0:	da0a      	bge.n	80096d8 <atanf+0x58>
 80096c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80097e8 <atanf+0x168>
 80096c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	dce2      	bgt.n	800969e <atanf+0x1e>
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	e013      	b.n	8009706 <atanf+0x86>
 80096de:	f000 f8a3 	bl	8009828 <fabsf>
 80096e2:	4b42      	ldr	r3, [pc, #264]	; (80097ec <atanf+0x16c>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	dc4f      	bgt.n	8009788 <atanf+0x108>
 80096e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80096ec:	429c      	cmp	r4, r3
 80096ee:	dc41      	bgt.n	8009774 <atanf+0xf4>
 80096f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80096f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80096f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096fc:	2300      	movs	r3, #0
 80096fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800970c:	eddf 5a38 	vldr	s11, [pc, #224]	; 80097f0 <atanf+0x170>
 8009710:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80097f4 <atanf+0x174>
 8009714:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80097f8 <atanf+0x178>
 8009718:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80097fc <atanf+0x17c>
 800971c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009720:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009724:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009800 <atanf+0x180>
 8009728:	eee6 5a07 	vfma.f32	s11, s12, s14
 800972c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009804 <atanf+0x184>
 8009730:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009734:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009808 <atanf+0x188>
 8009738:	eee6 5a07 	vfma.f32	s11, s12, s14
 800973c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800980c <atanf+0x18c>
 8009740:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009744:	eddf 5a32 	vldr	s11, [pc, #200]	; 8009810 <atanf+0x190>
 8009748:	eee7 5a05 	vfma.f32	s11, s14, s10
 800974c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009814 <atanf+0x194>
 8009750:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009754:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009818 <atanf+0x198>
 8009758:	eee5 5a07 	vfma.f32	s11, s10, s14
 800975c:	eea5 0a87 	vfma.f32	s0, s11, s14
 8009760:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009764:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009768:	ee27 0a80 	vmul.f32	s0, s15, s0
 800976c:	d121      	bne.n	80097b2 <atanf+0x132>
 800976e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009772:	e794      	b.n	800969e <atanf+0x1e>
 8009774:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009778:	ee30 7a67 	vsub.f32	s14, s0, s15
 800977c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009780:	2301      	movs	r3, #1
 8009782:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009786:	e7be      	b.n	8009706 <atanf+0x86>
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <atanf+0x19c>)
 800978a:	429c      	cmp	r4, r3
 800978c:	dc0b      	bgt.n	80097a6 <atanf+0x126>
 800978e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009796:	eea0 7a27 	vfma.f32	s14, s0, s15
 800979a:	2302      	movs	r3, #2
 800979c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80097a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097a4:	e7af      	b.n	8009706 <atanf+0x86>
 80097a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80097aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80097ae:	2303      	movs	r3, #3
 80097b0:	e7a9      	b.n	8009706 <atanf+0x86>
 80097b2:	4a1b      	ldr	r2, [pc, #108]	; (8009820 <atanf+0x1a0>)
 80097b4:	491b      	ldr	r1, [pc, #108]	; (8009824 <atanf+0x1a4>)
 80097b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80097ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80097be:	ed93 7a00 	vldr	s14, [r3]
 80097c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80097cc:	ed92 0a00 	vldr	s0, [r2]
 80097d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80097d4:	bfb8      	it	lt
 80097d6:	eef1 7a67 	vneglt.f32	s15, s15
 80097da:	e760      	b.n	800969e <atanf+0x1e>
 80097dc:	3fc90fdb 	.word	0x3fc90fdb
 80097e0:	bfc90fdb 	.word	0xbfc90fdb
 80097e4:	3edfffff 	.word	0x3edfffff
 80097e8:	7149f2ca 	.word	0x7149f2ca
 80097ec:	3f97ffff 	.word	0x3f97ffff
 80097f0:	3c8569d7 	.word	0x3c8569d7
 80097f4:	3d4bda59 	.word	0x3d4bda59
 80097f8:	bd15a221 	.word	0xbd15a221
 80097fc:	be4ccccd 	.word	0xbe4ccccd
 8009800:	3d886b35 	.word	0x3d886b35
 8009804:	3dba2e6e 	.word	0x3dba2e6e
 8009808:	3e124925 	.word	0x3e124925
 800980c:	3eaaaaab 	.word	0x3eaaaaab
 8009810:	bd6ef16b 	.word	0xbd6ef16b
 8009814:	bd9d8795 	.word	0xbd9d8795
 8009818:	bde38e38 	.word	0xbde38e38
 800981c:	401bffff 	.word	0x401bffff
 8009820:	0800d26c 	.word	0x0800d26c
 8009824:	0800d27c 	.word	0x0800d27c

08009828 <fabsf>:
 8009828:	ee10 3a10 	vmov	r3, s0
 800982c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009830:	ee00 3a10 	vmov	s0, r3
 8009834:	4770      	bx	lr
	...

08009838 <__errno>:
 8009838:	4b01      	ldr	r3, [pc, #4]	; (8009840 <__errno+0x8>)
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	20000010 	.word	0x20000010

08009844 <__libc_init_array>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4d0d      	ldr	r5, [pc, #52]	; (800987c <__libc_init_array+0x38>)
 8009848:	4c0d      	ldr	r4, [pc, #52]	; (8009880 <__libc_init_array+0x3c>)
 800984a:	1b64      	subs	r4, r4, r5
 800984c:	10a4      	asrs	r4, r4, #2
 800984e:	2600      	movs	r6, #0
 8009850:	42a6      	cmp	r6, r4
 8009852:	d109      	bne.n	8009868 <__libc_init_array+0x24>
 8009854:	4d0b      	ldr	r5, [pc, #44]	; (8009884 <__libc_init_array+0x40>)
 8009856:	4c0c      	ldr	r4, [pc, #48]	; (8009888 <__libc_init_array+0x44>)
 8009858:	f002 fdf2 	bl	800c440 <_init>
 800985c:	1b64      	subs	r4, r4, r5
 800985e:	10a4      	asrs	r4, r4, #2
 8009860:	2600      	movs	r6, #0
 8009862:	42a6      	cmp	r6, r4
 8009864:	d105      	bne.n	8009872 <__libc_init_array+0x2e>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	f855 3b04 	ldr.w	r3, [r5], #4
 800986c:	4798      	blx	r3
 800986e:	3601      	adds	r6, #1
 8009870:	e7ee      	b.n	8009850 <__libc_init_array+0xc>
 8009872:	f855 3b04 	ldr.w	r3, [r5], #4
 8009876:	4798      	blx	r3
 8009878:	3601      	adds	r6, #1
 800987a:	e7f2      	b.n	8009862 <__libc_init_array+0x1e>
 800987c:	0800d674 	.word	0x0800d674
 8009880:	0800d674 	.word	0x0800d674
 8009884:	0800d674 	.word	0x0800d674
 8009888:	0800d67c 	.word	0x0800d67c

0800988c <malloc>:
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <malloc+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f000 b87f 	b.w	8009994 <_malloc_r>
 8009896:	bf00      	nop
 8009898:	20000010 	.word	0x20000010

0800989c <free>:
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <free+0xc>)
 800989e:	4601      	mov	r1, r0
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	f000 b827 	b.w	80098f4 <_free_r>
 80098a6:	bf00      	nop
 80098a8:	20000010 	.word	0x20000010

080098ac <memcmp>:
 80098ac:	b530      	push	{r4, r5, lr}
 80098ae:	3901      	subs	r1, #1
 80098b0:	2400      	movs	r4, #0
 80098b2:	42a2      	cmp	r2, r4
 80098b4:	d101      	bne.n	80098ba <memcmp+0xe>
 80098b6:	2000      	movs	r0, #0
 80098b8:	e005      	b.n	80098c6 <memcmp+0x1a>
 80098ba:	5d03      	ldrb	r3, [r0, r4]
 80098bc:	3401      	adds	r4, #1
 80098be:	5d0d      	ldrb	r5, [r1, r4]
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	d0f6      	beq.n	80098b2 <memcmp+0x6>
 80098c4:	1b58      	subs	r0, r3, r5
 80098c6:	bd30      	pop	{r4, r5, pc}

080098c8 <memcpy>:
 80098c8:	440a      	add	r2, r1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d0:	d100      	bne.n	80098d4 <memcpy+0xc>
 80098d2:	4770      	bx	lr
 80098d4:	b510      	push	{r4, lr}
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098de:	4291      	cmp	r1, r2
 80098e0:	d1f9      	bne.n	80098d6 <memcpy+0xe>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <memset>:
 80098e4:	4402      	add	r2, r0
 80098e6:	4603      	mov	r3, r0
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d100      	bne.n	80098ee <memset+0xa>
 80098ec:	4770      	bx	lr
 80098ee:	f803 1b01 	strb.w	r1, [r3], #1
 80098f2:	e7f9      	b.n	80098e8 <memset+0x4>

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d048      	beq.n	800998c <_free_r+0x98>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f001 ff19 	bl	800b740 <__malloc_lock>
 800990e:	4a20      	ldr	r2, [pc, #128]	; (8009990 <_free_r+0x9c>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	4615      	mov	r5, r2
 8009916:	b933      	cbnz	r3, 8009926 <_free_r+0x32>
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	6014      	str	r4, [r2, #0]
 800991c:	b003      	add	sp, #12
 800991e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009922:	f001 bf13 	b.w	800b74c <__malloc_unlock>
 8009926:	42a3      	cmp	r3, r4
 8009928:	d90b      	bls.n	8009942 <_free_r+0x4e>
 800992a:	6821      	ldr	r1, [r4, #0]
 800992c:	1862      	adds	r2, r4, r1
 800992e:	4293      	cmp	r3, r2
 8009930:	bf04      	itt	eq
 8009932:	681a      	ldreq	r2, [r3, #0]
 8009934:	685b      	ldreq	r3, [r3, #4]
 8009936:	6063      	str	r3, [r4, #4]
 8009938:	bf04      	itt	eq
 800993a:	1852      	addeq	r2, r2, r1
 800993c:	6022      	streq	r2, [r4, #0]
 800993e:	602c      	str	r4, [r5, #0]
 8009940:	e7ec      	b.n	800991c <_free_r+0x28>
 8009942:	461a      	mov	r2, r3
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b10b      	cbz	r3, 800994c <_free_r+0x58>
 8009948:	42a3      	cmp	r3, r4
 800994a:	d9fa      	bls.n	8009942 <_free_r+0x4e>
 800994c:	6811      	ldr	r1, [r2, #0]
 800994e:	1855      	adds	r5, r2, r1
 8009950:	42a5      	cmp	r5, r4
 8009952:	d10b      	bne.n	800996c <_free_r+0x78>
 8009954:	6824      	ldr	r4, [r4, #0]
 8009956:	4421      	add	r1, r4
 8009958:	1854      	adds	r4, r2, r1
 800995a:	42a3      	cmp	r3, r4
 800995c:	6011      	str	r1, [r2, #0]
 800995e:	d1dd      	bne.n	800991c <_free_r+0x28>
 8009960:	681c      	ldr	r4, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	6053      	str	r3, [r2, #4]
 8009966:	4421      	add	r1, r4
 8009968:	6011      	str	r1, [r2, #0]
 800996a:	e7d7      	b.n	800991c <_free_r+0x28>
 800996c:	d902      	bls.n	8009974 <_free_r+0x80>
 800996e:	230c      	movs	r3, #12
 8009970:	6003      	str	r3, [r0, #0]
 8009972:	e7d3      	b.n	800991c <_free_r+0x28>
 8009974:	6825      	ldr	r5, [r4, #0]
 8009976:	1961      	adds	r1, r4, r5
 8009978:	428b      	cmp	r3, r1
 800997a:	bf04      	itt	eq
 800997c:	6819      	ldreq	r1, [r3, #0]
 800997e:	685b      	ldreq	r3, [r3, #4]
 8009980:	6063      	str	r3, [r4, #4]
 8009982:	bf04      	itt	eq
 8009984:	1949      	addeq	r1, r1, r5
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	6054      	str	r4, [r2, #4]
 800998a:	e7c7      	b.n	800991c <_free_r+0x28>
 800998c:	b003      	add	sp, #12
 800998e:	bd30      	pop	{r4, r5, pc}
 8009990:	200002bc 	.word	0x200002bc

08009994 <_malloc_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	1ccd      	adds	r5, r1, #3
 8009998:	f025 0503 	bic.w	r5, r5, #3
 800999c:	3508      	adds	r5, #8
 800999e:	2d0c      	cmp	r5, #12
 80099a0:	bf38      	it	cc
 80099a2:	250c      	movcc	r5, #12
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	4606      	mov	r6, r0
 80099a8:	db01      	blt.n	80099ae <_malloc_r+0x1a>
 80099aa:	42a9      	cmp	r1, r5
 80099ac:	d903      	bls.n	80099b6 <_malloc_r+0x22>
 80099ae:	230c      	movs	r3, #12
 80099b0:	6033      	str	r3, [r6, #0]
 80099b2:	2000      	movs	r0, #0
 80099b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b6:	f001 fec3 	bl	800b740 <__malloc_lock>
 80099ba:	4921      	ldr	r1, [pc, #132]	; (8009a40 <_malloc_r+0xac>)
 80099bc:	680a      	ldr	r2, [r1, #0]
 80099be:	4614      	mov	r4, r2
 80099c0:	b99c      	cbnz	r4, 80099ea <_malloc_r+0x56>
 80099c2:	4f20      	ldr	r7, [pc, #128]	; (8009a44 <_malloc_r+0xb0>)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b923      	cbnz	r3, 80099d2 <_malloc_r+0x3e>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 fd4a 	bl	800a464 <_sbrk_r>
 80099d0:	6038      	str	r0, [r7, #0]
 80099d2:	4629      	mov	r1, r5
 80099d4:	4630      	mov	r0, r6
 80099d6:	f000 fd45 	bl	800a464 <_sbrk_r>
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	d123      	bne.n	8009a26 <_malloc_r+0x92>
 80099de:	230c      	movs	r3, #12
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	4630      	mov	r0, r6
 80099e4:	f001 feb2 	bl	800b74c <__malloc_unlock>
 80099e8:	e7e3      	b.n	80099b2 <_malloc_r+0x1e>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	1b5b      	subs	r3, r3, r5
 80099ee:	d417      	bmi.n	8009a20 <_malloc_r+0x8c>
 80099f0:	2b0b      	cmp	r3, #11
 80099f2:	d903      	bls.n	80099fc <_malloc_r+0x68>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	441c      	add	r4, r3
 80099f8:	6025      	str	r5, [r4, #0]
 80099fa:	e004      	b.n	8009a06 <_malloc_r+0x72>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	42a2      	cmp	r2, r4
 8009a00:	bf0c      	ite	eq
 8009a02:	600b      	streq	r3, [r1, #0]
 8009a04:	6053      	strne	r3, [r2, #4]
 8009a06:	4630      	mov	r0, r6
 8009a08:	f001 fea0 	bl	800b74c <__malloc_unlock>
 8009a0c:	f104 000b 	add.w	r0, r4, #11
 8009a10:	1d23      	adds	r3, r4, #4
 8009a12:	f020 0007 	bic.w	r0, r0, #7
 8009a16:	1ac2      	subs	r2, r0, r3
 8009a18:	d0cc      	beq.n	80099b4 <_malloc_r+0x20>
 8009a1a:	1a1b      	subs	r3, r3, r0
 8009a1c:	50a3      	str	r3, [r4, r2]
 8009a1e:	e7c9      	b.n	80099b4 <_malloc_r+0x20>
 8009a20:	4622      	mov	r2, r4
 8009a22:	6864      	ldr	r4, [r4, #4]
 8009a24:	e7cc      	b.n	80099c0 <_malloc_r+0x2c>
 8009a26:	1cc4      	adds	r4, r0, #3
 8009a28:	f024 0403 	bic.w	r4, r4, #3
 8009a2c:	42a0      	cmp	r0, r4
 8009a2e:	d0e3      	beq.n	80099f8 <_malloc_r+0x64>
 8009a30:	1a21      	subs	r1, r4, r0
 8009a32:	4630      	mov	r0, r6
 8009a34:	f000 fd16 	bl	800a464 <_sbrk_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d1dd      	bne.n	80099f8 <_malloc_r+0x64>
 8009a3c:	e7cf      	b.n	80099de <_malloc_r+0x4a>
 8009a3e:	bf00      	nop
 8009a40:	200002bc 	.word	0x200002bc
 8009a44:	200002c0 	.word	0x200002c0

08009a48 <__cvt>:
 8009a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	ec55 4b10 	vmov	r4, r5, d0
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	460e      	mov	r6, r1
 8009a54:	4619      	mov	r1, r3
 8009a56:	462b      	mov	r3, r5
 8009a58:	bfbb      	ittet	lt
 8009a5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a5e:	461d      	movlt	r5, r3
 8009a60:	2300      	movge	r3, #0
 8009a62:	232d      	movlt	r3, #45	; 0x2d
 8009a64:	700b      	strb	r3, [r1, #0]
 8009a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a6c:	4691      	mov	r9, r2
 8009a6e:	f023 0820 	bic.w	r8, r3, #32
 8009a72:	bfbc      	itt	lt
 8009a74:	4622      	movlt	r2, r4
 8009a76:	4614      	movlt	r4, r2
 8009a78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a7c:	d005      	beq.n	8009a8a <__cvt+0x42>
 8009a7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a82:	d100      	bne.n	8009a86 <__cvt+0x3e>
 8009a84:	3601      	adds	r6, #1
 8009a86:	2102      	movs	r1, #2
 8009a88:	e000      	b.n	8009a8c <__cvt+0x44>
 8009a8a:	2103      	movs	r1, #3
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	ab02      	add	r3, sp, #8
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	ec45 4b10 	vmov	d0, r4, r5
 8009a98:	4653      	mov	r3, sl
 8009a9a:	4632      	mov	r2, r6
 8009a9c:	f000 fe40 	bl	800a720 <_dtoa_r>
 8009aa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	d102      	bne.n	8009aae <__cvt+0x66>
 8009aa8:	f019 0f01 	tst.w	r9, #1
 8009aac:	d022      	beq.n	8009af4 <__cvt+0xac>
 8009aae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ab2:	eb07 0906 	add.w	r9, r7, r6
 8009ab6:	d110      	bne.n	8009ada <__cvt+0x92>
 8009ab8:	783b      	ldrb	r3, [r7, #0]
 8009aba:	2b30      	cmp	r3, #48	; 0x30
 8009abc:	d10a      	bne.n	8009ad4 <__cvt+0x8c>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7f7 f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aca:	b918      	cbnz	r0, 8009ad4 <__cvt+0x8c>
 8009acc:	f1c6 0601 	rsb	r6, r6, #1
 8009ad0:	f8ca 6000 	str.w	r6, [sl]
 8009ad4:	f8da 3000 	ldr.w	r3, [sl]
 8009ad8:	4499      	add	r9, r3
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ae6:	b108      	cbz	r0, 8009aec <__cvt+0xa4>
 8009ae8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009aec:	2230      	movs	r2, #48	; 0x30
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	454b      	cmp	r3, r9
 8009af2:	d307      	bcc.n	8009b04 <__cvt+0xbc>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af8:	1bdb      	subs	r3, r3, r7
 8009afa:	4638      	mov	r0, r7
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	b004      	add	sp, #16
 8009b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b04:	1c59      	adds	r1, r3, #1
 8009b06:	9103      	str	r1, [sp, #12]
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e7f0      	b.n	8009aee <__cvt+0xa6>

08009b0c <__exponent>:
 8009b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2900      	cmp	r1, #0
 8009b12:	bfb8      	it	lt
 8009b14:	4249      	neglt	r1, r1
 8009b16:	f803 2b02 	strb.w	r2, [r3], #2
 8009b1a:	bfb4      	ite	lt
 8009b1c:	222d      	movlt	r2, #45	; 0x2d
 8009b1e:	222b      	movge	r2, #43	; 0x2b
 8009b20:	2909      	cmp	r1, #9
 8009b22:	7042      	strb	r2, [r0, #1]
 8009b24:	dd2a      	ble.n	8009b7c <__exponent+0x70>
 8009b26:	f10d 0407 	add.w	r4, sp, #7
 8009b2a:	46a4      	mov	ip, r4
 8009b2c:	270a      	movs	r7, #10
 8009b2e:	46a6      	mov	lr, r4
 8009b30:	460a      	mov	r2, r1
 8009b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b36:	fb07 1516 	mls	r5, r7, r6, r1
 8009b3a:	3530      	adds	r5, #48	; 0x30
 8009b3c:	2a63      	cmp	r2, #99	; 0x63
 8009b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b46:	4631      	mov	r1, r6
 8009b48:	dcf1      	bgt.n	8009b2e <__exponent+0x22>
 8009b4a:	3130      	adds	r1, #48	; 0x30
 8009b4c:	f1ae 0502 	sub.w	r5, lr, #2
 8009b50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b54:	1c44      	adds	r4, r0, #1
 8009b56:	4629      	mov	r1, r5
 8009b58:	4561      	cmp	r1, ip
 8009b5a:	d30a      	bcc.n	8009b72 <__exponent+0x66>
 8009b5c:	f10d 0209 	add.w	r2, sp, #9
 8009b60:	eba2 020e 	sub.w	r2, r2, lr
 8009b64:	4565      	cmp	r5, ip
 8009b66:	bf88      	it	hi
 8009b68:	2200      	movhi	r2, #0
 8009b6a:	4413      	add	r3, r2
 8009b6c:	1a18      	subs	r0, r3, r0
 8009b6e:	b003      	add	sp, #12
 8009b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b7a:	e7ed      	b.n	8009b58 <__exponent+0x4c>
 8009b7c:	2330      	movs	r3, #48	; 0x30
 8009b7e:	3130      	adds	r1, #48	; 0x30
 8009b80:	7083      	strb	r3, [r0, #2]
 8009b82:	70c1      	strb	r1, [r0, #3]
 8009b84:	1d03      	adds	r3, r0, #4
 8009b86:	e7f1      	b.n	8009b6c <__exponent+0x60>

08009b88 <_printf_float>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	ed2d 8b02 	vpush	{d8}
 8009b90:	b08d      	sub	sp, #52	; 0x34
 8009b92:	460c      	mov	r4, r1
 8009b94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b98:	4616      	mov	r6, r2
 8009b9a:	461f      	mov	r7, r3
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	f001 fd63 	bl	800b668 <_localeconv_r>
 8009ba2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	f7f6 fb1a 	bl	80001e0 <strlen>
 8009bac:	2300      	movs	r3, #0
 8009bae:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009bbc:	3307      	adds	r3, #7
 8009bbe:	f023 0307 	bic.w	r3, r3, #7
 8009bc2:	f103 0208 	add.w	r2, r3, #8
 8009bc6:	f8c8 2000 	str.w	r2, [r8]
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009be0:	ee08 0a10 	vmov	s16, r0
 8009be4:	4b9f      	ldr	r3, [pc, #636]	; (8009e64 <_printf_float+0x2dc>)
 8009be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295
 8009bee:	f7f6 ffa5 	bl	8000b3c <__aeabi_dcmpun>
 8009bf2:	bb88      	cbnz	r0, 8009c58 <_printf_float+0xd0>
 8009bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bf8:	4b9a      	ldr	r3, [pc, #616]	; (8009e64 <_printf_float+0x2dc>)
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	f7f6 ff7f 	bl	8000b00 <__aeabi_dcmple>
 8009c02:	bb48      	cbnz	r0, 8009c58 <_printf_float+0xd0>
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 ff6e 	bl	8000aec <__aeabi_dcmplt>
 8009c10:	b110      	cbz	r0, 8009c18 <_printf_float+0x90>
 8009c12:	232d      	movs	r3, #45	; 0x2d
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	4b93      	ldr	r3, [pc, #588]	; (8009e68 <_printf_float+0x2e0>)
 8009c1a:	4894      	ldr	r0, [pc, #592]	; (8009e6c <_printf_float+0x2e4>)
 8009c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c20:	bf94      	ite	ls
 8009c22:	4698      	movls	r8, r3
 8009c24:	4680      	movhi	r8, r0
 8009c26:	2303      	movs	r3, #3
 8009c28:	6123      	str	r3, [r4, #16]
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	f023 0204 	bic.w	r2, r3, #4
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	f04f 0900 	mov.w	r9, #0
 8009c36:	9700      	str	r7, [sp, #0]
 8009c38:	4633      	mov	r3, r6
 8009c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f9d8 	bl	8009ff4 <_printf_common>
 8009c44:	3001      	adds	r0, #1
 8009c46:	f040 8090 	bne.w	8009d6a <_printf_float+0x1e2>
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	b00d      	add	sp, #52	; 0x34
 8009c50:	ecbd 8b02 	vpop	{d8}
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 ff6c 	bl	8000b3c <__aeabi_dcmpun>
 8009c64:	b140      	cbz	r0, 8009c78 <_printf_float+0xf0>
 8009c66:	464b      	mov	r3, r9
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfbc      	itt	lt
 8009c6c:	232d      	movlt	r3, #45	; 0x2d
 8009c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c72:	487f      	ldr	r0, [pc, #508]	; (8009e70 <_printf_float+0x2e8>)
 8009c74:	4b7f      	ldr	r3, [pc, #508]	; (8009e74 <_printf_float+0x2ec>)
 8009c76:	e7d1      	b.n	8009c1c <_printf_float+0x94>
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c7e:	9206      	str	r2, [sp, #24]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	d13f      	bne.n	8009d04 <_printf_float+0x17c>
 8009c84:	2306      	movs	r3, #6
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	9b05      	ldr	r3, [sp, #20]
 8009c8a:	6861      	ldr	r1, [r4, #4]
 8009c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c90:	2300      	movs	r3, #0
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	ab0a      	add	r3, sp, #40	; 0x28
 8009c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c9a:	ab09      	add	r3, sp, #36	; 0x24
 8009c9c:	ec49 8b10 	vmov	d0, r8, r9
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f7ff fecd 	bl	8009a48 <__cvt>
 8009cae:	9b06      	ldr	r3, [sp, #24]
 8009cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cb2:	2b47      	cmp	r3, #71	; 0x47
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	d108      	bne.n	8009cca <_printf_float+0x142>
 8009cb8:	1cc8      	adds	r0, r1, #3
 8009cba:	db02      	blt.n	8009cc2 <_printf_float+0x13a>
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	dd41      	ble.n	8009d46 <_printf_float+0x1be>
 8009cc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009cc6:	fa5f fb8b 	uxtb.w	fp, fp
 8009cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cce:	d820      	bhi.n	8009d12 <_printf_float+0x18a>
 8009cd0:	3901      	subs	r1, #1
 8009cd2:	465a      	mov	r2, fp
 8009cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8009cda:	f7ff ff17 	bl	8009b0c <__exponent>
 8009cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce0:	1813      	adds	r3, r2, r0
 8009ce2:	2a01      	cmp	r2, #1
 8009ce4:	4681      	mov	r9, r0
 8009ce6:	6123      	str	r3, [r4, #16]
 8009ce8:	dc02      	bgt.n	8009cf0 <_printf_float+0x168>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	07d2      	lsls	r2, r2, #31
 8009cee:	d501      	bpl.n	8009cf4 <_printf_float+0x16c>
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d09c      	beq.n	8009c36 <_printf_float+0xae>
 8009cfc:	232d      	movs	r3, #45	; 0x2d
 8009cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d02:	e798      	b.n	8009c36 <_printf_float+0xae>
 8009d04:	9a06      	ldr	r2, [sp, #24]
 8009d06:	2a47      	cmp	r2, #71	; 0x47
 8009d08:	d1be      	bne.n	8009c88 <_printf_float+0x100>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1bc      	bne.n	8009c88 <_printf_float+0x100>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7b9      	b.n	8009c86 <_printf_float+0xfe>
 8009d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d16:	d118      	bne.n	8009d4a <_printf_float+0x1c2>
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	dd0b      	ble.n	8009d36 <_printf_float+0x1ae>
 8009d1e:	6121      	str	r1, [r4, #16]
 8009d20:	b913      	cbnz	r3, 8009d28 <_printf_float+0x1a0>
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	07d0      	lsls	r0, r2, #31
 8009d26:	d502      	bpl.n	8009d2e <_printf_float+0x1a6>
 8009d28:	3301      	adds	r3, #1
 8009d2a:	440b      	add	r3, r1
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d30:	f04f 0900 	mov.w	r9, #0
 8009d34:	e7de      	b.n	8009cf4 <_printf_float+0x16c>
 8009d36:	b913      	cbnz	r3, 8009d3e <_printf_float+0x1b6>
 8009d38:	6822      	ldr	r2, [r4, #0]
 8009d3a:	07d2      	lsls	r2, r2, #31
 8009d3c:	d501      	bpl.n	8009d42 <_printf_float+0x1ba>
 8009d3e:	3302      	adds	r3, #2
 8009d40:	e7f4      	b.n	8009d2c <_printf_float+0x1a4>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e7f2      	b.n	8009d2c <_printf_float+0x1a4>
 8009d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	db05      	blt.n	8009d5c <_printf_float+0x1d4>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	6121      	str	r1, [r4, #16]
 8009d54:	07d8      	lsls	r0, r3, #31
 8009d56:	d5ea      	bpl.n	8009d2e <_printf_float+0x1a6>
 8009d58:	1c4b      	adds	r3, r1, #1
 8009d5a:	e7e7      	b.n	8009d2c <_printf_float+0x1a4>
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	bfd4      	ite	le
 8009d60:	f1c1 0202 	rsble	r2, r1, #2
 8009d64:	2201      	movgt	r2, #1
 8009d66:	4413      	add	r3, r2
 8009d68:	e7e0      	b.n	8009d2c <_printf_float+0x1a4>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	055a      	lsls	r2, r3, #21
 8009d6e:	d407      	bmi.n	8009d80 <_printf_float+0x1f8>
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	4642      	mov	r2, r8
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d12c      	bne.n	8009dd8 <_printf_float+0x250>
 8009d7e:	e764      	b.n	8009c4a <_printf_float+0xc2>
 8009d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d84:	f240 80e0 	bls.w	8009f48 <_printf_float+0x3c0>
 8009d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f7f6 fea2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d034      	beq.n	8009e02 <_printf_float+0x27a>
 8009d98:	4a37      	ldr	r2, [pc, #220]	; (8009e78 <_printf_float+0x2f0>)
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f af51 	beq.w	8009c4a <_printf_float+0xc2>
 8009da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dac:	429a      	cmp	r2, r3
 8009dae:	db02      	blt.n	8009db6 <_printf_float+0x22e>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	07d8      	lsls	r0, r3, #31
 8009db4:	d510      	bpl.n	8009dd8 <_printf_float+0x250>
 8009db6:	ee18 3a10 	vmov	r3, s16
 8009dba:	4652      	mov	r2, sl
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	47b8      	blx	r7
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f43f af41 	beq.w	8009c4a <_printf_float+0xc2>
 8009dc8:	f04f 0800 	mov.w	r8, #0
 8009dcc:	f104 091a 	add.w	r9, r4, #26
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	4543      	cmp	r3, r8
 8009dd6:	dc09      	bgt.n	8009dec <_printf_float+0x264>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	079b      	lsls	r3, r3, #30
 8009ddc:	f100 8105 	bmi.w	8009fea <_printf_float+0x462>
 8009de0:	68e0      	ldr	r0, [r4, #12]
 8009de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de4:	4298      	cmp	r0, r3
 8009de6:	bfb8      	it	lt
 8009de8:	4618      	movlt	r0, r3
 8009dea:	e730      	b.n	8009c4e <_printf_float+0xc6>
 8009dec:	2301      	movs	r3, #1
 8009dee:	464a      	mov	r2, r9
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	f43f af27 	beq.w	8009c4a <_printf_float+0xc2>
 8009dfc:	f108 0801 	add.w	r8, r8, #1
 8009e00:	e7e6      	b.n	8009dd0 <_printf_float+0x248>
 8009e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dc39      	bgt.n	8009e7c <_printf_float+0x2f4>
 8009e08:	4a1b      	ldr	r2, [pc, #108]	; (8009e78 <_printf_float+0x2f0>)
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b8      	blx	r7
 8009e12:	3001      	adds	r0, #1
 8009e14:	f43f af19 	beq.w	8009c4a <_printf_float+0xc2>
 8009e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	d102      	bne.n	8009e26 <_printf_float+0x29e>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	07d9      	lsls	r1, r3, #31
 8009e24:	d5d8      	bpl.n	8009dd8 <_printf_float+0x250>
 8009e26:	ee18 3a10 	vmov	r3, s16
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af09 	beq.w	8009c4a <_printf_float+0xc2>
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	f104 0a1a 	add.w	sl, r4, #26
 8009e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e42:	425b      	negs	r3, r3
 8009e44:	454b      	cmp	r3, r9
 8009e46:	dc01      	bgt.n	8009e4c <_printf_float+0x2c4>
 8009e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4a:	e792      	b.n	8009d72 <_printf_float+0x1ea>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4652      	mov	r2, sl
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f aef7 	beq.w	8009c4a <_printf_float+0xc2>
 8009e5c:	f109 0901 	add.w	r9, r9, #1
 8009e60:	e7ee      	b.n	8009e40 <_printf_float+0x2b8>
 8009e62:	bf00      	nop
 8009e64:	7fefffff 	.word	0x7fefffff
 8009e68:	0800d290 	.word	0x0800d290
 8009e6c:	0800d294 	.word	0x0800d294
 8009e70:	0800d29c 	.word	0x0800d29c
 8009e74:	0800d298 	.word	0x0800d298
 8009e78:	0800d2a0 	.word	0x0800d2a0
 8009e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e80:	429a      	cmp	r2, r3
 8009e82:	bfa8      	it	ge
 8009e84:	461a      	movge	r2, r3
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	4691      	mov	r9, r2
 8009e8a:	dc37      	bgt.n	8009efc <_printf_float+0x374>
 8009e8c:	f04f 0b00 	mov.w	fp, #0
 8009e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e94:	f104 021a 	add.w	r2, r4, #26
 8009e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	eba3 0309 	sub.w	r3, r3, r9
 8009ea0:	455b      	cmp	r3, fp
 8009ea2:	dc33      	bgt.n	8009f0c <_printf_float+0x384>
 8009ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	db3b      	blt.n	8009f24 <_printf_float+0x39c>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	07da      	lsls	r2, r3, #31
 8009eb0:	d438      	bmi.n	8009f24 <_printf_float+0x39c>
 8009eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb4:	9b05      	ldr	r3, [sp, #20]
 8009eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	eba2 0901 	sub.w	r9, r2, r1
 8009ebe:	4599      	cmp	r9, r3
 8009ec0:	bfa8      	it	ge
 8009ec2:	4699      	movge	r9, r3
 8009ec4:	f1b9 0f00 	cmp.w	r9, #0
 8009ec8:	dc35      	bgt.n	8009f36 <_printf_float+0x3ae>
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ed2:	f104 0a1a 	add.w	sl, r4, #26
 8009ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	eba3 0309 	sub.w	r3, r3, r9
 8009ee0:	4543      	cmp	r3, r8
 8009ee2:	f77f af79 	ble.w	8009dd8 <_printf_float+0x250>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	4652      	mov	r2, sl
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f aeaa 	beq.w	8009c4a <_printf_float+0xc2>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	e7ec      	b.n	8009ed6 <_printf_float+0x34e>
 8009efc:	4613      	mov	r3, r2
 8009efe:	4631      	mov	r1, r6
 8009f00:	4642      	mov	r2, r8
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	d1c0      	bne.n	8009e8c <_printf_float+0x304>
 8009f0a:	e69e      	b.n	8009c4a <_printf_float+0xc2>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	9205      	str	r2, [sp, #20]
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f ae97 	beq.w	8009c4a <_printf_float+0xc2>
 8009f1c:	9a05      	ldr	r2, [sp, #20]
 8009f1e:	f10b 0b01 	add.w	fp, fp, #1
 8009f22:	e7b9      	b.n	8009e98 <_printf_float+0x310>
 8009f24:	ee18 3a10 	vmov	r3, s16
 8009f28:	4652      	mov	r2, sl
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	d1be      	bne.n	8009eb2 <_printf_float+0x32a>
 8009f34:	e689      	b.n	8009c4a <_printf_float+0xc2>
 8009f36:	9a05      	ldr	r2, [sp, #20]
 8009f38:	464b      	mov	r3, r9
 8009f3a:	4442      	add	r2, r8
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	d1c1      	bne.n	8009eca <_printf_float+0x342>
 8009f46:	e680      	b.n	8009c4a <_printf_float+0xc2>
 8009f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4a:	2a01      	cmp	r2, #1
 8009f4c:	dc01      	bgt.n	8009f52 <_printf_float+0x3ca>
 8009f4e:	07db      	lsls	r3, r3, #31
 8009f50:	d538      	bpl.n	8009fc4 <_printf_float+0x43c>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4642      	mov	r2, r8
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f ae74 	beq.w	8009c4a <_printf_float+0xc2>
 8009f62:	ee18 3a10 	vmov	r3, s16
 8009f66:	4652      	mov	r2, sl
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	47b8      	blx	r7
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f43f ae6b 	beq.w	8009c4a <_printf_float+0xc2>
 8009f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f7f6 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f80:	b9d8      	cbnz	r0, 8009fba <_printf_float+0x432>
 8009f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f84:	f108 0201 	add.w	r2, r8, #1
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	d10e      	bne.n	8009fb2 <_printf_float+0x42a>
 8009f94:	e659      	b.n	8009c4a <_printf_float+0xc2>
 8009f96:	2301      	movs	r3, #1
 8009f98:	4652      	mov	r2, sl
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f ae52 	beq.w	8009c4a <_printf_float+0xc2>
 8009fa6:	f108 0801 	add.w	r8, r8, #1
 8009faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fac:	3b01      	subs	r3, #1
 8009fae:	4543      	cmp	r3, r8
 8009fb0:	dcf1      	bgt.n	8009f96 <_printf_float+0x40e>
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fb8:	e6dc      	b.n	8009d74 <_printf_float+0x1ec>
 8009fba:	f04f 0800 	mov.w	r8, #0
 8009fbe:	f104 0a1a 	add.w	sl, r4, #26
 8009fc2:	e7f2      	b.n	8009faa <_printf_float+0x422>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	e7df      	b.n	8009f8a <_printf_float+0x402>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	464a      	mov	r2, r9
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f ae38 	beq.w	8009c4a <_printf_float+0xc2>
 8009fda:	f108 0801 	add.w	r8, r8, #1
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	4543      	cmp	r3, r8
 8009fe6:	dcf0      	bgt.n	8009fca <_printf_float+0x442>
 8009fe8:	e6fa      	b.n	8009de0 <_printf_float+0x258>
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	f104 0919 	add.w	r9, r4, #25
 8009ff2:	e7f4      	b.n	8009fde <_printf_float+0x456>

08009ff4 <_printf_common>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	4699      	mov	r9, r3
 8009ffc:	688a      	ldr	r2, [r1, #8]
 8009ffe:	690b      	ldr	r3, [r1, #16]
 800a000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a004:	4293      	cmp	r3, r2
 800a006:	bfb8      	it	lt
 800a008:	4613      	movlt	r3, r2
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a010:	4607      	mov	r7, r0
 800a012:	460c      	mov	r4, r1
 800a014:	b10a      	cbz	r2, 800a01a <_printf_common+0x26>
 800a016:	3301      	adds	r3, #1
 800a018:	6033      	str	r3, [r6, #0]
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	0699      	lsls	r1, r3, #26
 800a01e:	bf42      	ittt	mi
 800a020:	6833      	ldrmi	r3, [r6, #0]
 800a022:	3302      	addmi	r3, #2
 800a024:	6033      	strmi	r3, [r6, #0]
 800a026:	6825      	ldr	r5, [r4, #0]
 800a028:	f015 0506 	ands.w	r5, r5, #6
 800a02c:	d106      	bne.n	800a03c <_printf_common+0x48>
 800a02e:	f104 0a19 	add.w	sl, r4, #25
 800a032:	68e3      	ldr	r3, [r4, #12]
 800a034:	6832      	ldr	r2, [r6, #0]
 800a036:	1a9b      	subs	r3, r3, r2
 800a038:	42ab      	cmp	r3, r5
 800a03a:	dc26      	bgt.n	800a08a <_printf_common+0x96>
 800a03c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a040:	1e13      	subs	r3, r2, #0
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	bf18      	it	ne
 800a046:	2301      	movne	r3, #1
 800a048:	0692      	lsls	r2, r2, #26
 800a04a:	d42b      	bmi.n	800a0a4 <_printf_common+0xb0>
 800a04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a050:	4649      	mov	r1, r9
 800a052:	4638      	mov	r0, r7
 800a054:	47c0      	blx	r8
 800a056:	3001      	adds	r0, #1
 800a058:	d01e      	beq.n	800a098 <_printf_common+0xa4>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	68e5      	ldr	r5, [r4, #12]
 800a05e:	6832      	ldr	r2, [r6, #0]
 800a060:	f003 0306 	and.w	r3, r3, #6
 800a064:	2b04      	cmp	r3, #4
 800a066:	bf08      	it	eq
 800a068:	1aad      	subeq	r5, r5, r2
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	6922      	ldr	r2, [r4, #16]
 800a06e:	bf0c      	ite	eq
 800a070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a074:	2500      	movne	r5, #0
 800a076:	4293      	cmp	r3, r2
 800a078:	bfc4      	itt	gt
 800a07a:	1a9b      	subgt	r3, r3, r2
 800a07c:	18ed      	addgt	r5, r5, r3
 800a07e:	2600      	movs	r6, #0
 800a080:	341a      	adds	r4, #26
 800a082:	42b5      	cmp	r5, r6
 800a084:	d11a      	bne.n	800a0bc <_printf_common+0xc8>
 800a086:	2000      	movs	r0, #0
 800a088:	e008      	b.n	800a09c <_printf_common+0xa8>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4652      	mov	r2, sl
 800a08e:	4649      	mov	r1, r9
 800a090:	4638      	mov	r0, r7
 800a092:	47c0      	blx	r8
 800a094:	3001      	adds	r0, #1
 800a096:	d103      	bne.n	800a0a0 <_printf_common+0xac>
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	e7c6      	b.n	800a032 <_printf_common+0x3e>
 800a0a4:	18e1      	adds	r1, r4, r3
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	2030      	movs	r0, #48	; 0x30
 800a0aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ae:	4422      	add	r2, r4
 800a0b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	e7c7      	b.n	800a04c <_printf_common+0x58>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4622      	mov	r2, r4
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	47c0      	blx	r8
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d0e6      	beq.n	800a098 <_printf_common+0xa4>
 800a0ca:	3601      	adds	r6, #1
 800a0cc:	e7d9      	b.n	800a082 <_printf_common+0x8e>
	...

0800a0d0 <_printf_i>:
 800a0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	4691      	mov	r9, r2
 800a0d8:	7e27      	ldrb	r7, [r4, #24]
 800a0da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0dc:	2f78      	cmp	r7, #120	; 0x78
 800a0de:	4680      	mov	r8, r0
 800a0e0:	469a      	mov	sl, r3
 800a0e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0e6:	d807      	bhi.n	800a0f8 <_printf_i+0x28>
 800a0e8:	2f62      	cmp	r7, #98	; 0x62
 800a0ea:	d80a      	bhi.n	800a102 <_printf_i+0x32>
 800a0ec:	2f00      	cmp	r7, #0
 800a0ee:	f000 80d8 	beq.w	800a2a2 <_printf_i+0x1d2>
 800a0f2:	2f58      	cmp	r7, #88	; 0x58
 800a0f4:	f000 80a3 	beq.w	800a23e <_printf_i+0x16e>
 800a0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a100:	e03a      	b.n	800a178 <_printf_i+0xa8>
 800a102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a106:	2b15      	cmp	r3, #21
 800a108:	d8f6      	bhi.n	800a0f8 <_printf_i+0x28>
 800a10a:	a001      	add	r0, pc, #4	; (adr r0, 800a110 <_printf_i+0x40>)
 800a10c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a110:	0800a169 	.word	0x0800a169
 800a114:	0800a17d 	.word	0x0800a17d
 800a118:	0800a0f9 	.word	0x0800a0f9
 800a11c:	0800a0f9 	.word	0x0800a0f9
 800a120:	0800a0f9 	.word	0x0800a0f9
 800a124:	0800a0f9 	.word	0x0800a0f9
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a0f9 	.word	0x0800a0f9
 800a130:	0800a0f9 	.word	0x0800a0f9
 800a134:	0800a0f9 	.word	0x0800a0f9
 800a138:	0800a0f9 	.word	0x0800a0f9
 800a13c:	0800a289 	.word	0x0800a289
 800a140:	0800a1ad 	.word	0x0800a1ad
 800a144:	0800a26b 	.word	0x0800a26b
 800a148:	0800a0f9 	.word	0x0800a0f9
 800a14c:	0800a0f9 	.word	0x0800a0f9
 800a150:	0800a2ab 	.word	0x0800a2ab
 800a154:	0800a0f9 	.word	0x0800a0f9
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a0f9 	.word	0x0800a0f9
 800a160:	0800a0f9 	.word	0x0800a0f9
 800a164:	0800a273 	.word	0x0800a273
 800a168:	680b      	ldr	r3, [r1, #0]
 800a16a:	1d1a      	adds	r2, r3, #4
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	600a      	str	r2, [r1, #0]
 800a170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a178:	2301      	movs	r3, #1
 800a17a:	e0a3      	b.n	800a2c4 <_printf_i+0x1f4>
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	6808      	ldr	r0, [r1, #0]
 800a180:	062e      	lsls	r6, r5, #24
 800a182:	f100 0304 	add.w	r3, r0, #4
 800a186:	d50a      	bpl.n	800a19e <_printf_i+0xce>
 800a188:	6805      	ldr	r5, [r0, #0]
 800a18a:	600b      	str	r3, [r1, #0]
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	da03      	bge.n	800a198 <_printf_i+0xc8>
 800a190:	232d      	movs	r3, #45	; 0x2d
 800a192:	426d      	negs	r5, r5
 800a194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a198:	485e      	ldr	r0, [pc, #376]	; (800a314 <_printf_i+0x244>)
 800a19a:	230a      	movs	r3, #10
 800a19c:	e019      	b.n	800a1d2 <_printf_i+0x102>
 800a19e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a1a2:	6805      	ldr	r5, [r0, #0]
 800a1a4:	600b      	str	r3, [r1, #0]
 800a1a6:	bf18      	it	ne
 800a1a8:	b22d      	sxthne	r5, r5
 800a1aa:	e7ef      	b.n	800a18c <_printf_i+0xbc>
 800a1ac:	680b      	ldr	r3, [r1, #0]
 800a1ae:	6825      	ldr	r5, [r4, #0]
 800a1b0:	1d18      	adds	r0, r3, #4
 800a1b2:	6008      	str	r0, [r1, #0]
 800a1b4:	0628      	lsls	r0, r5, #24
 800a1b6:	d501      	bpl.n	800a1bc <_printf_i+0xec>
 800a1b8:	681d      	ldr	r5, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <_printf_i+0xf2>
 800a1bc:	0669      	lsls	r1, r5, #25
 800a1be:	d5fb      	bpl.n	800a1b8 <_printf_i+0xe8>
 800a1c0:	881d      	ldrh	r5, [r3, #0]
 800a1c2:	4854      	ldr	r0, [pc, #336]	; (800a314 <_printf_i+0x244>)
 800a1c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a1c6:	bf0c      	ite	eq
 800a1c8:	2308      	moveq	r3, #8
 800a1ca:	230a      	movne	r3, #10
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1d2:	6866      	ldr	r6, [r4, #4]
 800a1d4:	60a6      	str	r6, [r4, #8]
 800a1d6:	2e00      	cmp	r6, #0
 800a1d8:	bfa2      	ittt	ge
 800a1da:	6821      	ldrge	r1, [r4, #0]
 800a1dc:	f021 0104 	bicge.w	r1, r1, #4
 800a1e0:	6021      	strge	r1, [r4, #0]
 800a1e2:	b90d      	cbnz	r5, 800a1e8 <_printf_i+0x118>
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	d04d      	beq.n	800a284 <_printf_i+0x1b4>
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a1f2:	5dc7      	ldrb	r7, [r0, r7]
 800a1f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1f8:	462f      	mov	r7, r5
 800a1fa:	42bb      	cmp	r3, r7
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	d9f4      	bls.n	800a1ea <_printf_i+0x11a>
 800a200:	2b08      	cmp	r3, #8
 800a202:	d10b      	bne.n	800a21c <_printf_i+0x14c>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	07df      	lsls	r7, r3, #31
 800a208:	d508      	bpl.n	800a21c <_printf_i+0x14c>
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	6861      	ldr	r1, [r4, #4]
 800a20e:	4299      	cmp	r1, r3
 800a210:	bfde      	ittt	le
 800a212:	2330      	movle	r3, #48	; 0x30
 800a214:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a21c:	1b92      	subs	r2, r2, r6
 800a21e:	6122      	str	r2, [r4, #16]
 800a220:	f8cd a000 	str.w	sl, [sp]
 800a224:	464b      	mov	r3, r9
 800a226:	aa03      	add	r2, sp, #12
 800a228:	4621      	mov	r1, r4
 800a22a:	4640      	mov	r0, r8
 800a22c:	f7ff fee2 	bl	8009ff4 <_printf_common>
 800a230:	3001      	adds	r0, #1
 800a232:	d14c      	bne.n	800a2ce <_printf_i+0x1fe>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	b004      	add	sp, #16
 800a23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23e:	4835      	ldr	r0, [pc, #212]	; (800a314 <_printf_i+0x244>)
 800a240:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	680e      	ldr	r6, [r1, #0]
 800a248:	061f      	lsls	r7, r3, #24
 800a24a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a24e:	600e      	str	r6, [r1, #0]
 800a250:	d514      	bpl.n	800a27c <_printf_i+0x1ac>
 800a252:	07d9      	lsls	r1, r3, #31
 800a254:	bf44      	itt	mi
 800a256:	f043 0320 	orrmi.w	r3, r3, #32
 800a25a:	6023      	strmi	r3, [r4, #0]
 800a25c:	b91d      	cbnz	r5, 800a266 <_printf_i+0x196>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	f023 0320 	bic.w	r3, r3, #32
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	2310      	movs	r3, #16
 800a268:	e7b0      	b.n	800a1cc <_printf_i+0xfc>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	f043 0320 	orr.w	r3, r3, #32
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	2378      	movs	r3, #120	; 0x78
 800a274:	4828      	ldr	r0, [pc, #160]	; (800a318 <_printf_i+0x248>)
 800a276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a27a:	e7e3      	b.n	800a244 <_printf_i+0x174>
 800a27c:	065e      	lsls	r6, r3, #25
 800a27e:	bf48      	it	mi
 800a280:	b2ad      	uxthmi	r5, r5
 800a282:	e7e6      	b.n	800a252 <_printf_i+0x182>
 800a284:	4616      	mov	r6, r2
 800a286:	e7bb      	b.n	800a200 <_printf_i+0x130>
 800a288:	680b      	ldr	r3, [r1, #0]
 800a28a:	6826      	ldr	r6, [r4, #0]
 800a28c:	6960      	ldr	r0, [r4, #20]
 800a28e:	1d1d      	adds	r5, r3, #4
 800a290:	600d      	str	r5, [r1, #0]
 800a292:	0635      	lsls	r5, r6, #24
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	d501      	bpl.n	800a29c <_printf_i+0x1cc>
 800a298:	6018      	str	r0, [r3, #0]
 800a29a:	e002      	b.n	800a2a2 <_printf_i+0x1d2>
 800a29c:	0671      	lsls	r1, r6, #25
 800a29e:	d5fb      	bpl.n	800a298 <_printf_i+0x1c8>
 800a2a0:	8018      	strh	r0, [r3, #0]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6123      	str	r3, [r4, #16]
 800a2a6:	4616      	mov	r6, r2
 800a2a8:	e7ba      	b.n	800a220 <_printf_i+0x150>
 800a2aa:	680b      	ldr	r3, [r1, #0]
 800a2ac:	1d1a      	adds	r2, r3, #4
 800a2ae:	600a      	str	r2, [r1, #0]
 800a2b0:	681e      	ldr	r6, [r3, #0]
 800a2b2:	6862      	ldr	r2, [r4, #4]
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7f5 ff9a 	bl	80001f0 <memchr>
 800a2bc:	b108      	cbz	r0, 800a2c2 <_printf_i+0x1f2>
 800a2be:	1b80      	subs	r0, r0, r6
 800a2c0:	6060      	str	r0, [r4, #4]
 800a2c2:	6863      	ldr	r3, [r4, #4]
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2cc:	e7a8      	b.n	800a220 <_printf_i+0x150>
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	47d0      	blx	sl
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d0ab      	beq.n	800a234 <_printf_i+0x164>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	079b      	lsls	r3, r3, #30
 800a2e0:	d413      	bmi.n	800a30a <_printf_i+0x23a>
 800a2e2:	68e0      	ldr	r0, [r4, #12]
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	4298      	cmp	r0, r3
 800a2e8:	bfb8      	it	lt
 800a2ea:	4618      	movlt	r0, r3
 800a2ec:	e7a4      	b.n	800a238 <_printf_i+0x168>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	47d0      	blx	sl
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d09b      	beq.n	800a234 <_printf_i+0x164>
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	68e3      	ldr	r3, [r4, #12]
 800a300:	9903      	ldr	r1, [sp, #12]
 800a302:	1a5b      	subs	r3, r3, r1
 800a304:	42ab      	cmp	r3, r5
 800a306:	dcf2      	bgt.n	800a2ee <_printf_i+0x21e>
 800a308:	e7eb      	b.n	800a2e2 <_printf_i+0x212>
 800a30a:	2500      	movs	r5, #0
 800a30c:	f104 0619 	add.w	r6, r4, #25
 800a310:	e7f5      	b.n	800a2fe <_printf_i+0x22e>
 800a312:	bf00      	nop
 800a314:	0800d2a2 	.word	0x0800d2a2
 800a318:	0800d2b3 	.word	0x0800d2b3

0800a31c <iprintf>:
 800a31c:	b40f      	push	{r0, r1, r2, r3}
 800a31e:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <iprintf+0x2c>)
 800a320:	b513      	push	{r0, r1, r4, lr}
 800a322:	681c      	ldr	r4, [r3, #0]
 800a324:	b124      	cbz	r4, 800a330 <iprintf+0x14>
 800a326:	69a3      	ldr	r3, [r4, #24]
 800a328:	b913      	cbnz	r3, 800a330 <iprintf+0x14>
 800a32a:	4620      	mov	r0, r4
 800a32c:	f001 f8fe 	bl	800b52c <__sinit>
 800a330:	ab05      	add	r3, sp, #20
 800a332:	9a04      	ldr	r2, [sp, #16]
 800a334:	68a1      	ldr	r1, [r4, #8]
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	4620      	mov	r0, r4
 800a33a:	f001 fdc3 	bl	800bec4 <_vfiprintf_r>
 800a33e:	b002      	add	sp, #8
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a344:	b004      	add	sp, #16
 800a346:	4770      	bx	lr
 800a348:	20000010 	.word	0x20000010

0800a34c <putchar>:
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <putchar+0x28>)
 800a34e:	b513      	push	{r0, r1, r4, lr}
 800a350:	681c      	ldr	r4, [r3, #0]
 800a352:	4601      	mov	r1, r0
 800a354:	b134      	cbz	r4, 800a364 <putchar+0x18>
 800a356:	69a3      	ldr	r3, [r4, #24]
 800a358:	b923      	cbnz	r3, 800a364 <putchar+0x18>
 800a35a:	9001      	str	r0, [sp, #4]
 800a35c:	4620      	mov	r0, r4
 800a35e:	f001 f8e5 	bl	800b52c <__sinit>
 800a362:	9901      	ldr	r1, [sp, #4]
 800a364:	68a2      	ldr	r2, [r4, #8]
 800a366:	4620      	mov	r0, r4
 800a368:	b002      	add	sp, #8
 800a36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36e:	f001 bed9 	b.w	800c124 <_putc_r>
 800a372:	bf00      	nop
 800a374:	20000010 	.word	0x20000010

0800a378 <_puts_r>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	460e      	mov	r6, r1
 800a37c:	4605      	mov	r5, r0
 800a37e:	b118      	cbz	r0, 800a388 <_puts_r+0x10>
 800a380:	6983      	ldr	r3, [r0, #24]
 800a382:	b90b      	cbnz	r3, 800a388 <_puts_r+0x10>
 800a384:	f001 f8d2 	bl	800b52c <__sinit>
 800a388:	69ab      	ldr	r3, [r5, #24]
 800a38a:	68ac      	ldr	r4, [r5, #8]
 800a38c:	b913      	cbnz	r3, 800a394 <_puts_r+0x1c>
 800a38e:	4628      	mov	r0, r5
 800a390:	f001 f8cc 	bl	800b52c <__sinit>
 800a394:	4b2c      	ldr	r3, [pc, #176]	; (800a448 <_puts_r+0xd0>)
 800a396:	429c      	cmp	r4, r3
 800a398:	d120      	bne.n	800a3dc <_puts_r+0x64>
 800a39a:	686c      	ldr	r4, [r5, #4]
 800a39c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a39e:	07db      	lsls	r3, r3, #31
 800a3a0:	d405      	bmi.n	800a3ae <_puts_r+0x36>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	0598      	lsls	r0, r3, #22
 800a3a6:	d402      	bmi.n	800a3ae <_puts_r+0x36>
 800a3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3aa:	f001 f962 	bl	800b672 <__retarget_lock_acquire_recursive>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	0719      	lsls	r1, r3, #28
 800a3b2:	d51d      	bpl.n	800a3f0 <_puts_r+0x78>
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	b1db      	cbz	r3, 800a3f0 <_puts_r+0x78>
 800a3b8:	3e01      	subs	r6, #1
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	60a3      	str	r3, [r4, #8]
 800a3c4:	bb39      	cbnz	r1, 800a416 <_puts_r+0x9e>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	da38      	bge.n	800a43c <_puts_r+0xc4>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	210a      	movs	r1, #10
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f858 	bl	800a484 <__swbuf_r>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d011      	beq.n	800a3fc <_puts_r+0x84>
 800a3d8:	250a      	movs	r5, #10
 800a3da:	e011      	b.n	800a400 <_puts_r+0x88>
 800a3dc:	4b1b      	ldr	r3, [pc, #108]	; (800a44c <_puts_r+0xd4>)
 800a3de:	429c      	cmp	r4, r3
 800a3e0:	d101      	bne.n	800a3e6 <_puts_r+0x6e>
 800a3e2:	68ac      	ldr	r4, [r5, #8]
 800a3e4:	e7da      	b.n	800a39c <_puts_r+0x24>
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <_puts_r+0xd8>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	bf08      	it	eq
 800a3ec:	68ec      	ldreq	r4, [r5, #12]
 800a3ee:	e7d5      	b.n	800a39c <_puts_r+0x24>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f898 	bl	800a528 <__swsetup_r>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d0dd      	beq.n	800a3b8 <_puts_r+0x40>
 800a3fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a402:	07da      	lsls	r2, r3, #31
 800a404:	d405      	bmi.n	800a412 <_puts_r+0x9a>
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	059b      	lsls	r3, r3, #22
 800a40a:	d402      	bmi.n	800a412 <_puts_r+0x9a>
 800a40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a40e:	f001 f931 	bl	800b674 <__retarget_lock_release_recursive>
 800a412:	4628      	mov	r0, r5
 800a414:	bd70      	pop	{r4, r5, r6, pc}
 800a416:	2b00      	cmp	r3, #0
 800a418:	da04      	bge.n	800a424 <_puts_r+0xac>
 800a41a:	69a2      	ldr	r2, [r4, #24]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	dc06      	bgt.n	800a42e <_puts_r+0xb6>
 800a420:	290a      	cmp	r1, #10
 800a422:	d004      	beq.n	800a42e <_puts_r+0xb6>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	6022      	str	r2, [r4, #0]
 800a42a:	7019      	strb	r1, [r3, #0]
 800a42c:	e7c5      	b.n	800a3ba <_puts_r+0x42>
 800a42e:	4622      	mov	r2, r4
 800a430:	4628      	mov	r0, r5
 800a432:	f000 f827 	bl	800a484 <__swbuf_r>
 800a436:	3001      	adds	r0, #1
 800a438:	d1bf      	bne.n	800a3ba <_puts_r+0x42>
 800a43a:	e7df      	b.n	800a3fc <_puts_r+0x84>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	250a      	movs	r5, #10
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	701d      	strb	r5, [r3, #0]
 800a446:	e7db      	b.n	800a400 <_puts_r+0x88>
 800a448:	0800d378 	.word	0x0800d378
 800a44c:	0800d398 	.word	0x0800d398
 800a450:	0800d358 	.word	0x0800d358

0800a454 <puts>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <puts+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7ff bf8d 	b.w	800a378 <_puts_r>
 800a45e:	bf00      	nop
 800a460:	20000010 	.word	0x20000010

0800a464 <_sbrk_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d06      	ldr	r5, [pc, #24]	; (800a480 <_sbrk_r+0x1c>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f9 f812 	bl	8003498 <_sbrk>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_sbrk_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_sbrk_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	200009a0 	.word	0x200009a0

0800a484 <__swbuf_r>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	460e      	mov	r6, r1
 800a488:	4614      	mov	r4, r2
 800a48a:	4605      	mov	r5, r0
 800a48c:	b118      	cbz	r0, 800a496 <__swbuf_r+0x12>
 800a48e:	6983      	ldr	r3, [r0, #24]
 800a490:	b90b      	cbnz	r3, 800a496 <__swbuf_r+0x12>
 800a492:	f001 f84b 	bl	800b52c <__sinit>
 800a496:	4b21      	ldr	r3, [pc, #132]	; (800a51c <__swbuf_r+0x98>)
 800a498:	429c      	cmp	r4, r3
 800a49a:	d12b      	bne.n	800a4f4 <__swbuf_r+0x70>
 800a49c:	686c      	ldr	r4, [r5, #4]
 800a49e:	69a3      	ldr	r3, [r4, #24]
 800a4a0:	60a3      	str	r3, [r4, #8]
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	071a      	lsls	r2, r3, #28
 800a4a6:	d52f      	bpl.n	800a508 <__swbuf_r+0x84>
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	b36b      	cbz	r3, 800a508 <__swbuf_r+0x84>
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	6820      	ldr	r0, [r4, #0]
 800a4b0:	1ac0      	subs	r0, r0, r3
 800a4b2:	6963      	ldr	r3, [r4, #20]
 800a4b4:	b2f6      	uxtb	r6, r6
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	4637      	mov	r7, r6
 800a4ba:	dc04      	bgt.n	800a4c6 <__swbuf_r+0x42>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 ffa0 	bl	800b404 <_fflush_r>
 800a4c4:	bb30      	cbnz	r0, 800a514 <__swbuf_r+0x90>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	60a3      	str	r3, [r4, #8]
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	6022      	str	r2, [r4, #0]
 800a4d2:	701e      	strb	r6, [r3, #0]
 800a4d4:	6963      	ldr	r3, [r4, #20]
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	4283      	cmp	r3, r0
 800a4da:	d004      	beq.n	800a4e6 <__swbuf_r+0x62>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	07db      	lsls	r3, r3, #31
 800a4e0:	d506      	bpl.n	800a4f0 <__swbuf_r+0x6c>
 800a4e2:	2e0a      	cmp	r6, #10
 800a4e4:	d104      	bne.n	800a4f0 <__swbuf_r+0x6c>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 ff8b 	bl	800b404 <_fflush_r>
 800a4ee:	b988      	cbnz	r0, 800a514 <__swbuf_r+0x90>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <__swbuf_r+0x9c>)
 800a4f6:	429c      	cmp	r4, r3
 800a4f8:	d101      	bne.n	800a4fe <__swbuf_r+0x7a>
 800a4fa:	68ac      	ldr	r4, [r5, #8]
 800a4fc:	e7cf      	b.n	800a49e <__swbuf_r+0x1a>
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <__swbuf_r+0xa0>)
 800a500:	429c      	cmp	r4, r3
 800a502:	bf08      	it	eq
 800a504:	68ec      	ldreq	r4, [r5, #12]
 800a506:	e7ca      	b.n	800a49e <__swbuf_r+0x1a>
 800a508:	4621      	mov	r1, r4
 800a50a:	4628      	mov	r0, r5
 800a50c:	f000 f80c 	bl	800a528 <__swsetup_r>
 800a510:	2800      	cmp	r0, #0
 800a512:	d0cb      	beq.n	800a4ac <__swbuf_r+0x28>
 800a514:	f04f 37ff 	mov.w	r7, #4294967295
 800a518:	e7ea      	b.n	800a4f0 <__swbuf_r+0x6c>
 800a51a:	bf00      	nop
 800a51c:	0800d378 	.word	0x0800d378
 800a520:	0800d398 	.word	0x0800d398
 800a524:	0800d358 	.word	0x0800d358

0800a528 <__swsetup_r>:
 800a528:	4b32      	ldr	r3, [pc, #200]	; (800a5f4 <__swsetup_r+0xcc>)
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	681d      	ldr	r5, [r3, #0]
 800a52e:	4606      	mov	r6, r0
 800a530:	460c      	mov	r4, r1
 800a532:	b125      	cbz	r5, 800a53e <__swsetup_r+0x16>
 800a534:	69ab      	ldr	r3, [r5, #24]
 800a536:	b913      	cbnz	r3, 800a53e <__swsetup_r+0x16>
 800a538:	4628      	mov	r0, r5
 800a53a:	f000 fff7 	bl	800b52c <__sinit>
 800a53e:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <__swsetup_r+0xd0>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d10f      	bne.n	800a564 <__swsetup_r+0x3c>
 800a544:	686c      	ldr	r4, [r5, #4]
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a54c:	0719      	lsls	r1, r3, #28
 800a54e:	d42c      	bmi.n	800a5aa <__swsetup_r+0x82>
 800a550:	06dd      	lsls	r5, r3, #27
 800a552:	d411      	bmi.n	800a578 <__swsetup_r+0x50>
 800a554:	2309      	movs	r3, #9
 800a556:	6033      	str	r3, [r6, #0]
 800a558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	e03e      	b.n	800a5e2 <__swsetup_r+0xba>
 800a564:	4b25      	ldr	r3, [pc, #148]	; (800a5fc <__swsetup_r+0xd4>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d101      	bne.n	800a56e <__swsetup_r+0x46>
 800a56a:	68ac      	ldr	r4, [r5, #8]
 800a56c:	e7eb      	b.n	800a546 <__swsetup_r+0x1e>
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <__swsetup_r+0xd8>)
 800a570:	429c      	cmp	r4, r3
 800a572:	bf08      	it	eq
 800a574:	68ec      	ldreq	r4, [r5, #12]
 800a576:	e7e6      	b.n	800a546 <__swsetup_r+0x1e>
 800a578:	0758      	lsls	r0, r3, #29
 800a57a:	d512      	bpl.n	800a5a2 <__swsetup_r+0x7a>
 800a57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a57e:	b141      	cbz	r1, 800a592 <__swsetup_r+0x6a>
 800a580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a584:	4299      	cmp	r1, r3
 800a586:	d002      	beq.n	800a58e <__swsetup_r+0x66>
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff f9b3 	bl	80098f4 <_free_r>
 800a58e:	2300      	movs	r3, #0
 800a590:	6363      	str	r3, [r4, #52]	; 0x34
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	2300      	movs	r3, #0
 800a59c:	6063      	str	r3, [r4, #4]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f043 0308 	orr.w	r3, r3, #8
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	b94b      	cbnz	r3, 800a5c2 <__swsetup_r+0x9a>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b8:	d003      	beq.n	800a5c2 <__swsetup_r+0x9a>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f001 f87f 	bl	800b6c0 <__smakebuf_r>
 800a5c2:	89a0      	ldrh	r0, [r4, #12]
 800a5c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c8:	f010 0301 	ands.w	r3, r0, #1
 800a5cc:	d00a      	beq.n	800a5e4 <__swsetup_r+0xbc>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6963      	ldr	r3, [r4, #20]
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	61a3      	str	r3, [r4, #24]
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b943      	cbnz	r3, 800a5ee <__swsetup_r+0xc6>
 800a5dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e0:	d1ba      	bne.n	800a558 <__swsetup_r+0x30>
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	0781      	lsls	r1, r0, #30
 800a5e6:	bf58      	it	pl
 800a5e8:	6963      	ldrpl	r3, [r4, #20]
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	e7f4      	b.n	800a5d8 <__swsetup_r+0xb0>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e7f7      	b.n	800a5e2 <__swsetup_r+0xba>
 800a5f2:	bf00      	nop
 800a5f4:	20000010 	.word	0x20000010
 800a5f8:	0800d378 	.word	0x0800d378
 800a5fc:	0800d398 	.word	0x0800d398
 800a600:	0800d358 	.word	0x0800d358

0800a604 <quorem>:
 800a604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	6903      	ldr	r3, [r0, #16]
 800a60a:	690c      	ldr	r4, [r1, #16]
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	4607      	mov	r7, r0
 800a610:	f2c0 8081 	blt.w	800a716 <quorem+0x112>
 800a614:	3c01      	subs	r4, #1
 800a616:	f101 0814 	add.w	r8, r1, #20
 800a61a:	f100 0514 	add.w	r5, r0, #20
 800a61e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a62c:	3301      	adds	r3, #1
 800a62e:	429a      	cmp	r2, r3
 800a630:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a638:	fbb2 f6f3 	udiv	r6, r2, r3
 800a63c:	d331      	bcc.n	800a6a2 <quorem+0x9e>
 800a63e:	f04f 0e00 	mov.w	lr, #0
 800a642:	4640      	mov	r0, r8
 800a644:	46ac      	mov	ip, r5
 800a646:	46f2      	mov	sl, lr
 800a648:	f850 2b04 	ldr.w	r2, [r0], #4
 800a64c:	b293      	uxth	r3, r2
 800a64e:	fb06 e303 	mla	r3, r6, r3, lr
 800a652:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a656:	b29b      	uxth	r3, r3
 800a658:	ebaa 0303 	sub.w	r3, sl, r3
 800a65c:	0c12      	lsrs	r2, r2, #16
 800a65e:	f8dc a000 	ldr.w	sl, [ip]
 800a662:	fb06 e202 	mla	r2, r6, r2, lr
 800a666:	fa13 f38a 	uxtah	r3, r3, sl
 800a66a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a66e:	fa1f fa82 	uxth.w	sl, r2
 800a672:	f8dc 2000 	ldr.w	r2, [ip]
 800a676:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a67a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a67e:	b29b      	uxth	r3, r3
 800a680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a684:	4581      	cmp	r9, r0
 800a686:	f84c 3b04 	str.w	r3, [ip], #4
 800a68a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a68e:	d2db      	bcs.n	800a648 <quorem+0x44>
 800a690:	f855 300b 	ldr.w	r3, [r5, fp]
 800a694:	b92b      	cbnz	r3, 800a6a2 <quorem+0x9e>
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	3b04      	subs	r3, #4
 800a69a:	429d      	cmp	r5, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	d32e      	bcc.n	800a6fe <quorem+0xfa>
 800a6a0:	613c      	str	r4, [r7, #16]
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f001 fad6 	bl	800bc54 <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	db24      	blt.n	800a6f6 <quorem+0xf2>
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f04f 0c00 	mov.w	ip, #0
 800a6b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6b8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6bc:	b293      	uxth	r3, r2
 800a6be:	ebac 0303 	sub.w	r3, ip, r3
 800a6c2:	0c12      	lsrs	r2, r2, #16
 800a6c4:	fa13 f38e 	uxtah	r3, r3, lr
 800a6c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6d6:	45c1      	cmp	r9, r8
 800a6d8:	f840 3b04 	str.w	r3, [r0], #4
 800a6dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6e0:	d2e8      	bcs.n	800a6b4 <quorem+0xb0>
 800a6e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6ea:	b922      	cbnz	r2, 800a6f6 <quorem+0xf2>
 800a6ec:	3b04      	subs	r3, #4
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	d30a      	bcc.n	800a70a <quorem+0x106>
 800a6f4:	613c      	str	r4, [r7, #16]
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	b003      	add	sp, #12
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	3b04      	subs	r3, #4
 800a702:	2a00      	cmp	r2, #0
 800a704:	d1cc      	bne.n	800a6a0 <quorem+0x9c>
 800a706:	3c01      	subs	r4, #1
 800a708:	e7c7      	b.n	800a69a <quorem+0x96>
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	2a00      	cmp	r2, #0
 800a710:	d1f0      	bne.n	800a6f4 <quorem+0xf0>
 800a712:	3c01      	subs	r4, #1
 800a714:	e7eb      	b.n	800a6ee <quorem+0xea>
 800a716:	2000      	movs	r0, #0
 800a718:	e7ee      	b.n	800a6f8 <quorem+0xf4>
 800a71a:	0000      	movs	r0, r0
 800a71c:	0000      	movs	r0, r0
	...

0800a720 <_dtoa_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	ed2d 8b02 	vpush	{d8}
 800a728:	ec57 6b10 	vmov	r6, r7, d0
 800a72c:	b095      	sub	sp, #84	; 0x54
 800a72e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a730:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a734:	9105      	str	r1, [sp, #20]
 800a736:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a73a:	4604      	mov	r4, r0
 800a73c:	9209      	str	r2, [sp, #36]	; 0x24
 800a73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a740:	b975      	cbnz	r5, 800a760 <_dtoa_r+0x40>
 800a742:	2010      	movs	r0, #16
 800a744:	f7ff f8a2 	bl	800988c <malloc>
 800a748:	4602      	mov	r2, r0
 800a74a:	6260      	str	r0, [r4, #36]	; 0x24
 800a74c:	b920      	cbnz	r0, 800a758 <_dtoa_r+0x38>
 800a74e:	4bb2      	ldr	r3, [pc, #712]	; (800aa18 <_dtoa_r+0x2f8>)
 800a750:	21ea      	movs	r1, #234	; 0xea
 800a752:	48b2      	ldr	r0, [pc, #712]	; (800aa1c <_dtoa_r+0x2fc>)
 800a754:	f001 fd84 	bl	800c260 <__assert_func>
 800a758:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a75c:	6005      	str	r5, [r0, #0]
 800a75e:	60c5      	str	r5, [r0, #12]
 800a760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a762:	6819      	ldr	r1, [r3, #0]
 800a764:	b151      	cbz	r1, 800a77c <_dtoa_r+0x5c>
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	604a      	str	r2, [r1, #4]
 800a76a:	2301      	movs	r3, #1
 800a76c:	4093      	lsls	r3, r2
 800a76e:	608b      	str	r3, [r1, #8]
 800a770:	4620      	mov	r0, r4
 800a772:	f001 f831 	bl	800b7d8 <_Bfree>
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	1e3b      	subs	r3, r7, #0
 800a77e:	bfb9      	ittee	lt
 800a780:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a784:	9303      	strlt	r3, [sp, #12]
 800a786:	2300      	movge	r3, #0
 800a788:	f8c8 3000 	strge.w	r3, [r8]
 800a78c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a790:	4ba3      	ldr	r3, [pc, #652]	; (800aa20 <_dtoa_r+0x300>)
 800a792:	bfbc      	itt	lt
 800a794:	2201      	movlt	r2, #1
 800a796:	f8c8 2000 	strlt.w	r2, [r8]
 800a79a:	ea33 0309 	bics.w	r3, r3, r9
 800a79e:	d11b      	bne.n	800a7d8 <_dtoa_r+0xb8>
 800a7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7ac:	4333      	orrs	r3, r6
 800a7ae:	f000 857a 	beq.w	800b2a6 <_dtoa_r+0xb86>
 800a7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7b4:	b963      	cbnz	r3, 800a7d0 <_dtoa_r+0xb0>
 800a7b6:	4b9b      	ldr	r3, [pc, #620]	; (800aa24 <_dtoa_r+0x304>)
 800a7b8:	e024      	b.n	800a804 <_dtoa_r+0xe4>
 800a7ba:	4b9b      	ldr	r3, [pc, #620]	; (800aa28 <_dtoa_r+0x308>)
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	3308      	adds	r3, #8
 800a7c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	9800      	ldr	r0, [sp, #0]
 800a7c6:	b015      	add	sp, #84	; 0x54
 800a7c8:	ecbd 8b02 	vpop	{d8}
 800a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d0:	4b94      	ldr	r3, [pc, #592]	; (800aa24 <_dtoa_r+0x304>)
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	3303      	adds	r3, #3
 800a7d6:	e7f3      	b.n	800a7c0 <_dtoa_r+0xa0>
 800a7d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	ec51 0b17 	vmov	r0, r1, d7
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a7e8:	f7f6 f976 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	b158      	cbz	r0, 800a808 <_dtoa_r+0xe8>
 800a7f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 8551 	beq.w	800b2a0 <_dtoa_r+0xb80>
 800a7fe:	488b      	ldr	r0, [pc, #556]	; (800aa2c <_dtoa_r+0x30c>)
 800a800:	6018      	str	r0, [r3, #0]
 800a802:	1e43      	subs	r3, r0, #1
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	e7dd      	b.n	800a7c4 <_dtoa_r+0xa4>
 800a808:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a80c:	aa12      	add	r2, sp, #72	; 0x48
 800a80e:	a913      	add	r1, sp, #76	; 0x4c
 800a810:	4620      	mov	r0, r4
 800a812:	f001 fac3 	bl	800bd9c <__d2b>
 800a816:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a81a:	4683      	mov	fp, r0
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	d07c      	beq.n	800a91a <_dtoa_r+0x1fa>
 800a820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a822:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a82a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a82e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a83a:	4b7d      	ldr	r3, [pc, #500]	; (800aa30 <_dtoa_r+0x310>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	a36e      	add	r3, pc, #440	; (adr r3, 800aa00 <_dtoa_r+0x2e0>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fedc 	bl	8000608 <__aeabi_dmul>
 800a850:	a36d      	add	r3, pc, #436	; (adr r3, 800aa08 <_dtoa_r+0x2e8>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fd21 	bl	800029c <__adddf3>
 800a85a:	4606      	mov	r6, r0
 800a85c:	4628      	mov	r0, r5
 800a85e:	460f      	mov	r7, r1
 800a860:	f7f5 fe68 	bl	8000534 <__aeabi_i2d>
 800a864:	a36a      	add	r3, pc, #424	; (adr r3, 800aa10 <_dtoa_r+0x2f0>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f7f5 fecd 	bl	8000608 <__aeabi_dmul>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f5 fd11 	bl	800029c <__adddf3>
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	f7f6 f973 	bl	8000b68 <__aeabi_d2iz>
 800a882:	2200      	movs	r2, #0
 800a884:	4682      	mov	sl, r0
 800a886:	2300      	movs	r3, #0
 800a888:	4630      	mov	r0, r6
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f6 f92e 	bl	8000aec <__aeabi_dcmplt>
 800a890:	b148      	cbz	r0, 800a8a6 <_dtoa_r+0x186>
 800a892:	4650      	mov	r0, sl
 800a894:	f7f5 fe4e 	bl	8000534 <__aeabi_i2d>
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	f7f6 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8a0:	b908      	cbnz	r0, 800a8a6 <_dtoa_r+0x186>
 800a8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a6:	f1ba 0f16 	cmp.w	sl, #22
 800a8aa:	d854      	bhi.n	800a956 <_dtoa_r+0x236>
 800a8ac:	4b61      	ldr	r3, [pc, #388]	; (800aa34 <_dtoa_r+0x314>)
 800a8ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8ba:	f7f6 f917 	bl	8000aec <__aeabi_dcmplt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d04b      	beq.n	800a95a <_dtoa_r+0x23a>
 800a8c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8cc:	1b5d      	subs	r5, r3, r5
 800a8ce:	1e6b      	subs	r3, r5, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	bf43      	ittte	mi
 800a8d4:	2300      	movmi	r3, #0
 800a8d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a8da:	9304      	strmi	r3, [sp, #16]
 800a8dc:	f04f 0800 	movpl.w	r8, #0
 800a8e0:	f1ba 0f00 	cmp.w	sl, #0
 800a8e4:	db3b      	blt.n	800a95e <_dtoa_r+0x23e>
 800a8e6:	9b04      	ldr	r3, [sp, #16]
 800a8e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a8ec:	4453      	add	r3, sl
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	9306      	str	r3, [sp, #24]
 800a8f4:	9b05      	ldr	r3, [sp, #20]
 800a8f6:	2b09      	cmp	r3, #9
 800a8f8:	d869      	bhi.n	800a9ce <_dtoa_r+0x2ae>
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	bfc4      	itt	gt
 800a8fe:	3b04      	subgt	r3, #4
 800a900:	9305      	strgt	r3, [sp, #20]
 800a902:	9b05      	ldr	r3, [sp, #20]
 800a904:	f1a3 0302 	sub.w	r3, r3, #2
 800a908:	bfcc      	ite	gt
 800a90a:	2500      	movgt	r5, #0
 800a90c:	2501      	movle	r5, #1
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d869      	bhi.n	800a9e6 <_dtoa_r+0x2c6>
 800a912:	e8df f003 	tbb	[pc, r3]
 800a916:	4e2c      	.short	0x4e2c
 800a918:	5a4c      	.short	0x5a4c
 800a91a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a91e:	441d      	add	r5, r3
 800a920:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a924:	2b20      	cmp	r3, #32
 800a926:	bfc1      	itttt	gt
 800a928:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a92c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a930:	fa09 f303 	lslgt.w	r3, r9, r3
 800a934:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a938:	bfda      	itte	le
 800a93a:	f1c3 0320 	rsble	r3, r3, #32
 800a93e:	fa06 f003 	lslle.w	r0, r6, r3
 800a942:	4318      	orrgt	r0, r3
 800a944:	f7f5 fde6 	bl	8000514 <__aeabi_ui2d>
 800a948:	2301      	movs	r3, #1
 800a94a:	4606      	mov	r6, r0
 800a94c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a950:	3d01      	subs	r5, #1
 800a952:	9310      	str	r3, [sp, #64]	; 0x40
 800a954:	e771      	b.n	800a83a <_dtoa_r+0x11a>
 800a956:	2301      	movs	r3, #1
 800a958:	e7b6      	b.n	800a8c8 <_dtoa_r+0x1a8>
 800a95a:	900e      	str	r0, [sp, #56]	; 0x38
 800a95c:	e7b5      	b.n	800a8ca <_dtoa_r+0x1aa>
 800a95e:	f1ca 0300 	rsb	r3, sl, #0
 800a962:	9306      	str	r3, [sp, #24]
 800a964:	2300      	movs	r3, #0
 800a966:	eba8 080a 	sub.w	r8, r8, sl
 800a96a:	930d      	str	r3, [sp, #52]	; 0x34
 800a96c:	e7c2      	b.n	800a8f4 <_dtoa_r+0x1d4>
 800a96e:	2300      	movs	r3, #0
 800a970:	9308      	str	r3, [sp, #32]
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	dc39      	bgt.n	800a9ec <_dtoa_r+0x2cc>
 800a978:	f04f 0901 	mov.w	r9, #1
 800a97c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a980:	464b      	mov	r3, r9
 800a982:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a988:	2200      	movs	r2, #0
 800a98a:	6042      	str	r2, [r0, #4]
 800a98c:	2204      	movs	r2, #4
 800a98e:	f102 0614 	add.w	r6, r2, #20
 800a992:	429e      	cmp	r6, r3
 800a994:	6841      	ldr	r1, [r0, #4]
 800a996:	d92f      	bls.n	800a9f8 <_dtoa_r+0x2d8>
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fedd 	bl	800b758 <_Balloc>
 800a99e:	9000      	str	r0, [sp, #0]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d14b      	bne.n	800aa3c <_dtoa_r+0x31c>
 800a9a4:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <_dtoa_r+0x318>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9ac:	e6d1      	b.n	800a752 <_dtoa_r+0x32>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e7de      	b.n	800a970 <_dtoa_r+0x250>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9308      	str	r3, [sp, #32]
 800a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b8:	eb0a 0903 	add.w	r9, sl, r3
 800a9bc:	f109 0301 	add.w	r3, r9, #1
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	bfb8      	it	lt
 800a9c6:	2301      	movlt	r3, #1
 800a9c8:	e7dd      	b.n	800a986 <_dtoa_r+0x266>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e7f2      	b.n	800a9b4 <_dtoa_r+0x294>
 800a9ce:	2501      	movs	r5, #1
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	9508      	str	r5, [sp, #32]
 800a9d6:	f04f 39ff 	mov.w	r9, #4294967295
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9e0:	2312      	movs	r3, #18
 800a9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e4:	e7cf      	b.n	800a986 <_dtoa_r+0x266>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	9308      	str	r3, [sp, #32]
 800a9ea:	e7f4      	b.n	800a9d6 <_dtoa_r+0x2b6>
 800a9ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a9f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	e7c6      	b.n	800a986 <_dtoa_r+0x266>
 800a9f8:	3101      	adds	r1, #1
 800a9fa:	6041      	str	r1, [r0, #4]
 800a9fc:	0052      	lsls	r2, r2, #1
 800a9fe:	e7c6      	b.n	800a98e <_dtoa_r+0x26e>
 800aa00:	636f4361 	.word	0x636f4361
 800aa04:	3fd287a7 	.word	0x3fd287a7
 800aa08:	8b60c8b3 	.word	0x8b60c8b3
 800aa0c:	3fc68a28 	.word	0x3fc68a28
 800aa10:	509f79fb 	.word	0x509f79fb
 800aa14:	3fd34413 	.word	0x3fd34413
 800aa18:	0800d2d1 	.word	0x0800d2d1
 800aa1c:	0800d2e8 	.word	0x0800d2e8
 800aa20:	7ff00000 	.word	0x7ff00000
 800aa24:	0800d2cd 	.word	0x0800d2cd
 800aa28:	0800d2c4 	.word	0x0800d2c4
 800aa2c:	0800d2a1 	.word	0x0800d2a1
 800aa30:	3ff80000 	.word	0x3ff80000
 800aa34:	0800d440 	.word	0x0800d440
 800aa38:	0800d347 	.word	0x0800d347
 800aa3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa3e:	9a00      	ldr	r2, [sp, #0]
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	2b0e      	cmp	r3, #14
 800aa46:	f200 80ad 	bhi.w	800aba4 <_dtoa_r+0x484>
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	f000 80aa 	beq.w	800aba4 <_dtoa_r+0x484>
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	dd36      	ble.n	800aac4 <_dtoa_r+0x3a4>
 800aa56:	4ac3      	ldr	r2, [pc, #780]	; (800ad64 <_dtoa_r+0x644>)
 800aa58:	f00a 030f 	and.w	r3, sl, #15
 800aa5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa60:	ed93 7b00 	vldr	d7, [r3]
 800aa64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa68:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa6c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa70:	eef0 8a67 	vmov.f32	s17, s15
 800aa74:	d016      	beq.n	800aaa4 <_dtoa_r+0x384>
 800aa76:	4bbc      	ldr	r3, [pc, #752]	; (800ad68 <_dtoa_r+0x648>)
 800aa78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa80:	f7f5 feec 	bl	800085c <__aeabi_ddiv>
 800aa84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa88:	f007 070f 	and.w	r7, r7, #15
 800aa8c:	2503      	movs	r5, #3
 800aa8e:	4eb6      	ldr	r6, [pc, #728]	; (800ad68 <_dtoa_r+0x648>)
 800aa90:	b957      	cbnz	r7, 800aaa8 <_dtoa_r+0x388>
 800aa92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa96:	ec53 2b18 	vmov	r2, r3, d8
 800aa9a:	f7f5 fedf 	bl	800085c <__aeabi_ddiv>
 800aa9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa2:	e029      	b.n	800aaf8 <_dtoa_r+0x3d8>
 800aaa4:	2502      	movs	r5, #2
 800aaa6:	e7f2      	b.n	800aa8e <_dtoa_r+0x36e>
 800aaa8:	07f9      	lsls	r1, r7, #31
 800aaaa:	d508      	bpl.n	800aabe <_dtoa_r+0x39e>
 800aaac:	ec51 0b18 	vmov	r0, r1, d8
 800aab0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aab4:	f7f5 fda8 	bl	8000608 <__aeabi_dmul>
 800aab8:	ec41 0b18 	vmov	d8, r0, r1
 800aabc:	3501      	adds	r5, #1
 800aabe:	107f      	asrs	r7, r7, #1
 800aac0:	3608      	adds	r6, #8
 800aac2:	e7e5      	b.n	800aa90 <_dtoa_r+0x370>
 800aac4:	f000 80a6 	beq.w	800ac14 <_dtoa_r+0x4f4>
 800aac8:	f1ca 0600 	rsb	r6, sl, #0
 800aacc:	4ba5      	ldr	r3, [pc, #660]	; (800ad64 <_dtoa_r+0x644>)
 800aace:	4fa6      	ldr	r7, [pc, #664]	; (800ad68 <_dtoa_r+0x648>)
 800aad0:	f006 020f 	and.w	r2, r6, #15
 800aad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aae0:	f7f5 fd92 	bl	8000608 <__aeabi_dmul>
 800aae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae8:	1136      	asrs	r6, r6, #4
 800aaea:	2300      	movs	r3, #0
 800aaec:	2502      	movs	r5, #2
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	f040 8085 	bne.w	800abfe <_dtoa_r+0x4de>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1d2      	bne.n	800aa9e <_dtoa_r+0x37e>
 800aaf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 808c 	beq.w	800ac18 <_dtoa_r+0x4f8>
 800ab00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab04:	4b99      	ldr	r3, [pc, #612]	; (800ad6c <_dtoa_r+0x64c>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 ffee 	bl	8000aec <__aeabi_dcmplt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f000 8081 	beq.w	800ac18 <_dtoa_r+0x4f8>
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d07d      	beq.n	800ac18 <_dtoa_r+0x4f8>
 800ab1c:	f1b9 0f00 	cmp.w	r9, #0
 800ab20:	dd3c      	ble.n	800ab9c <_dtoa_r+0x47c>
 800ab22:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab26:	9307      	str	r3, [sp, #28]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4b91      	ldr	r3, [pc, #580]	; (800ad70 <_dtoa_r+0x650>)
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	3501      	adds	r5, #1
 800ab3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ab3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7f5 fcf6 	bl	8000534 <__aeabi_i2d>
 800ab48:	4632      	mov	r2, r6
 800ab4a:	463b      	mov	r3, r7
 800ab4c:	f7f5 fd5c 	bl	8000608 <__aeabi_dmul>
 800ab50:	4b88      	ldr	r3, [pc, #544]	; (800ad74 <_dtoa_r+0x654>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	f7f5 fba2 	bl	800029c <__adddf3>
 800ab58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab60:	9303      	str	r3, [sp, #12]
 800ab62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d15c      	bne.n	800ac22 <_dtoa_r+0x502>
 800ab68:	4b83      	ldr	r3, [pc, #524]	; (800ad78 <_dtoa_r+0x658>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 fb92 	bl	8000298 <__aeabi_dsub>
 800ab74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab78:	4606      	mov	r6, r0
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	f7f5 ffd4 	bl	8000b28 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f040 8296 	bne.w	800b0b2 <_dtoa_r+0x992>
 800ab86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 ffab 	bl	8000aec <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f040 8288 	bne.w	800b0ac <_dtoa_r+0x98c>
 800ab9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f2c0 8158 	blt.w	800ae5c <_dtoa_r+0x73c>
 800abac:	f1ba 0f0e 	cmp.w	sl, #14
 800abb0:	f300 8154 	bgt.w	800ae5c <_dtoa_r+0x73c>
 800abb4:	4b6b      	ldr	r3, [pc, #428]	; (800ad64 <_dtoa_r+0x644>)
 800abb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f280 80e3 	bge.w	800ad8c <_dtoa_r+0x66c>
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f300 80df 	bgt.w	800ad8c <_dtoa_r+0x66c>
 800abce:	f040 826d 	bne.w	800b0ac <_dtoa_r+0x98c>
 800abd2:	4b69      	ldr	r3, [pc, #420]	; (800ad78 <_dtoa_r+0x658>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 fd15 	bl	8000608 <__aeabi_dmul>
 800abde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abe2:	f7f5 ff97 	bl	8000b14 <__aeabi_dcmpge>
 800abe6:	9e01      	ldr	r6, [sp, #4]
 800abe8:	4637      	mov	r7, r6
 800abea:	2800      	cmp	r0, #0
 800abec:	f040 8243 	bne.w	800b076 <_dtoa_r+0x956>
 800abf0:	9d00      	ldr	r5, [sp, #0]
 800abf2:	2331      	movs	r3, #49	; 0x31
 800abf4:	f805 3b01 	strb.w	r3, [r5], #1
 800abf8:	f10a 0a01 	add.w	sl, sl, #1
 800abfc:	e23f      	b.n	800b07e <_dtoa_r+0x95e>
 800abfe:	07f2      	lsls	r2, r6, #31
 800ac00:	d505      	bpl.n	800ac0e <_dtoa_r+0x4ee>
 800ac02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac06:	f7f5 fcff 	bl	8000608 <__aeabi_dmul>
 800ac0a:	3501      	adds	r5, #1
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	1076      	asrs	r6, r6, #1
 800ac10:	3708      	adds	r7, #8
 800ac12:	e76c      	b.n	800aaee <_dtoa_r+0x3ce>
 800ac14:	2502      	movs	r5, #2
 800ac16:	e76f      	b.n	800aaf8 <_dtoa_r+0x3d8>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac20:	e78d      	b.n	800ab3e <_dtoa_r+0x41e>
 800ac22:	9900      	ldr	r1, [sp, #0]
 800ac24:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac28:	4b4e      	ldr	r3, [pc, #312]	; (800ad64 <_dtoa_r+0x644>)
 800ac2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac2e:	4401      	add	r1, r0
 800ac30:	9102      	str	r1, [sp, #8]
 800ac32:	9908      	ldr	r1, [sp, #32]
 800ac34:	eeb0 8a47 	vmov.f32	s16, s14
 800ac38:	eef0 8a67 	vmov.f32	s17, s15
 800ac3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac44:	2900      	cmp	r1, #0
 800ac46:	d045      	beq.n	800acd4 <_dtoa_r+0x5b4>
 800ac48:	494c      	ldr	r1, [pc, #304]	; (800ad7c <_dtoa_r+0x65c>)
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f7f5 fe06 	bl	800085c <__aeabi_ddiv>
 800ac50:	ec53 2b18 	vmov	r2, r3, d8
 800ac54:	f7f5 fb20 	bl	8000298 <__aeabi_dsub>
 800ac58:	9d00      	ldr	r5, [sp, #0]
 800ac5a:	ec41 0b18 	vmov	d8, r0, r1
 800ac5e:	4639      	mov	r1, r7
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7f5 ff81 	bl	8000b68 <__aeabi_d2iz>
 800ac66:	900c      	str	r0, [sp, #48]	; 0x30
 800ac68:	f7f5 fc64 	bl	8000534 <__aeabi_i2d>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fb10 	bl	8000298 <__aeabi_dsub>
 800ac78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7a:	3330      	adds	r3, #48	; 0x30
 800ac7c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac80:	ec53 2b18 	vmov	r2, r3, d8
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	f7f5 ff30 	bl	8000aec <__aeabi_dcmplt>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d165      	bne.n	800ad5c <_dtoa_r+0x63c>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	4935      	ldr	r1, [pc, #212]	; (800ad6c <_dtoa_r+0x64c>)
 800ac96:	2000      	movs	r0, #0
 800ac98:	f7f5 fafe 	bl	8000298 <__aeabi_dsub>
 800ac9c:	ec53 2b18 	vmov	r2, r3, d8
 800aca0:	f7f5 ff24 	bl	8000aec <__aeabi_dcmplt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f040 80b9 	bne.w	800ae1c <_dtoa_r+0x6fc>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	429d      	cmp	r5, r3
 800acae:	f43f af75 	beq.w	800ab9c <_dtoa_r+0x47c>
 800acb2:	4b2f      	ldr	r3, [pc, #188]	; (800ad70 <_dtoa_r+0x650>)
 800acb4:	ec51 0b18 	vmov	r0, r1, d8
 800acb8:	2200      	movs	r2, #0
 800acba:	f7f5 fca5 	bl	8000608 <__aeabi_dmul>
 800acbe:	4b2c      	ldr	r3, [pc, #176]	; (800ad70 <_dtoa_r+0x650>)
 800acc0:	ec41 0b18 	vmov	d8, r0, r1
 800acc4:	2200      	movs	r2, #0
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fc9d 	bl	8000608 <__aeabi_dmul>
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	e7c4      	b.n	800ac5e <_dtoa_r+0x53e>
 800acd4:	ec51 0b17 	vmov	r0, r1, d7
 800acd8:	f7f5 fc96 	bl	8000608 <__aeabi_dmul>
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	9d00      	ldr	r5, [sp, #0]
 800ace0:	930c      	str	r3, [sp, #48]	; 0x30
 800ace2:	ec41 0b18 	vmov	d8, r0, r1
 800ace6:	4639      	mov	r1, r7
 800ace8:	4630      	mov	r0, r6
 800acea:	f7f5 ff3d 	bl	8000b68 <__aeabi_d2iz>
 800acee:	9011      	str	r0, [sp, #68]	; 0x44
 800acf0:	f7f5 fc20 	bl	8000534 <__aeabi_i2d>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 facc 	bl	8000298 <__aeabi_dsub>
 800ad00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad02:	3330      	adds	r3, #48	; 0x30
 800ad04:	f805 3b01 	strb.w	r3, [r5], #1
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	429d      	cmp	r5, r3
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	d134      	bne.n	800ad80 <_dtoa_r+0x660>
 800ad16:	4b19      	ldr	r3, [pc, #100]	; (800ad7c <_dtoa_r+0x65c>)
 800ad18:	ec51 0b18 	vmov	r0, r1, d8
 800ad1c:	f7f5 fabe 	bl	800029c <__adddf3>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f7f5 fefe 	bl	8000b28 <__aeabi_dcmpgt>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d175      	bne.n	800ae1c <_dtoa_r+0x6fc>
 800ad30:	ec53 2b18 	vmov	r2, r3, d8
 800ad34:	4911      	ldr	r1, [pc, #68]	; (800ad7c <_dtoa_r+0x65c>)
 800ad36:	2000      	movs	r0, #0
 800ad38:	f7f5 faae 	bl	8000298 <__aeabi_dsub>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4630      	mov	r0, r6
 800ad42:	4639      	mov	r1, r7
 800ad44:	f7f5 fed2 	bl	8000aec <__aeabi_dcmplt>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f43f af27 	beq.w	800ab9c <_dtoa_r+0x47c>
 800ad4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad50:	1e6b      	subs	r3, r5, #1
 800ad52:	930c      	str	r3, [sp, #48]	; 0x30
 800ad54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	d0f8      	beq.n	800ad4e <_dtoa_r+0x62e>
 800ad5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad60:	e04a      	b.n	800adf8 <_dtoa_r+0x6d8>
 800ad62:	bf00      	nop
 800ad64:	0800d440 	.word	0x0800d440
 800ad68:	0800d418 	.word	0x0800d418
 800ad6c:	3ff00000 	.word	0x3ff00000
 800ad70:	40240000 	.word	0x40240000
 800ad74:	401c0000 	.word	0x401c0000
 800ad78:	40140000 	.word	0x40140000
 800ad7c:	3fe00000 	.word	0x3fe00000
 800ad80:	4baf      	ldr	r3, [pc, #700]	; (800b040 <_dtoa_r+0x920>)
 800ad82:	f7f5 fc41 	bl	8000608 <__aeabi_dmul>
 800ad86:	4606      	mov	r6, r0
 800ad88:	460f      	mov	r7, r1
 800ad8a:	e7ac      	b.n	800ace6 <_dtoa_r+0x5c6>
 800ad8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad90:	9d00      	ldr	r5, [sp, #0]
 800ad92:	4642      	mov	r2, r8
 800ad94:	464b      	mov	r3, r9
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fd5f 	bl	800085c <__aeabi_ddiv>
 800ad9e:	f7f5 fee3 	bl	8000b68 <__aeabi_d2iz>
 800ada2:	9002      	str	r0, [sp, #8]
 800ada4:	f7f5 fbc6 	bl	8000534 <__aeabi_i2d>
 800ada8:	4642      	mov	r2, r8
 800adaa:	464b      	mov	r3, r9
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa6e 	bl	8000298 <__aeabi_dsub>
 800adbc:	9e02      	ldr	r6, [sp, #8]
 800adbe:	9f01      	ldr	r7, [sp, #4]
 800adc0:	3630      	adds	r6, #48	; 0x30
 800adc2:	f805 6b01 	strb.w	r6, [r5], #1
 800adc6:	9e00      	ldr	r6, [sp, #0]
 800adc8:	1bae      	subs	r6, r5, r6
 800adca:	42b7      	cmp	r7, r6
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	d137      	bne.n	800ae42 <_dtoa_r+0x722>
 800add2:	f7f5 fa63 	bl	800029c <__adddf3>
 800add6:	4642      	mov	r2, r8
 800add8:	464b      	mov	r3, r9
 800adda:	4606      	mov	r6, r0
 800addc:	460f      	mov	r7, r1
 800adde:	f7f5 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 800ade2:	b9c8      	cbnz	r0, 800ae18 <_dtoa_r+0x6f8>
 800ade4:	4642      	mov	r2, r8
 800ade6:	464b      	mov	r3, r9
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 800adf0:	b110      	cbz	r0, 800adf8 <_dtoa_r+0x6d8>
 800adf2:	9b02      	ldr	r3, [sp, #8]
 800adf4:	07d9      	lsls	r1, r3, #31
 800adf6:	d40f      	bmi.n	800ae18 <_dtoa_r+0x6f8>
 800adf8:	4620      	mov	r0, r4
 800adfa:	4659      	mov	r1, fp
 800adfc:	f000 fcec 	bl	800b7d8 <_Bfree>
 800ae00:	2300      	movs	r3, #0
 800ae02:	702b      	strb	r3, [r5, #0]
 800ae04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae06:	f10a 0001 	add.w	r0, sl, #1
 800ae0a:	6018      	str	r0, [r3, #0]
 800ae0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f43f acd8 	beq.w	800a7c4 <_dtoa_r+0xa4>
 800ae14:	601d      	str	r5, [r3, #0]
 800ae16:	e4d5      	b.n	800a7c4 <_dtoa_r+0xa4>
 800ae18:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	461d      	mov	r5, r3
 800ae20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae24:	2a39      	cmp	r2, #57	; 0x39
 800ae26:	d108      	bne.n	800ae3a <_dtoa_r+0x71a>
 800ae28:	9a00      	ldr	r2, [sp, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d1f7      	bne.n	800ae1e <_dtoa_r+0x6fe>
 800ae2e:	9a07      	ldr	r2, [sp, #28]
 800ae30:	9900      	ldr	r1, [sp, #0]
 800ae32:	3201      	adds	r2, #1
 800ae34:	9207      	str	r2, [sp, #28]
 800ae36:	2230      	movs	r2, #48	; 0x30
 800ae38:	700a      	strb	r2, [r1, #0]
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	3201      	adds	r2, #1
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	e78c      	b.n	800ad5c <_dtoa_r+0x63c>
 800ae42:	4b7f      	ldr	r3, [pc, #508]	; (800b040 <_dtoa_r+0x920>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	f7f5 fbdf 	bl	8000608 <__aeabi_dmul>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4606      	mov	r6, r0
 800ae50:	460f      	mov	r7, r1
 800ae52:	f7f5 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d09b      	beq.n	800ad92 <_dtoa_r+0x672>
 800ae5a:	e7cd      	b.n	800adf8 <_dtoa_r+0x6d8>
 800ae5c:	9a08      	ldr	r2, [sp, #32]
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	f000 80c4 	beq.w	800afec <_dtoa_r+0x8cc>
 800ae64:	9a05      	ldr	r2, [sp, #20]
 800ae66:	2a01      	cmp	r2, #1
 800ae68:	f300 80a8 	bgt.w	800afbc <_dtoa_r+0x89c>
 800ae6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	f000 80a0 	beq.w	800afb4 <_dtoa_r+0x894>
 800ae74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae78:	9e06      	ldr	r6, [sp, #24]
 800ae7a:	4645      	mov	r5, r8
 800ae7c:	9a04      	ldr	r2, [sp, #16]
 800ae7e:	2101      	movs	r1, #1
 800ae80:	441a      	add	r2, r3
 800ae82:	4620      	mov	r0, r4
 800ae84:	4498      	add	r8, r3
 800ae86:	9204      	str	r2, [sp, #16]
 800ae88:	f000 fd62 	bl	800b950 <__i2b>
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	dd0b      	ble.n	800aeaa <_dtoa_r+0x78a>
 800ae92:	9b04      	ldr	r3, [sp, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dd08      	ble.n	800aeaa <_dtoa_r+0x78a>
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	9a04      	ldr	r2, [sp, #16]
 800ae9c:	bfa8      	it	ge
 800ae9e:	462b      	movge	r3, r5
 800aea0:	eba8 0803 	sub.w	r8, r8, r3
 800aea4:	1aed      	subs	r5, r5, r3
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	9b06      	ldr	r3, [sp, #24]
 800aeac:	b1fb      	cbz	r3, 800aeee <_dtoa_r+0x7ce>
 800aeae:	9b08      	ldr	r3, [sp, #32]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 809f 	beq.w	800aff4 <_dtoa_r+0x8d4>
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	dd11      	ble.n	800aede <_dtoa_r+0x7be>
 800aeba:	4639      	mov	r1, r7
 800aebc:	4632      	mov	r2, r6
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 fe02 	bl	800bac8 <__pow5mult>
 800aec4:	465a      	mov	r2, fp
 800aec6:	4601      	mov	r1, r0
 800aec8:	4607      	mov	r7, r0
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 fd56 	bl	800b97c <__multiply>
 800aed0:	4659      	mov	r1, fp
 800aed2:	9007      	str	r0, [sp, #28]
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fc7f 	bl	800b7d8 <_Bfree>
 800aeda:	9b07      	ldr	r3, [sp, #28]
 800aedc:	469b      	mov	fp, r3
 800aede:	9b06      	ldr	r3, [sp, #24]
 800aee0:	1b9a      	subs	r2, r3, r6
 800aee2:	d004      	beq.n	800aeee <_dtoa_r+0x7ce>
 800aee4:	4659      	mov	r1, fp
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 fdee 	bl	800bac8 <__pow5mult>
 800aeec:	4683      	mov	fp, r0
 800aeee:	2101      	movs	r1, #1
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fd2d 	bl	800b950 <__i2b>
 800aef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	4606      	mov	r6, r0
 800aefc:	dd7c      	ble.n	800aff8 <_dtoa_r+0x8d8>
 800aefe:	461a      	mov	r2, r3
 800af00:	4601      	mov	r1, r0
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fde0 	bl	800bac8 <__pow5mult>
 800af08:	9b05      	ldr	r3, [sp, #20]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	4606      	mov	r6, r0
 800af0e:	dd76      	ble.n	800affe <_dtoa_r+0x8de>
 800af10:	2300      	movs	r3, #0
 800af12:	9306      	str	r3, [sp, #24]
 800af14:	6933      	ldr	r3, [r6, #16]
 800af16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af1a:	6918      	ldr	r0, [r3, #16]
 800af1c:	f000 fcc8 	bl	800b8b0 <__hi0bits>
 800af20:	f1c0 0020 	rsb	r0, r0, #32
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	4418      	add	r0, r3
 800af28:	f010 001f 	ands.w	r0, r0, #31
 800af2c:	f000 8086 	beq.w	800b03c <_dtoa_r+0x91c>
 800af30:	f1c0 0320 	rsb	r3, r0, #32
 800af34:	2b04      	cmp	r3, #4
 800af36:	dd7f      	ble.n	800b038 <_dtoa_r+0x918>
 800af38:	f1c0 001c 	rsb	r0, r0, #28
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	4403      	add	r3, r0
 800af40:	4480      	add	r8, r0
 800af42:	4405      	add	r5, r0
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	f1b8 0f00 	cmp.w	r8, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x838>
 800af4c:	4659      	mov	r1, fp
 800af4e:	4642      	mov	r2, r8
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fe13 	bl	800bb7c <__lshift>
 800af56:	4683      	mov	fp, r0
 800af58:	9b04      	ldr	r3, [sp, #16]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd05      	ble.n	800af6a <_dtoa_r+0x84a>
 800af5e:	4631      	mov	r1, r6
 800af60:	461a      	mov	r2, r3
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fe0a 	bl	800bb7c <__lshift>
 800af68:	4606      	mov	r6, r0
 800af6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d069      	beq.n	800b044 <_dtoa_r+0x924>
 800af70:	4631      	mov	r1, r6
 800af72:	4658      	mov	r0, fp
 800af74:	f000 fe6e 	bl	800bc54 <__mcmp>
 800af78:	2800      	cmp	r0, #0
 800af7a:	da63      	bge.n	800b044 <_dtoa_r+0x924>
 800af7c:	2300      	movs	r3, #0
 800af7e:	4659      	mov	r1, fp
 800af80:	220a      	movs	r2, #10
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fc4a 	bl	800b81c <__multadd>
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af8e:	4683      	mov	fp, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 818f 	beq.w	800b2b4 <_dtoa_r+0xb94>
 800af96:	4639      	mov	r1, r7
 800af98:	2300      	movs	r3, #0
 800af9a:	220a      	movs	r2, #10
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 fc3d 	bl	800b81c <__multadd>
 800afa2:	f1b9 0f00 	cmp.w	r9, #0
 800afa6:	4607      	mov	r7, r0
 800afa8:	f300 808e 	bgt.w	800b0c8 <_dtoa_r+0x9a8>
 800afac:	9b05      	ldr	r3, [sp, #20]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	dc50      	bgt.n	800b054 <_dtoa_r+0x934>
 800afb2:	e089      	b.n	800b0c8 <_dtoa_r+0x9a8>
 800afb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afba:	e75d      	b.n	800ae78 <_dtoa_r+0x758>
 800afbc:	9b01      	ldr	r3, [sp, #4]
 800afbe:	1e5e      	subs	r6, r3, #1
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	42b3      	cmp	r3, r6
 800afc4:	bfbf      	itttt	lt
 800afc6:	9b06      	ldrlt	r3, [sp, #24]
 800afc8:	9606      	strlt	r6, [sp, #24]
 800afca:	1af2      	sublt	r2, r6, r3
 800afcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800afce:	bfb6      	itet	lt
 800afd0:	189b      	addlt	r3, r3, r2
 800afd2:	1b9e      	subge	r6, r3, r6
 800afd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	bfb8      	it	lt
 800afda:	2600      	movlt	r6, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	bfb5      	itete	lt
 800afe0:	eba8 0503 	sublt.w	r5, r8, r3
 800afe4:	9b01      	ldrge	r3, [sp, #4]
 800afe6:	2300      	movlt	r3, #0
 800afe8:	4645      	movge	r5, r8
 800afea:	e747      	b.n	800ae7c <_dtoa_r+0x75c>
 800afec:	9e06      	ldr	r6, [sp, #24]
 800afee:	9f08      	ldr	r7, [sp, #32]
 800aff0:	4645      	mov	r5, r8
 800aff2:	e74c      	b.n	800ae8e <_dtoa_r+0x76e>
 800aff4:	9a06      	ldr	r2, [sp, #24]
 800aff6:	e775      	b.n	800aee4 <_dtoa_r+0x7c4>
 800aff8:	9b05      	ldr	r3, [sp, #20]
 800affa:	2b01      	cmp	r3, #1
 800affc:	dc18      	bgt.n	800b030 <_dtoa_r+0x910>
 800affe:	9b02      	ldr	r3, [sp, #8]
 800b000:	b9b3      	cbnz	r3, 800b030 <_dtoa_r+0x910>
 800b002:	9b03      	ldr	r3, [sp, #12]
 800b004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b008:	b9a3      	cbnz	r3, 800b034 <_dtoa_r+0x914>
 800b00a:	9b03      	ldr	r3, [sp, #12]
 800b00c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b010:	0d1b      	lsrs	r3, r3, #20
 800b012:	051b      	lsls	r3, r3, #20
 800b014:	b12b      	cbz	r3, 800b022 <_dtoa_r+0x902>
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	3301      	adds	r3, #1
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	f108 0801 	add.w	r8, r8, #1
 800b020:	2301      	movs	r3, #1
 800b022:	9306      	str	r3, [sp, #24]
 800b024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b026:	2b00      	cmp	r3, #0
 800b028:	f47f af74 	bne.w	800af14 <_dtoa_r+0x7f4>
 800b02c:	2001      	movs	r0, #1
 800b02e:	e779      	b.n	800af24 <_dtoa_r+0x804>
 800b030:	2300      	movs	r3, #0
 800b032:	e7f6      	b.n	800b022 <_dtoa_r+0x902>
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	e7f4      	b.n	800b022 <_dtoa_r+0x902>
 800b038:	d085      	beq.n	800af46 <_dtoa_r+0x826>
 800b03a:	4618      	mov	r0, r3
 800b03c:	301c      	adds	r0, #28
 800b03e:	e77d      	b.n	800af3c <_dtoa_r+0x81c>
 800b040:	40240000 	.word	0x40240000
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dc38      	bgt.n	800b0bc <_dtoa_r+0x99c>
 800b04a:	9b05      	ldr	r3, [sp, #20]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	dd35      	ble.n	800b0bc <_dtoa_r+0x99c>
 800b050:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b054:	f1b9 0f00 	cmp.w	r9, #0
 800b058:	d10d      	bne.n	800b076 <_dtoa_r+0x956>
 800b05a:	4631      	mov	r1, r6
 800b05c:	464b      	mov	r3, r9
 800b05e:	2205      	movs	r2, #5
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fbdb 	bl	800b81c <__multadd>
 800b066:	4601      	mov	r1, r0
 800b068:	4606      	mov	r6, r0
 800b06a:	4658      	mov	r0, fp
 800b06c:	f000 fdf2 	bl	800bc54 <__mcmp>
 800b070:	2800      	cmp	r0, #0
 800b072:	f73f adbd 	bgt.w	800abf0 <_dtoa_r+0x4d0>
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	9d00      	ldr	r5, [sp, #0]
 800b07a:	ea6f 0a03 	mvn.w	sl, r3
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	4631      	mov	r1, r6
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fba7 	bl	800b7d8 <_Bfree>
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	f43f aeb4 	beq.w	800adf8 <_dtoa_r+0x6d8>
 800b090:	f1b8 0f00 	cmp.w	r8, #0
 800b094:	d005      	beq.n	800b0a2 <_dtoa_r+0x982>
 800b096:	45b8      	cmp	r8, r7
 800b098:	d003      	beq.n	800b0a2 <_dtoa_r+0x982>
 800b09a:	4641      	mov	r1, r8
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fb9b 	bl	800b7d8 <_Bfree>
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fb97 	bl	800b7d8 <_Bfree>
 800b0aa:	e6a5      	b.n	800adf8 <_dtoa_r+0x6d8>
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	4637      	mov	r7, r6
 800b0b0:	e7e1      	b.n	800b076 <_dtoa_r+0x956>
 800b0b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0b8:	4637      	mov	r7, r6
 800b0ba:	e599      	b.n	800abf0 <_dtoa_r+0x4d0>
 800b0bc:	9b08      	ldr	r3, [sp, #32]
 800b0be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 80fd 	beq.w	800b2c2 <_dtoa_r+0xba2>
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	dd05      	ble.n	800b0d8 <_dtoa_r+0x9b8>
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fd53 	bl	800bb7c <__lshift>
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	9b06      	ldr	r3, [sp, #24]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d05c      	beq.n	800b198 <_dtoa_r+0xa78>
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fb39 	bl	800b758 <_Balloc>
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	b928      	cbnz	r0, 800b0f6 <_dtoa_r+0x9d6>
 800b0ea:	4b80      	ldr	r3, [pc, #512]	; (800b2ec <_dtoa_r+0xbcc>)
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0f2:	f7ff bb2e 	b.w	800a752 <_dtoa_r+0x32>
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	3202      	adds	r2, #2
 800b0fa:	0092      	lsls	r2, r2, #2
 800b0fc:	f107 010c 	add.w	r1, r7, #12
 800b100:	300c      	adds	r0, #12
 800b102:	f7fe fbe1 	bl	80098c8 <memcpy>
 800b106:	2201      	movs	r2, #1
 800b108:	4629      	mov	r1, r5
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fd36 	bl	800bb7c <__lshift>
 800b110:	9b00      	ldr	r3, [sp, #0]
 800b112:	3301      	adds	r3, #1
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	444b      	add	r3, r9
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	46b8      	mov	r8, r7
 800b124:	9306      	str	r3, [sp, #24]
 800b126:	4607      	mov	r7, r0
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	4631      	mov	r1, r6
 800b12c:	3b01      	subs	r3, #1
 800b12e:	4658      	mov	r0, fp
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	f7ff fa67 	bl	800a604 <quorem>
 800b136:	4603      	mov	r3, r0
 800b138:	3330      	adds	r3, #48	; 0x30
 800b13a:	9004      	str	r0, [sp, #16]
 800b13c:	4641      	mov	r1, r8
 800b13e:	4658      	mov	r0, fp
 800b140:	9308      	str	r3, [sp, #32]
 800b142:	f000 fd87 	bl	800bc54 <__mcmp>
 800b146:	463a      	mov	r2, r7
 800b148:	4681      	mov	r9, r0
 800b14a:	4631      	mov	r1, r6
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fd9d 	bl	800bc8c <__mdiff>
 800b152:	68c2      	ldr	r2, [r0, #12]
 800b154:	9b08      	ldr	r3, [sp, #32]
 800b156:	4605      	mov	r5, r0
 800b158:	bb02      	cbnz	r2, 800b19c <_dtoa_r+0xa7c>
 800b15a:	4601      	mov	r1, r0
 800b15c:	4658      	mov	r0, fp
 800b15e:	f000 fd79 	bl	800bc54 <__mcmp>
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	4602      	mov	r2, r0
 800b166:	4629      	mov	r1, r5
 800b168:	4620      	mov	r0, r4
 800b16a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b16e:	f000 fb33 	bl	800b7d8 <_Bfree>
 800b172:	9b05      	ldr	r3, [sp, #20]
 800b174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b176:	9d01      	ldr	r5, [sp, #4]
 800b178:	ea43 0102 	orr.w	r1, r3, r2
 800b17c:	9b06      	ldr	r3, [sp, #24]
 800b17e:	430b      	orrs	r3, r1
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	d10d      	bne.n	800b1a0 <_dtoa_r+0xa80>
 800b184:	2b39      	cmp	r3, #57	; 0x39
 800b186:	d029      	beq.n	800b1dc <_dtoa_r+0xabc>
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	dd01      	ble.n	800b192 <_dtoa_r+0xa72>
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	3331      	adds	r3, #49	; 0x31
 800b192:	9a02      	ldr	r2, [sp, #8]
 800b194:	7013      	strb	r3, [r2, #0]
 800b196:	e774      	b.n	800b082 <_dtoa_r+0x962>
 800b198:	4638      	mov	r0, r7
 800b19a:	e7b9      	b.n	800b110 <_dtoa_r+0x9f0>
 800b19c:	2201      	movs	r2, #1
 800b19e:	e7e2      	b.n	800b166 <_dtoa_r+0xa46>
 800b1a0:	f1b9 0f00 	cmp.w	r9, #0
 800b1a4:	db06      	blt.n	800b1b4 <_dtoa_r+0xa94>
 800b1a6:	9905      	ldr	r1, [sp, #20]
 800b1a8:	ea41 0909 	orr.w	r9, r1, r9
 800b1ac:	9906      	ldr	r1, [sp, #24]
 800b1ae:	ea59 0101 	orrs.w	r1, r9, r1
 800b1b2:	d120      	bne.n	800b1f6 <_dtoa_r+0xad6>
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	ddec      	ble.n	800b192 <_dtoa_r+0xa72>
 800b1b8:	4659      	mov	r1, fp
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4620      	mov	r0, r4
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	f000 fcdc 	bl	800bb7c <__lshift>
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4683      	mov	fp, r0
 800b1c8:	f000 fd44 	bl	800bc54 <__mcmp>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	dc02      	bgt.n	800b1d8 <_dtoa_r+0xab8>
 800b1d2:	d1de      	bne.n	800b192 <_dtoa_r+0xa72>
 800b1d4:	07da      	lsls	r2, r3, #31
 800b1d6:	d5dc      	bpl.n	800b192 <_dtoa_r+0xa72>
 800b1d8:	2b39      	cmp	r3, #57	; 0x39
 800b1da:	d1d8      	bne.n	800b18e <_dtoa_r+0xa6e>
 800b1dc:	9a02      	ldr	r2, [sp, #8]
 800b1de:	2339      	movs	r3, #57	; 0x39
 800b1e0:	7013      	strb	r3, [r2, #0]
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	461d      	mov	r5, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1ec:	2a39      	cmp	r2, #57	; 0x39
 800b1ee:	d050      	beq.n	800b292 <_dtoa_r+0xb72>
 800b1f0:	3201      	adds	r2, #1
 800b1f2:	701a      	strb	r2, [r3, #0]
 800b1f4:	e745      	b.n	800b082 <_dtoa_r+0x962>
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	dd03      	ble.n	800b202 <_dtoa_r+0xae2>
 800b1fa:	2b39      	cmp	r3, #57	; 0x39
 800b1fc:	d0ee      	beq.n	800b1dc <_dtoa_r+0xabc>
 800b1fe:	3301      	adds	r3, #1
 800b200:	e7c7      	b.n	800b192 <_dtoa_r+0xa72>
 800b202:	9a01      	ldr	r2, [sp, #4]
 800b204:	9907      	ldr	r1, [sp, #28]
 800b206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b20a:	428a      	cmp	r2, r1
 800b20c:	d02a      	beq.n	800b264 <_dtoa_r+0xb44>
 800b20e:	4659      	mov	r1, fp
 800b210:	2300      	movs	r3, #0
 800b212:	220a      	movs	r2, #10
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fb01 	bl	800b81c <__multadd>
 800b21a:	45b8      	cmp	r8, r7
 800b21c:	4683      	mov	fp, r0
 800b21e:	f04f 0300 	mov.w	r3, #0
 800b222:	f04f 020a 	mov.w	r2, #10
 800b226:	4641      	mov	r1, r8
 800b228:	4620      	mov	r0, r4
 800b22a:	d107      	bne.n	800b23c <_dtoa_r+0xb1c>
 800b22c:	f000 faf6 	bl	800b81c <__multadd>
 800b230:	4680      	mov	r8, r0
 800b232:	4607      	mov	r7, r0
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	3301      	adds	r3, #1
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	e775      	b.n	800b128 <_dtoa_r+0xa08>
 800b23c:	f000 faee 	bl	800b81c <__multadd>
 800b240:	4639      	mov	r1, r7
 800b242:	4680      	mov	r8, r0
 800b244:	2300      	movs	r3, #0
 800b246:	220a      	movs	r2, #10
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fae7 	bl	800b81c <__multadd>
 800b24e:	4607      	mov	r7, r0
 800b250:	e7f0      	b.n	800b234 <_dtoa_r+0xb14>
 800b252:	f1b9 0f00 	cmp.w	r9, #0
 800b256:	9a00      	ldr	r2, [sp, #0]
 800b258:	bfcc      	ite	gt
 800b25a:	464d      	movgt	r5, r9
 800b25c:	2501      	movle	r5, #1
 800b25e:	4415      	add	r5, r2
 800b260:	f04f 0800 	mov.w	r8, #0
 800b264:	4659      	mov	r1, fp
 800b266:	2201      	movs	r2, #1
 800b268:	4620      	mov	r0, r4
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	f000 fc86 	bl	800bb7c <__lshift>
 800b270:	4631      	mov	r1, r6
 800b272:	4683      	mov	fp, r0
 800b274:	f000 fcee 	bl	800bc54 <__mcmp>
 800b278:	2800      	cmp	r0, #0
 800b27a:	dcb2      	bgt.n	800b1e2 <_dtoa_r+0xac2>
 800b27c:	d102      	bne.n	800b284 <_dtoa_r+0xb64>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	07db      	lsls	r3, r3, #31
 800b282:	d4ae      	bmi.n	800b1e2 <_dtoa_r+0xac2>
 800b284:	462b      	mov	r3, r5
 800b286:	461d      	mov	r5, r3
 800b288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b28c:	2a30      	cmp	r2, #48	; 0x30
 800b28e:	d0fa      	beq.n	800b286 <_dtoa_r+0xb66>
 800b290:	e6f7      	b.n	800b082 <_dtoa_r+0x962>
 800b292:	9a00      	ldr	r2, [sp, #0]
 800b294:	429a      	cmp	r2, r3
 800b296:	d1a5      	bne.n	800b1e4 <_dtoa_r+0xac4>
 800b298:	f10a 0a01 	add.w	sl, sl, #1
 800b29c:	2331      	movs	r3, #49	; 0x31
 800b29e:	e779      	b.n	800b194 <_dtoa_r+0xa74>
 800b2a0:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <_dtoa_r+0xbd0>)
 800b2a2:	f7ff baaf 	b.w	800a804 <_dtoa_r+0xe4>
 800b2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f47f aa86 	bne.w	800a7ba <_dtoa_r+0x9a>
 800b2ae:	4b11      	ldr	r3, [pc, #68]	; (800b2f4 <_dtoa_r+0xbd4>)
 800b2b0:	f7ff baa8 	b.w	800a804 <_dtoa_r+0xe4>
 800b2b4:	f1b9 0f00 	cmp.w	r9, #0
 800b2b8:	dc03      	bgt.n	800b2c2 <_dtoa_r+0xba2>
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	f73f aec9 	bgt.w	800b054 <_dtoa_r+0x934>
 800b2c2:	9d00      	ldr	r5, [sp, #0]
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4658      	mov	r0, fp
 800b2c8:	f7ff f99c 	bl	800a604 <quorem>
 800b2cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2d4:	9a00      	ldr	r2, [sp, #0]
 800b2d6:	1aaa      	subs	r2, r5, r2
 800b2d8:	4591      	cmp	r9, r2
 800b2da:	ddba      	ble.n	800b252 <_dtoa_r+0xb32>
 800b2dc:	4659      	mov	r1, fp
 800b2de:	2300      	movs	r3, #0
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 fa9a 	bl	800b81c <__multadd>
 800b2e8:	4683      	mov	fp, r0
 800b2ea:	e7eb      	b.n	800b2c4 <_dtoa_r+0xba4>
 800b2ec:	0800d347 	.word	0x0800d347
 800b2f0:	0800d2a0 	.word	0x0800d2a0
 800b2f4:	0800d2c4 	.word	0x0800d2c4

0800b2f8 <__sflush_r>:
 800b2f8:	898a      	ldrh	r2, [r1, #12]
 800b2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	4605      	mov	r5, r0
 800b300:	0710      	lsls	r0, r2, #28
 800b302:	460c      	mov	r4, r1
 800b304:	d458      	bmi.n	800b3b8 <__sflush_r+0xc0>
 800b306:	684b      	ldr	r3, [r1, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dc05      	bgt.n	800b318 <__sflush_r+0x20>
 800b30c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dc02      	bgt.n	800b318 <__sflush_r+0x20>
 800b312:	2000      	movs	r0, #0
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	d0f9      	beq.n	800b312 <__sflush_r+0x1a>
 800b31e:	2300      	movs	r3, #0
 800b320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b324:	682f      	ldr	r7, [r5, #0]
 800b326:	602b      	str	r3, [r5, #0]
 800b328:	d032      	beq.n	800b390 <__sflush_r+0x98>
 800b32a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b32c:	89a3      	ldrh	r3, [r4, #12]
 800b32e:	075a      	lsls	r2, r3, #29
 800b330:	d505      	bpl.n	800b33e <__sflush_r+0x46>
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	1ac0      	subs	r0, r0, r3
 800b336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b338:	b10b      	cbz	r3, 800b33e <__sflush_r+0x46>
 800b33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b33c:	1ac0      	subs	r0, r0, r3
 800b33e:	2300      	movs	r3, #0
 800b340:	4602      	mov	r2, r0
 800b342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b344:	6a21      	ldr	r1, [r4, #32]
 800b346:	4628      	mov	r0, r5
 800b348:	47b0      	blx	r6
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	d106      	bne.n	800b35e <__sflush_r+0x66>
 800b350:	6829      	ldr	r1, [r5, #0]
 800b352:	291d      	cmp	r1, #29
 800b354:	d82c      	bhi.n	800b3b0 <__sflush_r+0xb8>
 800b356:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <__sflush_r+0x108>)
 800b358:	40ca      	lsrs	r2, r1
 800b35a:	07d6      	lsls	r6, r2, #31
 800b35c:	d528      	bpl.n	800b3b0 <__sflush_r+0xb8>
 800b35e:	2200      	movs	r2, #0
 800b360:	6062      	str	r2, [r4, #4]
 800b362:	04d9      	lsls	r1, r3, #19
 800b364:	6922      	ldr	r2, [r4, #16]
 800b366:	6022      	str	r2, [r4, #0]
 800b368:	d504      	bpl.n	800b374 <__sflush_r+0x7c>
 800b36a:	1c42      	adds	r2, r0, #1
 800b36c:	d101      	bne.n	800b372 <__sflush_r+0x7a>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	b903      	cbnz	r3, 800b374 <__sflush_r+0x7c>
 800b372:	6560      	str	r0, [r4, #84]	; 0x54
 800b374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b376:	602f      	str	r7, [r5, #0]
 800b378:	2900      	cmp	r1, #0
 800b37a:	d0ca      	beq.n	800b312 <__sflush_r+0x1a>
 800b37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b380:	4299      	cmp	r1, r3
 800b382:	d002      	beq.n	800b38a <__sflush_r+0x92>
 800b384:	4628      	mov	r0, r5
 800b386:	f7fe fab5 	bl	80098f4 <_free_r>
 800b38a:	2000      	movs	r0, #0
 800b38c:	6360      	str	r0, [r4, #52]	; 0x34
 800b38e:	e7c1      	b.n	800b314 <__sflush_r+0x1c>
 800b390:	6a21      	ldr	r1, [r4, #32]
 800b392:	2301      	movs	r3, #1
 800b394:	4628      	mov	r0, r5
 800b396:	47b0      	blx	r6
 800b398:	1c41      	adds	r1, r0, #1
 800b39a:	d1c7      	bne.n	800b32c <__sflush_r+0x34>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0c4      	beq.n	800b32c <__sflush_r+0x34>
 800b3a2:	2b1d      	cmp	r3, #29
 800b3a4:	d001      	beq.n	800b3aa <__sflush_r+0xb2>
 800b3a6:	2b16      	cmp	r3, #22
 800b3a8:	d101      	bne.n	800b3ae <__sflush_r+0xb6>
 800b3aa:	602f      	str	r7, [r5, #0]
 800b3ac:	e7b1      	b.n	800b312 <__sflush_r+0x1a>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	e7ad      	b.n	800b314 <__sflush_r+0x1c>
 800b3b8:	690f      	ldr	r7, [r1, #16]
 800b3ba:	2f00      	cmp	r7, #0
 800b3bc:	d0a9      	beq.n	800b312 <__sflush_r+0x1a>
 800b3be:	0793      	lsls	r3, r2, #30
 800b3c0:	680e      	ldr	r6, [r1, #0]
 800b3c2:	bf08      	it	eq
 800b3c4:	694b      	ldreq	r3, [r1, #20]
 800b3c6:	600f      	str	r7, [r1, #0]
 800b3c8:	bf18      	it	ne
 800b3ca:	2300      	movne	r3, #0
 800b3cc:	eba6 0807 	sub.w	r8, r6, r7
 800b3d0:	608b      	str	r3, [r1, #8]
 800b3d2:	f1b8 0f00 	cmp.w	r8, #0
 800b3d6:	dd9c      	ble.n	800b312 <__sflush_r+0x1a>
 800b3d8:	6a21      	ldr	r1, [r4, #32]
 800b3da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3dc:	4643      	mov	r3, r8
 800b3de:	463a      	mov	r2, r7
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b0      	blx	r6
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	dc06      	bgt.n	800b3f6 <__sflush_r+0xfe>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	e78e      	b.n	800b314 <__sflush_r+0x1c>
 800b3f6:	4407      	add	r7, r0
 800b3f8:	eba8 0800 	sub.w	r8, r8, r0
 800b3fc:	e7e9      	b.n	800b3d2 <__sflush_r+0xda>
 800b3fe:	bf00      	nop
 800b400:	20400001 	.word	0x20400001

0800b404 <_fflush_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	690b      	ldr	r3, [r1, #16]
 800b408:	4605      	mov	r5, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	b913      	cbnz	r3, 800b414 <_fflush_r+0x10>
 800b40e:	2500      	movs	r5, #0
 800b410:	4628      	mov	r0, r5
 800b412:	bd38      	pop	{r3, r4, r5, pc}
 800b414:	b118      	cbz	r0, 800b41e <_fflush_r+0x1a>
 800b416:	6983      	ldr	r3, [r0, #24]
 800b418:	b90b      	cbnz	r3, 800b41e <_fflush_r+0x1a>
 800b41a:	f000 f887 	bl	800b52c <__sinit>
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <_fflush_r+0x6c>)
 800b420:	429c      	cmp	r4, r3
 800b422:	d11b      	bne.n	800b45c <_fflush_r+0x58>
 800b424:	686c      	ldr	r4, [r5, #4]
 800b426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0ef      	beq.n	800b40e <_fflush_r+0xa>
 800b42e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b430:	07d0      	lsls	r0, r2, #31
 800b432:	d404      	bmi.n	800b43e <_fflush_r+0x3a>
 800b434:	0599      	lsls	r1, r3, #22
 800b436:	d402      	bmi.n	800b43e <_fflush_r+0x3a>
 800b438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43a:	f000 f91a 	bl	800b672 <__retarget_lock_acquire_recursive>
 800b43e:	4628      	mov	r0, r5
 800b440:	4621      	mov	r1, r4
 800b442:	f7ff ff59 	bl	800b2f8 <__sflush_r>
 800b446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b448:	07da      	lsls	r2, r3, #31
 800b44a:	4605      	mov	r5, r0
 800b44c:	d4e0      	bmi.n	800b410 <_fflush_r+0xc>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	059b      	lsls	r3, r3, #22
 800b452:	d4dd      	bmi.n	800b410 <_fflush_r+0xc>
 800b454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b456:	f000 f90d 	bl	800b674 <__retarget_lock_release_recursive>
 800b45a:	e7d9      	b.n	800b410 <_fflush_r+0xc>
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <_fflush_r+0x70>)
 800b45e:	429c      	cmp	r4, r3
 800b460:	d101      	bne.n	800b466 <_fflush_r+0x62>
 800b462:	68ac      	ldr	r4, [r5, #8]
 800b464:	e7df      	b.n	800b426 <_fflush_r+0x22>
 800b466:	4b04      	ldr	r3, [pc, #16]	; (800b478 <_fflush_r+0x74>)
 800b468:	429c      	cmp	r4, r3
 800b46a:	bf08      	it	eq
 800b46c:	68ec      	ldreq	r4, [r5, #12]
 800b46e:	e7da      	b.n	800b426 <_fflush_r+0x22>
 800b470:	0800d378 	.word	0x0800d378
 800b474:	0800d398 	.word	0x0800d398
 800b478:	0800d358 	.word	0x0800d358

0800b47c <std>:
 800b47c:	2300      	movs	r3, #0
 800b47e:	b510      	push	{r4, lr}
 800b480:	4604      	mov	r4, r0
 800b482:	e9c0 3300 	strd	r3, r3, [r0]
 800b486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b48a:	6083      	str	r3, [r0, #8]
 800b48c:	8181      	strh	r1, [r0, #12]
 800b48e:	6643      	str	r3, [r0, #100]	; 0x64
 800b490:	81c2      	strh	r2, [r0, #14]
 800b492:	6183      	str	r3, [r0, #24]
 800b494:	4619      	mov	r1, r3
 800b496:	2208      	movs	r2, #8
 800b498:	305c      	adds	r0, #92	; 0x5c
 800b49a:	f7fe fa23 	bl	80098e4 <memset>
 800b49e:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <std+0x38>)
 800b4a0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4a2:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <std+0x3c>)
 800b4a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <std+0x40>)
 800b4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <std+0x44>)
 800b4ac:	6224      	str	r4, [r4, #32]
 800b4ae:	6323      	str	r3, [r4, #48]	; 0x30
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0800c1b5 	.word	0x0800c1b5
 800b4b8:	0800c1d7 	.word	0x0800c1d7
 800b4bc:	0800c20f 	.word	0x0800c20f
 800b4c0:	0800c233 	.word	0x0800c233

0800b4c4 <_cleanup_r>:
 800b4c4:	4901      	ldr	r1, [pc, #4]	; (800b4cc <_cleanup_r+0x8>)
 800b4c6:	f000 b8af 	b.w	800b628 <_fwalk_reent>
 800b4ca:	bf00      	nop
 800b4cc:	0800b405 	.word	0x0800b405

0800b4d0 <__sfmoreglue>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	1e4a      	subs	r2, r1, #1
 800b4d4:	2568      	movs	r5, #104	; 0x68
 800b4d6:	4355      	muls	r5, r2
 800b4d8:	460e      	mov	r6, r1
 800b4da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4de:	f7fe fa59 	bl	8009994 <_malloc_r>
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	b140      	cbz	r0, 800b4f8 <__sfmoreglue+0x28>
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	e9c0 1600 	strd	r1, r6, [r0]
 800b4ec:	300c      	adds	r0, #12
 800b4ee:	60a0      	str	r0, [r4, #8]
 800b4f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4f4:	f7fe f9f6 	bl	80098e4 <memset>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}

0800b4fc <__sfp_lock_acquire>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	; (800b504 <__sfp_lock_acquire+0x8>)
 800b4fe:	f000 b8b8 	b.w	800b672 <__retarget_lock_acquire_recursive>
 800b502:	bf00      	nop
 800b504:	2000099c 	.word	0x2000099c

0800b508 <__sfp_lock_release>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__sfp_lock_release+0x8>)
 800b50a:	f000 b8b3 	b.w	800b674 <__retarget_lock_release_recursive>
 800b50e:	bf00      	nop
 800b510:	2000099c 	.word	0x2000099c

0800b514 <__sinit_lock_acquire>:
 800b514:	4801      	ldr	r0, [pc, #4]	; (800b51c <__sinit_lock_acquire+0x8>)
 800b516:	f000 b8ac 	b.w	800b672 <__retarget_lock_acquire_recursive>
 800b51a:	bf00      	nop
 800b51c:	20000997 	.word	0x20000997

0800b520 <__sinit_lock_release>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sinit_lock_release+0x8>)
 800b522:	f000 b8a7 	b.w	800b674 <__retarget_lock_release_recursive>
 800b526:	bf00      	nop
 800b528:	20000997 	.word	0x20000997

0800b52c <__sinit>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	4604      	mov	r4, r0
 800b530:	f7ff fff0 	bl	800b514 <__sinit_lock_acquire>
 800b534:	69a3      	ldr	r3, [r4, #24]
 800b536:	b11b      	cbz	r3, 800b540 <__sinit+0x14>
 800b538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53c:	f7ff bff0 	b.w	800b520 <__sinit_lock_release>
 800b540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b544:	6523      	str	r3, [r4, #80]	; 0x50
 800b546:	4b13      	ldr	r3, [pc, #76]	; (800b594 <__sinit+0x68>)
 800b548:	4a13      	ldr	r2, [pc, #76]	; (800b598 <__sinit+0x6c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b54e:	42a3      	cmp	r3, r4
 800b550:	bf04      	itt	eq
 800b552:	2301      	moveq	r3, #1
 800b554:	61a3      	streq	r3, [r4, #24]
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f820 	bl	800b59c <__sfp>
 800b55c:	6060      	str	r0, [r4, #4]
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f81c 	bl	800b59c <__sfp>
 800b564:	60a0      	str	r0, [r4, #8]
 800b566:	4620      	mov	r0, r4
 800b568:	f000 f818 	bl	800b59c <__sfp>
 800b56c:	2200      	movs	r2, #0
 800b56e:	60e0      	str	r0, [r4, #12]
 800b570:	2104      	movs	r1, #4
 800b572:	6860      	ldr	r0, [r4, #4]
 800b574:	f7ff ff82 	bl	800b47c <std>
 800b578:	68a0      	ldr	r0, [r4, #8]
 800b57a:	2201      	movs	r2, #1
 800b57c:	2109      	movs	r1, #9
 800b57e:	f7ff ff7d 	bl	800b47c <std>
 800b582:	68e0      	ldr	r0, [r4, #12]
 800b584:	2202      	movs	r2, #2
 800b586:	2112      	movs	r1, #18
 800b588:	f7ff ff78 	bl	800b47c <std>
 800b58c:	2301      	movs	r3, #1
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	e7d2      	b.n	800b538 <__sinit+0xc>
 800b592:	bf00      	nop
 800b594:	0800d28c 	.word	0x0800d28c
 800b598:	0800b4c5 	.word	0x0800b4c5

0800b59c <__sfp>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f7ff ffac 	bl	800b4fc <__sfp_lock_acquire>
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <__sfp+0x84>)
 800b5a6:	681e      	ldr	r6, [r3, #0]
 800b5a8:	69b3      	ldr	r3, [r6, #24]
 800b5aa:	b913      	cbnz	r3, 800b5b2 <__sfp+0x16>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff ffbd 	bl	800b52c <__sinit>
 800b5b2:	3648      	adds	r6, #72	; 0x48
 800b5b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	d503      	bpl.n	800b5c4 <__sfp+0x28>
 800b5bc:	6833      	ldr	r3, [r6, #0]
 800b5be:	b30b      	cbz	r3, 800b604 <__sfp+0x68>
 800b5c0:	6836      	ldr	r6, [r6, #0]
 800b5c2:	e7f7      	b.n	800b5b4 <__sfp+0x18>
 800b5c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5c8:	b9d5      	cbnz	r5, 800b600 <__sfp+0x64>
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <__sfp+0x88>)
 800b5cc:	60e3      	str	r3, [r4, #12]
 800b5ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5d2:	6665      	str	r5, [r4, #100]	; 0x64
 800b5d4:	f000 f84c 	bl	800b670 <__retarget_lock_init_recursive>
 800b5d8:	f7ff ff96 	bl	800b508 <__sfp_lock_release>
 800b5dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5e4:	6025      	str	r5, [r4, #0]
 800b5e6:	61a5      	str	r5, [r4, #24]
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5f0:	f7fe f978 	bl	80098e4 <memset>
 800b5f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b600:	3468      	adds	r4, #104	; 0x68
 800b602:	e7d9      	b.n	800b5b8 <__sfp+0x1c>
 800b604:	2104      	movs	r1, #4
 800b606:	4638      	mov	r0, r7
 800b608:	f7ff ff62 	bl	800b4d0 <__sfmoreglue>
 800b60c:	4604      	mov	r4, r0
 800b60e:	6030      	str	r0, [r6, #0]
 800b610:	2800      	cmp	r0, #0
 800b612:	d1d5      	bne.n	800b5c0 <__sfp+0x24>
 800b614:	f7ff ff78 	bl	800b508 <__sfp_lock_release>
 800b618:	230c      	movs	r3, #12
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	e7ee      	b.n	800b5fc <__sfp+0x60>
 800b61e:	bf00      	nop
 800b620:	0800d28c 	.word	0x0800d28c
 800b624:	ffff0001 	.word	0xffff0001

0800b628 <_fwalk_reent>:
 800b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b62c:	4606      	mov	r6, r0
 800b62e:	4688      	mov	r8, r1
 800b630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b634:	2700      	movs	r7, #0
 800b636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b63a:	f1b9 0901 	subs.w	r9, r9, #1
 800b63e:	d505      	bpl.n	800b64c <_fwalk_reent+0x24>
 800b640:	6824      	ldr	r4, [r4, #0]
 800b642:	2c00      	cmp	r4, #0
 800b644:	d1f7      	bne.n	800b636 <_fwalk_reent+0xe>
 800b646:	4638      	mov	r0, r7
 800b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64c:	89ab      	ldrh	r3, [r5, #12]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d907      	bls.n	800b662 <_fwalk_reent+0x3a>
 800b652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b656:	3301      	adds	r3, #1
 800b658:	d003      	beq.n	800b662 <_fwalk_reent+0x3a>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4630      	mov	r0, r6
 800b65e:	47c0      	blx	r8
 800b660:	4307      	orrs	r7, r0
 800b662:	3568      	adds	r5, #104	; 0x68
 800b664:	e7e9      	b.n	800b63a <_fwalk_reent+0x12>
	...

0800b668 <_localeconv_r>:
 800b668:	4800      	ldr	r0, [pc, #0]	; (800b66c <_localeconv_r+0x4>)
 800b66a:	4770      	bx	lr
 800b66c:	20000164 	.word	0x20000164

0800b670 <__retarget_lock_init_recursive>:
 800b670:	4770      	bx	lr

0800b672 <__retarget_lock_acquire_recursive>:
 800b672:	4770      	bx	lr

0800b674 <__retarget_lock_release_recursive>:
 800b674:	4770      	bx	lr

0800b676 <__swhatbuf_r>:
 800b676:	b570      	push	{r4, r5, r6, lr}
 800b678:	460e      	mov	r6, r1
 800b67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67e:	2900      	cmp	r1, #0
 800b680:	b096      	sub	sp, #88	; 0x58
 800b682:	4614      	mov	r4, r2
 800b684:	461d      	mov	r5, r3
 800b686:	da07      	bge.n	800b698 <__swhatbuf_r+0x22>
 800b688:	2300      	movs	r3, #0
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	89b3      	ldrh	r3, [r6, #12]
 800b68e:	061a      	lsls	r2, r3, #24
 800b690:	d410      	bmi.n	800b6b4 <__swhatbuf_r+0x3e>
 800b692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b696:	e00e      	b.n	800b6b6 <__swhatbuf_r+0x40>
 800b698:	466a      	mov	r2, sp
 800b69a:	f000 fe21 	bl	800c2e0 <_fstat_r>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	dbf2      	blt.n	800b688 <__swhatbuf_r+0x12>
 800b6a2:	9a01      	ldr	r2, [sp, #4]
 800b6a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6ac:	425a      	negs	r2, r3
 800b6ae:	415a      	adcs	r2, r3
 800b6b0:	602a      	str	r2, [r5, #0]
 800b6b2:	e7ee      	b.n	800b692 <__swhatbuf_r+0x1c>
 800b6b4:	2340      	movs	r3, #64	; 0x40
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	b016      	add	sp, #88	; 0x58
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6c0 <__smakebuf_r>:
 800b6c0:	898b      	ldrh	r3, [r1, #12]
 800b6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6c4:	079d      	lsls	r5, r3, #30
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	d507      	bpl.n	800b6dc <__smakebuf_r+0x1c>
 800b6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	6123      	str	r3, [r4, #16]
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	6163      	str	r3, [r4, #20]
 800b6d8:	b002      	add	sp, #8
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	ab01      	add	r3, sp, #4
 800b6de:	466a      	mov	r2, sp
 800b6e0:	f7ff ffc9 	bl	800b676 <__swhatbuf_r>
 800b6e4:	9900      	ldr	r1, [sp, #0]
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7fe f953 	bl	8009994 <_malloc_r>
 800b6ee:	b948      	cbnz	r0, 800b704 <__smakebuf_r+0x44>
 800b6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d4ef      	bmi.n	800b6d8 <__smakebuf_r+0x18>
 800b6f8:	f023 0303 	bic.w	r3, r3, #3
 800b6fc:	f043 0302 	orr.w	r3, r3, #2
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	e7e3      	b.n	800b6cc <__smakebuf_r+0xc>
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <__smakebuf_r+0x7c>)
 800b706:	62b3      	str	r3, [r6, #40]	; 0x28
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	6020      	str	r0, [r4, #0]
 800b70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	9b00      	ldr	r3, [sp, #0]
 800b714:	6163      	str	r3, [r4, #20]
 800b716:	9b01      	ldr	r3, [sp, #4]
 800b718:	6120      	str	r0, [r4, #16]
 800b71a:	b15b      	cbz	r3, 800b734 <__smakebuf_r+0x74>
 800b71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b720:	4630      	mov	r0, r6
 800b722:	f000 fdef 	bl	800c304 <_isatty_r>
 800b726:	b128      	cbz	r0, 800b734 <__smakebuf_r+0x74>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f023 0303 	bic.w	r3, r3, #3
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	89a0      	ldrh	r0, [r4, #12]
 800b736:	4305      	orrs	r5, r0
 800b738:	81a5      	strh	r5, [r4, #12]
 800b73a:	e7cd      	b.n	800b6d8 <__smakebuf_r+0x18>
 800b73c:	0800b4c5 	.word	0x0800b4c5

0800b740 <__malloc_lock>:
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <__malloc_lock+0x8>)
 800b742:	f7ff bf96 	b.w	800b672 <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	20000998 	.word	0x20000998

0800b74c <__malloc_unlock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	; (800b754 <__malloc_unlock+0x8>)
 800b74e:	f7ff bf91 	b.w	800b674 <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	20000998 	.word	0x20000998

0800b758 <_Balloc>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b75c:	4604      	mov	r4, r0
 800b75e:	460d      	mov	r5, r1
 800b760:	b976      	cbnz	r6, 800b780 <_Balloc+0x28>
 800b762:	2010      	movs	r0, #16
 800b764:	f7fe f892 	bl	800988c <malloc>
 800b768:	4602      	mov	r2, r0
 800b76a:	6260      	str	r0, [r4, #36]	; 0x24
 800b76c:	b920      	cbnz	r0, 800b778 <_Balloc+0x20>
 800b76e:	4b18      	ldr	r3, [pc, #96]	; (800b7d0 <_Balloc+0x78>)
 800b770:	4818      	ldr	r0, [pc, #96]	; (800b7d4 <_Balloc+0x7c>)
 800b772:	2166      	movs	r1, #102	; 0x66
 800b774:	f000 fd74 	bl	800c260 <__assert_func>
 800b778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b77c:	6006      	str	r6, [r0, #0]
 800b77e:	60c6      	str	r6, [r0, #12]
 800b780:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b782:	68f3      	ldr	r3, [r6, #12]
 800b784:	b183      	cbz	r3, 800b7a8 <_Balloc+0x50>
 800b786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78e:	b9b8      	cbnz	r0, 800b7c0 <_Balloc+0x68>
 800b790:	2101      	movs	r1, #1
 800b792:	fa01 f605 	lsl.w	r6, r1, r5
 800b796:	1d72      	adds	r2, r6, #5
 800b798:	0092      	lsls	r2, r2, #2
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fb5a 	bl	800be54 <_calloc_r>
 800b7a0:	b160      	cbz	r0, 800b7bc <_Balloc+0x64>
 800b7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a6:	e00e      	b.n	800b7c6 <_Balloc+0x6e>
 800b7a8:	2221      	movs	r2, #33	; 0x21
 800b7aa:	2104      	movs	r1, #4
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fb51 	bl	800be54 <_calloc_r>
 800b7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b4:	60f0      	str	r0, [r6, #12]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e4      	bne.n	800b786 <_Balloc+0x2e>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	6802      	ldr	r2, [r0, #0]
 800b7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7cc:	e7f7      	b.n	800b7be <_Balloc+0x66>
 800b7ce:	bf00      	nop
 800b7d0:	0800d2d1 	.word	0x0800d2d1
 800b7d4:	0800d3b8 	.word	0x0800d3b8

0800b7d8 <_Bfree>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	b976      	cbnz	r6, 800b800 <_Bfree+0x28>
 800b7e2:	2010      	movs	r0, #16
 800b7e4:	f7fe f852 	bl	800988c <malloc>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b7ec:	b920      	cbnz	r0, 800b7f8 <_Bfree+0x20>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <_Bfree+0x3c>)
 800b7f0:	4809      	ldr	r0, [pc, #36]	; (800b818 <_Bfree+0x40>)
 800b7f2:	218a      	movs	r1, #138	; 0x8a
 800b7f4:	f000 fd34 	bl	800c260 <__assert_func>
 800b7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7fc:	6006      	str	r6, [r0, #0]
 800b7fe:	60c6      	str	r6, [r0, #12]
 800b800:	b13c      	cbz	r4, 800b812 <_Bfree+0x3a>
 800b802:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b804:	6862      	ldr	r2, [r4, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b80c:	6021      	str	r1, [r4, #0]
 800b80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	0800d2d1 	.word	0x0800d2d1
 800b818:	0800d3b8 	.word	0x0800d3b8

0800b81c <__multadd>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	690e      	ldr	r6, [r1, #16]
 800b822:	4607      	mov	r7, r0
 800b824:	4698      	mov	r8, r3
 800b826:	460c      	mov	r4, r1
 800b828:	f101 0014 	add.w	r0, r1, #20
 800b82c:	2300      	movs	r3, #0
 800b82e:	6805      	ldr	r5, [r0, #0]
 800b830:	b2a9      	uxth	r1, r5
 800b832:	fb02 8101 	mla	r1, r2, r1, r8
 800b836:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b83a:	0c2d      	lsrs	r5, r5, #16
 800b83c:	fb02 c505 	mla	r5, r2, r5, ip
 800b840:	b289      	uxth	r1, r1
 800b842:	3301      	adds	r3, #1
 800b844:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b848:	429e      	cmp	r6, r3
 800b84a:	f840 1b04 	str.w	r1, [r0], #4
 800b84e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b852:	dcec      	bgt.n	800b82e <__multadd+0x12>
 800b854:	f1b8 0f00 	cmp.w	r8, #0
 800b858:	d022      	beq.n	800b8a0 <__multadd+0x84>
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	42b3      	cmp	r3, r6
 800b85e:	dc19      	bgt.n	800b894 <__multadd+0x78>
 800b860:	6861      	ldr	r1, [r4, #4]
 800b862:	4638      	mov	r0, r7
 800b864:	3101      	adds	r1, #1
 800b866:	f7ff ff77 	bl	800b758 <_Balloc>
 800b86a:	4605      	mov	r5, r0
 800b86c:	b928      	cbnz	r0, 800b87a <__multadd+0x5e>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <__multadd+0x8c>)
 800b872:	480e      	ldr	r0, [pc, #56]	; (800b8ac <__multadd+0x90>)
 800b874:	21b5      	movs	r1, #181	; 0xb5
 800b876:	f000 fcf3 	bl	800c260 <__assert_func>
 800b87a:	6922      	ldr	r2, [r4, #16]
 800b87c:	3202      	adds	r2, #2
 800b87e:	f104 010c 	add.w	r1, r4, #12
 800b882:	0092      	lsls	r2, r2, #2
 800b884:	300c      	adds	r0, #12
 800b886:	f7fe f81f 	bl	80098c8 <memcpy>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff ffa3 	bl	800b7d8 <_Bfree>
 800b892:	462c      	mov	r4, r5
 800b894:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b898:	3601      	adds	r6, #1
 800b89a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b89e:	6126      	str	r6, [r4, #16]
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0800d347 	.word	0x0800d347
 800b8ac:	0800d3b8 	.word	0x0800d3b8

0800b8b0 <__hi0bits>:
 800b8b0:	0c03      	lsrs	r3, r0, #16
 800b8b2:	041b      	lsls	r3, r3, #16
 800b8b4:	b9d3      	cbnz	r3, 800b8ec <__hi0bits+0x3c>
 800b8b6:	0400      	lsls	r0, r0, #16
 800b8b8:	2310      	movs	r3, #16
 800b8ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8be:	bf04      	itt	eq
 800b8c0:	0200      	lsleq	r0, r0, #8
 800b8c2:	3308      	addeq	r3, #8
 800b8c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8c8:	bf04      	itt	eq
 800b8ca:	0100      	lsleq	r0, r0, #4
 800b8cc:	3304      	addeq	r3, #4
 800b8ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8d2:	bf04      	itt	eq
 800b8d4:	0080      	lsleq	r0, r0, #2
 800b8d6:	3302      	addeq	r3, #2
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	db05      	blt.n	800b8e8 <__hi0bits+0x38>
 800b8dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8e0:	f103 0301 	add.w	r3, r3, #1
 800b8e4:	bf08      	it	eq
 800b8e6:	2320      	moveq	r3, #32
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	4770      	bx	lr
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e7e4      	b.n	800b8ba <__hi0bits+0xa>

0800b8f0 <__lo0bits>:
 800b8f0:	6803      	ldr	r3, [r0, #0]
 800b8f2:	f013 0207 	ands.w	r2, r3, #7
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	d00b      	beq.n	800b912 <__lo0bits+0x22>
 800b8fa:	07da      	lsls	r2, r3, #31
 800b8fc:	d424      	bmi.n	800b948 <__lo0bits+0x58>
 800b8fe:	0798      	lsls	r0, r3, #30
 800b900:	bf49      	itett	mi
 800b902:	085b      	lsrmi	r3, r3, #1
 800b904:	089b      	lsrpl	r3, r3, #2
 800b906:	2001      	movmi	r0, #1
 800b908:	600b      	strmi	r3, [r1, #0]
 800b90a:	bf5c      	itt	pl
 800b90c:	600b      	strpl	r3, [r1, #0]
 800b90e:	2002      	movpl	r0, #2
 800b910:	4770      	bx	lr
 800b912:	b298      	uxth	r0, r3
 800b914:	b9b0      	cbnz	r0, 800b944 <__lo0bits+0x54>
 800b916:	0c1b      	lsrs	r3, r3, #16
 800b918:	2010      	movs	r0, #16
 800b91a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b91e:	bf04      	itt	eq
 800b920:	0a1b      	lsreq	r3, r3, #8
 800b922:	3008      	addeq	r0, #8
 800b924:	071a      	lsls	r2, r3, #28
 800b926:	bf04      	itt	eq
 800b928:	091b      	lsreq	r3, r3, #4
 800b92a:	3004      	addeq	r0, #4
 800b92c:	079a      	lsls	r2, r3, #30
 800b92e:	bf04      	itt	eq
 800b930:	089b      	lsreq	r3, r3, #2
 800b932:	3002      	addeq	r0, #2
 800b934:	07da      	lsls	r2, r3, #31
 800b936:	d403      	bmi.n	800b940 <__lo0bits+0x50>
 800b938:	085b      	lsrs	r3, r3, #1
 800b93a:	f100 0001 	add.w	r0, r0, #1
 800b93e:	d005      	beq.n	800b94c <__lo0bits+0x5c>
 800b940:	600b      	str	r3, [r1, #0]
 800b942:	4770      	bx	lr
 800b944:	4610      	mov	r0, r2
 800b946:	e7e8      	b.n	800b91a <__lo0bits+0x2a>
 800b948:	2000      	movs	r0, #0
 800b94a:	4770      	bx	lr
 800b94c:	2020      	movs	r0, #32
 800b94e:	4770      	bx	lr

0800b950 <__i2b>:
 800b950:	b510      	push	{r4, lr}
 800b952:	460c      	mov	r4, r1
 800b954:	2101      	movs	r1, #1
 800b956:	f7ff feff 	bl	800b758 <_Balloc>
 800b95a:	4602      	mov	r2, r0
 800b95c:	b928      	cbnz	r0, 800b96a <__i2b+0x1a>
 800b95e:	4b05      	ldr	r3, [pc, #20]	; (800b974 <__i2b+0x24>)
 800b960:	4805      	ldr	r0, [pc, #20]	; (800b978 <__i2b+0x28>)
 800b962:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b966:	f000 fc7b 	bl	800c260 <__assert_func>
 800b96a:	2301      	movs	r3, #1
 800b96c:	6144      	str	r4, [r0, #20]
 800b96e:	6103      	str	r3, [r0, #16]
 800b970:	bd10      	pop	{r4, pc}
 800b972:	bf00      	nop
 800b974:	0800d347 	.word	0x0800d347
 800b978:	0800d3b8 	.word	0x0800d3b8

0800b97c <__multiply>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	4614      	mov	r4, r2
 800b982:	690a      	ldr	r2, [r1, #16]
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	429a      	cmp	r2, r3
 800b988:	bfb8      	it	lt
 800b98a:	460b      	movlt	r3, r1
 800b98c:	460d      	mov	r5, r1
 800b98e:	bfbc      	itt	lt
 800b990:	4625      	movlt	r5, r4
 800b992:	461c      	movlt	r4, r3
 800b994:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b998:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b99c:	68ab      	ldr	r3, [r5, #8]
 800b99e:	6869      	ldr	r1, [r5, #4]
 800b9a0:	eb0a 0709 	add.w	r7, sl, r9
 800b9a4:	42bb      	cmp	r3, r7
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	bfb8      	it	lt
 800b9aa:	3101      	addlt	r1, #1
 800b9ac:	f7ff fed4 	bl	800b758 <_Balloc>
 800b9b0:	b930      	cbnz	r0, 800b9c0 <__multiply+0x44>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b42      	ldr	r3, [pc, #264]	; (800bac0 <__multiply+0x144>)
 800b9b6:	4843      	ldr	r0, [pc, #268]	; (800bac4 <__multiply+0x148>)
 800b9b8:	f240 115d 	movw	r1, #349	; 0x15d
 800b9bc:	f000 fc50 	bl	800c260 <__assert_func>
 800b9c0:	f100 0614 	add.w	r6, r0, #20
 800b9c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b9c8:	4633      	mov	r3, r6
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	4543      	cmp	r3, r8
 800b9ce:	d31e      	bcc.n	800ba0e <__multiply+0x92>
 800b9d0:	f105 0c14 	add.w	ip, r5, #20
 800b9d4:	f104 0314 	add.w	r3, r4, #20
 800b9d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b9dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	ebac 0205 	sub.w	r2, ip, r5
 800b9e6:	3a15      	subs	r2, #21
 800b9e8:	f022 0203 	bic.w	r2, r2, #3
 800b9ec:	3204      	adds	r2, #4
 800b9ee:	f105 0115 	add.w	r1, r5, #21
 800b9f2:	458c      	cmp	ip, r1
 800b9f4:	bf38      	it	cc
 800b9f6:	2204      	movcc	r2, #4
 800b9f8:	9201      	str	r2, [sp, #4]
 800b9fa:	9a02      	ldr	r2, [sp, #8]
 800b9fc:	9303      	str	r3, [sp, #12]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d808      	bhi.n	800ba14 <__multiply+0x98>
 800ba02:	2f00      	cmp	r7, #0
 800ba04:	dc55      	bgt.n	800bab2 <__multiply+0x136>
 800ba06:	6107      	str	r7, [r0, #16]
 800ba08:	b005      	add	sp, #20
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	f843 2b04 	str.w	r2, [r3], #4
 800ba12:	e7db      	b.n	800b9cc <__multiply+0x50>
 800ba14:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba18:	f1ba 0f00 	cmp.w	sl, #0
 800ba1c:	d020      	beq.n	800ba60 <__multiply+0xe4>
 800ba1e:	f105 0e14 	add.w	lr, r5, #20
 800ba22:	46b1      	mov	r9, r6
 800ba24:	2200      	movs	r2, #0
 800ba26:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba2a:	f8d9 b000 	ldr.w	fp, [r9]
 800ba2e:	b2a1      	uxth	r1, r4
 800ba30:	fa1f fb8b 	uxth.w	fp, fp
 800ba34:	fb0a b101 	mla	r1, sl, r1, fp
 800ba38:	4411      	add	r1, r2
 800ba3a:	f8d9 2000 	ldr.w	r2, [r9]
 800ba3e:	0c24      	lsrs	r4, r4, #16
 800ba40:	0c12      	lsrs	r2, r2, #16
 800ba42:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba4a:	b289      	uxth	r1, r1
 800ba4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba50:	45f4      	cmp	ip, lr
 800ba52:	f849 1b04 	str.w	r1, [r9], #4
 800ba56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba5a:	d8e4      	bhi.n	800ba26 <__multiply+0xaa>
 800ba5c:	9901      	ldr	r1, [sp, #4]
 800ba5e:	5072      	str	r2, [r6, r1]
 800ba60:	9a03      	ldr	r2, [sp, #12]
 800ba62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba66:	3304      	adds	r3, #4
 800ba68:	f1b9 0f00 	cmp.w	r9, #0
 800ba6c:	d01f      	beq.n	800baae <__multiply+0x132>
 800ba6e:	6834      	ldr	r4, [r6, #0]
 800ba70:	f105 0114 	add.w	r1, r5, #20
 800ba74:	46b6      	mov	lr, r6
 800ba76:	f04f 0a00 	mov.w	sl, #0
 800ba7a:	880a      	ldrh	r2, [r1, #0]
 800ba7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ba80:	fb09 b202 	mla	r2, r9, r2, fp
 800ba84:	4492      	add	sl, r2
 800ba86:	b2a4      	uxth	r4, r4
 800ba88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ba8c:	f84e 4b04 	str.w	r4, [lr], #4
 800ba90:	f851 4b04 	ldr.w	r4, [r1], #4
 800ba94:	f8be 2000 	ldrh.w	r2, [lr]
 800ba98:	0c24      	lsrs	r4, r4, #16
 800ba9a:	fb09 2404 	mla	r4, r9, r4, r2
 800ba9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800baa2:	458c      	cmp	ip, r1
 800baa4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800baa8:	d8e7      	bhi.n	800ba7a <__multiply+0xfe>
 800baaa:	9a01      	ldr	r2, [sp, #4]
 800baac:	50b4      	str	r4, [r6, r2]
 800baae:	3604      	adds	r6, #4
 800bab0:	e7a3      	b.n	800b9fa <__multiply+0x7e>
 800bab2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1a5      	bne.n	800ba06 <__multiply+0x8a>
 800baba:	3f01      	subs	r7, #1
 800babc:	e7a1      	b.n	800ba02 <__multiply+0x86>
 800babe:	bf00      	nop
 800bac0:	0800d347 	.word	0x0800d347
 800bac4:	0800d3b8 	.word	0x0800d3b8

0800bac8 <__pow5mult>:
 800bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bacc:	4615      	mov	r5, r2
 800bace:	f012 0203 	ands.w	r2, r2, #3
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	d007      	beq.n	800bae8 <__pow5mult+0x20>
 800bad8:	4c25      	ldr	r4, [pc, #148]	; (800bb70 <__pow5mult+0xa8>)
 800bada:	3a01      	subs	r2, #1
 800badc:	2300      	movs	r3, #0
 800bade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bae2:	f7ff fe9b 	bl	800b81c <__multadd>
 800bae6:	4607      	mov	r7, r0
 800bae8:	10ad      	asrs	r5, r5, #2
 800baea:	d03d      	beq.n	800bb68 <__pow5mult+0xa0>
 800baec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800baee:	b97c      	cbnz	r4, 800bb10 <__pow5mult+0x48>
 800baf0:	2010      	movs	r0, #16
 800baf2:	f7fd fecb 	bl	800988c <malloc>
 800baf6:	4602      	mov	r2, r0
 800baf8:	6270      	str	r0, [r6, #36]	; 0x24
 800bafa:	b928      	cbnz	r0, 800bb08 <__pow5mult+0x40>
 800bafc:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <__pow5mult+0xac>)
 800bafe:	481e      	ldr	r0, [pc, #120]	; (800bb78 <__pow5mult+0xb0>)
 800bb00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb04:	f000 fbac 	bl	800c260 <__assert_func>
 800bb08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb0c:	6004      	str	r4, [r0, #0]
 800bb0e:	60c4      	str	r4, [r0, #12]
 800bb10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb18:	b94c      	cbnz	r4, 800bb2e <__pow5mult+0x66>
 800bb1a:	f240 2171 	movw	r1, #625	; 0x271
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f7ff ff16 	bl	800b950 <__i2b>
 800bb24:	2300      	movs	r3, #0
 800bb26:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	6003      	str	r3, [r0, #0]
 800bb2e:	f04f 0900 	mov.w	r9, #0
 800bb32:	07eb      	lsls	r3, r5, #31
 800bb34:	d50a      	bpl.n	800bb4c <__pow5mult+0x84>
 800bb36:	4639      	mov	r1, r7
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ff1e 	bl	800b97c <__multiply>
 800bb40:	4639      	mov	r1, r7
 800bb42:	4680      	mov	r8, r0
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7ff fe47 	bl	800b7d8 <_Bfree>
 800bb4a:	4647      	mov	r7, r8
 800bb4c:	106d      	asrs	r5, r5, #1
 800bb4e:	d00b      	beq.n	800bb68 <__pow5mult+0xa0>
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	b938      	cbnz	r0, 800bb64 <__pow5mult+0x9c>
 800bb54:	4622      	mov	r2, r4
 800bb56:	4621      	mov	r1, r4
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff ff0f 	bl	800b97c <__multiply>
 800bb5e:	6020      	str	r0, [r4, #0]
 800bb60:	f8c0 9000 	str.w	r9, [r0]
 800bb64:	4604      	mov	r4, r0
 800bb66:	e7e4      	b.n	800bb32 <__pow5mult+0x6a>
 800bb68:	4638      	mov	r0, r7
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	bf00      	nop
 800bb70:	0800d508 	.word	0x0800d508
 800bb74:	0800d2d1 	.word	0x0800d2d1
 800bb78:	0800d3b8 	.word	0x0800d3b8

0800bb7c <__lshift>:
 800bb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb80:	460c      	mov	r4, r1
 800bb82:	6849      	ldr	r1, [r1, #4]
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	4691      	mov	r9, r2
 800bb90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb94:	f108 0601 	add.w	r6, r8, #1
 800bb98:	42b3      	cmp	r3, r6
 800bb9a:	db0b      	blt.n	800bbb4 <__lshift+0x38>
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	f7ff fddb 	bl	800b758 <_Balloc>
 800bba2:	4605      	mov	r5, r0
 800bba4:	b948      	cbnz	r0, 800bbba <__lshift+0x3e>
 800bba6:	4602      	mov	r2, r0
 800bba8:	4b28      	ldr	r3, [pc, #160]	; (800bc4c <__lshift+0xd0>)
 800bbaa:	4829      	ldr	r0, [pc, #164]	; (800bc50 <__lshift+0xd4>)
 800bbac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbb0:	f000 fb56 	bl	800c260 <__assert_func>
 800bbb4:	3101      	adds	r1, #1
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	e7ee      	b.n	800bb98 <__lshift+0x1c>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f100 0114 	add.w	r1, r0, #20
 800bbc0:	f100 0210 	add.w	r2, r0, #16
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	4553      	cmp	r3, sl
 800bbc8:	db33      	blt.n	800bc32 <__lshift+0xb6>
 800bbca:	6920      	ldr	r0, [r4, #16]
 800bbcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbd0:	f104 0314 	add.w	r3, r4, #20
 800bbd4:	f019 091f 	ands.w	r9, r9, #31
 800bbd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbe0:	d02b      	beq.n	800bc3a <__lshift+0xbe>
 800bbe2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbe6:	468a      	mov	sl, r1
 800bbe8:	2200      	movs	r2, #0
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	fa00 f009 	lsl.w	r0, r0, r9
 800bbf0:	4302      	orrs	r2, r0
 800bbf2:	f84a 2b04 	str.w	r2, [sl], #4
 800bbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfa:	459c      	cmp	ip, r3
 800bbfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc00:	d8f3      	bhi.n	800bbea <__lshift+0x6e>
 800bc02:	ebac 0304 	sub.w	r3, ip, r4
 800bc06:	3b15      	subs	r3, #21
 800bc08:	f023 0303 	bic.w	r3, r3, #3
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	f104 0015 	add.w	r0, r4, #21
 800bc12:	4584      	cmp	ip, r0
 800bc14:	bf38      	it	cc
 800bc16:	2304      	movcc	r3, #4
 800bc18:	50ca      	str	r2, [r1, r3]
 800bc1a:	b10a      	cbz	r2, 800bc20 <__lshift+0xa4>
 800bc1c:	f108 0602 	add.w	r6, r8, #2
 800bc20:	3e01      	subs	r6, #1
 800bc22:	4638      	mov	r0, r7
 800bc24:	612e      	str	r6, [r5, #16]
 800bc26:	4621      	mov	r1, r4
 800bc28:	f7ff fdd6 	bl	800b7d8 <_Bfree>
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc32:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc36:	3301      	adds	r3, #1
 800bc38:	e7c5      	b.n	800bbc6 <__lshift+0x4a>
 800bc3a:	3904      	subs	r1, #4
 800bc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc40:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc44:	459c      	cmp	ip, r3
 800bc46:	d8f9      	bhi.n	800bc3c <__lshift+0xc0>
 800bc48:	e7ea      	b.n	800bc20 <__lshift+0xa4>
 800bc4a:	bf00      	nop
 800bc4c:	0800d347 	.word	0x0800d347
 800bc50:	0800d3b8 	.word	0x0800d3b8

0800bc54 <__mcmp>:
 800bc54:	b530      	push	{r4, r5, lr}
 800bc56:	6902      	ldr	r2, [r0, #16]
 800bc58:	690c      	ldr	r4, [r1, #16]
 800bc5a:	1b12      	subs	r2, r2, r4
 800bc5c:	d10e      	bne.n	800bc7c <__mcmp+0x28>
 800bc5e:	f100 0314 	add.w	r3, r0, #20
 800bc62:	3114      	adds	r1, #20
 800bc64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc74:	42a5      	cmp	r5, r4
 800bc76:	d003      	beq.n	800bc80 <__mcmp+0x2c>
 800bc78:	d305      	bcc.n	800bc86 <__mcmp+0x32>
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	bd30      	pop	{r4, r5, pc}
 800bc80:	4283      	cmp	r3, r0
 800bc82:	d3f3      	bcc.n	800bc6c <__mcmp+0x18>
 800bc84:	e7fa      	b.n	800bc7c <__mcmp+0x28>
 800bc86:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8a:	e7f7      	b.n	800bc7c <__mcmp+0x28>

0800bc8c <__mdiff>:
 800bc8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	460c      	mov	r4, r1
 800bc92:	4606      	mov	r6, r0
 800bc94:	4611      	mov	r1, r2
 800bc96:	4620      	mov	r0, r4
 800bc98:	4617      	mov	r7, r2
 800bc9a:	f7ff ffdb 	bl	800bc54 <__mcmp>
 800bc9e:	1e05      	subs	r5, r0, #0
 800bca0:	d110      	bne.n	800bcc4 <__mdiff+0x38>
 800bca2:	4629      	mov	r1, r5
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff fd57 	bl	800b758 <_Balloc>
 800bcaa:	b930      	cbnz	r0, 800bcba <__mdiff+0x2e>
 800bcac:	4b39      	ldr	r3, [pc, #228]	; (800bd94 <__mdiff+0x108>)
 800bcae:	4602      	mov	r2, r0
 800bcb0:	f240 2132 	movw	r1, #562	; 0x232
 800bcb4:	4838      	ldr	r0, [pc, #224]	; (800bd98 <__mdiff+0x10c>)
 800bcb6:	f000 fad3 	bl	800c260 <__assert_func>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	bfa4      	itt	ge
 800bcc6:	463b      	movge	r3, r7
 800bcc8:	4627      	movge	r7, r4
 800bcca:	4630      	mov	r0, r6
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	bfa6      	itte	ge
 800bcd0:	461c      	movge	r4, r3
 800bcd2:	2500      	movge	r5, #0
 800bcd4:	2501      	movlt	r5, #1
 800bcd6:	f7ff fd3f 	bl	800b758 <_Balloc>
 800bcda:	b920      	cbnz	r0, 800bce6 <__mdiff+0x5a>
 800bcdc:	4b2d      	ldr	r3, [pc, #180]	; (800bd94 <__mdiff+0x108>)
 800bcde:	4602      	mov	r2, r0
 800bce0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bce4:	e7e6      	b.n	800bcb4 <__mdiff+0x28>
 800bce6:	693e      	ldr	r6, [r7, #16]
 800bce8:	60c5      	str	r5, [r0, #12]
 800bcea:	6925      	ldr	r5, [r4, #16]
 800bcec:	f107 0114 	add.w	r1, r7, #20
 800bcf0:	f104 0914 	add.w	r9, r4, #20
 800bcf4:	f100 0e14 	add.w	lr, r0, #20
 800bcf8:	f107 0210 	add.w	r2, r7, #16
 800bcfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bd00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bd04:	46f2      	mov	sl, lr
 800bd06:	2700      	movs	r7, #0
 800bd08:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd10:	fa1f f883 	uxth.w	r8, r3
 800bd14:	fa17 f78b 	uxtah	r7, r7, fp
 800bd18:	0c1b      	lsrs	r3, r3, #16
 800bd1a:	eba7 0808 	sub.w	r8, r7, r8
 800bd1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd26:	fa1f f888 	uxth.w	r8, r8
 800bd2a:	141f      	asrs	r7, r3, #16
 800bd2c:	454d      	cmp	r5, r9
 800bd2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd32:	f84a 3b04 	str.w	r3, [sl], #4
 800bd36:	d8e7      	bhi.n	800bd08 <__mdiff+0x7c>
 800bd38:	1b2b      	subs	r3, r5, r4
 800bd3a:	3b15      	subs	r3, #21
 800bd3c:	f023 0303 	bic.w	r3, r3, #3
 800bd40:	3304      	adds	r3, #4
 800bd42:	3415      	adds	r4, #21
 800bd44:	42a5      	cmp	r5, r4
 800bd46:	bf38      	it	cc
 800bd48:	2304      	movcc	r3, #4
 800bd4a:	4419      	add	r1, r3
 800bd4c:	4473      	add	r3, lr
 800bd4e:	469e      	mov	lr, r3
 800bd50:	460d      	mov	r5, r1
 800bd52:	4565      	cmp	r5, ip
 800bd54:	d30e      	bcc.n	800bd74 <__mdiff+0xe8>
 800bd56:	f10c 0203 	add.w	r2, ip, #3
 800bd5a:	1a52      	subs	r2, r2, r1
 800bd5c:	f022 0203 	bic.w	r2, r2, #3
 800bd60:	3903      	subs	r1, #3
 800bd62:	458c      	cmp	ip, r1
 800bd64:	bf38      	it	cc
 800bd66:	2200      	movcc	r2, #0
 800bd68:	441a      	add	r2, r3
 800bd6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd6e:	b17b      	cbz	r3, 800bd90 <__mdiff+0x104>
 800bd70:	6106      	str	r6, [r0, #16]
 800bd72:	e7a5      	b.n	800bcc0 <__mdiff+0x34>
 800bd74:	f855 8b04 	ldr.w	r8, [r5], #4
 800bd78:	fa17 f488 	uxtah	r4, r7, r8
 800bd7c:	1422      	asrs	r2, r4, #16
 800bd7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bd82:	b2a4      	uxth	r4, r4
 800bd84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bd88:	f84e 4b04 	str.w	r4, [lr], #4
 800bd8c:	1417      	asrs	r7, r2, #16
 800bd8e:	e7e0      	b.n	800bd52 <__mdiff+0xc6>
 800bd90:	3e01      	subs	r6, #1
 800bd92:	e7ea      	b.n	800bd6a <__mdiff+0xde>
 800bd94:	0800d347 	.word	0x0800d347
 800bd98:	0800d3b8 	.word	0x0800d3b8

0800bd9c <__d2b>:
 800bd9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bda0:	4689      	mov	r9, r1
 800bda2:	2101      	movs	r1, #1
 800bda4:	ec57 6b10 	vmov	r6, r7, d0
 800bda8:	4690      	mov	r8, r2
 800bdaa:	f7ff fcd5 	bl	800b758 <_Balloc>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	b930      	cbnz	r0, 800bdc0 <__d2b+0x24>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	4b25      	ldr	r3, [pc, #148]	; (800be4c <__d2b+0xb0>)
 800bdb6:	4826      	ldr	r0, [pc, #152]	; (800be50 <__d2b+0xb4>)
 800bdb8:	f240 310a 	movw	r1, #778	; 0x30a
 800bdbc:	f000 fa50 	bl	800c260 <__assert_func>
 800bdc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdc8:	bb35      	cbnz	r5, 800be18 <__d2b+0x7c>
 800bdca:	2e00      	cmp	r6, #0
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	d028      	beq.n	800be22 <__d2b+0x86>
 800bdd0:	4668      	mov	r0, sp
 800bdd2:	9600      	str	r6, [sp, #0]
 800bdd4:	f7ff fd8c 	bl	800b8f0 <__lo0bits>
 800bdd8:	9900      	ldr	r1, [sp, #0]
 800bdda:	b300      	cbz	r0, 800be1e <__d2b+0x82>
 800bddc:	9a01      	ldr	r2, [sp, #4]
 800bdde:	f1c0 0320 	rsb	r3, r0, #32
 800bde2:	fa02 f303 	lsl.w	r3, r2, r3
 800bde6:	430b      	orrs	r3, r1
 800bde8:	40c2      	lsrs	r2, r0
 800bdea:	6163      	str	r3, [r4, #20]
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	61a3      	str	r3, [r4, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bf14      	ite	ne
 800bdf6:	2202      	movne	r2, #2
 800bdf8:	2201      	moveq	r2, #1
 800bdfa:	6122      	str	r2, [r4, #16]
 800bdfc:	b1d5      	cbz	r5, 800be34 <__d2b+0x98>
 800bdfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be02:	4405      	add	r5, r0
 800be04:	f8c9 5000 	str.w	r5, [r9]
 800be08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be0c:	f8c8 0000 	str.w	r0, [r8]
 800be10:	4620      	mov	r0, r4
 800be12:	b003      	add	sp, #12
 800be14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be1c:	e7d5      	b.n	800bdca <__d2b+0x2e>
 800be1e:	6161      	str	r1, [r4, #20]
 800be20:	e7e5      	b.n	800bdee <__d2b+0x52>
 800be22:	a801      	add	r0, sp, #4
 800be24:	f7ff fd64 	bl	800b8f0 <__lo0bits>
 800be28:	9b01      	ldr	r3, [sp, #4]
 800be2a:	6163      	str	r3, [r4, #20]
 800be2c:	2201      	movs	r2, #1
 800be2e:	6122      	str	r2, [r4, #16]
 800be30:	3020      	adds	r0, #32
 800be32:	e7e3      	b.n	800bdfc <__d2b+0x60>
 800be34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be3c:	f8c9 0000 	str.w	r0, [r9]
 800be40:	6918      	ldr	r0, [r3, #16]
 800be42:	f7ff fd35 	bl	800b8b0 <__hi0bits>
 800be46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be4a:	e7df      	b.n	800be0c <__d2b+0x70>
 800be4c:	0800d347 	.word	0x0800d347
 800be50:	0800d3b8 	.word	0x0800d3b8

0800be54 <_calloc_r>:
 800be54:	b513      	push	{r0, r1, r4, lr}
 800be56:	434a      	muls	r2, r1
 800be58:	4611      	mov	r1, r2
 800be5a:	9201      	str	r2, [sp, #4]
 800be5c:	f7fd fd9a 	bl	8009994 <_malloc_r>
 800be60:	4604      	mov	r4, r0
 800be62:	b118      	cbz	r0, 800be6c <_calloc_r+0x18>
 800be64:	9a01      	ldr	r2, [sp, #4]
 800be66:	2100      	movs	r1, #0
 800be68:	f7fd fd3c 	bl	80098e4 <memset>
 800be6c:	4620      	mov	r0, r4
 800be6e:	b002      	add	sp, #8
 800be70:	bd10      	pop	{r4, pc}

0800be72 <__sfputc_r>:
 800be72:	6893      	ldr	r3, [r2, #8]
 800be74:	3b01      	subs	r3, #1
 800be76:	2b00      	cmp	r3, #0
 800be78:	b410      	push	{r4}
 800be7a:	6093      	str	r3, [r2, #8]
 800be7c:	da08      	bge.n	800be90 <__sfputc_r+0x1e>
 800be7e:	6994      	ldr	r4, [r2, #24]
 800be80:	42a3      	cmp	r3, r4
 800be82:	db01      	blt.n	800be88 <__sfputc_r+0x16>
 800be84:	290a      	cmp	r1, #10
 800be86:	d103      	bne.n	800be90 <__sfputc_r+0x1e>
 800be88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be8c:	f7fe bafa 	b.w	800a484 <__swbuf_r>
 800be90:	6813      	ldr	r3, [r2, #0]
 800be92:	1c58      	adds	r0, r3, #1
 800be94:	6010      	str	r0, [r2, #0]
 800be96:	7019      	strb	r1, [r3, #0]
 800be98:	4608      	mov	r0, r1
 800be9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <__sfputs_r>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	4614      	mov	r4, r2
 800bea8:	18d5      	adds	r5, r2, r3
 800beaa:	42ac      	cmp	r4, r5
 800beac:	d101      	bne.n	800beb2 <__sfputs_r+0x12>
 800beae:	2000      	movs	r0, #0
 800beb0:	e007      	b.n	800bec2 <__sfputs_r+0x22>
 800beb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb6:	463a      	mov	r2, r7
 800beb8:	4630      	mov	r0, r6
 800beba:	f7ff ffda 	bl	800be72 <__sfputc_r>
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	d1f3      	bne.n	800beaa <__sfputs_r+0xa>
 800bec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bec4 <_vfiprintf_r>:
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	460d      	mov	r5, r1
 800beca:	b09d      	sub	sp, #116	; 0x74
 800becc:	4614      	mov	r4, r2
 800bece:	4698      	mov	r8, r3
 800bed0:	4606      	mov	r6, r0
 800bed2:	b118      	cbz	r0, 800bedc <_vfiprintf_r+0x18>
 800bed4:	6983      	ldr	r3, [r0, #24]
 800bed6:	b90b      	cbnz	r3, 800bedc <_vfiprintf_r+0x18>
 800bed8:	f7ff fb28 	bl	800b52c <__sinit>
 800bedc:	4b89      	ldr	r3, [pc, #548]	; (800c104 <_vfiprintf_r+0x240>)
 800bede:	429d      	cmp	r5, r3
 800bee0:	d11b      	bne.n	800bf1a <_vfiprintf_r+0x56>
 800bee2:	6875      	ldr	r5, [r6, #4]
 800bee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee6:	07d9      	lsls	r1, r3, #31
 800bee8:	d405      	bmi.n	800bef6 <_vfiprintf_r+0x32>
 800beea:	89ab      	ldrh	r3, [r5, #12]
 800beec:	059a      	lsls	r2, r3, #22
 800beee:	d402      	bmi.n	800bef6 <_vfiprintf_r+0x32>
 800bef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bef2:	f7ff fbbe 	bl	800b672 <__retarget_lock_acquire_recursive>
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	071b      	lsls	r3, r3, #28
 800befa:	d501      	bpl.n	800bf00 <_vfiprintf_r+0x3c>
 800befc:	692b      	ldr	r3, [r5, #16]
 800befe:	b9eb      	cbnz	r3, 800bf3c <_vfiprintf_r+0x78>
 800bf00:	4629      	mov	r1, r5
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7fe fb10 	bl	800a528 <__swsetup_r>
 800bf08:	b1c0      	cbz	r0, 800bf3c <_vfiprintf_r+0x78>
 800bf0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf0c:	07dc      	lsls	r4, r3, #31
 800bf0e:	d50e      	bpl.n	800bf2e <_vfiprintf_r+0x6a>
 800bf10:	f04f 30ff 	mov.w	r0, #4294967295
 800bf14:	b01d      	add	sp, #116	; 0x74
 800bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1a:	4b7b      	ldr	r3, [pc, #492]	; (800c108 <_vfiprintf_r+0x244>)
 800bf1c:	429d      	cmp	r5, r3
 800bf1e:	d101      	bne.n	800bf24 <_vfiprintf_r+0x60>
 800bf20:	68b5      	ldr	r5, [r6, #8]
 800bf22:	e7df      	b.n	800bee4 <_vfiprintf_r+0x20>
 800bf24:	4b79      	ldr	r3, [pc, #484]	; (800c10c <_vfiprintf_r+0x248>)
 800bf26:	429d      	cmp	r5, r3
 800bf28:	bf08      	it	eq
 800bf2a:	68f5      	ldreq	r5, [r6, #12]
 800bf2c:	e7da      	b.n	800bee4 <_vfiprintf_r+0x20>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	0598      	lsls	r0, r3, #22
 800bf32:	d4ed      	bmi.n	800bf10 <_vfiprintf_r+0x4c>
 800bf34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf36:	f7ff fb9d 	bl	800b674 <__retarget_lock_release_recursive>
 800bf3a:	e7e9      	b.n	800bf10 <_vfiprintf_r+0x4c>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf40:	2320      	movs	r3, #32
 800bf42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf4a:	2330      	movs	r3, #48	; 0x30
 800bf4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c110 <_vfiprintf_r+0x24c>
 800bf50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf54:	f04f 0901 	mov.w	r9, #1
 800bf58:	4623      	mov	r3, r4
 800bf5a:	469a      	mov	sl, r3
 800bf5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf60:	b10a      	cbz	r2, 800bf66 <_vfiprintf_r+0xa2>
 800bf62:	2a25      	cmp	r2, #37	; 0x25
 800bf64:	d1f9      	bne.n	800bf5a <_vfiprintf_r+0x96>
 800bf66:	ebba 0b04 	subs.w	fp, sl, r4
 800bf6a:	d00b      	beq.n	800bf84 <_vfiprintf_r+0xc0>
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff ff94 	bl	800bea0 <__sfputs_r>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f000 80aa 	beq.w	800c0d2 <_vfiprintf_r+0x20e>
 800bf7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf80:	445a      	add	r2, fp
 800bf82:	9209      	str	r2, [sp, #36]	; 0x24
 800bf84:	f89a 3000 	ldrb.w	r3, [sl]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 80a2 	beq.w	800c0d2 <_vfiprintf_r+0x20e>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f04f 32ff 	mov.w	r2, #4294967295
 800bf94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf98:	f10a 0a01 	add.w	sl, sl, #1
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	9307      	str	r3, [sp, #28]
 800bfa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfa4:	931a      	str	r3, [sp, #104]	; 0x68
 800bfa6:	4654      	mov	r4, sl
 800bfa8:	2205      	movs	r2, #5
 800bfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfae:	4858      	ldr	r0, [pc, #352]	; (800c110 <_vfiprintf_r+0x24c>)
 800bfb0:	f7f4 f91e 	bl	80001f0 <memchr>
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	b9d8      	cbnz	r0, 800bff0 <_vfiprintf_r+0x12c>
 800bfb8:	06d1      	lsls	r1, r2, #27
 800bfba:	bf44      	itt	mi
 800bfbc:	2320      	movmi	r3, #32
 800bfbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfc2:	0713      	lsls	r3, r2, #28
 800bfc4:	bf44      	itt	mi
 800bfc6:	232b      	movmi	r3, #43	; 0x2b
 800bfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd2:	d015      	beq.n	800c000 <_vfiprintf_r+0x13c>
 800bfd4:	9a07      	ldr	r2, [sp, #28]
 800bfd6:	4654      	mov	r4, sl
 800bfd8:	2000      	movs	r0, #0
 800bfda:	f04f 0c0a 	mov.w	ip, #10
 800bfde:	4621      	mov	r1, r4
 800bfe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfe4:	3b30      	subs	r3, #48	; 0x30
 800bfe6:	2b09      	cmp	r3, #9
 800bfe8:	d94e      	bls.n	800c088 <_vfiprintf_r+0x1c4>
 800bfea:	b1b0      	cbz	r0, 800c01a <_vfiprintf_r+0x156>
 800bfec:	9207      	str	r2, [sp, #28]
 800bfee:	e014      	b.n	800c01a <_vfiprintf_r+0x156>
 800bff0:	eba0 0308 	sub.w	r3, r0, r8
 800bff4:	fa09 f303 	lsl.w	r3, r9, r3
 800bff8:	4313      	orrs	r3, r2
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	46a2      	mov	sl, r4
 800bffe:	e7d2      	b.n	800bfa6 <_vfiprintf_r+0xe2>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	1d19      	adds	r1, r3, #4
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	9103      	str	r1, [sp, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bfbb      	ittet	lt
 800c00c:	425b      	neglt	r3, r3
 800c00e:	f042 0202 	orrlt.w	r2, r2, #2
 800c012:	9307      	strge	r3, [sp, #28]
 800c014:	9307      	strlt	r3, [sp, #28]
 800c016:	bfb8      	it	lt
 800c018:	9204      	strlt	r2, [sp, #16]
 800c01a:	7823      	ldrb	r3, [r4, #0]
 800c01c:	2b2e      	cmp	r3, #46	; 0x2e
 800c01e:	d10c      	bne.n	800c03a <_vfiprintf_r+0x176>
 800c020:	7863      	ldrb	r3, [r4, #1]
 800c022:	2b2a      	cmp	r3, #42	; 0x2a
 800c024:	d135      	bne.n	800c092 <_vfiprintf_r+0x1ce>
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	1d1a      	adds	r2, r3, #4
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	9203      	str	r2, [sp, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	bfb8      	it	lt
 800c032:	f04f 33ff 	movlt.w	r3, #4294967295
 800c036:	3402      	adds	r4, #2
 800c038:	9305      	str	r3, [sp, #20]
 800c03a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c120 <_vfiprintf_r+0x25c>
 800c03e:	7821      	ldrb	r1, [r4, #0]
 800c040:	2203      	movs	r2, #3
 800c042:	4650      	mov	r0, sl
 800c044:	f7f4 f8d4 	bl	80001f0 <memchr>
 800c048:	b140      	cbz	r0, 800c05c <_vfiprintf_r+0x198>
 800c04a:	2340      	movs	r3, #64	; 0x40
 800c04c:	eba0 000a 	sub.w	r0, r0, sl
 800c050:	fa03 f000 	lsl.w	r0, r3, r0
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	4303      	orrs	r3, r0
 800c058:	3401      	adds	r4, #1
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c060:	482c      	ldr	r0, [pc, #176]	; (800c114 <_vfiprintf_r+0x250>)
 800c062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c066:	2206      	movs	r2, #6
 800c068:	f7f4 f8c2 	bl	80001f0 <memchr>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d03f      	beq.n	800c0f0 <_vfiprintf_r+0x22c>
 800c070:	4b29      	ldr	r3, [pc, #164]	; (800c118 <_vfiprintf_r+0x254>)
 800c072:	bb1b      	cbnz	r3, 800c0bc <_vfiprintf_r+0x1f8>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	3307      	adds	r3, #7
 800c078:	f023 0307 	bic.w	r3, r3, #7
 800c07c:	3308      	adds	r3, #8
 800c07e:	9303      	str	r3, [sp, #12]
 800c080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c082:	443b      	add	r3, r7
 800c084:	9309      	str	r3, [sp, #36]	; 0x24
 800c086:	e767      	b.n	800bf58 <_vfiprintf_r+0x94>
 800c088:	fb0c 3202 	mla	r2, ip, r2, r3
 800c08c:	460c      	mov	r4, r1
 800c08e:	2001      	movs	r0, #1
 800c090:	e7a5      	b.n	800bfde <_vfiprintf_r+0x11a>
 800c092:	2300      	movs	r3, #0
 800c094:	3401      	adds	r4, #1
 800c096:	9305      	str	r3, [sp, #20]
 800c098:	4619      	mov	r1, r3
 800c09a:	f04f 0c0a 	mov.w	ip, #10
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0a4:	3a30      	subs	r2, #48	; 0x30
 800c0a6:	2a09      	cmp	r2, #9
 800c0a8:	d903      	bls.n	800c0b2 <_vfiprintf_r+0x1ee>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0c5      	beq.n	800c03a <_vfiprintf_r+0x176>
 800c0ae:	9105      	str	r1, [sp, #20]
 800c0b0:	e7c3      	b.n	800c03a <_vfiprintf_r+0x176>
 800c0b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e7f0      	b.n	800c09e <_vfiprintf_r+0x1da>
 800c0bc:	ab03      	add	r3, sp, #12
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	462a      	mov	r2, r5
 800c0c2:	4b16      	ldr	r3, [pc, #88]	; (800c11c <_vfiprintf_r+0x258>)
 800c0c4:	a904      	add	r1, sp, #16
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7fd fd5e 	bl	8009b88 <_printf_float>
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	1c78      	adds	r0, r7, #1
 800c0d0:	d1d6      	bne.n	800c080 <_vfiprintf_r+0x1bc>
 800c0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0d4:	07d9      	lsls	r1, r3, #31
 800c0d6:	d405      	bmi.n	800c0e4 <_vfiprintf_r+0x220>
 800c0d8:	89ab      	ldrh	r3, [r5, #12]
 800c0da:	059a      	lsls	r2, r3, #22
 800c0dc:	d402      	bmi.n	800c0e4 <_vfiprintf_r+0x220>
 800c0de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0e0:	f7ff fac8 	bl	800b674 <__retarget_lock_release_recursive>
 800c0e4:	89ab      	ldrh	r3, [r5, #12]
 800c0e6:	065b      	lsls	r3, r3, #25
 800c0e8:	f53f af12 	bmi.w	800bf10 <_vfiprintf_r+0x4c>
 800c0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ee:	e711      	b.n	800bf14 <_vfiprintf_r+0x50>
 800c0f0:	ab03      	add	r3, sp, #12
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	4b09      	ldr	r3, [pc, #36]	; (800c11c <_vfiprintf_r+0x258>)
 800c0f8:	a904      	add	r1, sp, #16
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7fd ffe8 	bl	800a0d0 <_printf_i>
 800c100:	e7e4      	b.n	800c0cc <_vfiprintf_r+0x208>
 800c102:	bf00      	nop
 800c104:	0800d378 	.word	0x0800d378
 800c108:	0800d398 	.word	0x0800d398
 800c10c:	0800d358 	.word	0x0800d358
 800c110:	0800d514 	.word	0x0800d514
 800c114:	0800d51e 	.word	0x0800d51e
 800c118:	08009b89 	.word	0x08009b89
 800c11c:	0800bea1 	.word	0x0800bea1
 800c120:	0800d51a 	.word	0x0800d51a

0800c124 <_putc_r>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	460d      	mov	r5, r1
 800c128:	4614      	mov	r4, r2
 800c12a:	4606      	mov	r6, r0
 800c12c:	b118      	cbz	r0, 800c136 <_putc_r+0x12>
 800c12e:	6983      	ldr	r3, [r0, #24]
 800c130:	b90b      	cbnz	r3, 800c136 <_putc_r+0x12>
 800c132:	f7ff f9fb 	bl	800b52c <__sinit>
 800c136:	4b1c      	ldr	r3, [pc, #112]	; (800c1a8 <_putc_r+0x84>)
 800c138:	429c      	cmp	r4, r3
 800c13a:	d124      	bne.n	800c186 <_putc_r+0x62>
 800c13c:	6874      	ldr	r4, [r6, #4]
 800c13e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c140:	07d8      	lsls	r0, r3, #31
 800c142:	d405      	bmi.n	800c150 <_putc_r+0x2c>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	0599      	lsls	r1, r3, #22
 800c148:	d402      	bmi.n	800c150 <_putc_r+0x2c>
 800c14a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c14c:	f7ff fa91 	bl	800b672 <__retarget_lock_acquire_recursive>
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	3b01      	subs	r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	60a3      	str	r3, [r4, #8]
 800c158:	da05      	bge.n	800c166 <_putc_r+0x42>
 800c15a:	69a2      	ldr	r2, [r4, #24]
 800c15c:	4293      	cmp	r3, r2
 800c15e:	db1c      	blt.n	800c19a <_putc_r+0x76>
 800c160:	b2eb      	uxtb	r3, r5
 800c162:	2b0a      	cmp	r3, #10
 800c164:	d019      	beq.n	800c19a <_putc_r+0x76>
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	6022      	str	r2, [r4, #0]
 800c16c:	701d      	strb	r5, [r3, #0]
 800c16e:	b2ed      	uxtb	r5, r5
 800c170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c172:	07da      	lsls	r2, r3, #31
 800c174:	d405      	bmi.n	800c182 <_putc_r+0x5e>
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	059b      	lsls	r3, r3, #22
 800c17a:	d402      	bmi.n	800c182 <_putc_r+0x5e>
 800c17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c17e:	f7ff fa79 	bl	800b674 <__retarget_lock_release_recursive>
 800c182:	4628      	mov	r0, r5
 800c184:	bd70      	pop	{r4, r5, r6, pc}
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <_putc_r+0x88>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	d101      	bne.n	800c190 <_putc_r+0x6c>
 800c18c:	68b4      	ldr	r4, [r6, #8]
 800c18e:	e7d6      	b.n	800c13e <_putc_r+0x1a>
 800c190:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <_putc_r+0x8c>)
 800c192:	429c      	cmp	r4, r3
 800c194:	bf08      	it	eq
 800c196:	68f4      	ldreq	r4, [r6, #12]
 800c198:	e7d1      	b.n	800c13e <_putc_r+0x1a>
 800c19a:	4629      	mov	r1, r5
 800c19c:	4622      	mov	r2, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7fe f970 	bl	800a484 <__swbuf_r>
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	e7e3      	b.n	800c170 <_putc_r+0x4c>
 800c1a8:	0800d378 	.word	0x0800d378
 800c1ac:	0800d398 	.word	0x0800d398
 800c1b0:	0800d358 	.word	0x0800d358

0800c1b4 <__sread>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1bc:	f000 f8d6 	bl	800c36c <_read_r>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	bfab      	itete	ge
 800c1c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1c8:	181b      	addge	r3, r3, r0
 800c1ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1ce:	bfac      	ite	ge
 800c1d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1d2:	81a3      	strhlt	r3, [r4, #12]
 800c1d4:	bd10      	pop	{r4, pc}

0800c1d6 <__swrite>:
 800c1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1da:	461f      	mov	r7, r3
 800c1dc:	898b      	ldrh	r3, [r1, #12]
 800c1de:	05db      	lsls	r3, r3, #23
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	d505      	bpl.n	800c1f4 <__swrite+0x1e>
 800c1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f000 f898 	bl	800c324 <_lseek_r>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	4632      	mov	r2, r6
 800c202:	463b      	mov	r3, r7
 800c204:	4628      	mov	r0, r5
 800c206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	f000 b817 	b.w	800c23c <_write_r>

0800c20e <__sseek>:
 800c20e:	b510      	push	{r4, lr}
 800c210:	460c      	mov	r4, r1
 800c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c216:	f000 f885 	bl	800c324 <_lseek_r>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	bf15      	itete	ne
 800c220:	6560      	strne	r0, [r4, #84]	; 0x54
 800c222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c22a:	81a3      	strheq	r3, [r4, #12]
 800c22c:	bf18      	it	ne
 800c22e:	81a3      	strhne	r3, [r4, #12]
 800c230:	bd10      	pop	{r4, pc}

0800c232 <__sclose>:
 800c232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c236:	f000 b831 	b.w	800c29c <_close_r>
	...

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f7 f8d3 	bl	80033f6 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	200009a0 	.word	0x200009a0

0800c260 <__assert_func>:
 800c260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c262:	4614      	mov	r4, r2
 800c264:	461a      	mov	r2, r3
 800c266:	4b09      	ldr	r3, [pc, #36]	; (800c28c <__assert_func+0x2c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	68d8      	ldr	r0, [r3, #12]
 800c26e:	b14c      	cbz	r4, 800c284 <__assert_func+0x24>
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <__assert_func+0x30>)
 800c272:	9100      	str	r1, [sp, #0]
 800c274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c278:	4906      	ldr	r1, [pc, #24]	; (800c294 <__assert_func+0x34>)
 800c27a:	462b      	mov	r3, r5
 800c27c:	f000 f81e 	bl	800c2bc <fiprintf>
 800c280:	f000 f893 	bl	800c3aa <abort>
 800c284:	4b04      	ldr	r3, [pc, #16]	; (800c298 <__assert_func+0x38>)
 800c286:	461c      	mov	r4, r3
 800c288:	e7f3      	b.n	800c272 <__assert_func+0x12>
 800c28a:	bf00      	nop
 800c28c:	20000010 	.word	0x20000010
 800c290:	0800d525 	.word	0x0800d525
 800c294:	0800d532 	.word	0x0800d532
 800c298:	0800d560 	.word	0x0800d560

0800c29c <_close_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4d06      	ldr	r5, [pc, #24]	; (800c2b8 <_close_r+0x1c>)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	602b      	str	r3, [r5, #0]
 800c2a8:	f7f7 f8c1 	bl	800342e <_close>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d102      	bne.n	800c2b6 <_close_r+0x1a>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	b103      	cbz	r3, 800c2b6 <_close_r+0x1a>
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	200009a0 	.word	0x200009a0

0800c2bc <fiprintf>:
 800c2bc:	b40e      	push	{r1, r2, r3}
 800c2be:	b503      	push	{r0, r1, lr}
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	ab03      	add	r3, sp, #12
 800c2c4:	4805      	ldr	r0, [pc, #20]	; (800c2dc <fiprintf+0x20>)
 800c2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f7ff fdf9 	bl	800bec4 <_vfiprintf_r>
 800c2d2:	b002      	add	sp, #8
 800c2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2d8:	b003      	add	sp, #12
 800c2da:	4770      	bx	lr
 800c2dc:	20000010 	.word	0x20000010

0800c2e0 <_fstat_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4d07      	ldr	r5, [pc, #28]	; (800c300 <_fstat_r+0x20>)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	602b      	str	r3, [r5, #0]
 800c2ee:	f7f7 f8aa 	bl	8003446 <_fstat>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	d102      	bne.n	800c2fc <_fstat_r+0x1c>
 800c2f6:	682b      	ldr	r3, [r5, #0]
 800c2f8:	b103      	cbz	r3, 800c2fc <_fstat_r+0x1c>
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	bd38      	pop	{r3, r4, r5, pc}
 800c2fe:	bf00      	nop
 800c300:	200009a0 	.word	0x200009a0

0800c304 <_isatty_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d06      	ldr	r5, [pc, #24]	; (800c320 <_isatty_r+0x1c>)
 800c308:	2300      	movs	r3, #0
 800c30a:	4604      	mov	r4, r0
 800c30c:	4608      	mov	r0, r1
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	f7f7 f8a9 	bl	8003466 <_isatty>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	d102      	bne.n	800c31e <_isatty_r+0x1a>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	b103      	cbz	r3, 800c31e <_isatty_r+0x1a>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd38      	pop	{r3, r4, r5, pc}
 800c320:	200009a0 	.word	0x200009a0

0800c324 <_lseek_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d07      	ldr	r5, [pc, #28]	; (800c344 <_lseek_r+0x20>)
 800c328:	4604      	mov	r4, r0
 800c32a:	4608      	mov	r0, r1
 800c32c:	4611      	mov	r1, r2
 800c32e:	2200      	movs	r2, #0
 800c330:	602a      	str	r2, [r5, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	f7f7 f8a2 	bl	800347c <_lseek>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_lseek_r+0x1e>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_lseek_r+0x1e>
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	200009a0 	.word	0x200009a0

0800c348 <__ascii_mbtowc>:
 800c348:	b082      	sub	sp, #8
 800c34a:	b901      	cbnz	r1, 800c34e <__ascii_mbtowc+0x6>
 800c34c:	a901      	add	r1, sp, #4
 800c34e:	b142      	cbz	r2, 800c362 <__ascii_mbtowc+0x1a>
 800c350:	b14b      	cbz	r3, 800c366 <__ascii_mbtowc+0x1e>
 800c352:	7813      	ldrb	r3, [r2, #0]
 800c354:	600b      	str	r3, [r1, #0]
 800c356:	7812      	ldrb	r2, [r2, #0]
 800c358:	1e10      	subs	r0, r2, #0
 800c35a:	bf18      	it	ne
 800c35c:	2001      	movne	r0, #1
 800c35e:	b002      	add	sp, #8
 800c360:	4770      	bx	lr
 800c362:	4610      	mov	r0, r2
 800c364:	e7fb      	b.n	800c35e <__ascii_mbtowc+0x16>
 800c366:	f06f 0001 	mvn.w	r0, #1
 800c36a:	e7f8      	b.n	800c35e <__ascii_mbtowc+0x16>

0800c36c <_read_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	; (800c38c <_read_r+0x20>)
 800c370:	4604      	mov	r4, r0
 800c372:	4608      	mov	r0, r1
 800c374:	4611      	mov	r1, r2
 800c376:	2200      	movs	r2, #0
 800c378:	602a      	str	r2, [r5, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7f7 f81e 	bl	80033bc <_read>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_read_r+0x1e>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_read_r+0x1e>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	200009a0 	.word	0x200009a0

0800c390 <__ascii_wctomb>:
 800c390:	b149      	cbz	r1, 800c3a6 <__ascii_wctomb+0x16>
 800c392:	2aff      	cmp	r2, #255	; 0xff
 800c394:	bf85      	ittet	hi
 800c396:	238a      	movhi	r3, #138	; 0x8a
 800c398:	6003      	strhi	r3, [r0, #0]
 800c39a:	700a      	strbls	r2, [r1, #0]
 800c39c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3a0:	bf98      	it	ls
 800c3a2:	2001      	movls	r0, #1
 800c3a4:	4770      	bx	lr
 800c3a6:	4608      	mov	r0, r1
 800c3a8:	4770      	bx	lr

0800c3aa <abort>:
 800c3aa:	b508      	push	{r3, lr}
 800c3ac:	2006      	movs	r0, #6
 800c3ae:	f000 f82b 	bl	800c408 <raise>
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	f7f6 fff8 	bl	80033a8 <_exit>

0800c3b8 <_raise_r>:
 800c3b8:	291f      	cmp	r1, #31
 800c3ba:	b538      	push	{r3, r4, r5, lr}
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	d904      	bls.n	800c3cc <_raise_r+0x14>
 800c3c2:	2316      	movs	r3, #22
 800c3c4:	6003      	str	r3, [r0, #0]
 800c3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ca:	bd38      	pop	{r3, r4, r5, pc}
 800c3cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3ce:	b112      	cbz	r2, 800c3d6 <_raise_r+0x1e>
 800c3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3d4:	b94b      	cbnz	r3, 800c3ea <_raise_r+0x32>
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 f830 	bl	800c43c <_getpid_r>
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4601      	mov	r1, r0
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3e6:	f000 b817 	b.w	800c418 <_kill_r>
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d00a      	beq.n	800c404 <_raise_r+0x4c>
 800c3ee:	1c59      	adds	r1, r3, #1
 800c3f0:	d103      	bne.n	800c3fa <_raise_r+0x42>
 800c3f2:	2316      	movs	r3, #22
 800c3f4:	6003      	str	r3, [r0, #0]
 800c3f6:	2001      	movs	r0, #1
 800c3f8:	e7e7      	b.n	800c3ca <_raise_r+0x12>
 800c3fa:	2400      	movs	r4, #0
 800c3fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c400:	4628      	mov	r0, r5
 800c402:	4798      	blx	r3
 800c404:	2000      	movs	r0, #0
 800c406:	e7e0      	b.n	800c3ca <_raise_r+0x12>

0800c408 <raise>:
 800c408:	4b02      	ldr	r3, [pc, #8]	; (800c414 <raise+0xc>)
 800c40a:	4601      	mov	r1, r0
 800c40c:	6818      	ldr	r0, [r3, #0]
 800c40e:	f7ff bfd3 	b.w	800c3b8 <_raise_r>
 800c412:	bf00      	nop
 800c414:	20000010 	.word	0x20000010

0800c418 <_kill_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d07      	ldr	r5, [pc, #28]	; (800c438 <_kill_r+0x20>)
 800c41c:	2300      	movs	r3, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	4611      	mov	r1, r2
 800c424:	602b      	str	r3, [r5, #0]
 800c426:	f7f6 ffaf 	bl	8003388 <_kill>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d102      	bne.n	800c434 <_kill_r+0x1c>
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	b103      	cbz	r3, 800c434 <_kill_r+0x1c>
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	bd38      	pop	{r3, r4, r5, pc}
 800c436:	bf00      	nop
 800c438:	200009a0 	.word	0x200009a0

0800c43c <_getpid_r>:
 800c43c:	f7f6 bf9c 	b.w	8003378 <_getpid>

0800c440 <_init>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	bf00      	nop
 800c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c446:	bc08      	pop	{r3}
 800c448:	469e      	mov	lr, r3
 800c44a:	4770      	bx	lr

0800c44c <_fini>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr
